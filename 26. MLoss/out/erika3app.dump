
erika3app.elf:     file format elf32-tricore
erika3app.elf
architecture: TriCore:V1_6_1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000020

Program Header:
    LOAD off    0x00004020 vaddr 0x80000020 paddr 0x80000020 align 2**14
         filesz 0x00013fe0 memsz 0x00013fe0 flags r-x
    LOAD off    0x00018000 vaddr 0x70000000 paddr 0x80014000 align 2**14
         filesz 0x00000860 memsz 0x00000860 flags rw-
    LOAD off    0x0001c000 vaddr 0x50000000 paddr 0x80014860 align 2**14
         filesz 0x00000058 memsz 0x00000058 flags rw-
    LOAD off    0x0001c860 vaddr 0x70000860 paddr 0x80014860 align 2**14
         filesz 0x00000000 memsz 0x00000310 flags rw-
    LOAD off    0x0001c058 vaddr 0x50000058 paddr 0x800148b8 align 2**14
         filesz 0x00000000 memsz 0x00000004 flags rw-
    LOAD off    0x0001e600 vaddr 0x5001a600 paddr 0x800148b8 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x0001f700 vaddr 0x5001b700 paddr 0x800148b8 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00020000 vaddr 0x60000000 paddr 0x800148b8 align 2**14
         filesz 0x00000058 memsz 0x00000058 flags rw-
    LOAD off    0x00023c00 vaddr 0x5001bc00 paddr 0x800148c0 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00020058 vaddr 0x60000058 paddr 0x80014910 align 2**14
         filesz 0x00000000 memsz 0x00000004 flags rw-
    LOAD off    0x00022600 vaddr 0x6001a600 paddr 0x80014910 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00023700 vaddr 0x6001b700 paddr 0x80014910 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00020b70 vaddr 0x70000b70 paddr 0x80014910 align 2**14
         filesz 0x00000074 memsz 0x00000074 flags rw-
    LOAD off    0x00023c00 vaddr 0x6001bc00 paddr 0x80014940 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00020be4 vaddr 0x70000be4 paddr 0x80014984 align 2**14
         filesz 0x00000000 memsz 0x0000001c flags rw-
    LOAD off    0x00024000 vaddr 0xb0000000 paddr 0x80014984 align 2**14
         filesz 0x00000000 memsz 0x00000018 flags rw-
    LOAD off    0x00024600 vaddr 0x70018600 paddr 0x80014988 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00021700 vaddr 0x70019700 paddr 0x80014988 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00021c00 vaddr 0x70019c00 paddr 0x800149c0 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .startup      00000006  80000020  80000020  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000011e0  80000028  80000028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .CPU2.bss     00000004  50000058  800148b8  0001c058  2**2
                  ALLOC, CPU2
  3 .CPU1.bss     00000004  60000058  80014910  00020058  2**2
                  ALLOC, CPU1
  4 .CPU0.bss     0000001c  70000be4  80014984  00020be4  2**2
                  ALLOC, CPU0
  5 .bss          00000310  70000860  80014860  0001c860  2**3
                  ALLOC
  6 .lmu_bss      00000018  b0000000  80014984  00024000  2**2
                  ALLOC
  7 .CPU2.data    00000058  50000000  80014860  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, CPU2
  8 .CPU1.data    00000058  60000000  800148b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, CPU1
  9 .CPU0.data    00000074  70000b70  80014910  00020b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA, CPU0
 10 .data         00000860  70000000  80014000  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 11 .traptab      00000100  80001300  80001300  00005300  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .ctors        00000008  80001400  80001400  00005400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .dtors        00000008  80001408  80001408  00005408  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .inttab_cpu0  00002000  80002000  80002000  00006000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text         0000b988  80004000  80004000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .inttab_cpu1  00002000  80010000  80010000  00014000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .inttab_cpu2  00002000  80012000  80012000  00016000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .CPU2.ustack  00001000  5001a600  800148b8  0001e600  2**3
                  ALLOC, CPU2
 19 .CPU2.istack  00000400  5001b700  800148b8  0001f700  2**3
                  ALLOC, CPU2
 20 .CPU2.csa     00002000  5001bc00  800148c0  00023c00  2**6
                  ALLOC, CPU2
 21 .CPU1.ustack  00001000  6001a600  80014910  00022600  2**3
                  ALLOC, CPU1
 22 .CPU1.istack  00000400  6001b700  80014910  00023700  2**3
                  ALLOC, CPU1
 23 .CPU1.csa     00002000  6001bc00  80014940  00023c00  2**6
                  ALLOC, CPU1
 24 .CPU0.ustack  00001000  70018600  80014988  00024600  2**3
                  ALLOC, CPU0
 25 .CPU0.istack  00000400  70019700  80014988  00021700  2**3
                  ALLOC, CPU0
 26 .CPU0.csa     00002000  70019c00  800149c0  00021c00  2**6
                  ALLOC, CPU0
 27 .comment      00000053  00000000  00000000  00020be4  2**0
                  CONTENTS, READONLY
 28 .debug_aranges 00000d08  00000000  00000000  00020c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_info   000cf593  00000000  00000000  00021940  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_abbrev 0000c560  00000000  00000000  000f0ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_line   0000f1e9  00000000  00000000  000fd433  2**0
                  CONTENTS, READONLY, DEBUGGING
 32 .debug_frame  00002350  00000000  00000000  0010c61c  2**2
                  CONTENTS, READONLY, DEBUGGING
 33 .debug_str    00002373  00000000  00000000  0010e96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 34 .debug_loc    000173a1  00000000  00000000  00110cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 35 .debug_ranges 000017a8  00000000  00000000  00128080  2**0
                  CONTENTS, READONLY, DEBUGGING
 36 .version_info 0004c67a  00000000  00000000  00129828  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80000020 l    d  .startup	00000000 .startup
80000028 l    d  .rodata	00000000 .rodata
50000058 l    d  .CPU2.bss	00000000 .CPU2.bss
60000058 l    d  .CPU1.bss	00000000 .CPU1.bss
70000be4 l    d  .CPU0.bss	00000000 .CPU0.bss
70000860 l    d  .bss	00000000 .bss
b0000000 l    d  .lmu_bss	00000000 .lmu_bss
50000000 l    d  .CPU2.data	00000000 .CPU2.data
60000000 l    d  .CPU1.data	00000000 .CPU1.data
70000b70 l    d  .CPU0.data	00000000 .CPU0.data
70000000 l    d  .data	00000000 .data
80001300 l    d  .traptab	00000000 .traptab
80001400 l    d  .ctors	00000000 .ctors
80001408 l    d  .dtors	00000000 .dtors
80002000 l    d  .inttab_cpu0	00000000 .inttab_cpu0
80004000 l    d  .text	00000000 .text
80010000 l    d  .inttab_cpu1	00000000 .inttab_cpu1
80012000 l    d  .inttab_cpu2	00000000 .inttab_cpu2
5001a600 l    d  .CPU2.ustack	00000000 .CPU2.ustack
5001b700 l    d  .CPU2.istack	00000000 .CPU2.istack
5001bc00 l    d  .CPU2.csa	00000000 .CPU2.csa
6001a600 l    d  .CPU1.ustack	00000000 .CPU1.ustack
6001b700 l    d  .CPU1.istack	00000000 .CPU1.istack
6001bc00 l    d  .CPU1.csa	00000000 .CPU1.csa
70018600 l    d  .CPU0.ustack	00000000 .CPU0.ustack
70019700 l    d  .CPU0.istack	00000000 .CPU0.istack
70019c00 l    d  .CPU0.csa	00000000 .CPU0.csa
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .version_info	00000000 .version_info
00000000 l    df *ABS*	00000000 ee_tc_cstart.c
00000000 l    df *ABS*	00000000 asw.c
70000860 l     O .bss	00000004 i.15855
00000000 l    df *ABS*	00000000 bsw.c
00000000 l    df *ABS*	00000000 ee_applcfg.c
b0000004 l     O .lmu_bss	00000004 osEE_kernel_lock
b0000000 l     O .lmu_bss	00000004 osEE_kernel_barrier
80000234 l     O .rodata	0000001c osEE_tdb_ptr_array
80000200 l     O .rodata	00000004 osEE_counter_db_ptr_array
800001e0 l     O .rodata	00000004 osEE_alarm_db_ptr_array
800001b0 l     O .rodata	0000000c osEE_spinlock_db_array
80000330 l     O .rodata	00000008 osEE_sdb_array_core2
50000054 l     O .CPU2.data	00000004 0x60 osEE_scb_array_core2
50000058 l     O .CPU2.bss	00000004 0x60 osEE_lock_core2
80000250 l     O .rodata	00000040 osEE_tdb_array_core2
80000214 l     O .rodata	00000008 osEE_autostart_tdb_array_core2
800001bc l     O .rodata	00000008 osEE_autostart_trigger_db_core2
50000024 l     O .CPU2.data	00000008 0x60 osEE_sn_array_core2
80000338 l     O .rodata	00000008 osEE_sdb_array_core1
60000054 l     O .CPU1.data	00000004 0x40 osEE_scb_array_core1
60000058 l     O .CPU1.bss	00000004 0x40 osEE_lock_core1
80000290 l     O .rodata	00000040 osEE_tdb_array_core1
80000220 l     O .rodata	00000008 osEE_autostart_tdb_array_core1
800001c4 l     O .rodata	00000008 osEE_autostart_trigger_db_core1
60000024 l     O .CPU1.data	00000008 0x40 osEE_sn_array_core1
80000340 l     O .rodata	00000008 osEE_sdb_array_core0
70000be0 l     O .CPU0.data	00000004 0x20 osEE_scb_array_core0
70000be4 l     O .CPU0.bss	00000004 0x20 osEE_lock_core0
800002d0 l     O .rodata	00000060 osEE_tdb_array_core0
8000022c l     O .rodata	00000008 osEE_autostart_tdb_array_core0
800001cc l     O .rodata	00000008 osEE_autostart_trigger_db_core0
70000b94 l     O .CPU0.data	00000010 0x20 osEE_sn_array_core0
b000000c l     O .lmu_bss	0000000c osEE_spinlock_cb_array
b0000008 l     O .lmu_bss	00000004 osEE_spinlock_S1
800001d4 l     O .rodata	0000000c osEE_trigger_autostart_info_core0_OSDEFAULTAPPMODE
800001e4 l     O .rodata	0000001c osEE_alarm_db_array_core0
70000be8 l     O .CPU0.bss	00000010 0x20 osEE_alarm_cb_array_core0
80000204 l     O .rodata	00000010 osEE_counter_db_array_core0
70000bf8 l     O .CPU0.bss	00000008 0x20 osEE_counter_cb_array_core0
8000021c l     O .rodata	00000004 osEE_tdb_ptr_autostart_core2_OSDEFAULTAPPMODE
80000228 l     O .rodata	00000004 osEE_tdb_ptr_autostart_core1_OSDEFAULTAPPMODE
5000002c l     O .CPU2.data	00000028 0x60 osEE_tcb_array_core2
6000002c l     O .CPU1.data	00000028 0x40 osEE_tcb_array_core1
70000ba4 l     O .CPU0.data	0000003c 0x20 osEE_tcb_array_core0
00000000 l    df *ABS*	00000000 IfxVadc.c
80000348 l     O .rodata	00000006 CSWTCH.25
00000000 l    df *ABS*	00000000 IfxVadc_cfg.c
00000000 l    df *ABS*	00000000 IfxAsclin_PinMap.c
00000000 l    df *ABS*	00000000 IfxAsclin_cfg.c
00000000 l    df *ABS*	00000000 IfxPort_cfg.c
00000000 l    df *ABS*	00000000 IfxScuCcu.c
70000018 l     O .data	00000004 IfxScuCcu_xtalFrequency
80005e70 l     F .text	00000034 IfxScuCcu_wait
80000c1c l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
00000000 l    df *ABS*	00000000 IfxScu_PinMap.c
00000000 l    df *ABS*	00000000 IfxVadc_Adc.c
80000eb8 l     O .rodata	00000040 IfxVadc_Adc_masterIndex
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 impure.c
70000434 l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 vfprintf.c
80000f58 l     O .rodata	00000010 blanks.4035
80000f48 l     O .rodata	00000010 zeroes.4036
00000000 l    df *ABS*	00000000 dtoa.c
8000dbd0 l     F .text	0000011a quorem
00000000 l    df *ABS*	00000000 locale.c
80000f84 l     O .rodata	00000038 lconv
00000000 l    df *ABS*	00000000 mprec.c
80000fbc l     O .rodata	0000000c p05.2553
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_sbrk.c
70000858 l     O .data	00000004 heap_top.2289
00000000 l    df *ABS*	00000000 ee_tc_trapvec.c
00000000 l    df *ABS*	00000000 ee_tc_intvec.c
800095de l     F .text	000000c6 osEE_tc_isr2_wrapper
00000000 l    df *ABS*	00000000 IfxAsclin.c
00000000 l    df *ABS*	00000000 IfxAsclin_Asc.c
00000000 l    df *ABS*	00000000 IfxPort.c
00000000 l    df *ABS*	00000000 IfxScuEru.c
00000000 l    df *ABS*	00000000 IfxScuWdt.c
00000000 l    df *ABS*	00000000 Ifx_CircularBuffer.c
00000000 l    df *ABS*	00000000 Ifx_Fifo.c
00000000 l    df *ABS*	00000000 ee_tc_system.c
8000910e l     F .text	00000054 osEE_tc_stm_us_ticks
70000b20 l     O .bss	00000004 osEE_tc_stm_freq_khz
00000000 l    df *ABS*	00000000 ee_oo_api_osek.c
800096a4 l     F .text	0000001e osEE_shutdown_os
00000000 l    df *ABS*	00000000 ee_oo_sched_entry_points.c
8000ab10 l     F .text	0000004c osEE_release_all_m
00000000 l    df *ABS*	00000000 ee_oo_scheduler.c
00000000 l    df *ABS*	00000000 ee_oo_kernel.c
00000000 l    df *ABS*	00000000 ee_oo_sched_partitioned.c
8000ae4e l     F .text	00000026 osEE_scheduler_task_insert_rq
00000000 l    df *ABS*	00000000 ee_oo_counter.c
00000000 l    df *ABS*	00000000 ee_oo_alarm.c
00000000 l    df *ABS*	00000000 ee_std_change_context.c
00000000 l    df *ABS*	00000000 ee_tc_hal.c
00000000 l    df *ABS*	00000000 ee_tc_hal_mc.c
00000000 l    df *ABS*	00000000 ee_tc_ctx.c
8000b7d0 l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
8000b9a8 l     F .text	0000019c _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_exit.c
00000000 l    df *ABS*	00000000 libos.c
00000000 l    df *ABS*	00000000 libos_abort.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udivdi3.c
00000000 l    df *ABS*	00000000 umoddi3.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udiv6432.c
00000000 l    df *ABS*	00000000 Bsp.c
00000000 l    df *ABS*	00000000 CompilerGnuc.c
00000000 l    df *ABS*	00000000 IfxCpu.c
00000000 l    df *ABS*	00000000 IfxCpu_Irq.c
00000000 l    df *ABS*	00000000 IfxCpu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc.c
00000000 l    df *ABS*	00000000 IfxStdIf_DPipe.c
00000000 l    df *ABS*	00000000 IfxStm.c
00000000 l    df *ABS*	00000000 IfxStm_cfg.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 IfxScu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc_cfg.c
80000550 g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
70000b70 g     O .inttab_cpu2	00000001 __HEAP
80005664 g     F .text	00000062 IfxAsclin_Asc_write
80004f02 g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
80006f8c g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
80013bc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_222
80012000 g     F .inttab_cpu2	00002000 __INTTAB2
800071c0 g     F .text	00000036 IfxScuWdt_setCpuEndinit
80000fc8 g     O .rodata	00000028 __mprec_tinytens
80011820 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_193
80000c60 g     O .rodata	00000010 IfxScu_WDT1LCK_P20_7_OUT
80003260 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_147
8000418a g     F .text	000000e8 mdelay
800021c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_14
80012fa0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_125
800103a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_29
80002200 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_16
8000bf4c g     F .text	0000001a .hidden __ashldi3
80011ae0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_215
80011460 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_163
80006f22 g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogReload
80010c40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_98
800106a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_53
800028e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_71
80009d12 g     F .text	00000062 TerminateTask
80010d00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_104
80004f7e g     F .text	00000006 IfxAsclin_Asc_resetSendCount
80000350 g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
80011380 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_156
70000008 g     O .data	00000010 osEE_kcb_var
80011560 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_171
80000500 g     O .rodata	00000010 IfxAsclin2_TX_P14_2_OUT
80003000 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_128
80010e00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_112
800116e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_183
800038e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_199
80011180 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_140
80007f6a g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80002fe0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_127
80002e80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_116
800037c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_190
80004a2e g     F .text	00000014 IfxVadc_setScan
8000f5f0 g     F .text	00000040 .hidden __eqdf2
80005594 g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
80006eb6 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
800046a0 g     F .text	00000010 IfxVadc_getQueueStatus
800102a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_21
80013320 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_153
80012e80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_116
80011280 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_148
800136c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_182
00000000 g       *ABS*	00000000 __HEAP_SIZE
80008220 g     F .text	00000176 Ifx_Fifo_read
8000b50c g     F .text	00000066 osEE_alarm_get
80004a88 g     F .text	0000001c IfxAsclin_disableModule
800035e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_175
800008a0 g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
8000ac2e g     F .text	00000062 osEE_idle_hook_wrapper
6001a600 g       .CPU1.ustack	00000000 __USTACK1_AREA_END
80010220 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_17
80008642 g     F .text	0000046c osEE_tc_core0_start
800027e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_63
800125c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_46
80002380 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_28
80012600 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_48
800080e6 g     F .text	00000004 Ifx_Fifo_destroy
80012560 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_43
80003320 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_153
70019b00 g     O .CPU0.istack	00000000 __ISTACK0
800073fa g     F .text	00000108 IfxVadc_Adc_getChannelConfig
80012ac0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_86
80010800 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_64
80004650 g     F .text	00000018 IfxVadc_getAdcAnalogFrequency
70000000 g       *ABS*	00000000 __DSPR0_START
8000b444 g     F .text	0000006a osEE_alarm_set_abs
80012b20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_89
80003920 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_201
8000b830 g     F .text	00000024 osEE_hal_save_ctx_and_ready2stacked
80012100 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_8
80010740 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_58
80003f80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_252
8000672c g     F .text	00000012 IfxScuCcu_initErayPllConfig
8000b572 g     F .text	00000028 osEE_change_context_from_running
80003b00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_216
80003c80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_228
80004ef4 g     F .text	0000000e IfxAsclin_Asc_getWriteCount
80002080 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_4
800008c0 g     O .rodata	00000010 IfxAsclin3_RXA_P15_7_IN
70000b70 g     O .CPU0.data	00000024 0x20 osEE_ccb_var_core0
80013140 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_138
80003580 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_172
800115a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_173
80010b60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_91
80013f00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_248
80011540 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_170
80006e4c g     F .text	00000032 IfxScuEru_setInterruptGatingPattern
80005040 g     F .text	00000014 IfxAsclin_Asc_clearTx
800056e2 g     F .text	000000c6 IfxAsclin_Asc_stdIfDPipeInit
80002840 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_66
80013ae0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_215
8000c730 g     F .text	00000002 __malloc_unlock
80004ede g     F .text	0000000a IfxAsclin_Asc_getReadEvent
80013600 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_176
80004000 g     F .text	0000000e TimerISR
800083cc g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007d32 g     F .text	000000e8 IfxVadc_Adc_initModule
80009f88 g     F .text	00000092 SetRelAlarm
80002280 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_20
80011e20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_241
8000456a g     F .text	0000003c IfxVadc_disablePostCalibration
8000474e g     F .text	00000028 IfxVadc_getSrcAddress
8000479a g     F .text	00000024 IfxVadc_initialiseAdcConverterClock
80004bb2 g     F .text	00000024 IfxAsclin_getOvsFrequency
80013f60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_251
80012940 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_74
8000a2fa g     F .text	000000ba SetEvent
800132c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_150
80012e20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_113
80007502 g     F .text	00000038 IfxVadc_Adc_getChannelConversionTime
80010240 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_18
80002d00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_104
800130c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_134
8000a66e g     F .text	0000000e GetNumberOfActivatedCores
80006e0e g     F .text	00000012 IfxScuEru_setEventFlag
80010600 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_48
80002800 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_64
50000000 g     O .CPU2.data	00000024 0x60 osEE_ccb_var_core2
80003ba0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_221
800030c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_134
8000ab5c g     F .text	00000026 osEE_scheduler_task_wrapper_restore
80003e60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_243
80000e68 g     O .rodata	00000010 IfxScu_EVRWUPA_P14_1_IN
80000670 g     O .rodata	00000010 IfxAsclin3_SLSO_P12_1_OUT
70019600 g     O .CPU0.ustack	00000000 __USTACK0
8000f138 g     F .text	00000050 memmove
800023a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_29
80002fa0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_125
80002e60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_115
70018600 g       .CPU0.ustack	00000000 __USTACK0_AREA_END
80013c20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_225
80010000 g     F .inttab_cpu1	00002000 __INTTAB1
800139c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_206
80012cc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_102
8000e9fe g     F .text	00000056 _Balloc
80000e48 g     O .rodata	00000010 IfxScu_EXTCLK0_P23_1_OUT
80011400 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_160
80010d40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_106
800138e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_199
80002980 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_76
80000960 g     O .rodata	00000010 IfxAsclin1_RXE_P11_10_IN
80000740 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_8_OUT
80010b80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_92
80006046 g     F .text	0000004a IfxScuCcu_getModuleFrequency
80003040 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_130
800061b8 g     F .text	000003be IfxScuCcu_init
800100a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_5
8000f670 g     F .text	00000040 .hidden __gtdf2
80002700 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_56
8000f5d4  w    F .text	0000000a __errno
800022a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_21
80009716 g     F .text	00000056 SuspendAllInterrupts
80004f84 g     F .text	00000008 IfxAsclin_Asc_canReadCount
80011600 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_176
00001000 g       *ABS*	00000000 __USTACK0_SIZE
80002ba0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_93
80011ca0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_229
80011c80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_228
80000940 g     O .rodata	00000010 IfxAsclin1_RXG_P02_3_IN
80011be0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_223
8000b89e g     F .text	00000066 osEE_hal_terminate_ctx
800003f0 g     O .rodata	00000010 IfxAsclin3_TX_P32_3_OUT
8000ad02 g     F .text	00000048 osEE_sn_priority_insert
80003ca0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_229
80012920 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_73
8000aa44 g     F .text	000000cc TryToGetSpinlock
80009eee g     F .text	0000009a GetTaskState
80003120 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_137
80007f28 g     F .text	00000020 Ifx_CircularBuffer_get32
8000adde g     F .text	0000004e osEE_task_event_set_mask
800126a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_53
80000480 g     O .rodata	00000010 IfxAsclin3_TX_P11_1_OUT
800008b0 g     O .rodata	00000010 IfxAsclin3_RXB_P11_0_IN
800071f6 g     F .text	0000009e IfxScuWdt_initCpuWatchdog
800134c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_166
80005948 g     F .text	00000092 IfxPort_setGroupModeOutput
80012700 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_56
80012c40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_98
80012ba0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_93
80012260 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_19
80013260 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_147
80003440 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_162
80010a80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_84
80010520 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_41
5001dc00 g     O .CPU2.csa	00000000 __CSA2_END
00000400 g       *ABS*	00000000 __ISTACK1_SIZE
80010f20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_121
80005d96 g     F .text	00000072 IfxScuCcu_getPllFrequency
70000b60 g     O .bss	00000004 errno
8000bec0 g     F .text	0000001e .hidden __make_dp
80003400 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_160
8000a136 g     F .text	0000009a GetAlarm
0001a600 g       *ABS*	00000000 __USTACK1_OFFSET
800112c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_150
80001360 g       .traptab	00000000 osEE_tc_trap_context
800124a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_37
80007378 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
80000850 g     O .rodata	00000010 IfxAsclin3_RXG_P21_3_IN
800009f0 g     O .rodata	00000010 IfxAsclin2_RTS_P33_4_OUT
800136e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_183
80013700 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_184
80010300 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_24
80011140 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_138
800006b0 g     O .rodata	00000010 IfxAsclin2_SLSO_P02_3_OUT
80003f60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_251
8000bfe0 g     F .text	00000016 .hidden __make_fp
800127a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_61
800042c2 g     F .text	0000007e initVADCChannels
800029a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_77
80000420 g     O .rodata	00000010 IfxAsclin3_TX_P22_0_OUT
80010c20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_97
80010680 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_52
80003d40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_234
80012da0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_109
80000d48 g     O .rodata	00000014 IfxScu_REQ15_P14_1_IN
80002420 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_33
80002f40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_122
80002460 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_35
80000dc0 g     O .rodata	00000014 IfxScu_REQ0_P15_4_IN
8000a67c g     F .text	000000b8 StartCore
80013d00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_232
80006e7e g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
80013200 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_144
800135c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_174
800039a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_205
8000a410 g     F .text	00000092 ClearEvent
8000610a g     F .text	00000042 IfxScuCcu_getCpuFrequency
80002c40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_98
80010860 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_67
80011b40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_218
800035c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_174
8000ab82 g     F .text	000000ac osEE_scheduler_task_wrapper_run
80011b20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_217
80010ce0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_103
800034e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_167
80000790 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_0_OUT
80013280 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_148
80012d80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_108
800131e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_143
80000ac0 g     O .rodata	00000080 IfxPort_cfg_indexMap
800051e6 g     F .text	000003ae IfxAsclin_Asc_initModule
80003e40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_242
800135a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_173
800130a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_133
80010480 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_36
80010140 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_10
80011640 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_178
80003380 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_156
8000b120 g     F .text	0000003e osEE_scheduler_task_preemption_point
80011680 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_180
8000e9e2 g     F .text	0000001c memcpy
80002b00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_88
80003240 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_146
80011d20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_233
800136a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_181
80002560 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_43
80011220 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_145
8000400e g     F .text	00000056 FuncTask1
800110e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_135
8000a4a2 g     F .text	00000070 GetCounterValue
80013c60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_227
80002480 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_36
8000ca2c g     F .text	000011a4 _svfprintf_r
80003bc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_222
8000be78 g     F .text	00000048 .hidden __floatsidf
8000753a g     F .text	0000023e IfxVadc_Adc_getGroupConfig
80006ce0 g     F .text	00000026 IfxScuEru_enablePatternDetectionTrigger
8000ad4a g     F .text	0000000e osEE_scheduler_rq_insert
80003020 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_129
8000f6f0 g     F .text	00000040 .hidden __ltdf2
80004744 g     F .text	0000000a IfxVadc_getScanStatus
80001410 g       .dtors	00000000 __DTOR_END__
8000673e g     F .text	00000076 IfxScuCcu_setCpuFrequency
80006e20 g     F .text	0000002c IfxScuEru_setFlagPatternDetection
8000b5ba g     F .text	00000026 osEE_idle_task_terminate
80010d60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_107
80000dac g     O .rodata	00000014 IfxScu_REQ10_P14_3_IN
800009e0 g     O .rodata	00000010 IfxAsclin3_RTS_P00_9_OUT
80011da0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_237
80012340 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_26
80012060 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_3
80010c80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_100
80003620 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_177
800128a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_69
80012860 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_67
80003c60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_227
80000810 g     O .rodata	00000010 IfxAsclin1_SCLK_P20_10_OUT
80012300 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_24
800130e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_135
800123a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_29
8000efa4 g     F .text	00000042 __fpclassifyd
800035a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_173
800105e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_47
80006eee g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogPassword
800110c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_134
800114c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_166
80007088 g     F .text	0000005c IfxScuWdt_enableCpuWatchdog
80010920 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_73
8000afda g     F .text	000000a4 osEE_scheduler_task_unblocked
80011fe0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_255
80013a60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_211
8000c27a g     F .text	0000000c malloc
80003700 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_184
80002340 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_26
80006b50 g     F .text	00000028 IfxScuEru_clearInputChannelConfiguration
800104a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_37
00000000 g       *ABS*	00000000 NULL
80000870 g     O .rodata	00000010 IfxAsclin3_RXF_P21_6_IN
800094ec g     F .text	0000001e osEE_tc_stm_set_sr0_next_match
800036c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_182
80002a60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_83
80002600 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_48
80002b20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_89
800031a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_141
80001340 g       .traptab	00000000 osEE_tc_trap_instruction
80001018 g     O .rodata	000000c8 __mprec_tens
70000000 g     O .data	00000004 g_vadcChannelIDs
80002d80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_108
80002580 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_44
80003280 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_148
800138c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_198
80005028 g     F .text	00000008 IfxAsclin_Asc_canWriteCount
80000510 g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
80000600 g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
80002120 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_9
80012e00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_112
8000c7ae g     F .text	00000016 vsnprintf
80003da0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_237
80000a40 g     O .rodata	00000010 IfxAsclin3_CTSA_P00_12_IN
80013b00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_216
80011940 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_202
80013b60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_219
70000b58 g     O .bss	00000004 __malloc_top_pad
80004362 g     F .text	00000026 readADCValue
80013d20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_233
80003780 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_188
8000b758 g     F .text	0000002a osEE_get_core
80012020 g       .inttab_cpu2	00000000 osEE_tc_core2_isr2_entry_1
80013300 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_152
80012e60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_115
800067b4 g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005ad4 g     F .text	00000064 IfxPort_setPinModeLvdsHigh
8000b854 g     F .text	0000002c osEE_hal_ready2stacked
80000d20 g     O .rodata	00000014 IfxScu_REQ1_P15_8_IN
80002de0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_111
80011200 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_144
80008096 g     F .text	00000050 Ifx_CircularBuffer_write32
8000e9c0 g     F .text	0000000a _localeconv_r
80013160 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_139
80002ce0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_103
80004064 g     F .text	0000003e FuncTask2
80004b78 g     F .text	00000022 IfxAsclin_getIndex
8000eb90 g     F .text	00000010 __i2b
80009d74 g     F .text	00000090 Schedule
80004bd6 g     F .text	00000016 IfxAsclin_getShiftFrequency
80007778 g     F .text	000001ec IfxVadc_Adc_initChannel
80002060 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_3
80000410 g     O .rodata	00000010 IfxAsclin3_TX_P22_1_OUT
80006a16 g     F .text	00000112 IfxScuCcu_switchToBackupClock
80012660 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_51
80000830 g     O .rodata	00000010 IfxAsclin0_SCLK_P15_2_OUT
800070e4 g     F .text	00000072 IfxScuWdt_enableSafetyWatchdog
80011720 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_185
8000c732 g     F .text	0000001e _sbrk_r
80010940 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_74
800111c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_142
800005c0 g     O .rodata	00000010 IfxAsclin1_TX_P11_12_OUT
800114a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_165
80000de0 g     O .rodata	0000000c IfxScu_HWCFG5_P10_6_IN
80012c00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_96
800005d0 g     O .rodata	00000010 IfxAsclin1_TX_P02_2_OUT
80002740 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_58
80011860 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_195
80013a20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_209
80002ec0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_118
80003800 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_192
80011ea0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_245
70000888 g     O .bss	0000000c g_vadcGroup
80006c94 g     F .text	00000026 IfxScuEru_enableAutoClear
80013c80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_228
80010d80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_108
80002be0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_95
800124e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_39
800102e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_23
80013680 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_180
80000820 g     O .rodata	00000010 IfxAsclin1_SCLK_P15_0_OUT
800113c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_158
8000c108 g     F .text	000000ac .hidden __unpack_d
00002700 g     O *ABS*	00000000 __TRICORE_DERIVATE_NAME__
8000a998 g     F .text	000000ac ReleaseSpinlock
80005b7a g     F .text	0000003c IfxPort_setPinPadDriver
80013220 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_145
80013e60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_243
80010100 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_8
80011a20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_209
80013de0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_239
80000580 g     O .rodata	00000010 IfxAsclin1_TX_P15_4_OUT
800116a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_181
70000b54 g     O .bss	00000004 __malloc_max_sbrked_mem
80013620 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_177
80003e80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_244
80002020 g       .inttab_cpu0	00000000 osEE_tc_core0_isr2_entry_1
80003f20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_249
800013a0 g       .traptab	00000000 osEE_tc_trap_assertion
80003360 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_155
80010840 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_66
80012440 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_34
800123e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_31
80011040 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_130
80008000 g       *ABS*	00000000 __A1_MEM
8000b976 g     F .text	00000032 .hidden __extendsfdf2
80012980 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_76
800129e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_79
80011240 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_146
80004aee g     F .text	00000016 IfxAsclin_getAddress
80002940 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_74
8000bb44 g     F .text	00000038 .hidden __adddf3
80009b5e g     F .text	00000022 GetActiveApplicationMode
80002d20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_105
80006090 g     F .text	0000007a IfxScuCcu_getSriFrequency
8000976c g     F .text	00000040 ResumeAllInterrupts
800119a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_205
80012740 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_58
80012640 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_50
80006996 g     F .text	00000080 IfxScuCcu_setSriFrequency
800121e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_15
80003860 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_195
8000f81e g     F .text	00000026 .hidden __umoddi3
80012be0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_95
70019c00 g     O .CPU0.csa	00000000 __CSA0
80002760 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_59
80000a10 g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80002c00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_96
80000f0c g     O .rodata	00000004 _global_impure_ptr
80006ba0 g     F .text	00000036 IfxScuEru_connectTrigger
70000868 g     O .bss	00000020 g_vadcChannel
80003fc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_254
8000614c g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000f198 g     F .text	000003f0 _realloc_r
800007f0 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80013020 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_129
80013fa0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_253
80004c28 g     F .text	00000012 IfxAsclin_read16
8000587c g     F .text	0000003c IfxPort_enableEmergencyStop
80000440 g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
80013880 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_196
80011a60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_211
8000f77e g     F .text	000000a0 .hidden __udivdi3
80013ee0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_247
800009c0 g     O .rodata	00000010 IfxAsclin0_RXB_P15_3_IN
80000450 g     O .rodata	00000010 IfxAsclin3_TX_P20_0_OUT
70008000 g       *ABS*	00000000 __A0_MEM
80003c00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_224
8000ac90 g     F .text	00000072 osEE_scheduler_core_rq_preempt_stk
80013420 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_161
6001dc00 g     O .CPU1.csa	00000000 __CSA1_END
80000610 g     O .rodata	00000010 IfxAsclin0_TX_P14_1_OUT
80000ff0 g     O .rodata	00000028 __mprec_bigtens
80013440 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_162
8000f5de g     F .text	00000012 abort
80012f20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_121
8000bf1a g     F .text	00000032 .hidden __floatunsidf
80010040 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_2
80012500 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_40
8000edf0 g     F .text	00000042 __mcmp
800037a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_189
80009b80 g     F .text	000000a4 ActivateTask
80005054 g     F .text	0000001c IfxAsclin_Asc_read
80000d5c g     O .rodata	00000014 IfxScu_REQ14_P02_1_IN
800118a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_197
80012a60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_83
80012a20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_81
80002140 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_10
80006bfc g     F .text	00000026 IfxScuEru_disableFallingEdgeDetection
80012fc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_126
80002180 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_12
80011d80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_236
80013f40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_250
80011160 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_139
800080ea g     F .text	0000003a Ifx_Fifo_init
80011f80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_252
80011d60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_235
70000b68  w    O .bss	00000004 _my_errno
800138a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_197
80010bc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_94
80000650 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_2_OUT
800057a8 g     F .text	00000030 IfxPort_getAddress
80010e20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_113
800028a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_69
00019c00 g       *ABS*	00000000 __CSA0_OFFSET
8000a7d8 g     F .text	00000100 ShutdownAllCores
80003080 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_132
80000a70 g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
80009e76 g     F .text	00000078 GetTaskID
80010aa0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_85
80010540 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_42
8000658a g     F .text	000001a2 IfxScuCcu_initErayPll
800004f0 g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
80010f00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_120
80010060 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_3
80002f80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_124
80003980 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_204
80000490 g     O .rodata	00000010 IfxAsclin3_TX_P11_0_OUT
80000bc8 g     O .rodata	00000054 IfxScuCcu_defaultClockConfig
80002dc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_110
80010fa0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_125
0001bc00 g       *ABS*	00000000 __CSA1_OFFSET
800020c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_6
80006d52 g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80003140 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_138
80000e04 g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
800097ac g     F .text	00000070 SuspendOSInterrupts
80013520 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_169
80006fbe g     F .text	0000005a IfxScuWdt_disableCpuWatchdog
8000bf66 g     F .text	0000007a .hidden __unpack_f
80009434 g     F .text	00000034 osEE_tc_stm_set_clockpersec
80013b40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_218
80004340 g     F .text	00000022 initADC
800027a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_61
8000b15e g     F .text	00000058 osEE_scheduler_task_set_running
800125a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_45
b0008000 g       *ABS*	00000000 _SMALL_DATA4_
8000950a g     F .text	0000008e osEE_tc_stm_set_sr1
80012b00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_88
80012a00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_80
80003a20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_209
800032e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_151
80000890 g     O .rodata	00000010 IfxAsclin3_RXD_P32_2_IN
8000442a g     F .text	0000000c asclin0TxISR
80000770 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_1_OUT
80007018 g     F .text	00000070 IfxScuWdt_disableSafetyWatchdog
80003720 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_185
80007374 g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
800008f0 g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
800007a0 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000eae8 g     F .text	00000042 __hi0bits
80000990 g     O .rodata	00000010 IfxAsclin1_RXB_P15_5_IN
80013ea0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_245
80000560 g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
8000b26c g     F .text	00000152 osEE_counter_increment
80000570 g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
80003a60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_211
8000f730 g     F .text	0000004e .hidden __fixdfsi
80010340 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_26
80011d00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_232
80010c60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_99
800106c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_54
8000ae74 g     F .text	000000d6 osEE_scheduler_task_activated
80005ea4 g     F .text	00000078 IfxScuCcu_getBbbFrequency
800120c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_6
80011b60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_219
0001bc00 g       *ABS*	00000000 __CSA2_OFFSET
0001e000 g       *ABS*	00000000 __DSPR2_SIZE
80003b20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_217
800004a0 g     O .rodata	00000010 IfxAsclin3_TX_P00_1_OUT
80000620 g     O .rodata	00000010 IfxAsclin0_TX_P14_0_OUT
6001a600 g     O .CPU1.ustack	00000000 __USTACK1_END
80006182 g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000c70 g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
80006f56 g     F .text	00000036 IfxScuWdt_clearCpuEndinit
80013580 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_172
80011660 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_179
800108a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_69
80011020 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_129
80003e20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_241
800007c0 g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004d1e g     F .text	00000182 IfxAsclin_setBitTiming
80013180 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_140
80013740 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_186
80011b80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_220
80000e28 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
80000630 g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
80012d20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_105
80000460 g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
80010f40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_122
80000970 g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000dec g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80013100 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_136
800101c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_14
800073b8 g     F .text	00000026 IfxVadc_Adc_deInitGroup
8000b904 g     F .text	00000026 .hidden __lshrdi3
80012140 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_10
80011980 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_204
80000880 g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
80003be0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_223
80012b40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_90
80012200 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_16
80013ce0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_231
800027c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_62
800009b0 g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
800116c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_182
80002360 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_27
80000710 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
8000797a g     F .text	0000038a IfxVadc_Adc_initGroup
800033c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_158
800039c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_206
800133a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_157
80003340 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_154
80011840 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_194
8000ecba g     F .text	0000007c __pow5mult
80011e40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_242
80013060 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_131
80013b80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_220
80011e80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_244
70000898 g     O .bss	0000000c g_ERUconfig
800117a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_189
80003fe0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_255
80002d60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_107
800107a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_61
800036a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_181
80011440 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_162
80011260 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_147
800106e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_55
800113a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_157
80003640 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_178
80006c48 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
80003160 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_139
800006d0 g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
80010ca0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_101
800137e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_191
8000b07e g     F .text	000000a2 osEE_scheduler_task_terminated
800004b0 g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
800034c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_166
8000c1b4 g     F .text	000000c6 .hidden __pack_f
800026c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_54
8000a0ac g     F .text	0000008a CancelAlarm
80007f8a g     F .text	0000005e Ifx_CircularBuffer_read8
80002b60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_91
80011120 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_137
800123c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_30
800031c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_142
80000a00 g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
80011c60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_227
80012960 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_75
80008dde g     F .text	00000330 osEE_tc_core2_start
00002700 g       *ABS*	00000000 __TRICORE_DERIVATE_MEMORY_MAP__
80010260 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_19
80008aae g     F .text	00000330 osEE_tc_core1_start
80010620 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_49
80002260 g       .inttab_cpu0	00000000 osEE_tc_core0_isr2_entry_19
800071a6 g     F .text	0000001a IfxScuWdt_initConfig
80013ec0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_246
800024e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_39
80003c20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_225
80001400 g       .ctors	00000000 __CTOR_LIST__
800126e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_55
80011500 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_168
80009390 g     F .text	000000a4 osEE_tc_get_fsource
80004c3a g     F .text	00000012 IfxAsclin_read32
80000d84 g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
80007294 g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
800111e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_143
80000a30 g     O .rodata	00000010 IfxAsclin0_RTS_P14_7_OUT
80000900 g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
80009468 g     F .text	00000084 osEE_tc_stm_set_sr0
80000c80 g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
800007d0 g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
800104e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_39
80013980 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_204
80012480 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_36
80011f20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_249
8000b880 g     F .text	0000001e osEE_tc_change_context_from_isr2_end
8000e9ca g     F .text	00000018 memchr
80013940 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_202
80010760 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_59
80012fe0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_127
8000c87e g     F .text	000001ac _free_r
8000561c g     F .text	00000048 IfxAsclin_Asc_initiateTransmission
80011480 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_164
800127e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_63
80012280 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_20
8000a65a g     F .text	00000014 GetISRID
800118e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_199
80002960 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_75
8000b7f2 g     F .text	00000024 osEE_hal_save_ctx_and_restore_ctx
80010ba0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_93
80003d80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_236
8000b3c0 g     F .text	00000084 osEE_alarm_set_rel
80013e40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_242
800023e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_31
800103e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_31
800026e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_55
80001380 g       .traptab	00000000 osEE_tc_trap_bus
80013d60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_235
80002040 g       .inttab_cpu0	00000000 osEE_tc_core0_isr2_entry_2
80005bb8 g     F .text	000000f8 IfxScuCcu_calculateSysPllDividers
80002f60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_123
80002f00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_120
80013ca0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_229
8000b782 g     F .text	0000004e osEE_hal_start_core
80000a50 g     O .rodata	00000010 IfxAsclin2_CTSB_P33_5_IN
70000020 g     O .data	00000004 __malloc_sbrk_base
80000020 g     F .startup	00000006 _start
80002b80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_92
80013ba0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_221
800032a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_149
80002e20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_113
80002d40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_106
80012d00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_104
80008124 g     F .text	00000022 Ifx_Fifo_create
80007176 g     F .text	0000001c IfxScuWdt_getCpuWatchdogEndInit
80003680 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_180
00001000 g       *ABS*	00000000 __USTACK2_SIZE
70000864 g     O .bss	00000004 shared
800013e0 g       .traptab	00000000 osEE_tc_trap_nmi
80003a80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_212
80003d00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_232
8000ed36 g     F .text	000000ba __lshift
80010ea0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_117
800132a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_149
800007b0 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_7_OUT
80010980 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_76
800073de g     F .text	0000001c IfxVadc_Adc_disableModule
80011920 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_201
80010a20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_81
00002000 g       *ABS*	00000000 __CSA_SIZE
8000efe6 g     F .text	000000f0 __ssprint_r
80013660 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_179
80004668 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
80013040 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_130
5001bc00 g     O .CPU2.csa	00000000 __CSA2
80002a40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_82
800101a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_13
8000b6e2 g     F .text	00000076 osEE_hal_sync_barrier
800025e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_47
800032c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_150
80000158 g     O .rodata	0000002c osEE_cdb_var_core1
7001bc00 g     O .CPU0.csa	00000000 __CSA0_END
80002ac0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_86
800044ec g     F .text	00000038 IfxVadc_enableAccess
80002520 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_41
80010320 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_25
800127c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_62
80012780 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_60
80002400 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_32
80003540 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_170
8000eba0 g     F .text	0000011a __multiply
800100c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_6
8000a8d8 g     F .text	000000c0 GetSpinlock
80002440 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_34
00000001 g       *ABS*	00000000 _.
80006d60 g     F .text	00000012 IfxScuEru_getEventFlagStatus
80000690 g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
800004e0 g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
800049b4 g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006c22 g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
80003a00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_208
70000b28 g     O .bss	00000028 __malloc_current_mallinfo
800135e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_175
80010880 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_68
8000eefc g     F .text	000000a8 __d2b
80010d20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_105
80013920 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_201
80011de0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_239
80012ca0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_101
80012380 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_28
80012840 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_66
800122e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_23
80000cbc g     O .rodata	00000014 IfxScu_REQ6_P02_0_IN
80013800 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_192
80007f48 g     F .text	00000022 Ifx_CircularBuffer_get16
80003560 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_171
80011080 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_132
800005b0 g     O .rodata	00000010 IfxAsclin1_TX_P14_10_OUT
80005d52 g     F .text	00000044 IfxScuCcu_getPllErayVcoFrequency
80001400 g       .ctors	00000000 __EH_FRAME_END__
80006bd6 g     F .text	00000026 IfxScuEru_disableAutoClear
80006842 g     F .text	00000050 IfxScuCcu_setPll2ErayFrequency
6001bb00 g     O .CPU1.istack	00000000 __ISTACK1
80010420 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_33
80005fac g     F .text	00000022 IfxScuCcu_getBaud2Frequency
80000750 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_6_OUT
80003ea0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_245
8000f844 g     F .text	000000a6 .hidden __fpcmp_parts_d
800039e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_207
80003760 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_187
80002300 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_24
80004ad2 g     F .text	0000001c IfxAsclin_enableModule
80013360 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_155
80012ec0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_118
0001a600 g       *ABS*	00000000 __USTACK2_OFFSET
80002ae0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_87
8000ad58 g     F .text	00000028 osEE_scheduler_core_pop_running
80010780 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_60
800128c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_70
80002540 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_42
8000b5e0 g     F .text	00000102 osEE_cpu_startos
80011ac0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_214
800020e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_7
80013840 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_194
80006d06 g     F .text	00000026 IfxScuEru_enableRisingEdgeDetection
80000930 g     O .rodata	00000010 IfxAsclin2_RXA_P14_3_IN
800118c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_198
800030a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_133
80013f20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_249
80003460 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_163
80003de0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_239
800134a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_165
800057d8 g     F .text	00000022 IfxPort_getIndex
8000a3b4 g     F .text	0000005c GetEvent
80003d60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_235
800051ca g     F .text	0000001c IfxAsclin_Asc_disableModule
800109c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_78
800119c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_206
80013ac0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_214
8000b92a g     F .text	0000004c .hidden __floatundisf
6001b600 g     O .CPU1.ustack	00000000 __USTACK1
80013340 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_154
80012ea0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_117
80004c4c g     F .text	00000012 IfxAsclin_read8
8000af4a g     F .text	00000090 osEE_scheduler_task_insert
80011bc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_222
8000bd60 g     F .text	00000118 .hidden __divdf3
80000e88 g     O .rodata	00000010 IfxScu_EMGSTOPA_P33_8_IN
80000e38 g     O .rodata	00000010 IfxScu_EXTCLK1_P11_12_OUT
800056c6 g     F .text	0000001c IfxAsclin_Asc_blockingWrite
80007e1a g     F .text	0000003a IfxVadc_Adc_initModuleConfig
70000028 g     O .data	00000408 __malloc_av_
80009e04 g     F .text	00000072 ShutdownOS
8000c764 g     F .text	0000004a _vsnprintf_r
70018600 g     O .CPU0.ustack	00000000 __USTACK0_END
80010ae0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_87
80010580 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_44
800137c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_190
80011580 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_172
8000bbbc g     F .text	000001a4 .hidden __muldf3
80003ce0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_231
80000840 g     O .rodata	00000010 IfxAsclin0_SCLK_P14_0_OUT
80012180 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_12
80010e60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_115
80013480 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_164
80012f40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_122
80002fc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_126
800104c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_38
800033a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_157
800108c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_70
80002320 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_25
80002680 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_52
80000e78 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000c72e g     F .text	00000002 __malloc_lock
8000f598 g     F .text	0000003c sbrk
80005cb0 g     F .text	0000000e IfxScuCcu_getOsc0Frequency
800044b4 g     F .text	00000038 IfxVadc_disableAccess
80000000 g       .startup	00000000 BootModeHeader0
800120e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_7
800013c0 g       .traptab	00000000 osEE_tc_trap_system
80000df8 g     O .rodata	0000000c IfxScu_HWCFG3_BMI_P14_3_IN
80010f80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_124
80004c14 g     F .text	00000014 IfxAsclin_getSrcPointerTx
80010ec0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_118
800046b0 g     F .text	00000094 IfxVadc_getResultBasedOnRequestSource
8000f0d6 g     F .text	00000062 _calloc_r
80003aa0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_213
800115e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_175
00002000 g       *ABS*	00000000 __CSA0_SIZE
80005fce g     F .text	00000078 IfxScuCcu_getSpbFrequency
80000920 g     O .rodata	00000010 IfxAsclin2_RXB_P02_1_IN
80010de0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_111
80003500 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_168
800045a6 g     F .text	000000aa IfxVadc_enableGroupSync
80006dba g     F .text	00000012 IfxScuEru_getPatternDetectionResult
80012d60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_107
800131c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_142
800103c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_30
80005070 g     F .text	0000009e IfxAsclin_Asc_isrTransmit
800004d0 g     O .rodata	00000010 IfxAsclin2_TX_P33_8_OUT
80012420 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_33
8000f188 g     F .text	00000010 memset
80011ec0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_246
80003900 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_200
80004436 g     F .text	0000007c main
80007156 g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
80010380 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_28
800129c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_78
800021e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_15
80002220 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_17
80006d2c g     F .text	00000026 IfxScuEru_enableTriggerPulse
80010f60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_123
80002900 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_72
70000b50 g     O .bss	00000004 __malloc_max_total_mem
80004aa4 g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000012c g     O .rodata	0000002c osEE_cdb_var_core2
8000f8ea g     F .text	0000009c .hidden __udiv6432
00000400 g       *ABS*	00000000 __ISTACK_SIZE
80012680 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_52
80005f8c g     F .text	00000020 IfxScuCcu_getBaud1Frequency
80012720 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_57
80007e96 g     F .text	00000092 IfxVadc_Adc_initExternalMultiplexerMode
80000d34 g     O .rodata	00000014 IfxScu_REQ16_P15_1_IN
80003820 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_193
80010960 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_75
700008a4 g     O .bss	0000027c g_AsclinAsc
80010a00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_80
80012c20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_97
80000dd4 g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
8000ad80 g     F .text	00000040 osEE_task_activated
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_119
80002720 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_57
5001bb00 g     O .CPU2.istack	00000000 __ISTACK2
80000100 g     O .rodata	0000002c osEE_kdb_var
800033e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_159
800139a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_205
80010280 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_20
80013c00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_224
80002bc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_94
80003b60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_219
00018600 g       *ABS*	00000000 __USTACK0_OFFSET
80007192 g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
80012ce0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_103
8000bede g     F .text	0000003c .hidden __truncdfsf2
80011420 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_161
8000dcec g     F .text	00000cd2 _dtoa_r
0001b700 g       *ABS*	00000000 __ISTACK1_OFFSET
8000c294 g     F .text	0000049a _malloc_r
80011f40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_250
80010200 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_16
80000640 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_6_OUT
80005b38 g     F .text	00000042 IfxPort_setPinModeLvdsMedium
80000910 g     O .rodata	00000010 IfxAsclin2_RXC_P02_10_IN
80011aa0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_213
80011ee0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_247
800051a4 g     F .text	00000026 IfxAsclin_Asc_blockingRead
8000b1b8 g     F .text	00000062 osEE_counter_insert_abs_trigger
800134e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_167
80000700 g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
80004ed8 g     F .text	00000006 IfxAsclin_Asc_getReadCount
80008000 g       *ABS*	00000000 __A8_MEM
800006f0 g     O .rodata	00000010 IfxAsclin3_SCLK_P33_2_OUT
b0008000 g       *ABS*	00000000 __A9_MEM
80012540 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_42
80004eb4 g     F .text	00000012 IfxAsclin_write32
80011880 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_196
80012aa0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_85
800112e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_151
800107e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_63
80002240 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_18
80002e00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_112
80013000 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_128
80004114 g     F .text	00000076 printfSerial
80012f60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_123
80002da0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_109
800036e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_183
80010720 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_57
80002920 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_73
80000ef8 g     O .rodata	00000014 .hidden __thenan_df
80010ee0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_119
8000c7c4 g     F .text	000000ba _malloc_trim_r
80001408 g       .ctors	00000000 __CTOR_END__
80012de0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_111
80008000 g     O *ABS*	00000000 _SMALL_DATA2_
80010b40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_90
80000520 g     O .rodata	00000010 IfxAsclin2_TX_P02_9_OUT
800048b8 g     F .text	000000aa IfxVadc_getChannelConversionTime
50000000 g       *ABS*	00000000 __DSPR2_START
80003100 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_136
80004524 g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
80002860 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_67
80013b20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_217
80013da0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_237
80011fc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_254
80007e54 g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004b9a g     F .text	00000018 IfxAsclin_getPdFrequency
800113e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_159
80004686 g     F .text	0000001a IfxVadc_getBackgroundScanStatus
80013d40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_234
80001408 g       .dtors	00000000 __DTOR_LIST__
60000000 g       *ABS*	00000000 __DSPR1_START
00001000 g       *ABS*	00000000 __USTACK1_SIZE
80004962 g     F .text	00000052 IfxVadc_resetKernel
80000a20 g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80003200 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_144
80012c80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_100
80000e1c g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
60000000 g     O .CPU1.data	00000024 0x40 osEE_ccb_var_core1
8000f630 g     F .text	00000040 .hidden __nedf2
80004ccc g     F .text	00000052 IfxAsclin_setBaudrateBitFields
80002820 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_65
80003dc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_238
800114e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_167
80005e08 g     F .text	00000044 IfxScuCcu_getPllVcoFrequency
800068e2 g     F .text	000000b4 IfxScuCcu_setSpbFrequency
80012580 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_44
80010dc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_110
800125e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_47
80006d96 g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000c50 g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
80012620 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_49
80012520 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_41
80000b40 g     O .rodata	00000080 IfxPort_cfg_esrMasks
800133c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_158
80012ae0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_87
80000860 g     O .rodata	00000010 IfxAsclin3_RXG_P21_2_IN
80012a80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_84
80012a40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_82
80002e40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_114
80005030 g     F .text	00000010 IfxAsclin_Asc_clearRx
80011d40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_234
80000a90 g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80000ea8 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
80005852 g     F .text	0000002a IfxPort_setESR
80013820 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_193
80000660 g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
80010be0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_95
80010640 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_50
800005a0 g     O .rodata	00000010 IfxAsclin1_TX_P15_0_OUT
80003480 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_164
80013e80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_244
80010120 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_9
80002880 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_68
80010ac0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_86
80010560 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_43
800111a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_141
80011cc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_230
80000a80 g     O .rodata	00000010 IfxAsclin1_CTSA_P20_7_IN
800022c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_22
80013540 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_170
80013be0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_223
80010fe0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_127
80000cf8 g     O .rodata	00000014 IfxScu_REQ3_P10_3_IN
80013760 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_187
80000590 g     O .rodata	00000010 IfxAsclin1_TX_P15_1_OUT
8000a512 g     F .text	0000008c GetElapsedValue
70000430 g     O .data	00000004 _impure_ptr
80011c00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_224
80012900 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_72
800057fa g     F .text	00000028 IfxPort_resetESR
80002100 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_8
80004f0c g     F .text	00000072 IfxAsclin_Asc_isrError
80003ae0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_215
80013120 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_137
80004776 g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
800034a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_165
800119e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_207
80012b80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_92
80012240 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_18
80010e40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_114
80002780 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_60
80010a60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_83
80010500 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_40
80004c00 g     F .text	00000014 IfxAsclin_getSrcPointerRx
8000a1d0 g     F .text	00000062 GetAlarmBase
800005f0 g     O .rodata	00000010 IfxAsclin0_TX_P15_3_OUT
800133e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_159
80004bec g     F .text	00000014 IfxAsclin_getSrcPointerEr
00002000 g       *ABS*	00000000 __CSA1_SIZE
80003fa0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_253
80000540 g     O .rodata	00000010 IfxAsclin1_TX_P33_13_OUT
80000980 g     O .rodata	00000010 IfxAsclin1_RXC_P20_9_IN
80003f40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_250
800096c2 g     F .text	0000001e DisableAllInterrupts
80010360 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_27
5001a600 g     O .CPU2.ustack	00000000 __USTACK2_END
80008038 g     F .text	0000005e Ifx_CircularBuffer_write8
8000510e g     F .text	00000096 IfxAsclin_Asc_isrReceive
80003220 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_145
800058b8 g     F .text	00000090 IfxPort_setGroupModeInput
80008146 g     F .text	000000da Ifx_Fifo_canReadCount
80012040 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_2
00001000 g       *ABS*	00000000 __USTACK_SIZE
800117e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_191
80003600 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_176
80010cc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_102
80009c24 g     F .text	000000ee ChainTask
80002ca0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_101
800029c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_78
80010c00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_96
80010660 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_51
80011340 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_154
80011060 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_131
80011520 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_169
80006dda g     F .text	00000034 IfxScuEru_selectExternalInput
80013a40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_210
80013640 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_178
80006cba g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
80002c60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_99
80011ba0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_221
80012080 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_4
80011c40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_226
80000a60 g     O .rodata	00000010 IfxAsclin2_CTSA_P10_7_IN
5001a600 g       .CPU2.ustack	00000000 __USTACK2_AREA_END
80011a40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_210
800008e0 g     O .rodata	00000010 IfxAsclin2_RXF_P32_6_IN
80013d80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_236
80000760 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
80006576 g     F .text	00000014 IfxScuCcu_initConfig
800101e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_15
80003b80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_220
800028c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_70
800126c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_54
80000430 g     O .rodata	00000010 IfxAsclin3_TX_P21_7_OUT
800047e8 g     F .text	00000066 IfxVadc_initializeFAdcI
80013900 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_200
80003c40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_226
80012160 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_11
800006a0 g     O .rodata	00000010 IfxAsclin2_SLSO_P10_5_OUT
80000c94 g     O .rodata	00000014 IfxScu_REQ8_P33_7_IN
80000400 g     O .rodata	00000010 IfxAsclin3_TX_P32_2_OUT
80012c60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_99
80001300 g       .traptab	00000000 osEE_tc_trap_mmu
80012b60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_91
80012220 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_17
80007fe8 g     F .text	00000050 Ifx_CircularBuffer_read32
80003840 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_194
80004f8c g     F .text	0000009c IfxAsclin_Asc_flushTx
8000a734 g     F .text	000000a4 StartNonAutosarCore
800095b6 g     F .text	00000028 osEE_tc_delay
80000780 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
800010e0 g     O .rodata	00000000 __clear_table
80010460 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_35
80005cee g     F .text	00000064 IfxScuCcu_getPllErayFrequency
80012460 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_35
800107c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_62
80000950 g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
8000adc0 g     F .text	0000001e osEE_task_end
800124c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_38
80003b40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_218
80000730 g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
80012f80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_124
80010700 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_56
80003660 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_179
800009a0 g     O .rodata	00000010 IfxAsclin1_RXA_P15_1_IN
80001400 g       .ctors	00000000 __EH_FRAME_BEGIN__
80000680 g     O .rodata	00000010 IfxAsclin3_SLSO_P00_3_OUT
800024a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_37
800110a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_133
8000b21a g     F .text	00000022 osEE_counter_insert_rel_trigger
80013460 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_163
80005e4c g     F .text	00000024 IfxScuCcu_getSourceFrequency
800005e0 g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000e98 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000d70 g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
80003f00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_248
80003cc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_230
800026a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_53
8000b59a g     F .text	00000020 osEE_change_context_from_task_end
800037e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_191
80011ce0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_231
80003300 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_152
8000a232 g     F .text	000000c8 WaitEvent
80002ea0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_117
80013a00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_208
800117c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_190
80002b40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_90
80005822 g     F .text	00000030 IfxPort_disableEmergencyStop
800137a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_189
800031e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_143
80011f60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_251
80000470 g     O .rodata	00000010 IfxAsclin3_TX_P15_6_OUT
80003a40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_210
80007d04 g     F .text	0000002e IfxVadc_Adc_initGroupConfig
80003ac0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_214
80011fa0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_253
80002cc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_102
80013e00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_240
80003520 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_169
80011320 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_153
00000400 g       *ABS*	00000000 __ISTACK0_SIZE
800115c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_174
80010b20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_89
800105c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_46
8000a59e g     F .text	000000bc IncrementCounter
800024c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_38
800038a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_197
800131a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_141
80012f00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_120
5001b600 g     O .CPU2.ustack	00000000 __USTACK2
80013240 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_146
80012d40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_106
8000b4ae g     F .text	0000005e osEE_alarm_cancel
80010900 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_72
80009598 g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
0001e000 g       *ABS*	00000000 __DSPR1_SIZE
80000020 g       .startup	00000000 BootModeIndex
80010160 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_11
70000024 g     O .data	00000004 __malloc_trim_threshold
800025a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_45
80010180 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_12
80000184 g     O .rodata	0000002c osEE_cdb_var_core0
80002a80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_84
80004682 g     F .text	00000004 IfxVadc_getAdcModuleFrequency
80002620 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_49
80002a00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_80
80010fc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_126
80012800 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_64
8000b23c g     F .text	00000030 osEE_counter_cancel_trigger
800084bc g     F .text	00000186 Ifx_Fifo_write
800122a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_21
8000ee32 g     F .text	000000ca __mdiff
800100e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_7
8000ae2c g     F .text	00000022 osEE_activate_isr2
800023c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_30
80011700 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_184
80013400 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_160
80007964 g     F .text	00000016 IfxVadc_Adc_initChannelConfig
80004b04 g     F .text	00000074 IfxAsclin_getFaFrequency
80010400 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_32
80006892 g     F .text	00000050 IfxScuCcu_setPll2Frequency
80011620 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_177
80013380 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_156
80012ee0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_119
80011300 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_152
80020000 g       .startup	00000000 BootModeHeader1
80009162 g     F .text	0000022e osEE_tc_set_pll_fsource
800047be g     F .text	0000002a IfxVadc_initializeFAdcD
800040a2 g     F .text	00000072 UART_init
80011800 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_192
800059da g     F .text	000000a4 IfxPort_setGroupPadDriver
800112a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_149
0001c000 g       *ABS*	00000000 __DSPR0_SIZE
80013fe0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_255
80012820 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_65
80000e58 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
80013f80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_252
80012360 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_27
80012320 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_25
800120a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_5
800122c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_22
800009d0 g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
80012880 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_68
80004ec6 g     F .text	00000012 IfxAsclin_write8
80006dcc g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
80011360 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_155
80013500 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_168
80001148 g     O .rodata	00000000 __copy_table
00019700 g       *ABS*	00000000 __ISTACK0_OFFSET
80003d20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_233
80004ea0 g     F .text	00000014 IfxAsclin_write16
80011dc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_238
800109a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_77
80010080 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_4
80013aa0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_213
80010a40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_82
80008396 g     F .text	00000036 Ifx_Fifo_clear
80003ee0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_247
80000d0c g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
80003740 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_186
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80013c40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_226
800025c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_46
800102c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_22
80003960 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_203
8000f588 g     F .text	00000010 _exit
80002aa0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_85
80011780 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_188
80001320 g       .traptab	00000000 osEE_tc_trap_protection
80001300 g     F .traptab	00000000 __TRAPTAB
80000d98 g     O .rodata	00000014 IfxScu_REQ11_P20_9_IN
80002500 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_40
80002a20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_81
00002000 g       *ABS*	00000000 __CSA2_SIZE
80006b78 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
800020a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_5
80006c6e g     F .text	00000026 IfxScuEru_disableTriggerPulse
80002c80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_100
80011b00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_216
800072ca g     F .text	000000aa IfxScuWdt_initSafetyWatchdog
80004ee8 g     F .text	00000006 IfxAsclin_Asc_getSendCount
80003060 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_131
8000c750 g     F .text	00000014 strlen
80011900 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_200
0001b700 g       *ABS*	00000000 __ISTACK2_OFFSET
80013dc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_238
80013cc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_230
80004caa g     F .text	00000022 IfxAsclin_setClockSource
80013560 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_171
80013080 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_132
8000f6b0 g     F .text	00000040 .hidden __gedf2
80010820 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_65
80000bc0 g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
80004388 g     F .text	000000a2 initPeripheralsAndERU
800008d0 g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
80003e00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_240
80011c20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_225
80010da0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_109
80000530 g     O .rodata	00000010 IfxAsclin2_TX_P02_0_OUT
80011a80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_212
80013e20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_241
80000cd0 g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
800049d8 g     F .text	00000056 IfxVadc_setArbiterPriority
70000b70 g     O .inttab_cpu2	00000001 __HEAP_END
800121c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_14
800006c0 g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
800038c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_198
80012bc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_94
80011740 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_186
80002f20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_121
6001bc00 g     O .CPU1.csa	00000000 __CSA1
80005f1c g     F .text	00000070 IfxScuCcu_getMaxFrequency
800096e0 g     F .text	00000036 EnableAllInterrupts
80003420 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_161
800006e0 g     O .rodata	00000010 IfxAsclin1_SLSO_P14_3_OUT
800022e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_23
80010440 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_34
80002c20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_97
80012dc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_110
80002640 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_50
80011e60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_243
80013780 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_188
800128e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_71
80004a42 g     F .text	00000044 IfxVadc_startupCalibration
70000894 g     O .bss	00000004 g_vadc
80012120 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_9
80005a7e g     F .text	00000056 IfxPort_setPinMode
80010e80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_116
80000ca8 g     O .rodata	00000014 IfxScu_REQ7_P00_4_IN
8000b816 g     F .text	0000001a osEE_hal_restore_ctx
80004290 g     F .text	00000032 initVADCGroup
80011000 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_128
80011100 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_136
80000720 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_5_OUT
8000bb7c g     F .text	00000040 .hidden __subdf3
80010020 g       .inttab_cpu1	00000000 osEE_tc_core1_isr2_entry_1
800030e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_135
70008000 g     O *ABS*	00000000 _SMALL_DATA_
80004eee g     F .text	00000006 IfxAsclin_Asc_getTxTimeStamp
8000484e g     F .text	0000006a IfxVadc_isPostCalibration
80004272 g     F .text	0000001e initVADCModule
80006b3a g     F .text	00000016 IfxScuEru_clearEventFlag
80007298 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000eb2a g     F .text	00000066 __lo0bits
800109e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_79
80013a80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_212
800139e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_207
80011f00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_248
80012400 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_32
80003940 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_202
80002000 g     F .inttab_cpu0	00002000 __INTTAB0
80002160 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_11
800129a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_77
800021a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_13
800004c0 g     O .rodata	00000010 IfxAsclin2_TX_P33_9_OUT
80003180 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_140
80011960 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_203
80005cbe g     F .text	00000030 IfxScuCcu_getOscFrequency
8000981c g     F .text	00000056 ResumeOSInterrupts
80011a00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_208
80010b00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_88
800105a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_45
80012760 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_59
80011e00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_240
800121a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_13
80004c5e g     F .text	0000004c IfxAsclin_resetModule
80003880 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_196
800108e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_71
80006d72 g     F .text	00000024 IfxScuEru_getInputChannelConfiguration
800007e0 g     O .rodata	00000010 IfxAsclin2_SCLK_P02_4_OUT
80006b28 g     F .text	00000012 IfxScuEru_clearAllEventFlags
80013fc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_254
80003ec0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_246
8000bff6 g     F .text	00000112 .hidden __pack_d
80000aa0 g     O .rodata	00000020 IfxAsclin_cfg_indexMap
80002660 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_51
80013960 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_203
8000a01a g     F .text	00000092 SetAbsAlarm
80013720 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_185
80009872 g     F .text	000002ec StartOS
80000e10 g     O .rodata	0000000c IfxScu_HWCFG1EVR33_P14_5_IN
80000ce4 g     O .rodata	00000014 IfxScu_REQ4_P10_7_IN
80011760 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_187
800029e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_79
8000c286 g     F .text	0000000e free
80000c40 g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000ea66 g     F .text	00000082 __multadd
80013860 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_195
8000ea54 g     F .text	00000012 _Bfree
800132e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_151
80012e40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_114
80000800 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_



Disassembly of section .startup:

80000020 <_start>:
#endif

void _start(void)
{
  /* asm instruction to jump to the core startup */
  osEE_tc_jump_abs(osEE_tc_core0_start);
80000020:	9d 80 21 43 	ja 80008642 <osEE_tc_core0_start>
80000024:	00 90       	ret 

Disassembly of section .traptab:

80001300 <__TRAPTAB>:
80001300:	00 a0       	debug 
80001302:	1d ff ff ff 	j 80001300 <__TRAPTAB>
	...

80001320 <osEE_tc_trap_protection>:
80001320:	00 a0       	debug 
80001322:	1d ff ff ff 	j 80001320 <osEE_tc_trap_protection>
	...

80001340 <osEE_tc_trap_instruction>:
80001340:	00 a0       	debug 
80001342:	1d ff ff ff 	j 80001340 <osEE_tc_trap_instruction>
	...

80001360 <osEE_tc_trap_context>:
80001360:	00 a0       	debug 
80001362:	1d ff ff ff 	j 80001360 <osEE_tc_trap_context>
	...

80001380 <osEE_tc_trap_bus>:
80001380:	00 a0       	debug 
80001382:	1d ff ff ff 	j 80001380 <osEE_tc_trap_bus>
	...

800013a0 <osEE_tc_trap_assertion>:
800013a0:	00 a0       	debug 
800013a2:	1d ff ff ff 	j 800013a0 <osEE_tc_trap_assertion>
	...

800013c0 <osEE_tc_trap_system>:
800013c0:	00 a0       	debug 
800013c2:	1d ff ff ff 	j 800013c0 <osEE_tc_trap_system>
	...

800013e0 <osEE_tc_trap_nmi>:
800013e0:	00 a0       	debug 
800013e2:	1d ff ff ff 	j 800013e0 <osEE_tc_trap_nmi>
	...

Disassembly of section .ctors:

80001400 <__CTOR_LIST__>:
	...

Disassembly of section .dtors:

80001408 <__DTOR_LIST__>:
	...

Disassembly of section .inttab_cpu0:

80002000 <__INTTAB0>:
	...

80002020 <osEE_tc_core0_isr2_entry_1>:
80002020:	0d 00 00 02 	svlcx 
80002024:	82 f4       	mov %d4,-1
80002026:	1d 00 dc 3a 	j 800095de <osEE_tc_isr2_wrapper>
	...

80002040 <osEE_tc_core0_isr2_entry_2>:
80002040:	0d 00 00 02 	svlcx 
80002044:	82 04       	mov %d4,0
80002046:	1d 00 cc 3a 	j 800095de <osEE_tc_isr2_wrapper>
	...

80002060 <osEE_tc_core0_isr_dummy_entry_3>:
80002060:	3c 00       	j 80002060 <osEE_tc_core0_isr_dummy_entry_3>
	...

80002080 <osEE_tc_core0_isr_dummy_entry_4>:
80002080:	3c 00       	j 80002080 <osEE_tc_core0_isr_dummy_entry_4>
	...

800020a0 <osEE_tc_core0_isr_dummy_entry_5>:
800020a0:	3c 00       	j 800020a0 <osEE_tc_core0_isr_dummy_entry_5>
	...

800020c0 <osEE_tc_core0_isr_dummy_entry_6>:
800020c0:	3c 00       	j 800020c0 <osEE_tc_core0_isr_dummy_entry_6>
	...

800020e0 <osEE_tc_core0_isr_dummy_entry_7>:
800020e0:	3c 00       	j 800020e0 <osEE_tc_core0_isr_dummy_entry_7>
	...

80002100 <osEE_tc_core0_isr_dummy_entry_8>:
80002100:	3c 00       	j 80002100 <osEE_tc_core0_isr_dummy_entry_8>
	...

80002120 <osEE_tc_core0_isr_dummy_entry_9>:
80002120:	3c 00       	j 80002120 <osEE_tc_core0_isr_dummy_entry_9>
	...

80002140 <osEE_tc_core0_isr_dummy_entry_10>:
80002140:	3c 00       	j 80002140 <osEE_tc_core0_isr_dummy_entry_10>
	...

80002160 <osEE_tc_core0_isr_dummy_entry_11>:
80002160:	3c 00       	j 80002160 <osEE_tc_core0_isr_dummy_entry_11>
	...

80002180 <osEE_tc_core0_isr_dummy_entry_12>:
80002180:	3c 00       	j 80002180 <osEE_tc_core0_isr_dummy_entry_12>
	...

800021a0 <osEE_tc_core0_isr_dummy_entry_13>:
800021a0:	3c 00       	j 800021a0 <osEE_tc_core0_isr_dummy_entry_13>
	...

800021c0 <osEE_tc_core0_isr_dummy_entry_14>:
800021c0:	3c 00       	j 800021c0 <osEE_tc_core0_isr_dummy_entry_14>
	...

800021e0 <osEE_tc_core0_isr_dummy_entry_15>:
800021e0:	3c 00       	j 800021e0 <osEE_tc_core0_isr_dummy_entry_15>
	...

80002200 <osEE_tc_core0_isr_dummy_entry_16>:
80002200:	3c 00       	j 80002200 <osEE_tc_core0_isr_dummy_entry_16>
	...

80002220 <osEE_tc_core0_isr_dummy_entry_17>:
80002220:	3c 00       	j 80002220 <osEE_tc_core0_isr_dummy_entry_17>
	...

80002240 <osEE_tc_core0_isr_dummy_entry_18>:
80002240:	3c 00       	j 80002240 <osEE_tc_core0_isr_dummy_entry_18>
	...

80002260 <osEE_tc_core0_isr2_entry_19>:
80002260:	0d 00 00 02 	svlcx 
80002264:	82 14       	mov %d4,1
80002266:	1d 00 bc 39 	j 800095de <osEE_tc_isr2_wrapper>
	...

80002280 <osEE_tc_core0_isr_dummy_entry_20>:
80002280:	3c 00       	j 80002280 <osEE_tc_core0_isr_dummy_entry_20>
	...

800022a0 <osEE_tc_core0_isr_dummy_entry_21>:
800022a0:	3c 00       	j 800022a0 <osEE_tc_core0_isr_dummy_entry_21>
	...

800022c0 <osEE_tc_core0_isr_dummy_entry_22>:
800022c0:	3c 00       	j 800022c0 <osEE_tc_core0_isr_dummy_entry_22>
	...

800022e0 <osEE_tc_core0_isr_dummy_entry_23>:
800022e0:	3c 00       	j 800022e0 <osEE_tc_core0_isr_dummy_entry_23>
	...

80002300 <osEE_tc_core0_isr_dummy_entry_24>:
80002300:	3c 00       	j 80002300 <osEE_tc_core0_isr_dummy_entry_24>
	...

80002320 <osEE_tc_core0_isr_dummy_entry_25>:
80002320:	3c 00       	j 80002320 <osEE_tc_core0_isr_dummy_entry_25>
	...

80002340 <osEE_tc_core0_isr_dummy_entry_26>:
80002340:	3c 00       	j 80002340 <osEE_tc_core0_isr_dummy_entry_26>
	...

80002360 <osEE_tc_core0_isr_dummy_entry_27>:
80002360:	3c 00       	j 80002360 <osEE_tc_core0_isr_dummy_entry_27>
	...

80002380 <osEE_tc_core0_isr_dummy_entry_28>:
80002380:	3c 00       	j 80002380 <osEE_tc_core0_isr_dummy_entry_28>
	...

800023a0 <osEE_tc_core0_isr_dummy_entry_29>:
800023a0:	3c 00       	j 800023a0 <osEE_tc_core0_isr_dummy_entry_29>
	...

800023c0 <osEE_tc_core0_isr_dummy_entry_30>:
800023c0:	3c 00       	j 800023c0 <osEE_tc_core0_isr_dummy_entry_30>
	...

800023e0 <osEE_tc_core0_isr_dummy_entry_31>:
800023e0:	3c 00       	j 800023e0 <osEE_tc_core0_isr_dummy_entry_31>
	...

80002400 <osEE_tc_core0_isr_dummy_entry_32>:
80002400:	3c 00       	j 80002400 <osEE_tc_core0_isr_dummy_entry_32>
	...

80002420 <osEE_tc_core0_isr_dummy_entry_33>:
80002420:	3c 00       	j 80002420 <osEE_tc_core0_isr_dummy_entry_33>
	...

80002440 <osEE_tc_core0_isr_dummy_entry_34>:
80002440:	3c 00       	j 80002440 <osEE_tc_core0_isr_dummy_entry_34>
	...

80002460 <osEE_tc_core0_isr_dummy_entry_35>:
80002460:	3c 00       	j 80002460 <osEE_tc_core0_isr_dummy_entry_35>
	...

80002480 <osEE_tc_core0_isr_dummy_entry_36>:
80002480:	3c 00       	j 80002480 <osEE_tc_core0_isr_dummy_entry_36>
	...

800024a0 <osEE_tc_core0_isr_dummy_entry_37>:
800024a0:	3c 00       	j 800024a0 <osEE_tc_core0_isr_dummy_entry_37>
	...

800024c0 <osEE_tc_core0_isr_dummy_entry_38>:
800024c0:	3c 00       	j 800024c0 <osEE_tc_core0_isr_dummy_entry_38>
	...

800024e0 <osEE_tc_core0_isr_dummy_entry_39>:
800024e0:	3c 00       	j 800024e0 <osEE_tc_core0_isr_dummy_entry_39>
	...

80002500 <osEE_tc_core0_isr_dummy_entry_40>:
80002500:	3c 00       	j 80002500 <osEE_tc_core0_isr_dummy_entry_40>
	...

80002520 <osEE_tc_core0_isr_dummy_entry_41>:
80002520:	3c 00       	j 80002520 <osEE_tc_core0_isr_dummy_entry_41>
	...

80002540 <osEE_tc_core0_isr_dummy_entry_42>:
80002540:	3c 00       	j 80002540 <osEE_tc_core0_isr_dummy_entry_42>
	...

80002560 <osEE_tc_core0_isr_dummy_entry_43>:
80002560:	3c 00       	j 80002560 <osEE_tc_core0_isr_dummy_entry_43>
	...

80002580 <osEE_tc_core0_isr_dummy_entry_44>:
80002580:	3c 00       	j 80002580 <osEE_tc_core0_isr_dummy_entry_44>
	...

800025a0 <osEE_tc_core0_isr_dummy_entry_45>:
800025a0:	3c 00       	j 800025a0 <osEE_tc_core0_isr_dummy_entry_45>
	...

800025c0 <osEE_tc_core0_isr_dummy_entry_46>:
800025c0:	3c 00       	j 800025c0 <osEE_tc_core0_isr_dummy_entry_46>
	...

800025e0 <osEE_tc_core0_isr_dummy_entry_47>:
800025e0:	3c 00       	j 800025e0 <osEE_tc_core0_isr_dummy_entry_47>
	...

80002600 <osEE_tc_core0_isr_dummy_entry_48>:
80002600:	3c 00       	j 80002600 <osEE_tc_core0_isr_dummy_entry_48>
	...

80002620 <osEE_tc_core0_isr_dummy_entry_49>:
80002620:	3c 00       	j 80002620 <osEE_tc_core0_isr_dummy_entry_49>
	...

80002640 <osEE_tc_core0_isr_dummy_entry_50>:
80002640:	3c 00       	j 80002640 <osEE_tc_core0_isr_dummy_entry_50>
	...

80002660 <osEE_tc_core0_isr_dummy_entry_51>:
80002660:	3c 00       	j 80002660 <osEE_tc_core0_isr_dummy_entry_51>
	...

80002680 <osEE_tc_core0_isr_dummy_entry_52>:
80002680:	3c 00       	j 80002680 <osEE_tc_core0_isr_dummy_entry_52>
	...

800026a0 <osEE_tc_core0_isr_dummy_entry_53>:
800026a0:	3c 00       	j 800026a0 <osEE_tc_core0_isr_dummy_entry_53>
	...

800026c0 <osEE_tc_core0_isr_dummy_entry_54>:
800026c0:	3c 00       	j 800026c0 <osEE_tc_core0_isr_dummy_entry_54>
	...

800026e0 <osEE_tc_core0_isr_dummy_entry_55>:
800026e0:	3c 00       	j 800026e0 <osEE_tc_core0_isr_dummy_entry_55>
	...

80002700 <osEE_tc_core0_isr_dummy_entry_56>:
80002700:	3c 00       	j 80002700 <osEE_tc_core0_isr_dummy_entry_56>
	...

80002720 <osEE_tc_core0_isr_dummy_entry_57>:
80002720:	3c 00       	j 80002720 <osEE_tc_core0_isr_dummy_entry_57>
	...

80002740 <osEE_tc_core0_isr_dummy_entry_58>:
80002740:	3c 00       	j 80002740 <osEE_tc_core0_isr_dummy_entry_58>
	...

80002760 <osEE_tc_core0_isr_dummy_entry_59>:
80002760:	3c 00       	j 80002760 <osEE_tc_core0_isr_dummy_entry_59>
	...

80002780 <osEE_tc_core0_isr_dummy_entry_60>:
80002780:	3c 00       	j 80002780 <osEE_tc_core0_isr_dummy_entry_60>
	...

800027a0 <osEE_tc_core0_isr_dummy_entry_61>:
800027a0:	3c 00       	j 800027a0 <osEE_tc_core0_isr_dummy_entry_61>
	...

800027c0 <osEE_tc_core0_isr_dummy_entry_62>:
800027c0:	3c 00       	j 800027c0 <osEE_tc_core0_isr_dummy_entry_62>
	...

800027e0 <osEE_tc_core0_isr_dummy_entry_63>:
800027e0:	3c 00       	j 800027e0 <osEE_tc_core0_isr_dummy_entry_63>
	...

80002800 <osEE_tc_core0_isr_dummy_entry_64>:
80002800:	3c 00       	j 80002800 <osEE_tc_core0_isr_dummy_entry_64>
	...

80002820 <osEE_tc_core0_isr_dummy_entry_65>:
80002820:	3c 00       	j 80002820 <osEE_tc_core0_isr_dummy_entry_65>
	...

80002840 <osEE_tc_core0_isr_dummy_entry_66>:
80002840:	3c 00       	j 80002840 <osEE_tc_core0_isr_dummy_entry_66>
	...

80002860 <osEE_tc_core0_isr_dummy_entry_67>:
80002860:	3c 00       	j 80002860 <osEE_tc_core0_isr_dummy_entry_67>
	...

80002880 <osEE_tc_core0_isr_dummy_entry_68>:
80002880:	3c 00       	j 80002880 <osEE_tc_core0_isr_dummy_entry_68>
	...

800028a0 <osEE_tc_core0_isr_dummy_entry_69>:
800028a0:	3c 00       	j 800028a0 <osEE_tc_core0_isr_dummy_entry_69>
	...

800028c0 <osEE_tc_core0_isr_dummy_entry_70>:
800028c0:	3c 00       	j 800028c0 <osEE_tc_core0_isr_dummy_entry_70>
	...

800028e0 <osEE_tc_core0_isr_dummy_entry_71>:
800028e0:	3c 00       	j 800028e0 <osEE_tc_core0_isr_dummy_entry_71>
	...

80002900 <osEE_tc_core0_isr_dummy_entry_72>:
80002900:	3c 00       	j 80002900 <osEE_tc_core0_isr_dummy_entry_72>
	...

80002920 <osEE_tc_core0_isr_dummy_entry_73>:
80002920:	3c 00       	j 80002920 <osEE_tc_core0_isr_dummy_entry_73>
	...

80002940 <osEE_tc_core0_isr_dummy_entry_74>:
80002940:	3c 00       	j 80002940 <osEE_tc_core0_isr_dummy_entry_74>
	...

80002960 <osEE_tc_core0_isr_dummy_entry_75>:
80002960:	3c 00       	j 80002960 <osEE_tc_core0_isr_dummy_entry_75>
	...

80002980 <osEE_tc_core0_isr_dummy_entry_76>:
80002980:	3c 00       	j 80002980 <osEE_tc_core0_isr_dummy_entry_76>
	...

800029a0 <osEE_tc_core0_isr_dummy_entry_77>:
800029a0:	3c 00       	j 800029a0 <osEE_tc_core0_isr_dummy_entry_77>
	...

800029c0 <osEE_tc_core0_isr_dummy_entry_78>:
800029c0:	3c 00       	j 800029c0 <osEE_tc_core0_isr_dummy_entry_78>
	...

800029e0 <osEE_tc_core0_isr_dummy_entry_79>:
800029e0:	3c 00       	j 800029e0 <osEE_tc_core0_isr_dummy_entry_79>
	...

80002a00 <osEE_tc_core0_isr_dummy_entry_80>:
80002a00:	3c 00       	j 80002a00 <osEE_tc_core0_isr_dummy_entry_80>
	...

80002a20 <osEE_tc_core0_isr_dummy_entry_81>:
80002a20:	3c 00       	j 80002a20 <osEE_tc_core0_isr_dummy_entry_81>
	...

80002a40 <osEE_tc_core0_isr_dummy_entry_82>:
80002a40:	3c 00       	j 80002a40 <osEE_tc_core0_isr_dummy_entry_82>
	...

80002a60 <osEE_tc_core0_isr_dummy_entry_83>:
80002a60:	3c 00       	j 80002a60 <osEE_tc_core0_isr_dummy_entry_83>
	...

80002a80 <osEE_tc_core0_isr_dummy_entry_84>:
80002a80:	3c 00       	j 80002a80 <osEE_tc_core0_isr_dummy_entry_84>
	...

80002aa0 <osEE_tc_core0_isr_dummy_entry_85>:
80002aa0:	3c 00       	j 80002aa0 <osEE_tc_core0_isr_dummy_entry_85>
	...

80002ac0 <osEE_tc_core0_isr_dummy_entry_86>:
80002ac0:	3c 00       	j 80002ac0 <osEE_tc_core0_isr_dummy_entry_86>
	...

80002ae0 <osEE_tc_core0_isr_dummy_entry_87>:
80002ae0:	3c 00       	j 80002ae0 <osEE_tc_core0_isr_dummy_entry_87>
	...

80002b00 <osEE_tc_core0_isr_dummy_entry_88>:
80002b00:	3c 00       	j 80002b00 <osEE_tc_core0_isr_dummy_entry_88>
	...

80002b20 <osEE_tc_core0_isr_dummy_entry_89>:
80002b20:	3c 00       	j 80002b20 <osEE_tc_core0_isr_dummy_entry_89>
	...

80002b40 <osEE_tc_core0_isr_dummy_entry_90>:
80002b40:	3c 00       	j 80002b40 <osEE_tc_core0_isr_dummy_entry_90>
	...

80002b60 <osEE_tc_core0_isr_dummy_entry_91>:
80002b60:	3c 00       	j 80002b60 <osEE_tc_core0_isr_dummy_entry_91>
	...

80002b80 <osEE_tc_core0_isr_dummy_entry_92>:
80002b80:	3c 00       	j 80002b80 <osEE_tc_core0_isr_dummy_entry_92>
	...

80002ba0 <osEE_tc_core0_isr_dummy_entry_93>:
80002ba0:	3c 00       	j 80002ba0 <osEE_tc_core0_isr_dummy_entry_93>
	...

80002bc0 <osEE_tc_core0_isr_dummy_entry_94>:
80002bc0:	3c 00       	j 80002bc0 <osEE_tc_core0_isr_dummy_entry_94>
	...

80002be0 <osEE_tc_core0_isr_dummy_entry_95>:
80002be0:	3c 00       	j 80002be0 <osEE_tc_core0_isr_dummy_entry_95>
	...

80002c00 <osEE_tc_core0_isr_dummy_entry_96>:
80002c00:	3c 00       	j 80002c00 <osEE_tc_core0_isr_dummy_entry_96>
	...

80002c20 <osEE_tc_core0_isr_dummy_entry_97>:
80002c20:	3c 00       	j 80002c20 <osEE_tc_core0_isr_dummy_entry_97>
	...

80002c40 <osEE_tc_core0_isr_dummy_entry_98>:
80002c40:	3c 00       	j 80002c40 <osEE_tc_core0_isr_dummy_entry_98>
	...

80002c60 <osEE_tc_core0_isr_dummy_entry_99>:
80002c60:	3c 00       	j 80002c60 <osEE_tc_core0_isr_dummy_entry_99>
	...

80002c80 <osEE_tc_core0_isr_dummy_entry_100>:
80002c80:	3c 00       	j 80002c80 <osEE_tc_core0_isr_dummy_entry_100>
	...

80002ca0 <osEE_tc_core0_isr_dummy_entry_101>:
80002ca0:	3c 00       	j 80002ca0 <osEE_tc_core0_isr_dummy_entry_101>
	...

80002cc0 <osEE_tc_core0_isr_dummy_entry_102>:
80002cc0:	3c 00       	j 80002cc0 <osEE_tc_core0_isr_dummy_entry_102>
	...

80002ce0 <osEE_tc_core0_isr_dummy_entry_103>:
80002ce0:	3c 00       	j 80002ce0 <osEE_tc_core0_isr_dummy_entry_103>
	...

80002d00 <osEE_tc_core0_isr_dummy_entry_104>:
80002d00:	3c 00       	j 80002d00 <osEE_tc_core0_isr_dummy_entry_104>
	...

80002d20 <osEE_tc_core0_isr_dummy_entry_105>:
80002d20:	3c 00       	j 80002d20 <osEE_tc_core0_isr_dummy_entry_105>
	...

80002d40 <osEE_tc_core0_isr_dummy_entry_106>:
80002d40:	3c 00       	j 80002d40 <osEE_tc_core0_isr_dummy_entry_106>
	...

80002d60 <osEE_tc_core0_isr_dummy_entry_107>:
80002d60:	3c 00       	j 80002d60 <osEE_tc_core0_isr_dummy_entry_107>
	...

80002d80 <osEE_tc_core0_isr_dummy_entry_108>:
80002d80:	3c 00       	j 80002d80 <osEE_tc_core0_isr_dummy_entry_108>
	...

80002da0 <osEE_tc_core0_isr_dummy_entry_109>:
80002da0:	3c 00       	j 80002da0 <osEE_tc_core0_isr_dummy_entry_109>
	...

80002dc0 <osEE_tc_core0_isr_dummy_entry_110>:
80002dc0:	3c 00       	j 80002dc0 <osEE_tc_core0_isr_dummy_entry_110>
	...

80002de0 <osEE_tc_core0_isr_dummy_entry_111>:
80002de0:	3c 00       	j 80002de0 <osEE_tc_core0_isr_dummy_entry_111>
	...

80002e00 <osEE_tc_core0_isr_dummy_entry_112>:
80002e00:	3c 00       	j 80002e00 <osEE_tc_core0_isr_dummy_entry_112>
	...

80002e20 <osEE_tc_core0_isr_dummy_entry_113>:
80002e20:	3c 00       	j 80002e20 <osEE_tc_core0_isr_dummy_entry_113>
	...

80002e40 <osEE_tc_core0_isr_dummy_entry_114>:
80002e40:	3c 00       	j 80002e40 <osEE_tc_core0_isr_dummy_entry_114>
	...

80002e60 <osEE_tc_core0_isr_dummy_entry_115>:
80002e60:	3c 00       	j 80002e60 <osEE_tc_core0_isr_dummy_entry_115>
	...

80002e80 <osEE_tc_core0_isr_dummy_entry_116>:
80002e80:	3c 00       	j 80002e80 <osEE_tc_core0_isr_dummy_entry_116>
	...

80002ea0 <osEE_tc_core0_isr_dummy_entry_117>:
80002ea0:	3c 00       	j 80002ea0 <osEE_tc_core0_isr_dummy_entry_117>
	...

80002ec0 <osEE_tc_core0_isr_dummy_entry_118>:
80002ec0:	3c 00       	j 80002ec0 <osEE_tc_core0_isr_dummy_entry_118>
	...

80002ee0 <osEE_tc_core0_isr_dummy_entry_119>:
80002ee0:	3c 00       	j 80002ee0 <osEE_tc_core0_isr_dummy_entry_119>
	...

80002f00 <osEE_tc_core0_isr_dummy_entry_120>:
80002f00:	3c 00       	j 80002f00 <osEE_tc_core0_isr_dummy_entry_120>
	...

80002f20 <osEE_tc_core0_isr_dummy_entry_121>:
80002f20:	3c 00       	j 80002f20 <osEE_tc_core0_isr_dummy_entry_121>
	...

80002f40 <osEE_tc_core0_isr_dummy_entry_122>:
80002f40:	3c 00       	j 80002f40 <osEE_tc_core0_isr_dummy_entry_122>
	...

80002f60 <osEE_tc_core0_isr_dummy_entry_123>:
80002f60:	3c 00       	j 80002f60 <osEE_tc_core0_isr_dummy_entry_123>
	...

80002f80 <osEE_tc_core0_isr_dummy_entry_124>:
80002f80:	3c 00       	j 80002f80 <osEE_tc_core0_isr_dummy_entry_124>
	...

80002fa0 <osEE_tc_core0_isr_dummy_entry_125>:
80002fa0:	3c 00       	j 80002fa0 <osEE_tc_core0_isr_dummy_entry_125>
	...

80002fc0 <osEE_tc_core0_isr_dummy_entry_126>:
80002fc0:	3c 00       	j 80002fc0 <osEE_tc_core0_isr_dummy_entry_126>
	...

80002fe0 <osEE_tc_core0_isr_dummy_entry_127>:
80002fe0:	3c 00       	j 80002fe0 <osEE_tc_core0_isr_dummy_entry_127>
	...

80003000 <osEE_tc_core0_isr_dummy_entry_128>:
80003000:	3c 00       	j 80003000 <osEE_tc_core0_isr_dummy_entry_128>
	...

80003020 <osEE_tc_core0_isr_dummy_entry_129>:
80003020:	3c 00       	j 80003020 <osEE_tc_core0_isr_dummy_entry_129>
	...

80003040 <osEE_tc_core0_isr_dummy_entry_130>:
80003040:	3c 00       	j 80003040 <osEE_tc_core0_isr_dummy_entry_130>
	...

80003060 <osEE_tc_core0_isr_dummy_entry_131>:
80003060:	3c 00       	j 80003060 <osEE_tc_core0_isr_dummy_entry_131>
	...

80003080 <osEE_tc_core0_isr_dummy_entry_132>:
80003080:	3c 00       	j 80003080 <osEE_tc_core0_isr_dummy_entry_132>
	...

800030a0 <osEE_tc_core0_isr_dummy_entry_133>:
800030a0:	3c 00       	j 800030a0 <osEE_tc_core0_isr_dummy_entry_133>
	...

800030c0 <osEE_tc_core0_isr_dummy_entry_134>:
800030c0:	3c 00       	j 800030c0 <osEE_tc_core0_isr_dummy_entry_134>
	...

800030e0 <osEE_tc_core0_isr_dummy_entry_135>:
800030e0:	3c 00       	j 800030e0 <osEE_tc_core0_isr_dummy_entry_135>
	...

80003100 <osEE_tc_core0_isr_dummy_entry_136>:
80003100:	3c 00       	j 80003100 <osEE_tc_core0_isr_dummy_entry_136>
	...

80003120 <osEE_tc_core0_isr_dummy_entry_137>:
80003120:	3c 00       	j 80003120 <osEE_tc_core0_isr_dummy_entry_137>
	...

80003140 <osEE_tc_core0_isr_dummy_entry_138>:
80003140:	3c 00       	j 80003140 <osEE_tc_core0_isr_dummy_entry_138>
	...

80003160 <osEE_tc_core0_isr_dummy_entry_139>:
80003160:	3c 00       	j 80003160 <osEE_tc_core0_isr_dummy_entry_139>
	...

80003180 <osEE_tc_core0_isr_dummy_entry_140>:
80003180:	3c 00       	j 80003180 <osEE_tc_core0_isr_dummy_entry_140>
	...

800031a0 <osEE_tc_core0_isr_dummy_entry_141>:
800031a0:	3c 00       	j 800031a0 <osEE_tc_core0_isr_dummy_entry_141>
	...

800031c0 <osEE_tc_core0_isr_dummy_entry_142>:
800031c0:	3c 00       	j 800031c0 <osEE_tc_core0_isr_dummy_entry_142>
	...

800031e0 <osEE_tc_core0_isr_dummy_entry_143>:
800031e0:	3c 00       	j 800031e0 <osEE_tc_core0_isr_dummy_entry_143>
	...

80003200 <osEE_tc_core0_isr_dummy_entry_144>:
80003200:	3c 00       	j 80003200 <osEE_tc_core0_isr_dummy_entry_144>
	...

80003220 <osEE_tc_core0_isr_dummy_entry_145>:
80003220:	3c 00       	j 80003220 <osEE_tc_core0_isr_dummy_entry_145>
	...

80003240 <osEE_tc_core0_isr_dummy_entry_146>:
80003240:	3c 00       	j 80003240 <osEE_tc_core0_isr_dummy_entry_146>
	...

80003260 <osEE_tc_core0_isr_dummy_entry_147>:
80003260:	3c 00       	j 80003260 <osEE_tc_core0_isr_dummy_entry_147>
	...

80003280 <osEE_tc_core0_isr_dummy_entry_148>:
80003280:	3c 00       	j 80003280 <osEE_tc_core0_isr_dummy_entry_148>
	...

800032a0 <osEE_tc_core0_isr_dummy_entry_149>:
800032a0:	3c 00       	j 800032a0 <osEE_tc_core0_isr_dummy_entry_149>
	...

800032c0 <osEE_tc_core0_isr_dummy_entry_150>:
800032c0:	3c 00       	j 800032c0 <osEE_tc_core0_isr_dummy_entry_150>
	...

800032e0 <osEE_tc_core0_isr_dummy_entry_151>:
800032e0:	3c 00       	j 800032e0 <osEE_tc_core0_isr_dummy_entry_151>
	...

80003300 <osEE_tc_core0_isr_dummy_entry_152>:
80003300:	3c 00       	j 80003300 <osEE_tc_core0_isr_dummy_entry_152>
	...

80003320 <osEE_tc_core0_isr_dummy_entry_153>:
80003320:	3c 00       	j 80003320 <osEE_tc_core0_isr_dummy_entry_153>
	...

80003340 <osEE_tc_core0_isr_dummy_entry_154>:
80003340:	3c 00       	j 80003340 <osEE_tc_core0_isr_dummy_entry_154>
	...

80003360 <osEE_tc_core0_isr_dummy_entry_155>:
80003360:	3c 00       	j 80003360 <osEE_tc_core0_isr_dummy_entry_155>
	...

80003380 <osEE_tc_core0_isr_dummy_entry_156>:
80003380:	3c 00       	j 80003380 <osEE_tc_core0_isr_dummy_entry_156>
	...

800033a0 <osEE_tc_core0_isr_dummy_entry_157>:
800033a0:	3c 00       	j 800033a0 <osEE_tc_core0_isr_dummy_entry_157>
	...

800033c0 <osEE_tc_core0_isr_dummy_entry_158>:
800033c0:	3c 00       	j 800033c0 <osEE_tc_core0_isr_dummy_entry_158>
	...

800033e0 <osEE_tc_core0_isr_dummy_entry_159>:
800033e0:	3c 00       	j 800033e0 <osEE_tc_core0_isr_dummy_entry_159>
	...

80003400 <osEE_tc_core0_isr_dummy_entry_160>:
80003400:	3c 00       	j 80003400 <osEE_tc_core0_isr_dummy_entry_160>
	...

80003420 <osEE_tc_core0_isr_dummy_entry_161>:
80003420:	3c 00       	j 80003420 <osEE_tc_core0_isr_dummy_entry_161>
	...

80003440 <osEE_tc_core0_isr_dummy_entry_162>:
80003440:	3c 00       	j 80003440 <osEE_tc_core0_isr_dummy_entry_162>
	...

80003460 <osEE_tc_core0_isr_dummy_entry_163>:
80003460:	3c 00       	j 80003460 <osEE_tc_core0_isr_dummy_entry_163>
	...

80003480 <osEE_tc_core0_isr_dummy_entry_164>:
80003480:	3c 00       	j 80003480 <osEE_tc_core0_isr_dummy_entry_164>
	...

800034a0 <osEE_tc_core0_isr_dummy_entry_165>:
800034a0:	3c 00       	j 800034a0 <osEE_tc_core0_isr_dummy_entry_165>
	...

800034c0 <osEE_tc_core0_isr_dummy_entry_166>:
800034c0:	3c 00       	j 800034c0 <osEE_tc_core0_isr_dummy_entry_166>
	...

800034e0 <osEE_tc_core0_isr_dummy_entry_167>:
800034e0:	3c 00       	j 800034e0 <osEE_tc_core0_isr_dummy_entry_167>
	...

80003500 <osEE_tc_core0_isr_dummy_entry_168>:
80003500:	3c 00       	j 80003500 <osEE_tc_core0_isr_dummy_entry_168>
	...

80003520 <osEE_tc_core0_isr_dummy_entry_169>:
80003520:	3c 00       	j 80003520 <osEE_tc_core0_isr_dummy_entry_169>
	...

80003540 <osEE_tc_core0_isr_dummy_entry_170>:
80003540:	3c 00       	j 80003540 <osEE_tc_core0_isr_dummy_entry_170>
	...

80003560 <osEE_tc_core0_isr_dummy_entry_171>:
80003560:	3c 00       	j 80003560 <osEE_tc_core0_isr_dummy_entry_171>
	...

80003580 <osEE_tc_core0_isr_dummy_entry_172>:
80003580:	3c 00       	j 80003580 <osEE_tc_core0_isr_dummy_entry_172>
	...

800035a0 <osEE_tc_core0_isr_dummy_entry_173>:
800035a0:	3c 00       	j 800035a0 <osEE_tc_core0_isr_dummy_entry_173>
	...

800035c0 <osEE_tc_core0_isr_dummy_entry_174>:
800035c0:	3c 00       	j 800035c0 <osEE_tc_core0_isr_dummy_entry_174>
	...

800035e0 <osEE_tc_core0_isr_dummy_entry_175>:
800035e0:	3c 00       	j 800035e0 <osEE_tc_core0_isr_dummy_entry_175>
	...

80003600 <osEE_tc_core0_isr_dummy_entry_176>:
80003600:	3c 00       	j 80003600 <osEE_tc_core0_isr_dummy_entry_176>
	...

80003620 <osEE_tc_core0_isr_dummy_entry_177>:
80003620:	3c 00       	j 80003620 <osEE_tc_core0_isr_dummy_entry_177>
	...

80003640 <osEE_tc_core0_isr_dummy_entry_178>:
80003640:	3c 00       	j 80003640 <osEE_tc_core0_isr_dummy_entry_178>
	...

80003660 <osEE_tc_core0_isr_dummy_entry_179>:
80003660:	3c 00       	j 80003660 <osEE_tc_core0_isr_dummy_entry_179>
	...

80003680 <osEE_tc_core0_isr_dummy_entry_180>:
80003680:	3c 00       	j 80003680 <osEE_tc_core0_isr_dummy_entry_180>
	...

800036a0 <osEE_tc_core0_isr_dummy_entry_181>:
800036a0:	3c 00       	j 800036a0 <osEE_tc_core0_isr_dummy_entry_181>
	...

800036c0 <osEE_tc_core0_isr_dummy_entry_182>:
800036c0:	3c 00       	j 800036c0 <osEE_tc_core0_isr_dummy_entry_182>
	...

800036e0 <osEE_tc_core0_isr_dummy_entry_183>:
800036e0:	3c 00       	j 800036e0 <osEE_tc_core0_isr_dummy_entry_183>
	...

80003700 <osEE_tc_core0_isr_dummy_entry_184>:
80003700:	3c 00       	j 80003700 <osEE_tc_core0_isr_dummy_entry_184>
	...

80003720 <osEE_tc_core0_isr_dummy_entry_185>:
80003720:	3c 00       	j 80003720 <osEE_tc_core0_isr_dummy_entry_185>
	...

80003740 <osEE_tc_core0_isr_dummy_entry_186>:
80003740:	3c 00       	j 80003740 <osEE_tc_core0_isr_dummy_entry_186>
	...

80003760 <osEE_tc_core0_isr_dummy_entry_187>:
80003760:	3c 00       	j 80003760 <osEE_tc_core0_isr_dummy_entry_187>
	...

80003780 <osEE_tc_core0_isr_dummy_entry_188>:
80003780:	3c 00       	j 80003780 <osEE_tc_core0_isr_dummy_entry_188>
	...

800037a0 <osEE_tc_core0_isr_dummy_entry_189>:
800037a0:	3c 00       	j 800037a0 <osEE_tc_core0_isr_dummy_entry_189>
	...

800037c0 <osEE_tc_core0_isr_dummy_entry_190>:
800037c0:	3c 00       	j 800037c0 <osEE_tc_core0_isr_dummy_entry_190>
	...

800037e0 <osEE_tc_core0_isr_dummy_entry_191>:
800037e0:	3c 00       	j 800037e0 <osEE_tc_core0_isr_dummy_entry_191>
	...

80003800 <osEE_tc_core0_isr_dummy_entry_192>:
80003800:	3c 00       	j 80003800 <osEE_tc_core0_isr_dummy_entry_192>
	...

80003820 <osEE_tc_core0_isr_dummy_entry_193>:
80003820:	3c 00       	j 80003820 <osEE_tc_core0_isr_dummy_entry_193>
	...

80003840 <osEE_tc_core0_isr_dummy_entry_194>:
80003840:	3c 00       	j 80003840 <osEE_tc_core0_isr_dummy_entry_194>
	...

80003860 <osEE_tc_core0_isr_dummy_entry_195>:
80003860:	3c 00       	j 80003860 <osEE_tc_core0_isr_dummy_entry_195>
	...

80003880 <osEE_tc_core0_isr_dummy_entry_196>:
80003880:	3c 00       	j 80003880 <osEE_tc_core0_isr_dummy_entry_196>
	...

800038a0 <osEE_tc_core0_isr_dummy_entry_197>:
800038a0:	3c 00       	j 800038a0 <osEE_tc_core0_isr_dummy_entry_197>
	...

800038c0 <osEE_tc_core0_isr_dummy_entry_198>:
800038c0:	3c 00       	j 800038c0 <osEE_tc_core0_isr_dummy_entry_198>
	...

800038e0 <osEE_tc_core0_isr_dummy_entry_199>:
800038e0:	3c 00       	j 800038e0 <osEE_tc_core0_isr_dummy_entry_199>
	...

80003900 <osEE_tc_core0_isr_dummy_entry_200>:
80003900:	3c 00       	j 80003900 <osEE_tc_core0_isr_dummy_entry_200>
	...

80003920 <osEE_tc_core0_isr_dummy_entry_201>:
80003920:	3c 00       	j 80003920 <osEE_tc_core0_isr_dummy_entry_201>
	...

80003940 <osEE_tc_core0_isr_dummy_entry_202>:
80003940:	3c 00       	j 80003940 <osEE_tc_core0_isr_dummy_entry_202>
	...

80003960 <osEE_tc_core0_isr_dummy_entry_203>:
80003960:	3c 00       	j 80003960 <osEE_tc_core0_isr_dummy_entry_203>
	...

80003980 <osEE_tc_core0_isr_dummy_entry_204>:
80003980:	3c 00       	j 80003980 <osEE_tc_core0_isr_dummy_entry_204>
	...

800039a0 <osEE_tc_core0_isr_dummy_entry_205>:
800039a0:	3c 00       	j 800039a0 <osEE_tc_core0_isr_dummy_entry_205>
	...

800039c0 <osEE_tc_core0_isr_dummy_entry_206>:
800039c0:	3c 00       	j 800039c0 <osEE_tc_core0_isr_dummy_entry_206>
	...

800039e0 <osEE_tc_core0_isr_dummy_entry_207>:
800039e0:	3c 00       	j 800039e0 <osEE_tc_core0_isr_dummy_entry_207>
	...

80003a00 <osEE_tc_core0_isr_dummy_entry_208>:
80003a00:	3c 00       	j 80003a00 <osEE_tc_core0_isr_dummy_entry_208>
	...

80003a20 <osEE_tc_core0_isr_dummy_entry_209>:
80003a20:	3c 00       	j 80003a20 <osEE_tc_core0_isr_dummy_entry_209>
	...

80003a40 <osEE_tc_core0_isr_dummy_entry_210>:
80003a40:	3c 00       	j 80003a40 <osEE_tc_core0_isr_dummy_entry_210>
	...

80003a60 <osEE_tc_core0_isr_dummy_entry_211>:
80003a60:	3c 00       	j 80003a60 <osEE_tc_core0_isr_dummy_entry_211>
	...

80003a80 <osEE_tc_core0_isr_dummy_entry_212>:
80003a80:	3c 00       	j 80003a80 <osEE_tc_core0_isr_dummy_entry_212>
	...

80003aa0 <osEE_tc_core0_isr_dummy_entry_213>:
80003aa0:	3c 00       	j 80003aa0 <osEE_tc_core0_isr_dummy_entry_213>
	...

80003ac0 <osEE_tc_core0_isr_dummy_entry_214>:
80003ac0:	3c 00       	j 80003ac0 <osEE_tc_core0_isr_dummy_entry_214>
	...

80003ae0 <osEE_tc_core0_isr_dummy_entry_215>:
80003ae0:	3c 00       	j 80003ae0 <osEE_tc_core0_isr_dummy_entry_215>
	...

80003b00 <osEE_tc_core0_isr_dummy_entry_216>:
80003b00:	3c 00       	j 80003b00 <osEE_tc_core0_isr_dummy_entry_216>
	...

80003b20 <osEE_tc_core0_isr_dummy_entry_217>:
80003b20:	3c 00       	j 80003b20 <osEE_tc_core0_isr_dummy_entry_217>
	...

80003b40 <osEE_tc_core0_isr_dummy_entry_218>:
80003b40:	3c 00       	j 80003b40 <osEE_tc_core0_isr_dummy_entry_218>
	...

80003b60 <osEE_tc_core0_isr_dummy_entry_219>:
80003b60:	3c 00       	j 80003b60 <osEE_tc_core0_isr_dummy_entry_219>
	...

80003b80 <osEE_tc_core0_isr_dummy_entry_220>:
80003b80:	3c 00       	j 80003b80 <osEE_tc_core0_isr_dummy_entry_220>
	...

80003ba0 <osEE_tc_core0_isr_dummy_entry_221>:
80003ba0:	3c 00       	j 80003ba0 <osEE_tc_core0_isr_dummy_entry_221>
	...

80003bc0 <osEE_tc_core0_isr_dummy_entry_222>:
80003bc0:	3c 00       	j 80003bc0 <osEE_tc_core0_isr_dummy_entry_222>
	...

80003be0 <osEE_tc_core0_isr_dummy_entry_223>:
80003be0:	3c 00       	j 80003be0 <osEE_tc_core0_isr_dummy_entry_223>
	...

80003c00 <osEE_tc_core0_isr_dummy_entry_224>:
80003c00:	3c 00       	j 80003c00 <osEE_tc_core0_isr_dummy_entry_224>
	...

80003c20 <osEE_tc_core0_isr_dummy_entry_225>:
80003c20:	3c 00       	j 80003c20 <osEE_tc_core0_isr_dummy_entry_225>
	...

80003c40 <osEE_tc_core0_isr_dummy_entry_226>:
80003c40:	3c 00       	j 80003c40 <osEE_tc_core0_isr_dummy_entry_226>
	...

80003c60 <osEE_tc_core0_isr_dummy_entry_227>:
80003c60:	3c 00       	j 80003c60 <osEE_tc_core0_isr_dummy_entry_227>
	...

80003c80 <osEE_tc_core0_isr_dummy_entry_228>:
80003c80:	3c 00       	j 80003c80 <osEE_tc_core0_isr_dummy_entry_228>
	...

80003ca0 <osEE_tc_core0_isr_dummy_entry_229>:
80003ca0:	3c 00       	j 80003ca0 <osEE_tc_core0_isr_dummy_entry_229>
	...

80003cc0 <osEE_tc_core0_isr_dummy_entry_230>:
80003cc0:	3c 00       	j 80003cc0 <osEE_tc_core0_isr_dummy_entry_230>
	...

80003ce0 <osEE_tc_core0_isr_dummy_entry_231>:
80003ce0:	3c 00       	j 80003ce0 <osEE_tc_core0_isr_dummy_entry_231>
	...

80003d00 <osEE_tc_core0_isr_dummy_entry_232>:
80003d00:	3c 00       	j 80003d00 <osEE_tc_core0_isr_dummy_entry_232>
	...

80003d20 <osEE_tc_core0_isr_dummy_entry_233>:
80003d20:	3c 00       	j 80003d20 <osEE_tc_core0_isr_dummy_entry_233>
	...

80003d40 <osEE_tc_core0_isr_dummy_entry_234>:
80003d40:	3c 00       	j 80003d40 <osEE_tc_core0_isr_dummy_entry_234>
	...

80003d60 <osEE_tc_core0_isr_dummy_entry_235>:
80003d60:	3c 00       	j 80003d60 <osEE_tc_core0_isr_dummy_entry_235>
	...

80003d80 <osEE_tc_core0_isr_dummy_entry_236>:
80003d80:	3c 00       	j 80003d80 <osEE_tc_core0_isr_dummy_entry_236>
	...

80003da0 <osEE_tc_core0_isr_dummy_entry_237>:
80003da0:	3c 00       	j 80003da0 <osEE_tc_core0_isr_dummy_entry_237>
	...

80003dc0 <osEE_tc_core0_isr_dummy_entry_238>:
80003dc0:	3c 00       	j 80003dc0 <osEE_tc_core0_isr_dummy_entry_238>
	...

80003de0 <osEE_tc_core0_isr_dummy_entry_239>:
80003de0:	3c 00       	j 80003de0 <osEE_tc_core0_isr_dummy_entry_239>
	...

80003e00 <osEE_tc_core0_isr_dummy_entry_240>:
80003e00:	3c 00       	j 80003e00 <osEE_tc_core0_isr_dummy_entry_240>
	...

80003e20 <osEE_tc_core0_isr_dummy_entry_241>:
80003e20:	3c 00       	j 80003e20 <osEE_tc_core0_isr_dummy_entry_241>
	...

80003e40 <osEE_tc_core0_isr_dummy_entry_242>:
80003e40:	3c 00       	j 80003e40 <osEE_tc_core0_isr_dummy_entry_242>
	...

80003e60 <osEE_tc_core0_isr_dummy_entry_243>:
80003e60:	3c 00       	j 80003e60 <osEE_tc_core0_isr_dummy_entry_243>
	...

80003e80 <osEE_tc_core0_isr_dummy_entry_244>:
80003e80:	3c 00       	j 80003e80 <osEE_tc_core0_isr_dummy_entry_244>
	...

80003ea0 <osEE_tc_core0_isr_dummy_entry_245>:
80003ea0:	3c 00       	j 80003ea0 <osEE_tc_core0_isr_dummy_entry_245>
	...

80003ec0 <osEE_tc_core0_isr_dummy_entry_246>:
80003ec0:	3c 00       	j 80003ec0 <osEE_tc_core0_isr_dummy_entry_246>
	...

80003ee0 <osEE_tc_core0_isr_dummy_entry_247>:
80003ee0:	3c 00       	j 80003ee0 <osEE_tc_core0_isr_dummy_entry_247>
	...

80003f00 <osEE_tc_core0_isr_dummy_entry_248>:
80003f00:	3c 00       	j 80003f00 <osEE_tc_core0_isr_dummy_entry_248>
	...

80003f20 <osEE_tc_core0_isr_dummy_entry_249>:
80003f20:	3c 00       	j 80003f20 <osEE_tc_core0_isr_dummy_entry_249>
	...

80003f40 <osEE_tc_core0_isr_dummy_entry_250>:
80003f40:	3c 00       	j 80003f40 <osEE_tc_core0_isr_dummy_entry_250>
	...

80003f60 <osEE_tc_core0_isr_dummy_entry_251>:
80003f60:	3c 00       	j 80003f60 <osEE_tc_core0_isr_dummy_entry_251>
	...

80003f80 <osEE_tc_core0_isr_dummy_entry_252>:
80003f80:	3c 00       	j 80003f80 <osEE_tc_core0_isr_dummy_entry_252>
	...

80003fa0 <osEE_tc_core0_isr_dummy_entry_253>:
80003fa0:	3c 00       	j 80003fa0 <osEE_tc_core0_isr_dummy_entry_253>
	...

80003fc0 <osEE_tc_core0_isr_dummy_entry_254>:
80003fc0:	3c 00       	j 80003fc0 <osEE_tc_core0_isr_dummy_entry_254>
	...

80003fe0 <osEE_tc_core0_isr_dummy_entry_255>:
80003fe0:	3c 00       	j 80003fe0 <osEE_tc_core0_isr_dummy_entry_255>
	...

Disassembly of section .text:

80004000 <TimerISR>:
#include "bsw.h"
volatile unsigned long shared = 0;

ISR2(TimerISR)
{
    osEE_tc_stm_set_sr0_next_match(1000U);
80004000:	3b 80 3e 40 	mov %d4,1000
80004004:	6d 00 74 2a 	call 800094ec <osEE_tc_stm_set_sr0_next_match>
    IncrementCounter(myCounter);
80004008:	82 04       	mov %d4,0
8000400a:	1d 00 ca 32 	j 8000a59e <IncrementCounter>

8000400e <FuncTask1>:
}

TASK(Task1)
{
    unsigned long i;
    printfSerial("Task1 Begins...\n");
8000400e:	91 00 00 48 	movh.a %a4,32768
    osEE_tc_stm_set_sr0_next_match(1000U);
    IncrementCounter(myCounter);
}

TASK(Task1)
{
80004012:	20 08       	sub.a %sp,8
    unsigned long i;
    printfSerial("Task1 Begins...\n");
80004014:	d9 44 28 00 	lea %a4,[%a4]40
80004018:	6d 00 7e 00 	call 80004114 <printfSerial>
    for (i = 0; i < 20000000; i++) {
        shared++;
8000401c:	91 00 00 c7 	movh.a %a12,28672
80004020:	91 10 13 f0 	movh.a %a15,305
80004024:	d9 cc a4 10 	lea %a12,[%a12]2148 <70000864 <shared>>
80004028:	d9 ff ff 32 	lea %a15,[%a15]11519 <1312cff <__DSPR1_SIZE+0x12f4cff>>
8000402c:	4c c0       	ld.w %d15,[%a12]0
8000402e:	c2 1f       	add %d15,1
80004030:	6c c0       	st.w [%a12]0,%d15
80004032:	fc fd       	loop %a15,8000402c <FuncTask1+0x1e>
    }
    printfSerial("Added 20000000 to shared\n");
80004034:	91 00 00 48 	movh.a %a4,32768
80004038:	d9 44 39 00 	lea %a4,[%a4]57 <80000039 <_start+0x19>>
8000403c:	6d 00 6c 00 	call 80004114 <printfSerial>
    printfSerial("counter = %lu\n", shared);
80004040:	4c c0       	ld.w %d15,[%a12]0
80004042:	91 00 00 48 	movh.a %a4,32768
80004046:	78 00       	st.w [%sp]0,%d15
80004048:	d9 44 13 10 	lea %a4,[%a4]83 <80000053 <_start+0x33>>
8000404c:	6d 00 64 00 	call 80004114 <printfSerial>
    printfSerial("Task1 Finishes...\n");
80004050:	91 00 00 48 	movh.a %a4,32768
80004054:	d9 44 22 10 	lea %a4,[%a4]98 <80000062 <_start+0x42>>
80004058:	6d 00 5e 00 	call 80004114 <printfSerial>
    TerminateTask();
}
8000405c:	d9 aa 08 00 	lea %sp,[%sp]8
        shared++;
    }
    printfSerial("Added 20000000 to shared\n");
    printfSerial("counter = %lu\n", shared);
    printfSerial("Task1 Finishes...\n");
    TerminateTask();
80004060:	1d 00 59 2e 	j 80009d12 <TerminateTask>

80004064 <FuncTask2>:
}

TASK(Task2)
{
    static unsigned long i = 0;
    if (i < 500) {
80004064:	91 00 00 f7 	movh.a %a15,28672
80004068:	19 ff a0 10 	ld.w %d15,[%a15]2144 <70000860 <i.15855>>
8000406c:	8b 4f bf 22 	ge.u %d2,%d15,500
80004070:	f6 29       	jnz %d2,80004082 <FuncTask2+0x1e>
        shared++;
80004072:	91 00 00 27 	movh.a %a2,28672
80004076:	19 2f a4 10 	ld.w %d15,[%a2]2148 <70000864 <shared>>
8000407a:	c2 1f       	add %d15,1
8000407c:	59 2f a4 10 	st.w [%a2]2148 <70000864 <shared>>,%d15
80004080:	3c 0a       	j 80004094 <FuncTask2+0x30>
    } else if (i == 500) {
80004082:	3b 40 1f 20 	mov %d2,500
80004086:	7e 27       	jne %d15,%d2,80004094 <FuncTask2+0x30>
        printfSerial("Added 500 to shared\n");
80004088:	91 00 00 48 	movh.a %a4,32768
8000408c:	d9 44 35 10 	lea %a4,[%a4]117 <80000075 <_start+0x55>>
80004090:	6d 00 42 00 	call 80004114 <printfSerial>
    }
    i++;
80004094:	19 ff a0 10 	ld.w %d15,[%a15]2144 <70000860 <i.15855>>
80004098:	c2 1f       	add %d15,1
8000409a:	59 ff a0 10 	st.w [%a15]2144 <70000860 <i.15855>>,%d15
    TerminateTask();
8000409e:	1d 00 3a 2e 	j 80009d12 <TerminateTask>

800040a2 <UART_init>:
                                        IfxVadc_ChannelId_6,  /* AN38: channel 6 of group 4                         */
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void UART_init(void)
{
800040a2:	20 60       	sub.a %sp,96

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800040a4:	d9 a4 24 00 	lea %a4,[%sp]36
800040a8:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x3fff8900>
    ascConfig.baudrate.prescaler    = 1;
800040ac:	82 1f       	mov %d15,1

void UART_init(void)
{

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800040ae:	6d 00 73 0a 	call 80005594 <IfxAsclin_Asc_initModuleConfig>
    ascConfig.baudrate.prescaler    = 1;
800040b2:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
800040b6:	7b 10 7e f4 	movh %d15,18401
800040ba:	78 0a       	st.w [%sp]40,%d15
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
800040bc:	82 3f       	mov %d15,3
800040be:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;
800040c2:	da 13       	mov %d15,19
800040c4:	f9 af 00 10 	st.h [%sp]64,%d15


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800040c8:	4d c0 e1 ff 	mfcr %d15,$core_id
    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800040cc:	7b 00 00 28 	movh %d2,32768
800040d0:	60 23       	mov.a %a3,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800040d2:	37 0f 63 f0 	extr.u %d15,%d15,0,3
800040d6:	d9 af 04 00 	lea %a15,[%sp]4
800040da:	40 f4       	mov.aa %a4,%a15
800040dc:	d9 32 0c 20 	lea %a2,[%a3]140
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
800040e0:	e9 af 06 10 	st.b [%sp]70,%d15
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800040e4:	a0 33       	mov.a %a3,3
800040e6:	09 22 48 01 	ld.d %e2,[%a2+]8
800040ea:	89 42 48 01 	st.d [%a4+]8,%e2
800040ee:	fc 3c       	loop %a3,800040e6 <UART_init+0x44>

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
800040f0:	7b 00 00 f7 	movh %d15,28672
800040f4:	1b 4f 8a f0 	addi %d15,%d15,2212
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
800040f8:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
800040fc:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
800040fe:	d9 44 b8 b0 	lea %a4,[%a4]2808 <70000af8 <g_AsclinAsc+0x254>>
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004102:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004106:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
8000410a:	f9 af 0e 10 	st.h [%sp]78,%d15
        &IfxAsclin3_RXD_P32_2_IN, IfxPort_InputMode_pullUp,        /* Rx pin */
        NULL_PTR,                     IfxPort_OutputMode_pushPull,     /* RTS pin not used */
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
8000410e:	f8 12       	st.a [%sp]72,%a15
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004110:	1d 00 6b 08 	j 800051e6 <IfxAsclin_Asc_initModule>

80004114 <printfSerial>:
    //printf("Asclin Asc is initialised\n");
}


void printfSerial(const char *fmt,...)
{
80004114:	20 e8       	sub.a %sp,232
    GetSpinlock(S1);
80004116:	82 04       	mov %d4,0
    //printf("Asclin Asc is initialised\n");
}


void printfSerial(const char *fmt,...)
{
80004118:	40 4f       	mov.aa %a15,%a4
    GetSpinlock(S1);
8000411a:	6d 00 df 33 	call 8000a8d8 <GetSpinlock>
//    EnableAllInterrupts();
    char buf[LEN_BUF];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, LEN_BUF, fmt, args);
8000411e:	40 f5       	mov.aa %a5,%a15
80004120:	d9 a4 28 10 	lea %a4,[%sp]104
80004124:	3b 00 08 40 	mov %d4,128
80004128:	d9 a6 28 30 	lea %a6,[%sp]232
8000412c:	6d 00 41 43 	call 8000c7ae <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
80004130:	d9 a4 28 10 	lea %a4,[%sp]104
80004134:	6d 00 0e 43 	call 8000c750 <strlen>
80004138:	91 00 00 f7 	movh.a %a15,28672
8000413c:	d9 ff a4 20 	lea %a15,[%a15]2212 <700008a4 <g_AsclinAsc>>
80004140:	f9 f2 3a 90 	st.h [%a15]634 <7000027a <__malloc_av_+0x252>>,%d2
    unsigned int i =0;
80004144:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
80004146:	d9 a4 28 10 	lea %a4,[%sp]104
8000414a:	6d 00 03 43 	call 8000c750 <strlen>
8000414e:	7f 2f 0c 80 	jge.u %d15,%d2,80004166 <printfSerial+0x52>
        txData[i] = buf[i];
80004152:	d9 a3 04 00 	lea %a3,[%sp]4
80004156:	10 32       	addsc.a %a2,%a3,%d15,0
80004158:	d9 a3 28 10 	lea %a3,[%sp]104
8000415c:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
8000415e:	c2 1f       	add %d15,1
        txData[i] = buf[i];
80004160:	08 02       	ld.bu %d2,[%a15]0
80004162:	34 22       	st.b [%a2],%d2
80004164:	3c f1       	j 80004146 <printfSerial+0x32>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
80004166:	82 f4       	mov %d4,-1
80004168:	91 00 00 47 	movh.a %a4,28672
8000416c:	91 00 00 67 	movh.a %a6,28672
80004170:	9b 04 00 58 	addih %d5,%d4,32768
80004174:	d9 44 b8 b0 	lea %a4,[%a4]2808 <70000af8 <g_AsclinAsc+0x254>>
80004178:	d9 a5 04 00 	lea %a5,[%sp]4 <70000af8 <g_AsclinAsc+0x254>>
8000417c:	d9 66 9e c0 	lea %a6,[%a6]2846 <70000b1e <g_AsclinAsc+0x27a>>
80004180:	6d 00 72 0a 	call 80005664 <IfxAsclin_Asc_write>
    ReleaseSpinlock(S1);
80004184:	82 04       	mov %d4,0
80004186:	1d 00 09 34 	j 8000a998 <ReleaseSpinlock>

8000418a <mdelay>:

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000418a:	85 fa 10 00 	ld.w %d10,f0000010 <_SMALL_DATA4_+0x3fff8010>
}

void mdelay(unsigned long delay_ms)
{
8000418e:	02 4b       	mov %d11,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80004190:	85 fc 2c 00 	ld.w %d12,f000002c <_SMALL_DATA4_+0x3fff802c>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80004194:	6d 00 5c 0e 	call 80005e4c <IfxScuCcu_getSourceFrequency>
80004198:	91 30 00 ff 	movh.a %a15,61443
8000419c:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800041a0:	4c f0       	ld.w %d15,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800041a2:	53 1a 40 80 	mul.u %e8,%d10,1
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800041a6:	0b ac 10 48 	mov %e4,%d12,%d10
800041aa:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800041ae:	a6 95       	or %d5,%d9
800041b0:	02 28       	mov %d8,%d2
800041b2:	6d 00 bc 3b 	call 8000b92a <__floatundisf>
800041b6:	4b 0f 41 f1 	itof %d15,%d15
800041ba:	7b a0 47 a4 	movh %d10,17530
800041be:	4b f8 51 f0 	div.f %d15,%d8,%d15
800041c2:	40 fc       	mov.aa %a12,%a15
800041c4:	40 fd       	mov.aa %a13,%a15
800041c6:	4b af 51 f0 	div.f %d15,%d15,%d10
800041ca:	4b f2 51 20 	div.f %d2,%d2,%d15
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800041ce:	02 ae       	mov %d14,%d10
    ReleaseSpinlock(S1);
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800041d0:	4b 02 71 f1 	ftouz %d15,%d2
800041d4:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800041d8:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
800041dc:	6d 00 38 0e 	call 80005e4c <IfxScuCcu_getSourceFrequency>
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
800041e0:	3b 40 01 40 	mov %d4,20
800041e4:	4b 4b 11 42 	div.u %e4,%d11,%d4
800041e8:	48 02       	ld.w %d2,[%a15]0
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
800041ea:	82 0b       	mov %d11,0
    while (cnt < (delay_ms / period_ms)) {
800041ec:	02 4d       	mov %d13,%d4
800041ee:	5f db 41 00 	jeq %d11,%d13,80004270 <mdelay+0xe6>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800041f2:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800041f6:	85 fe 2c 08 	ld.a %a14,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800041fa:	53 1c 40 80 	mul.u %e8,%d12,1
800041fe:	6d 00 27 0e 	call 80005e4c <IfxScuCcu_getSourceFrequency>
80004202:	54 c3       	ld.w %d3,[%a12]
    result |= ((uint64)stm->CAP.U) << 32;
80004204:	80 e5       	mov.d %d5,%a14
80004206:	37 03 64 34 	extr.u %d3,%d3,8,4
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
8000420a:	02 c4       	mov %d4,%d12
8000420c:	a6 95       	or %d5,%d9
8000420e:	60 3f       	mov.a %a15,%d3
80004210:	02 28       	mov %d8,%d2
80004212:	6d 00 8c 3b 	call 8000b92a <__floatundisf>
80004216:	80 f4       	mov.d %d4,%a15
80004218:	4b 04 41 31 	itof %d3,%d4
8000421c:	4b 38 51 80 	div.f %d8,%d8,%d3
80004220:	4b a8 51 80 	div.f %d8,%d8,%d10
80004224:	4b 82 51 20 	div.f %d2,%d2,%d8
80004228:	4b 02 71 21 	ftouz %d2,%d2
        if (current_ms - prev_ms >= period_ms) {
8000422c:	a2 f2       	sub %d2,%d15
8000422e:	8b 42 61 22 	lt.u %d2,%d2,20
80004232:	df 02 de ff 	jne %d2,0,800041ee <mdelay+0x64>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004236:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000423a:	85 ff 2c 08 	ld.a %a15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000423e:	6d 00 07 0e 	call 80005e4c <IfxScuCcu_getSourceFrequency>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004242:	53 1c 40 80 	mul.u %e8,%d12,1
80004246:	4c d0       	ld.w %d15,[%a13]0
    result |= ((uint64)stm->CAP.U) << 32;
80004248:	80 f5       	mov.d %d5,%a15
8000424a:	37 0f 64 f4 	extr.u %d15,%d15,8,4
            cnt++;
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
8000424e:	02 c4       	mov %d4,%d12
80004250:	a6 95       	or %d5,%d9
80004252:	02 28       	mov %d8,%d2
80004254:	6d 00 6b 3b 	call 8000b92a <__floatundisf>
80004258:	4b 0f 41 f1 	itof %d15,%d15
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
        if (current_ms - prev_ms >= period_ms) {
            cnt++;
8000425c:	c2 1b       	add %d11,1
8000425e:	4b f8 51 f0 	div.f %d15,%d8,%d15
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004262:	4b ef 51 f0 	div.f %d15,%d15,%d14
80004266:	4b f2 51 20 	div.f %d2,%d2,%d15
8000426a:	4b 02 71 f1 	ftouz %d15,%d2
8000426e:	3c c0       	j 800041ee <mdelay+0x64>
        }
    }
}
80004270:	00 90       	ret 

80004272 <initVADCModule>:
    IfxVadc_Adc_startBackgroundScan(&g_vadc);
}

/* Function to initialize the VADC module with default parameters */
void initVADCModule(void)
{
80004272:	20 28       	sub.a %sp,40
    IfxVadc_Adc_Config adcConf;                                         /* Define a configuration structure         */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);               /* Fill it with default values              */
80004274:	d9 a4 04 00 	lea %a4,[%sp]4
80004278:	91 20 00 5f 	movh.a %a5,61442
8000427c:	6d 00 cf 1d 	call 80007e1a <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&g_vadc, &adcConf);                          /* Apply the configuration                  */
80004280:	91 00 00 47 	movh.a %a4,28672
80004284:	d9 44 94 20 	lea %a4,[%a4]2196 <70000894 <g_vadc>>
80004288:	d9 a5 04 00 	lea %a5,[%sp]4 <70000894 <g_vadc>>
8000428c:	1d 00 53 1d 	j 80007d32 <IfxVadc_Adc_initModule>

80004290 <initVADCGroup>:
}

/* Function to initialize the VADC group */
void initVADCGroup(void)
{
80004290:	20 38       	sub.a %sp,56
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */
80004292:	91 00 00 57 	movh.a %a5,28672
80004296:	40 a4       	mov.aa %a4,%sp
80004298:	d9 55 94 20 	lea %a5,[%a5]2196 <70000894 <g_vadc>>
8000429c:	6d 00 34 1d 	call 80007d04 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
800042a0:	82 4f       	mov %d15,4
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800042a2:	91 00 00 47 	movh.a %a4,28672
void initVADCGroup(void)
{
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
800042a6:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
800042a8:	2c a5       	st.b [%sp]5,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800042aa:	d9 44 88 20 	lea %a4,[%a4]2184 <70000888 <g_vadcGroup>>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
800042ae:	82 1f       	mov %d15,1
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800042b0:	40 a5       	mov.aa %a5,%sp

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
800042b2:	e9 af 35 00 	st.b [%sp]53,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;
800042b6:	e9 af 28 00 	st.b [%sp]40,%d15

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800042ba:	e9 af 2c 00 	st.b [%sp]44,%d15

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800042be:	1d 00 5e 1b 	j 8000797a <IfxVadc_Adc_initGroup>

800042c2 <initVADCChannels>:
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800042c2:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800042c6:	7b 00 00 b7 	movh %d11,28672
800042ca:	7b 00 00 a7 	movh %d10,28672
}


IFX_INLINE void IfxVadc_Adc_setBackgroundScan(IfxVadc_Adc *vadc, IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setBackgroundScan(vadc->vadc, group->groupId, channels, mask);
800042ce:	91 00 00 d7 	movh.a %a13,28672
    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
}

/* Function to initialize the VADC used channels */
void initVADCChannels(void)
{
800042d2:	20 60       	sub.a %sp,96
800042d4:	82 0f       	mov %d15,0
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800042d6:	d9 ee 88 20 	lea %a14,[%a14]2184 <70000888 <g_vadcGroup>>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800042da:	1b 0b 00 b0 	addi %d11,%d11,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
800042de:	82 19       	mov %d9,1
800042e0:	1b 8a 86 a0 	addi %d10,%d10,2152
800042e4:	d9 dd 94 20 	lea %a13,[%a13]2196
800042e8:	53 8f 21 80 	mul %d8,%d15,24
800042ec:	40 ac       	mov.aa %a12,%sp
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800042ee:	40 e5       	mov.aa %a5,%a14
800042f0:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800042f2:	d9 af 20 10 	lea %a15,[%sp]96
800042f6:	30 2c       	add.a %a12,%a2
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800042f8:	40 c4       	mov.aa %a4,%a12
800042fa:	6d 00 35 1b 	call 80007964 <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800042fe:	60 83       	mov.a %a3,%d8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
80004300:	40 c5       	mov.aa %a5,%a12
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004302:	30 3f       	add.a %a15,%a3
80004304:	60 b3       	mov.a %a3,%d11
80004306:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
80004308:	e9 ff ef ef 	st.b [%a15]-81,%d15
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000430c:	14 22       	ld.bu %d2,[%a2]
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
8000430e:	60 a2       	mov.a %a2,%d10
80004310:	d0 24       	addsc.a %a4,%a2,%d15,3
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004312:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
80004316:	e9 f9 e2 ef 	st.b [%a15]-94,%d9


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
8000431a:	6d 00 2f 1a 	call 80007778 <IfxVadc_Adc_initChannel>
8000431e:	d4 d2       	ld.a %a2,[%a13]
80004320:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <osEE_kcb_var>>
80004324:	c2 1f       	add %d15,1
80004326:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
8000432a:	79 f2 ec ef 	ld.b %d2,[%a15]-84
}


IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask)
{
    channels                = (vadc->BRSSEL[groupId].U & ~mask) | channels;
8000432e:	19 23 00 60 	ld.w %d3,[%a2]384
80004332:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
80004336:	59 22 00 60 	st.w [%a2]384,%d2
void initVADCChannels(void)
{
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
8000433a:	df 4f d7 ff 	jne %d15,4,800042e8 <initVADCChannels+0x26>
        unsigned mask = chnEnableBit;                                   /* of the respective group to be added in   */
        IfxVadc_Adc_setBackgroundScan(&g_vadc, &g_vadcGroup, chnEnableBit, mask); /* the background scan sequence.  */

    }

}
8000433e:	00 90       	ret 

80004340 <initADC>:
}


IFX_INLINE void IfxVadc_Adc_startBackgroundScan(IfxVadc_Adc *vadc)
{
    IfxVadc_startBackgroundScan(vadc->vadc);
80004340:	91 00 00 f7 	movh.a %a15,28672
}

/* Function to initialize the VADC module */
void initADC(void)
{
    initVADCModule();                                                   /* Initialize the VADC module               */
80004344:	6d ff 97 ff 	call 80004272 <initVADCModule>
    initVADCGroup();                                                    /* Initialize the VADC group                */
80004348:	6d ff a4 ff 	call 80004290 <initVADCGroup>
    initVADCChannels();                                                 /* Initialize the used channels             */
8000434c:	6d ff bb ff 	call 800042c2 <initVADCChannels>
80004350:	99 ff 94 20 	ld.a %a15,[%a15]2196 <70000894 <g_vadc>>
}


IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.LDEV = 1;     /* execute Load event to start the conversion */
80004354:	19 ff 04 80 	ld.w %d15,[%a15]516 <70000894 <g_vadc>>
80004358:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
8000435c:	59 ff 04 80 	st.w [%a15]516,%d15
80004360:	00 90       	ret 

80004362 <readADCValue>:
}


IFX_INLINE Ifx_VADC_RES IfxVadc_Adc_getResult(IfxVadc_Adc_Channel *channel)
{
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
80004362:	91 00 00 f7 	movh.a %a15,28672
80004366:	d9 ff a8 10 	lea %a15,[%a15]2152 <70000868 <g_vadcChannel>>
8000436a:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
8000436e:	c8 12       	ld.a %a2,[%a15]4
80004370:	0c f1       	ld.bu %d15,[%a15]1
80004372:	99 22 04 00 	ld.a %a2,[%a2]4

IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
{
    Ifx_VADC_RES tmpResult;

    tmpResult.U = group->RES[resultIdx].U;
80004376:	1b 0f 0a f0 	addi %d15,%d15,160
8000437a:	90 2f       	addsc.a %a15,%a2,%d15,2
8000437c:	4c f0       	ld.w %d15,[%a15]0
8000437e:	37 0f 70 20 	extr.u %d2,%d15,0,16
{
    Ifx_VADC_RES conversionResult;
    do
    {
        conversionResult = IfxVadc_Adc_getResult(&g_vadcChannel[channel]);
    } while(!conversionResult.B.VF);
80004382:	ff 0f fd 7f 	jge %d15,0,8000437c <readADCValue+0x1a>

    return conversionResult.B.RESULT;
}
80004386:	00 90       	ret 

80004388 <initPeripheralsAndERU>:

void initPeripheralsAndERU(void)
{
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
80004388:	91 40 00 4f 	movh.a %a4,61444
8000438c:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
80004390:	82 74       	mov %d4,7
80004392:	3b 00 01 50 	mov %d5,16
80004396:	6d 00 74 0b 	call 80005a7e <IfxPort_setPinMode>


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
8000439a:	91 00 00 f8 	movh.a %a15,32768
8000439e:	d9 ff fc 20 	lea %a15,[%a15]3260 <80000cbc <IfxScu_REQ6_P02_0_IN>>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
800043a2:	c8 24       	ld.a %a4,[%a15]8
800043a4:	91 00 00 d7 	movh.a %a13,28672
800043a8:	08 c4       	ld.bu %d4,[%a15]12
800043aa:	3b 80 00 50 	mov %d5,8
800043ae:	b5 df 98 20 	st.a [%a13]2200 <70000898 <g_ERUconfig>>,%a15
800043b2:	6d 00 66 0b 	call 80005a7e <IfxPort_setPinMode>
/******************************************************************************/

IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)
{
    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
800043b6:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
800043ba:	08 44       	ld.bu %d4,[%a15]4
800043bc:	6d 00 0f 15 	call 80006dda <IfxScuEru_selectExternalInput>
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
800043c0:	99 df 98 20 	ld.a %a15,[%a13]2200 <70000898 <g_ERUconfig>>
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
800043c4:	d9 dc 98 20 	lea %a12,[%a13]2200 <70000898 <g_ERUconfig>>
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
800043c8:	82 0f       	mov %d15,0
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
800043ca:	08 44       	ld.bu %d4,[%a15]4
800043cc:	e9 c4 04 00 	st.b [%a12]4 <70000004 <__DSPR0_START+0x4>>,%d4

    /* Input channel configuration */
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */
800043d0:	6d 00 75 14 	call 80006cba <IfxScuEru_enableFallingEdgeDetection>
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800043d4:	39 c4 04 00 	ld.bu %d4,[%a12]4
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
800043d8:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
800043da:	2c c5       	st.b [%a12]5,%d15

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800043dc:	6d 00 a8 14 	call 80006d2c <IfxScuEru_enableTriggerPulse>
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
800043e0:	39 c4 04 00 	ld.bu %d4,[%a12]4
800043e4:	39 c5 05 00 	ld.bu %d5,[%a12]5
800043e8:	6d 00 dc 13 	call 80006ba0 <IfxScuEru_connectTrigger>

    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
800043ec:	39 c4 06 00 	ld.bu %d4,[%a12]6
800043f0:	82 15       	mov %d5,1
800043f2:	6d 00 2d 15 	call 80006e4c <IfxScuEru_setInterruptGatingPattern>

    /* Service request configuration */
    /* Get source pointer depending on outputChannel (SRC_SCUERU0 for outputChannel0) */
    g_ERUconfig.src = &MODULE_SRC.SCU.SCU.ERU[(int) g_ERUconfig.outputChannel % 4];
800043f6:	0c c6       	ld.bu %d15,[%a12]6
800043f8:	16 03       	and %d15,3
800043fa:	06 2f       	sh %d15,2
800043fc:	60 f2       	mov.a %a2,%d15
800043fe:	d9 2f d4 38 	lea %a15,[%a2]-29484
80004402:	11 4f 00 ff 	addih.a %a15,%a15,61444
80004406:	ec c2       	st.a [%a12]8,%a15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80004408:	4c f0       	ld.w %d15,[%a15]0
8000440a:	b7 af 08 f0 	insert %d15,%d15,10,0,8
8000440e:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
80004410:	4c f0       	ld.w %d15,[%a15]0
80004412:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
80004416:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80004418:	4c f0       	ld.w %d15,[%a15]0
8000441a:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
8000441e:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80004420:	4c f0       	ld.w %d15,[%a15]0
80004422:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80004426:	68 0f       	st.w [%a15]0,%d15
80004428:	00 90       	ret 

8000442a <asclin0TxISR>:
    IfxSrc_enable(g_ERUconfig.src);
}

ISR(asclin0TxISR)
{
    IfxAsclin_Asc_isrTransmit(&g_AsclinAsc.drivers.asc);
8000442a:	91 00 00 47 	movh.a %a4,28672
8000442e:	d9 44 b8 b0 	lea %a4,[%a4]2808 <70000af8 <g_AsclinAsc+0x254>>
80004432:	1d 00 1f 06 	j 80005070 <IfxAsclin_Asc_isrTransmit>

80004436 <main>:
}

int main(void)
{
80004436:	20 08       	sub.a %sp,8
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80004438:	4d c0 e1 ff 	mfcr %d15,$core_id
    StatusType status1, status2;
    CoreIdType core_id = GetCoreID();
    if (core_id == OS_CORE_ID_MASTER) {
8000443c:	37 0f 48 f0 	extr %d15,%d15,0,8
80004440:	91 00 00 c8 	movh.a %a12,32768
80004444:	91 00 00 f8 	movh.a %a15,32768
80004448:	d9 cc 2c 20 	lea %a12,[%a12]172 <800000ac <_start+0x8c>>
8000444c:	d9 ff 16 30 	lea %a15,[%a15]214 <800000d6 <_start+0xb6>>
80004450:	ee 20       	jnz %d15,80004490 <main+0x5a>
        osEE_tc_stm_set_clockpersec();
80004452:	6d 00 f1 27 	call 80009434 <osEE_tc_stm_set_clockpersec>
        osEE_tc_stm_set_sr0(1000U, 1U);
80004456:	82 15       	mov %d5,1
80004458:	3b 80 3e 40 	mov %d4,1000
8000445c:	6d 00 06 28 	call 80009468 <osEE_tc_stm_set_sr0>
        UART_init();
80004460:	6d ff 21 fe 	call 800040a2 <UART_init>
        initADC();
80004464:	6d ff 6e ff 	call 80004340 <initADC>
        initPeripheralsAndERU();
80004468:	6d ff 90 ff 	call 80004388 <initPeripheralsAndERU>
        StartCore(OS_CORE_ID_1, &status1);
8000446c:	82 14       	mov %d4,1
8000446e:	d9 a4 06 00 	lea %a4,[%sp]6
80004472:	6d 00 05 31 	call 8000a67c <StartCore>
        StartCore(OS_CORE_ID_2, &status2);
80004476:	82 24       	mov %d4,2
80004478:	d9 a4 07 00 	lea %a4,[%sp]7
8000447c:	6d 00 00 31 	call 8000a67c <StartCore>
        printfSerial("\n...............\n");
80004480:	40 c4       	mov.aa %a4,%a12
80004482:	6d ff 49 fe 	call 80004114 <printfSerial>
        printfSerial("...Master OS Starts...\n");
80004486:	91 00 00 48 	movh.a %a4,32768
8000448a:	d9 44 3e 20 	lea %a4,[%a4]190 <800000be <_start+0x9e>>
8000448e:	3c 08       	j 8000449e <main+0x68>
        printfSerial("...............\n");
        StartOS(OSDEFAULTAPPMODE);
    } else {
        printfSerial("\n...............\n");
80004490:	40 c4       	mov.aa %a4,%a12
80004492:	6d ff 41 fe 	call 80004114 <printfSerial>
        printfSerial("...Slave OS Starts...\n");
80004496:	91 00 00 48 	movh.a %a4,32768
8000449a:	d9 44 27 30 	lea %a4,[%a4]231 <800000e7 <_start+0xc7>>
8000449e:	6d ff 3b fe 	call 80004114 <printfSerial>
        printfSerial("...............\n");
800044a2:	40 f4       	mov.aa %a4,%a15
800044a4:	6d ff 38 fe 	call 80004114 <printfSerial>
        StartOS(OSDEFAULTAPPMODE);
800044a8:	82 04       	mov %d4,0
800044aa:	6d 00 e4 29 	call 80009872 <StartOS>
    }
    return 0;
800044ae:	82 02       	mov %d2,0
800044b0:	00 90       	ret 
	...

800044b4 <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
800044b4:	02 4f       	mov %d15,%d4
800044b6:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800044b8:	6d 00 6d 16 	call 80007192 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
800044bc:	02 24       	mov %d4,%d2
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800044be:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
800044c0:	6d 00 66 15 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800044c4:	8b 0f a2 22 	ge.u %d2,%d15,32
800044c8:	f6 28       	jnz %d2,800044d8 <IfxVadc_disableAccess+0x24>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
800044ca:	19 f2 08 20 	ld.w %d2,[%a15]136
800044ce:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800044d2:	59 ff 08 20 	st.w [%a15]136,%d15
800044d6:	3c 08       	j 800044e6 <IfxVadc_disableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
800044d8:	19 f2 0c 20 	ld.w %d2,[%a15]140
800044dc:	16 1f       	and %d15,31
800044de:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800044e2:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800044e6:	02 84       	mov %d4,%d8
800044e8:	1d 00 d8 16 	j 80007298 <IfxScuWdt_setSafetyEndinit>

800044ec <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
800044ec:	02 4f       	mov %d15,%d4
800044ee:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800044f0:	6d 00 51 16 	call 80007192 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
800044f4:	02 24       	mov %d4,%d2
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800044f6:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
800044f8:	6d 00 4a 15 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800044fc:	8b 0f a2 22 	ge.u %d2,%d15,32
80004500:	f6 28       	jnz %d2,80004510 <IfxVadc_enableAccess+0x24>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
80004502:	19 f2 08 20 	ld.w %d2,[%a15]136
80004506:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
8000450a:	59 ff 08 20 	st.w [%a15]136,%d15
8000450e:	3c 08       	j 8000451e <IfxVadc_enableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
80004510:	19 f2 0c 20 	ld.w %d2,[%a15]140
80004514:	16 1f       	and %d15,31
80004516:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
8000451a:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
8000451e:	02 84       	mov %d4,%d8
80004520:	1d 00 bc 16 	j 80007298 <IfxScuWdt_setSafetyEndinit>

80004524 <IfxVadc_configExternalMultiplexerMode>:

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
80004524:	82 0f       	mov %d15,0
80004526:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000452a:	39 a3 04 00 	ld.bu %d3,[%sp]4
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
8000452e:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004532:	14 a2       	ld.bu %d2,[%sp]
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
80004534:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
    emuxctr.B.EMUXCH   = channels;
80004538:	37 5f 0a f8 	insert %d15,%d15,%d5,16,10
    emuxctr.B.EMUXSET  = startChannel;
8000453c:	37 6f 03 f0 	insert %d15,%d15,%d6,0,3
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004540:	3b f0 00 40 	mov %d4,15
    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
80004544:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004548:	40 5f       	mov.aa %a15,%a5
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
8000454a:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000454e:	40 4c       	mov.aa %a12,%a4
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004550:	6d ff ce ff 	call 800044ec <IfxVadc_enableAccess>
    vadcG->EMUXCTR.U   = emuxctr.U;
80004554:	59 ff 30 50 	st.w [%a15]368,%d15
    emuxctr.B.EMXWC    = 0;
80004558:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
    vadcG->EMUXCTR.U   = emuxctr.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000455c:	40 c4       	mov.aa %a4,%a12
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
    vadcG->EMUXCTR.U   = emuxctr.U;
    emuxctr.B.EMXWC    = 0;
    vadcG->EMUXCTR.U   = emuxctr.U;
8000455e:	59 ff 30 50 	st.w [%a15]368,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004562:	3b f0 00 40 	mov %d4,15
80004566:	1d ff a7 ff 	j 800044b4 <IfxVadc_disableAccess>

8000456a <IfxVadc_disablePostCalibration>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
{
8000456a:	40 4f       	mov.aa %a15,%a4
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
8000456c:	ff 84 1c 80 	jge.u %d4,8,800045a4 <IfxVadc_disablePostCalibration+0x3a>
80004570:	02 4f       	mov %d15,%d4
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004572:	3b f0 01 40 	mov %d4,31
80004576:	02 58       	mov %d8,%d5
80004578:	6d ff ba ff 	call 800044ec <IfxVadc_enableAccess>

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
8000457c:	1b 0f 01 40 	addi %d4,%d15,16

        if (disable == TRUE)
        {
            vadc->GLOBCFG.U |= mask;
80004580:	19 f2 00 20 	ld.w %d2,[%a15]128
{
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80004584:	82 1f       	mov %d15,1
80004586:	0f 4f 00 f0 	sh %d15,%d15,%d4

        if (disable == TRUE)
8000458a:	df 18 04 80 	jne %d8,1,80004592 <IfxVadc_disablePostCalibration+0x28>
        {
            vadc->GLOBCFG.U |= mask;
8000458e:	a6 2f       	or %d15,%d2
80004590:	3c 03       	j 80004596 <IfxVadc_disablePostCalibration+0x2c>
        }
        else
        {
            vadc->GLOBCFG.U &= ~mask;
80004592:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004596:	59 ff 00 20 	st.w [%a15]128,%d15
        }

        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000459a:	40 f4       	mov.aa %a4,%a15
8000459c:	3b f0 01 40 	mov %d4,31
800045a0:	1d ff 8a ff 	j 800044b4 <IfxVadc_disableAccess>
800045a4:	00 90       	ret 

800045a6 <IfxVadc_enableGroupSync>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
800045a6:	40 4f       	mov.aa %a15,%a4
800045a8:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800045aa:	6d 00 d6 15 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
800045ae:	02 24       	mov %d4,%d2
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800045b0:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
800045b2:	6d 00 d2 14 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800045b6:	40 f4       	mov.aa %a4,%a15
800045b8:	3b f0 01 40 	mov %d4,31
    IfxScuWdt_clearCpuEndinit(passwd);

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
800045bc:	19 ff 00 20 	ld.w %d15,[%a15]128
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800045c0:	6d ff 96 ff 	call 800044ec <IfxVadc_enableAccess>

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
800045c4:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
800045c8:	b7 1f 81 f3 	insert %d15,%d15,1,7,1

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800045cc:	40 f4       	mov.aa %a4,%a15
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
800045ce:	59 ff 00 20 	st.w [%a15]128,%d15
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800045d2:	3b f0 01 40 	mov %d4,31
800045d6:	6d ff 6f ff 	call 800044b4 <IfxVadc_disableAccess>
    }

    if (ccu6Num == 0)
800045da:	df 08 1a 80 	jne %d8,0,8000460e <IfxVadc_enableGroupSync+0x68>
    {
        // CCU60 Config
        CCU60_CLC.U = 0;
800045de:	a5 f8 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d8

        if (CCU60_CLC.U)
800045e2:	85 ff 80 82 	ld.w %d15,f0002a00 <_SMALL_DATA4_+0x3fffaa00>
        {}

        CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800045e6:	82 4f       	mov %d15,4
800045e8:	a5 ff 94 92 	st.w f0002a54 <_SMALL_DATA4_+0x3fffaa54>,%d15
        CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
800045ec:	a5 ff 9c 92 	st.w f0002a5c <_SMALL_DATA4_+0x3fffaa5c>,%d15
        CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
800045f0:	85 ff 80 a2 	ld.w %d15,f0002a80 <_SMALL_DATA4_+0x3fffaa80>
800045f4:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
800045f8:	a5 ff 80 a2 	st.w f0002a80 <_SMALL_DATA4_+0x3fffaa80>,%d15
        CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
800045fc:	3b 00 20 f4 	mov %d15,16896
80004600:	a5 ff b8 92 	st.w f0002a78 <_SMALL_DATA4_+0x3fffaa78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
80004604:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
80004608:	8f 8f c3 f1 	andn %d15,%d15,56
8000460c:	3c 1d       	j 80004646 <IfxVadc_enableGroupSync+0xa0>
    }
    else if (ccu6Num == 1)
8000460e:	df 18 1e 80 	jne %d8,1,8000464a <IfxVadc_enableGroupSync+0xa4>
    {
        // CCU60 + CCU61 Config
        CCU60_CLC.U = 0;
80004612:	82 0f       	mov %d15,0
80004614:	a5 ff 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d15
        CCU61_CLC.U = 0;
80004618:	a5 ff 80 c2 	st.w f0002b00 <_SMALL_DATA4_+0x3fffab00>,%d15

        if (CCU61_CLC.U)
8000461c:	85 ff 80 c2 	ld.w %d15,f0002b00 <_SMALL_DATA4_+0x3fffab00>
        {}

        CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
80004620:	82 4f       	mov %d15,4
80004622:	a5 ff 94 d2 	st.w f0002b54 <_SMALL_DATA4_+0x3fffab54>,%d15
        CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
80004626:	a5 ff 9c d2 	st.w f0002b5c <_SMALL_DATA4_+0x3fffab5c>,%d15
        CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
8000462a:	85 ff 80 e2 	ld.w %d15,f0002b80 <_SMALL_DATA4_+0x3fffab80>
8000462e:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
80004632:	a5 ff 80 e2 	st.w f0002b80 <_SMALL_DATA4_+0x3fffab80>,%d15
        CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
80004636:	3b 00 20 f4 	mov %d15,16896
8000463a:	a5 ff b8 d2 	st.w f0002b78 <_SMALL_DATA4_+0x3fffab78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
8000463e:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
80004642:	b7 1f 83 f1 	insert %d15,%d15,1,3,3
80004646:	a5 ff 8c 82 	st.w f0002a0c <_SMALL_DATA4_+0x3fffaa0c>,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
8000464a:	02 94       	mov %d4,%d9
8000464c:	1d 00 ba 15 	j 800071c0 <IfxScuWdt_setCpuEndinit>

80004650 <IfxVadc_getAdcAnalogFrequency>:
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
80004650:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
80004652:	6d 00 be 0c 	call 80005fce <IfxScuCcu_getSpbFrequency>
80004656:	19 ff 00 20 	ld.w %d15,[%a15]128
8000465a:	16 1f       	and %d15,31
8000465c:	c2 1f       	add %d15,1
8000465e:	4b 0f 41 f1 	itof %d15,%d15
}
80004662:	4b f2 51 20 	div.f %d2,%d2,%d15
80004666:	00 90       	ret 

80004668 <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
80004668:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
8000466a:	6d 00 b2 0c 	call 80005fce <IfxScuCcu_getSpbFrequency>
8000466e:	19 ff 00 20 	ld.w %d15,[%a15]128
80004672:	37 0f 62 f4 	extr.u %d15,%d15,8,2
80004676:	c2 1f       	add %d15,1
80004678:	4b 0f 41 f1 	itof %d15,%d15
}
8000467c:	4b f2 51 20 	div.f %d2,%d2,%d15
80004680:	00 90       	ret 

80004682 <IfxVadc_getAdcModuleFrequency>:


float32 IfxVadc_getAdcModuleFrequency(void)
{
    return IfxScuCcu_getSpbFrequency();
80004682:	1d 00 a6 0c 	j 80005fce <IfxScuCcu_getSpbFrequency>

80004686 <IfxVadc_getBackgroundScanStatus>:
}


IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
80004686:	82 0f       	mov %d15,0
80004688:	a0 7f       	mov.a %a15,7
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
    {
        if (vadc->BRSPND[i].U)
8000468a:	1b 0f 07 20 	addi %d2,%d15,112
8000468e:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
80004692:	54 22       	ld.w %d2,[%a2]
80004694:	f6 24       	jnz %d2,8000469c <IfxVadc_getBackgroundScanStatus+0x16>
80004696:	c2 1f       	add %d15,1
IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
80004698:	fc f9       	loop %a15,8000468a <IfxVadc_getBackgroundScanStatus+0x4>
8000469a:	00 90       	ret 
    {
        if (vadc->BRSPND[i].U)
        {
            return IfxVadc_Status_channelsStillPending;
8000469c:	82 62       	mov %d2,6
            continue;
        }
    }

    return status;
}
8000469e:	00 90       	ret 

800046a0 <IfxVadc_getQueueStatus>:
IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    /* just fill level is checked */
    if (0x7 == group->QSR0.B.FILL)
800046a0:	19 42 08 20 	ld.w %d2,[%a4]136
800046a4:	8f f2 00 21 	and %d2,%d2,15
    {
        status = IfxVadc_Status_queueFull;
    }
    else
    {
        status = IfxVadc_Status_noError;
800046a8:	8b 72 00 22 	eq %d2,%d2,7
    }

    return status;
}
800046ac:	06 22       	sh %d2,2
800046ae:	00 90       	ret 

800046b0 <IfxVadc_getResultBasedOnRequestSource>:
Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
{
    sint32       sourceResultRegister = -1;
    Ifx_VADC_RES tmpResult;

    switch (sourceType)
800046b0:	df 15 09 00 	jeq %d5,1,800046c2 <IfxVadc_getResultBasedOnRequestSource+0x12>
800046b4:	76 54       	jz %d5,800046bc <IfxVadc_getResultBasedOnRequestSource+0xc>
800046b6:	df 25 0b 00 	jeq %d5,2,800046cc <IfxVadc_getResultBasedOnRequestSource+0x1c>
800046ba:	3c 39       	j 8000472c <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
800046bc:	19 5f 00 20 	ld.w %d15,[%a5]128
800046c0:	3c 03       	j 800046c6 <IfxVadc_getResultBasedOnRequestSource+0x16>
        break;

    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
800046c2:	19 5f 20 20 	ld.w %d15,[%a5]160
800046c6:	16 0f       	and %d15,15
    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
        break;
    }

    if (sourceResultRegister > 0)
800046c8:	ee 39       	jnz %d15,8000473a <IfxVadc_getResultBasedOnRequestSource+0x8a>
800046ca:	3c 31       	j 8000472c <IfxVadc_getResultBasedOnRequestSource+0x7c>
    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
        break;

    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
800046cc:	19 4f 00 80 	ld.w %d15,[%a4]512
800046d0:	16 0f       	and %d15,15
        break;
    }

    if (sourceResultRegister > 0)
800046d2:	ee 34       	jnz %d15,8000473a <IfxVadc_getResultBasedOnRequestSource+0x8a>

        return tmpResult;
    }
    else
    {
        if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
800046d4:	1b 04 06 f0 	addi %d15,%d4,96
800046d8:	90 5f       	addsc.a %a15,%a5,%d15,2
800046da:	4c f0       	ld.w %d15,[%a15]0
800046dc:	ef 4f 28 00 	jz.t %d15,20,8000472c <IfxVadc_getResultBasedOnRequestSource+0x7c>
        {
            tmpResult.B.VF     = vadc->GLOBRES.B.VF;
800046e0:	19 42 00 c0 	ld.w %d2,[%a4]768
800046e4:	82 0f       	mov %d15,0
800046e6:	67 2f 9f ff 	ins.t %d15,%d15,31,%d2,31
            tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
800046ea:	19 42 00 c0 	ld.w %d2,[%a4]768
800046ee:	67 2f 1e ff 	ins.t %d15,%d15,30,%d2,30
            tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
800046f2:	19 42 00 c0 	ld.w %d2,[%a4]768
800046f6:	37 02 62 2e 	extr.u %d2,%d2,28,2
800046fa:	37 2f 02 fe 	insert %d15,%d15,%d2,28,2
            tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
800046fe:	19 42 00 c0 	ld.w %d2,[%a4]768
80004702:	37 02 e3 2c 	extr.u %d2,%d2,25,3
80004706:	37 2f 83 fc 	insert %d15,%d15,%d2,25,3
            tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
8000470a:	19 42 00 c0 	ld.w %d2,[%a4]768
8000470e:	37 02 65 2a 	extr.u %d2,%d2,20,5
80004712:	37 2f 05 fa 	insert %d15,%d15,%d2,20,5
            tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
80004716:	19 42 00 c0 	ld.w %d2,[%a4]768
8000471a:	37 02 64 28 	extr.u %d2,%d2,16,4
8000471e:	37 2f 04 f8 	insert %d15,%d15,%d2,16,4
            tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
80004722:	19 42 00 c0 	ld.w %d2,[%a4]768
80004726:	37 2f 10 20 	insert %d2,%d15,%d2,0,16

            return tmpResult;
8000472a:	00 90       	ret 
        }
        else
        {
            tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
8000472c:	1b 04 06 40 	addi %d4,%d4,96
80004730:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
80004734:	4c f0       	ld.w %d15,[%a15]0
80004736:	37 0f 64 f8 	extr.u %d15,%d15,16,4
8000473a:	1b 0f 0a f0 	addi %d15,%d15,160
8000473e:	90 55       	addsc.a %a5,%a5,%d15,2
80004740:	54 52       	ld.w %d2,[%a5]

            return tmpResult;
80004742:	00 90       	ret 

80004744 <IfxVadc_getScanStatus>:

IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    if (group->ASPND.U)
80004744:	19 42 2c 20 	ld.w %d2,[%a4]172
    }
    else
    {
        return status;
    }
}
80004748:	ab 62 a0 22 	seln %d2,%d2,%d2,6
8000474c:	00 90       	ret 

8000474e <IfxVadc_getSrcAddress>:

volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
8000474e:	bf 45 0a 80 	jlt.u %d5,4,80004762 <IfxVadc_getSrcAddress+0x14>
    {
        index -= 4;
80004752:	9a c5       	add %d15,%d5,-4
80004754:	8f ff 0f 51 	and %d5,%d15,255

        if ((group & 0x1) != 0)
80004758:	8f 14 00 41 	and %d4,%d4,1
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
8000475c:	da 08       	mov %d15,8
8000475e:	ab 9f a0 44 	seln %d4,%d4,%d15,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
80004762:	13 44 20 45 	madd %d4,%d5,%d4,4
80004766:	91 00 00 f8 	movh.a %a15,32768
8000476a:	d9 ff 10 d0 	lea %a15,[%a15]848 <80000350 <IfxVadc_cfg_srcAddresses>>
8000476e:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2

    return &(base[0]);
}
80004772:	c8 02       	ld.a %a2,[%a15]0
80004774:	00 90       	ret 

80004776 <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004776:	19 4f 00 20 	ld.w %d15,[%a4]128
    return &(base[0]);
}


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
8000477a:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
8000477c:	37 4f 02 f4 	insert %d15,%d15,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004780:	3b f0 01 40 	mov %d4,31
80004784:	6d ff b4 fe 	call 800044ec <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
80004788:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000478c:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
8000478e:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004792:	3b f0 01 40 	mov %d4,31
80004796:	1d ff 8f fe 	j 800044b4 <IfxVadc_disableAccess>

8000479a <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
8000479a:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
}


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
8000479e:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
800047a0:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800047a4:	3b f0 01 40 	mov %d4,31
800047a8:	6d ff a2 fe 	call 800044ec <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
800047ac:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047b0:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800047b2:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047b6:	3b f0 01 40 	mov %d4,31
800047ba:	1d ff 7d fe 	j 800044b4 <IfxVadc_disableAccess>

800047be <IfxVadc_initializeFAdcD>:
}


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
800047be:	02 4f       	mov %d15,%d4
800047c0:	40 4f       	mov.aa %a15,%a4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
800047c2:	6d 00 06 0c 	call 80005fce <IfxScuCcu_getSpbFrequency>
800047c6:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
800047ca:	4b f2 11 42 	div.u %e4,%d2,%d15
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800047ce:	82 3f       	mov %d15,3
800047d0:	c2 f4       	add %d4,-1
800047d2:	0b f4 90 41 	min.u %d4,%d4,%d15

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800047d6:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800047da:	40 f4       	mov.aa %a4,%a15

    divD   = (fadc / fAdcD - 1);

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800047dc:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800047e0:	6d ff cb ff 	call 80004776 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
800047e4:	02 82       	mov %d2,%d8
800047e6:	00 90       	ret 

800047e8 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
800047e8:	02 4f       	mov %d15,%d4
800047ea:	40 4f       	mov.aa %a15,%a4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
800047ec:	6d 00 f1 0b 	call 80005fce <IfxScuCcu_getSpbFrequency>
800047f0:	4b 02 71 21 	ftouz %d2,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
800047f4:	8f 22 00 40 	sh %d4,%d2,2
800047f8:	4b f4 11 42 	div.u %e4,%d4,%d15
800047fc:	3b f0 01 50 	mov %d5,31

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
80004800:	c2 24       	add %d4,2
80004802:	06 e4       	sh %d4,-2
    divA   = __minu(divA - 1, 0x1Fu);
80004804:	c2 f4       	add %d4,-1
80004806:	0b 54 90 41 	min.u %d4,%d4,%d5
    result = fadc / (divA + 1);
8000480a:	1b 14 00 30 	addi %d3,%d4,1
8000480e:	4b 32 11 62 	div.u %e6,%d2,%d3
80004812:	02 6f       	mov %d15,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
80004814:	7b 10 13 60 	movh %d6,305
80004818:	1b 16 d0 62 	addi %d6,%d6,11521
8000481c:	3f 6f 08 80 	jlt.u %d15,%d6,8000482c <IfxVadc_initializeFAdcI+0x44>
80004820:	0b 53 90 41 	min.u %d4,%d3,%d5
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
80004824:	9a 14       	add %d15,%d4,1
80004826:	4b f2 11 22 	div.u %e2,%d2,%d15
8000482a:	02 2f       	mov %d15,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
8000482c:	1b 0f ee 25 	addi %d2,%d15,24288
80004830:	7b a0 12 30 	movh %d3,298
80004834:	9b 82 ff 2f 	addih %d2,%d2,65528
80004838:	1b 13 be 38 	addi %d3,%d3,-29727
8000483c:	7f 32 06 80 	jge.u %d2,%d3,80004848 <IfxVadc_initializeFAdcI+0x60>
    {
        result = 0;             /* Min / Max FAdcI frequency */
    }
    else
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
80004840:	40 f4       	mov.aa %a4,%a15
80004842:	6d ff ac ff 	call 8000479a <IfxVadc_initialiseAdcConverterClock>
80004846:	3c 02       	j 8000484a <IfxVadc_initializeFAdcI+0x62>
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
    {
        result = 0;             /* Min / Max FAdcI frequency */
80004848:	82 0f       	mov %d15,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
8000484a:	02 f2       	mov %d2,%d15
8000484c:	00 90       	ret 

8000484e <IfxVadc_isPostCalibration>:
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
        break;
    default: pcEnabled                = FALSE;
8000484e:	82 02       	mov %d2,0

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004850:	ff 84 33 80 	jge.u %d4,8,800048b6 <IfxVadc_isPostCalibration+0x68>
80004854:	91 00 00 f8 	movh.a %a15,32768
80004858:	d9 ff a8 14 	lea %a15,[%a15]18536 <80004868 <IfxVadc_isPostCalibration+0x1a>>
8000485c:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
        break;
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004860:	19 42 00 20 	ld.w %d2,[%a4]128

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004864:	dc 0f       	ji %a15
80004866:	00 00       	nop 
80004868:	1d 00 10 00 	j 80004888 <IfxVadc_isPostCalibration+0x3a>
8000486c:	1d 00 11 00 	j 8000488e <IfxVadc_isPostCalibration+0x40>
80004870:	1d 00 12 00 	j 80004894 <IfxVadc_isPostCalibration+0x46>
80004874:	1d 00 13 00 	j 8000489a <IfxVadc_isPostCalibration+0x4c>
80004878:	1d 00 14 00 	j 800048a0 <IfxVadc_isPostCalibration+0x52>
8000487c:	1d 00 15 00 	j 800048a6 <IfxVadc_isPostCalibration+0x58>
80004880:	1d 00 16 00 	j 800048ac <IfxVadc_isPostCalibration+0x5e>
80004884:	1d 00 17 00 	j 800048b2 <IfxVadc_isPostCalibration+0x64>
    {
    case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
80004888:	07 22 10 28 	nand.t %d2,%d2,16,%d2,16
        break;
8000488c:	00 90       	ret 
    case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
8000488e:	07 22 91 28 	nand.t %d2,%d2,17,%d2,17
        break;
80004892:	00 90       	ret 
    case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
80004894:	07 22 12 29 	nand.t %d2,%d2,18,%d2,18
        break;
80004898:	00 90       	ret 
    case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
8000489a:	07 22 93 29 	nand.t %d2,%d2,19,%d2,19
        break;
8000489e:	00 90       	ret 
    case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
800048a0:	07 22 14 2a 	nand.t %d2,%d2,20,%d2,20
        break;
800048a4:	00 90       	ret 
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
800048a6:	07 22 95 2a 	nand.t %d2,%d2,21,%d2,21
        break;
800048aa:	00 90       	ret 
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
800048ac:	07 22 16 2b 	nand.t %d2,%d2,22,%d2,22
        break;
800048b0:	00 90       	ret 
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
800048b2:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
    default: pcEnabled                = FALSE;
        break;
    }

    return pcEnabled;
}
800048b6:	00 90       	ret 

800048b8 <IfxVadc_getChannelConversionTime>:
    return status;
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
800048b8:	02 40       	mov %d0,%d4
800048ba:	02 68       	mov %d8,%d6
800048bc:	02 7a       	mov %d10,%d7
800048be:	14 a4       	ld.bu %d4,[%sp]
    IfxVadc_ChannelResolution resolution;
    uint32                    n;

    uint32                    inputClassNum;

    if (inputClass <= IfxVadc_InputClasses_group1)
800048c0:	ff 25 08 80 	jge.u %d5,2,800048d0 <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
800048c4:	8f 80 00 f0 	sh %d15,%d0,8
800048c8:	42 f5       	add %d5,%d15
800048ca:	1b 85 12 50 	addi %d5,%d5,296
800048ce:	3c 03       	j 800048d4 <IfxVadc_getChannelConversionTime+0x1c>
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
800048d0:	1b 65 02 50 	addi %d5,%d5,38
800048d4:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
800048d8:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
800048da:	48 03       	ld.w %d3,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
800048dc:	16 1f       	and %d15,31
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
    }

    if (stcs > 16)
800048de:	8b 1f 61 22 	lt.u %d2,%d15,17
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
800048e2:	37 03 63 34 	extr.u %d3,%d3,8,3
    }

    if (stcs > 16)
800048e6:	f6 24       	jnz %d2,800048ee <IfxVadc_getChannelConversionTime+0x36>
    {
        stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
800048e8:	1b 1f ff ff 	addi %d15,%d15,-15
800048ec:	06 4f       	sh %d15,4
800048ee:	ff 63 35 80 	jge.u %d3,6,80004958 <IfxVadc_getChannelConversionTime+0xa0>
800048f2:	91 00 00 f8 	movh.a %a15,32768
800048f6:	d9 ff 08 d0 	lea %a15,[%a15]840 <80000348 <CSWTCH.25>>
800048fa:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
800048fe:	82 02       	mov %d2,0
80004900:	08 09       	ld.bu %d9,[%a15]0
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004902:	df 04 2f 80 	jne %d4,0,80004960 <IfxVadc_getChannelConversionTime+0xa8>
    {
        if (resolution != IfxVadc_ChannelResolution_10bitFast)
80004906:	df 53 0d 00 	jeq %d3,5,80004920 <IfxVadc_getChannelConversionTime+0x68>
        {
            /* Standard conversion */
            uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
8000490a:	02 04       	mov %d4,%d0
8000490c:	6d ff a1 ff 	call 8000484e <IfxVadc_isPostCalibration>
80004910:	92 24       	add %d4,%d15,2
80004912:	ab 22 a0 22 	seln %d2,%d2,%d2,2
80004916:	42 94       	add %d4,%d9
            conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
80004918:	42 24       	add %d4,%d2
8000491a:	4b 04 41 41 	itof %d4,%d4
8000491e:	3c 04       	j 80004926 <IfxVadc_getChannelConversionTime+0x6e>
        }
        else
        {
            /* Fast compare mode */
            conversionTime = (float32)(2 + stcs + 2) / analogFrequency + 2.0 / moduleFrequency;
80004920:	c2 4f       	add %d15,4
80004922:	4b 0f 41 41 	itof %d4,%d15
80004926:	4b 84 51 40 	div.f %d4,%d4,%d8
8000492a:	6d 00 26 38 	call 8000b976 <__extendsfdf2>
8000492e:	02 a4       	mov %d4,%d10
80004930:	0b 23 10 88 	mov %e8,%d3,%d2
80004934:	6d 00 21 38 	call 8000b976 <__extendsfdf2>
80004938:	b7 00 21 4f 	imask %e4,0,30,1
8000493c:	0b 23 10 68 	mov %e6,%d3,%d2
80004940:	6d 00 10 3a 	call 8000bd60 <__divdf3>
80004944:	0b 89 10 48 	mov %e4,%d9,%d8
80004948:	0b 23 10 68 	mov %e6,%d3,%d2
8000494c:	6d 00 fc 38 	call 8000bb44 <__adddf3>
80004950:	0b 23 10 48 	mov %e4,%d3,%d2
80004954:	1d 00 c5 3a 	j 8000bede <__truncdfsf2>
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004958:	82 09       	mov %d9,0
8000495a:	df 04 d8 7f 	jeq %d4,0,8000490a <IfxVadc_getChannelConversionTime+0x52>
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
8000495e:	82 02       	mov %d2,0
    {
        // do nothing
    }

    return conversionTime;
}
80004960:	00 90       	ret 

80004962 <IfxVadc_resetKernel>:
    return pcEnabled;
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
80004962:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004964:	6d 00 f9 13 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80004968:	02 24       	mov %d4,%d2
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000496a:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
8000496c:	6d 00 f5 12 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004970:	3b f0 01 40 	mov %d4,31
80004974:	40 f4       	mov.aa %a4,%a15
80004976:	6d ff bb fd 	call 800044ec <IfxVadc_enableAccess>
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
8000497a:	48 c2       	ld.w %d2,[%a15]48
    vadc->KRST0.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
8000497c:	02 f4       	mov %d4,%d15
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
8000497e:	8f 12 40 21 	or %d2,%d2,1
80004982:	68 c2       	st.w [%a15]48,%d2
    vadc->KRST0.B.RST = 1;
80004984:	48 d2       	ld.w %d2,[%a15]52
80004986:	8f 12 40 21 	or %d2,%d2,1
8000498a:	68 d2       	st.w [%a15]52,%d2
    IfxScuWdt_setCpuEndinit(passwd);
8000498c:	6d 00 1a 14 	call 800071c0 <IfxScuWdt_setCpuEndinit>

    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
80004990:	48 d2       	ld.w %d2,[%a15]52
80004992:	6f 12 ff 7f 	jz.t %d2,1,80004990 <IfxVadc_resetKernel+0x2e>

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004996:	02 f4       	mov %d4,%d15
80004998:	6d 00 df 12 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
8000499c:	48 b2       	ld.w %d2,[%a15]44
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000499e:	3b f0 01 40 	mov %d4,31
    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
800049a2:	8f 12 40 21 	or %d2,%d2,1
800049a6:	68 b2       	st.w [%a15]44,%d2
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049a8:	40 f4       	mov.aa %a4,%a15
800049aa:	6d ff 85 fd 	call 800044b4 <IfxVadc_disableAccess>
    IfxScuWdt_setCpuEndinit(passwd);
800049ae:	02 f4       	mov %d4,%d15
800049b0:	1d 00 08 14 	j 800071c0 <IfxScuWdt_setCpuEndinit>

800049b4 <IfxVadc_selectPowerSupplyVoltage>:


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800049b4:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
800049b8:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
800049ba:	67 4f 0e f0 	ins.t %d15,%d15,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800049be:	3b f0 01 40 	mov %d4,31
800049c2:	6d ff 95 fd 	call 800044ec <IfxVadc_enableAccess>
void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
800049c6:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049ca:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800049cc:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049d0:	3b f0 01 40 	mov %d4,31
800049d4:	1d ff 70 fd 	j 800044b4 <IfxVadc_disableAccess>

800049d8 <IfxVadc_setArbiterPriority>:
}


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
800049d8:	1b 87 01 f0 	addi %d15,%d7,24
    if (slotEnable != FALSE)
800049dc:	df 04 23 00 	jeq %d4,0,80004a22 <IfxVadc_setArbiterPriority+0x4a>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
800049e0:	19 42 04 00 	ld.w %d2,[%a4]4
800049e4:	0f f4 00 40 	sh %d4,%d4,%d15
800049e8:	a6 24       	or %d4,%d2
800049ea:	59 44 04 00 	st.w [%a4]4,%d4
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
800049ee:	19 42 04 00 	ld.w %d2,[%a4]4
800049f2:	06 27       	sh %d7,2
800049f4:	82 3f       	mov %d15,3
800049f6:	0f 7f 00 f0 	sh %d15,%d15,%d7
800049fa:	0f f2 e0 f0 	andn %d15,%d2,%d15
800049fe:	6c 41       	st.w [%a4]4,%d15
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80004a00:	4c 41       	ld.w %d15,[%a4]4
80004a02:	0f 75 00 50 	sh %d5,%d5,%d7
80004a06:	a6 f5       	or %d5,%d15
80004a08:	59 45 04 00 	st.w [%a4]4,%d5

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004a0c:	4c 41       	ld.w %d15,[%a4]4
80004a0e:	c2 37       	add %d7,3
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80004a10:	76 64       	jz %d6,80004a18 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004a12:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004a16:	3c 03       	j 80004a1c <IfxVadc_setArbiterPriority+0x44>
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80004a18:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004a1c:	59 47 04 00 	st.w [%a4]4,%d7
80004a20:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80004a22:	19 44 04 00 	ld.w %d4,[%a4]4
80004a26:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004a2a:	6c 41       	st.w [%a4]4,%d15
80004a2c:	00 90       	ret 

80004a2e <IfxVadc_setScan>:

void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80004a2e:	19 4f 28 20 	ld.w %d15,[%a4]168
80004a32:	26 54       	and %d4,%d5
80004a34:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004a38:	0f 4f a0 50 	or %d5,%d15,%d4
80004a3c:	59 45 28 20 	st.w [%a4]168,%d5
80004a40:	00 90       	ret 

80004a42 <IfxVadc_startupCalibration>:
{
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a42:	3b f0 01 40 	mov %d4,31
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004a46:	40 4f       	mov.aa %a15,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a48:	6d ff 52 fd 	call 800044ec <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80004a4c:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a50:	40 f4       	mov.aa %a4,%a15
80004a52:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004a56:	3b f0 01 40 	mov %d4,31
80004a5a:	59 ff 00 20 	st.w [%a15]128,%d15
80004a5e:	6d ff 2b fd 	call 800044b4 <IfxVadc_disableAccess>
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004a62:	82 02       	mov %d2,0

    /* Wait for hardware self-test and calibration to complete */
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;
80004a64:	82 0f       	mov %d15,0
80004a66:	a0 72       	mov.a %a2,7


IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
{
    uint8 status;
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80004a68:	8f a2 00 30 	sh %d3,%d2,10
80004a6c:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004a70:	c2 12       	add %d2,1
80004a72:	19 33 40 20 	ld.w %d3,[%a3]1152
80004a76:	37 03 61 3e 	extr.u %d3,%d3,28,1

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
            {
                calibrationRunning = TRUE;
80004a7a:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80004a7e:	fc 25       	loop %a2,80004a68 <IfxVadc_startupCalibration+0x26>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80004a80:	df 1f f1 7f 	jeq %d15,1,80004a62 <IfxVadc_startupCalibration+0x20>
}
80004a84:	00 90       	ret 
	...

80004a88 <IfxAsclin_disableModule>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
80004a88:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004a8a:	6d 00 66 13 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004a8e:	02 24       	mov %d4,%d2
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004a90:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004a92:	6d 00 62 12 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80004a96:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
    IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
80004a98:	02 f4       	mov %d4,%d15
80004a9a:	8f 12 40 21 	or %d2,%d2,1
80004a9e:	68 02       	st.w [%a15]0,%d2
80004aa0:	1d 00 90 13 	j 800071c0 <IfxScuWdt_setCpuEndinit>

80004aa4 <IfxAsclin_enableAscErrorFlags>:
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80004aa4:	7b 10 00 f0 	movh %d15,1
80004aa8:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004aac:	19 4f 00 10 	ld.w %d15,[%a4]64
80004ab0:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004ab4:	a6 f4       	or %d4,%d15
80004ab6:	59 44 00 10 	st.w [%a4]64,%d4
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80004aba:	7b 00 40 f0 	movh %d15,1024
80004abe:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004ac2:	19 4f 00 10 	ld.w %d15,[%a4]64
80004ac6:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004aca:	a6 f5       	or %d5,%d15
80004acc:	59 45 00 10 	st.w [%a4]64,%d5
80004ad0:	00 90       	ret 

80004ad2 <IfxAsclin_enableModule>:
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
80004ad2:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004ad4:	6d 00 41 13 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004ad8:	02 24       	mov %d4,%d2
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004ada:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004adc:	6d 00 3d 12 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
80004ae0:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004ae2:	02 f4       	mov %d4,%d15
80004ae4:	8f 12 c0 21 	andn %d2,%d2,1
80004ae8:	68 02       	st.w [%a15]0,%d2
80004aea:	1d 00 6b 13 	j 800071c0 <IfxScuWdt_setCpuEndinit>

80004aee <IfxAsclin_getAddress>:
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
    }
    else
    {
        module = NULL_PTR;
80004aee:	a0 02       	mov.a %a2,0

Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
{
    Ifx_ASCLIN *module;

    if (asclin < IFXASCLIN_NUM_MODULES)
80004af0:	ff 44 09 00 	jge %d4,4,80004b02 <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004af4:	91 00 00 f8 	movh.a %a15,32768
80004af8:	d9 ff a0 a0 	lea %a15,[%a15]2720 <80000aa0 <IfxAsclin_cfg_indexMap>>
80004afc:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004b00:	c8 02       	ld.a %a2,[%a15]0
    {
        module = NULL_PTR;
    }

    return module;
}
80004b02:	00 90       	ret 

80004b04 <IfxAsclin_getFaFrequency>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004b04:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004b08:	16 1f       	and %d15,31
float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
80004b0a:	c2 ff       	add %d15,-1
80004b0c:	8b 0f a1 22 	ge.u %d2,%d15,16
80004b10:	df 02 32 80 	jne %d2,0,80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b14:	91 00 00 f8 	movh.a %a15,32768
80004b18:	d9 ff a0 c4 	lea %a15,[%a15]19232 <80004b20 <IfxAsclin_getFaFrequency+0x1c>>
80004b1c:	90 ff       	addsc.a %a15,%a15,%d15,2
80004b1e:	dc 0f       	ji %a15
80004b20:	1d 00 20 00 	j 80004b60 <IfxAsclin_getFaFrequency+0x5c>
80004b24:	1d 00 20 00 	j 80004b64 <IfxAsclin_getFaFrequency+0x60>
80004b28:	1d 00 26 00 	j 80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b2c:	1d 00 1e 00 	j 80004b68 <IfxAsclin_getFaFrequency+0x64>
80004b30:	1d 00 22 00 	j 80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b34:	1d 00 20 00 	j 80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b38:	1d 00 1e 00 	j 80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b3c:	1d 00 18 00 	j 80004b6c <IfxAsclin_getFaFrequency+0x68>
80004b40:	1d 00 1a 00 	j 80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b44:	1d 00 18 00 	j 80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b48:	1d 00 16 00 	j 80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b4c:	1d 00 14 00 	j 80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b50:	1d 00 12 00 	j 80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b54:	1d 00 10 00 	j 80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b58:	1d 00 0e 00 	j 80004b74 <IfxAsclin_getFaFrequency+0x70>
80004b5c:	1d 00 0a 00 	j 80004b70 <IfxAsclin_getFaFrequency+0x6c>
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
80004b60:	1d 00 37 0a 	j 80005fce <IfxScuCcu_getSpbFrequency>
        break;
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004b64:	1d 00 a6 08 	j 80005cb0 <IfxScuCcu_getOsc0Frequency>
        break;
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004b68:	1d 00 c3 08 	j 80005cee <IfxScuCcu_getPllErayFrequency>
        break;
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004b6c:	1d 00 20 0a 	j 80005fac <IfxScuCcu_getBaud2Frequency>
        break;
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80004b70:	1d 00 0e 0a 	j 80005f8c <IfxScuCcu_getBaud1Frequency>
        frequency = 0.0;
        break;
    }

    return frequency;
}
80004b74:	82 02       	mov %d2,0
80004b76:	00 90       	ret 

80004b78 <IfxAsclin_getIndex>:

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004b78:	91 00 00 38 	movh.a %a3,32768
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004b7c:	82 0f       	mov %d15,0
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004b7e:	d9 33 a0 a0 	lea %a3,[%a3]2720 <80000aa0 <IfxAsclin_cfg_indexMap>>
80004b82:	a0 3f       	mov.a %a15,3
80004b84:	d0 32       	addsc.a %a2,%a3,%d15,3
80004b86:	d4 25       	ld.a %a5,[%a2]
80004b88:	7d 45 05 80 	jne.a %a5,%a4,80004b92 <IfxAsclin_getIndex+0x1a>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004b8c:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80004b90:	00 90       	ret 
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004b92:	c2 1f       	add %d15,1
80004b94:	fc f8       	loop %a15,80004b84 <IfxAsclin_getIndex+0xc>
IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;
80004b96:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80004b98:	00 90       	ret 

80004b9a <IfxAsclin_getPdFrequency>:
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
80004b9a:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004b9c:	6d ff b4 ff 	call 80004b04 <IfxAsclin_getFaFrequency>
80004ba0:	4c f5       	ld.w %d15,[%a15]20
80004ba2:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004ba6:	c2 1f       	add %d15,1
80004ba8:	4b 0f 41 f1 	itof %d15,%d15
}
80004bac:	4b f2 51 20 	div.f %d2,%d2,%d15
80004bb0:	00 90       	ret 

80004bb2 <IfxAsclin_getOvsFrequency>:
    return result;
}


float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
{
80004bb2:	40 4f       	mov.aa %a15,%a4
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
80004bb4:	6d ff f3 ff 	call 80004b9a <IfxAsclin_getPdFrequency>
80004bb8:	48 83       	ld.w %d3,[%a15]32
80004bba:	4c f8       	ld.w %d15,[%a15]32
80004bbc:	37 03 6c 38 	extr.u %d3,%d3,16,12
80004bc0:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004bc4:	4b 03 41 31 	itof %d3,%d3
80004bc8:	4b 0f 41 f1 	itof %d15,%d15
80004bcc:	4b 32 41 20 	mul.f %d2,%d2,%d3
}
80004bd0:	4b f2 51 20 	div.f %d2,%d2,%d15
80004bd4:	00 90       	ret 

80004bd6 <IfxAsclin_getShiftFrequency>:
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
}


float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
{
80004bd6:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
80004bd8:	6d ff ed ff 	call 80004bb2 <IfxAsclin_getOvsFrequency>
80004bdc:	4c f5       	ld.w %d15,[%a15]20
80004bde:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004be2:	4b 0f 41 f1 	itof %d15,%d15
}
80004be6:	4b f2 51 20 	div.f %d2,%d2,%d15
80004bea:	00 90       	ret 

80004bec <IfxAsclin_getSrcPointerEr>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
80004bec:	6d ff c6 ff 	call 80004b78 <IfxAsclin_getIndex>
80004bf0:	53 c2 20 f0 	mul %d15,%d2,12
80004bf4:	60 ff       	mov.a %a15,%d15
80004bf6:	d9 f2 08 28 	lea %a2,[%a15]-32632
}
80004bfa:	11 42 00 2f 	addih.a %a2,%a2,61444
80004bfe:	00 90       	ret 

80004c00 <IfxAsclin_getSrcPointerRx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
80004c00:	6d ff bc ff 	call 80004b78 <IfxAsclin_getIndex>
80004c04:	53 c2 20 f0 	mul %d15,%d2,12
80004c08:	60 ff       	mov.a %a15,%d15
80004c0a:	d9 f2 04 28 	lea %a2,[%a15]-32636
}
80004c0e:	11 42 00 2f 	addih.a %a2,%a2,61444
80004c12:	00 90       	ret 

80004c14 <IfxAsclin_getSrcPointerTx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
80004c14:	6d ff b2 ff 	call 80004b78 <IfxAsclin_getIndex>
80004c18:	53 c2 20 f0 	mul %d15,%d2,12
80004c1c:	60 ff       	mov.a %a15,%d15
80004c1e:	d9 f2 00 28 	lea %a2,[%a15]-32640
}
80004c22:	11 42 00 2f 	addih.a %a2,%a2,61444
80004c26:	00 90       	ret 

80004c28 <IfxAsclin_read16>:


uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004c28:	9f 04 04 80 	jned %d4,0,80004c30 <IfxAsclin_read16+0x8>
        *data++ = (uint16)rxData->U;
        count--;
    }

    return count;
}
80004c2c:	82 02       	mov %d2,0
80004c2e:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint16)rxData->U;
80004c30:	19 4f 08 10 	ld.w %d15,[%a4]72
80004c34:	ac 50       	st.h [%a5]0,%d15
80004c36:	b0 25       	add.a %a5,2
80004c38:	3c f8       	j 80004c28 <IfxAsclin_read16>

80004c3a <IfxAsclin_read32>:
    return count;
}


uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004c3a:	9f 04 04 80 	jned %d4,0,80004c42 <IfxAsclin_read32+0x8>
        *data++ = rxData->U;
        count--;
    }

    return count;
}
80004c3e:	82 02       	mov %d2,0
80004c40:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = rxData->U;
80004c42:	19 4f 08 10 	ld.w %d15,[%a4]72
80004c46:	6c 50       	st.w [%a5]0,%d15
80004c48:	b0 45       	add.a %a5,4
80004c4a:	3c f8       	j 80004c3a <IfxAsclin_read32>

80004c4c <IfxAsclin_read8>:
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004c4c:	9f 04 04 80 	jned %d4,0,80004c54 <IfxAsclin_read8+0x8>
        *data++ = (uint8)rxData->U;
        count--;
    }

    return count;
}
80004c50:	82 02       	mov %d2,0
80004c52:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint8)rxData->U;
80004c54:	19 4f 08 10 	ld.w %d15,[%a4]72
80004c58:	2c 50       	st.b [%a5]0,%d15
80004c5a:	b0 15       	add.a %a5,1
80004c5c:	3c f8       	j 80004c4c <IfxAsclin_read8>

80004c5e <IfxAsclin_resetModule>:
    return count;
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
80004c5e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004c60:	6d 00 7b 12 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80004c64:	02 24       	mov %d4,%d2
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004c66:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004c68:	6d 00 77 11 	call 80006f56 <IfxScuWdt_clearCpuEndinit>

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004c6c:	19 f2 34 30 	ld.w %d2,[%a15]244
    asclin->KRST1.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004c70:	02 f4       	mov %d4,%d15
void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004c72:	8f 12 40 21 	or %d2,%d2,1
80004c76:	59 f2 34 30 	st.w [%a15]244,%d2
    asclin->KRST1.B.RST = 1;
80004c7a:	19 f2 30 30 	ld.w %d2,[%a15]240
80004c7e:	8f 12 40 21 	or %d2,%d2,1
80004c82:	59 f2 30 30 	st.w [%a15]240,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004c86:	6d 00 9d 12 	call 800071c0 <IfxScuWdt_setCpuEndinit>

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
80004c8a:	19 f2 34 30 	ld.w %d2,[%a15]244
80004c8e:	6f 12 fe 7f 	jz.t %d2,1,80004c8a <IfxAsclin_resetModule+0x2c>
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004c92:	02 f4       	mov %d4,%d15
80004c94:	6d 00 61 11 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004c98:	19 f2 2c 30 	ld.w %d2,[%a15]236

    IfxScuWdt_setCpuEndinit(passwd);
80004c9c:	02 f4       	mov %d4,%d15

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004c9e:	8f 12 40 21 	or %d2,%d2,1
80004ca2:	59 f2 2c 30 	st.w [%a15]236,%d2

    IfxScuWdt_setCpuEndinit(passwd);
80004ca6:	1d 00 8d 12 	j 800071c0 <IfxScuWdt_setCpuEndinit>

80004caa <IfxAsclin_setClockSource>:
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004caa:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004cae:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004cb2:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004cb6:	f6 46       	jnz %d4,80004cc2 <IfxAsclin_setClockSource+0x18>
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004cb8:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004cbc:	bf 0f fe 7f 	jlt %d15,0,80004cb8 <IfxAsclin_setClockSource+0xe>
80004cc0:	00 90       	ret 
80004cc2:	19 4f 0c 10 	ld.w %d15,[%a4]76
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
80004cc6:	ff 0f fe 7f 	jge %d15,0,80004cc2 <IfxAsclin_setClockSource+0x18>
80004cca:	00 90       	ret 

80004ccc <IfxAsclin_setBaudrateBitFields>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004ccc:	19 4f 0c 10 	ld.w %d15,[%a4]76
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004cd0:	19 42 0c 10 	ld.w %d2,[%a4]76
80004cd4:	16 1f       	and %d15,31
80004cd6:	8f f2 c1 21 	andn %d2,%d2,31
80004cda:	59 42 0c 10 	st.w [%a4]76,%d2
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004cde:	19 42 0c 10 	ld.w %d2,[%a4]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004ce2:	bf 02 fe 7f 	jlt %d2,0,80004cde <IfxAsclin_setBaudrateBitFields+0x12>
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80004ce6:	19 42 14 00 	ld.w %d2,[%a4]20
80004cea:	c2 f4       	add %d4,-1
80004cec:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004cf0:	59 44 14 00 	st.w [%a4]20,%d4
}


IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
{
    asclin->BRG.B.NUMERATOR = numerator;
80004cf4:	19 42 20 00 	ld.w %d2,[%a4]32
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
    IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
    IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
    IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
    IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
    IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
80004cf8:	02 f4       	mov %d4,%d15
80004cfa:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004cfe:	59 45 20 00 	st.w [%a4]32,%d5
}


IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
{
    asclin->BRG.B.DENOMINATOR = denominator;
80004d02:	19 42 20 00 	ld.w %d2,[%a4]32
80004d06:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004d0a:	59 46 20 00 	st.w [%a4]32,%d6
}


IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
{
    asclin->BITCON.B.OVERSAMPLING = ovsFactor;
80004d0e:	19 42 14 00 	ld.w %d2,[%a4]20
80004d12:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004d16:	59 47 14 00 	st.w [%a4]20,%d7
80004d1a:	1d ff c8 ff 	j 80004caa <IfxAsclin_setClockSource>

80004d1e <IfxAsclin_setBitTiming>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004d1e:	19 42 0c 10 	ld.w %d2,[%a4]76
}


boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
{
80004d22:	20 08       	sub.a %sp,8
80004d24:	8f f2 01 21 	and %d2,%d2,31
80004d28:	02 5f       	mov %d15,%d5
80004d2a:	40 4f       	mov.aa %a15,%a4
80004d2c:	02 48       	mov %d8,%d4
80004d2e:	02 6a       	mov %d10,%d6
80004d30:	60 7d       	mov.a %a13,%d7
80004d32:	60 2c       	mov.a %a12,%d2
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004d34:	6d ff 33 ff 	call 80004b9a <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004d38:	92 15       	add %d5,%d15,1
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004d3a:	02 29       	mov %d9,%d2
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80004d3c:	82 4f       	mov %d15,4
80004d3e:	0b f5 b0 f1 	max.u %d15,%d5,%d15
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004d42:	8f ff 0f 21 	and %d2,%d15,255
80004d46:	59 a2 04 00 	st.w [%sp]4,%d2
80004d4a:	82 16       	mov %d6,1
80004d4c:	0b 6a b0 61 	max.u %d6,%d10,%d6
80004d50:	16 ff       	and %d15,255
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
80004d52:	4b 0f 41 31 	itof %d3,%d15
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004d56:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004d5a:	4b 38 41 f0 	mul.f %d15,%d8,%d3
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004d5e:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004d60:	02 f4       	mov %d4,%d15
80004d62:	6d 00 0a 36 	call 8000b976 <__extendsfdf2>
80004d66:	7b 00 f5 73 	movh %d7,16208
80004d6a:	0b 23 10 48 	mov %e4,%d3,%d2
80004d6e:	7b 20 2f 6d 	movh %d6,54002
80004d72:	1b d7 24 76 	addi %d7,%d7,25165
80004d76:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004d7a:	6d 00 21 37 	call 8000bbbc <__muldf3>
80004d7e:	0b 23 10 48 	mov %e4,%d3,%d2
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
    nBest          = n;
80004d82:	82 1c       	mov %d12,1
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004d84:	6d 00 ad 38 	call 8000bede <__truncdfsf2>

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004d88:	4b f9 51 50 	div.f %d5,%d9,%d15
80004d8c:	91 00 00 20 	movh.a %a2,0

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
    relError       = __absf(fOvs - f);
80004d90:	82 01       	mov %d1,0

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004d92:	4b 05 71 51 	ftouz %d5,%d5
    }

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
80004d96:	4b 05 61 31 	utof %d3,%d5
80004d9a:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
80004d9e:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80004da2:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80004da6:	37 00 61 00 	extr.u %d0,%d0,0,1
80004daa:	9b 03 00 48 	addih %d4,%d3,32768
80004dae:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004db2:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004db6:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004dba:	df 00 45 80 	jne %d0,0,80004e44 <IfxAsclin_setBitTiming+0x126>
80004dbe:	8f 15 00 60 	sh %d6,%d5,1
            /* Increase the value of the oversampling to generate the required baudrate */
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
80004dc2:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80004dc4:	82 0e       	mov %d14,0
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004dc6:	82 28       	mov %d8,2
80004dc8:	3b 00 00 71 	mov %d7,4096
80004dcc:	7f 76 3b 80 	jge.u %d6,%d7,80004e42 <IfxAsclin_setBitTiming+0x124>
    {
        if (n == 2)
        {
            adder_facL = 1;
            adder_facH = 1;
80004dd0:	a0 13       	mov.a %a3,1

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
        {
            adder_facL = 1;
80004dd2:	82 1b       	mov %d11,1
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
80004dd4:	df 28 09 00 	jeq %d8,2,80004de6 <IfxAsclin_setBitTiming+0xc8>
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004dd8:	73 8e 0a a0 	mul %d10,%d14,%d8
80004ddc:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
80004de0:	60 a3       	mov.a %a3,%d10
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004de2:	02 ab       	mov %d11,%d10
            adder_facH = adder_facL + 1;
80004de4:	b0 13       	add.a %a3,1
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004de6:	80 34       	mov.d %d4,%a3
80004de8:	3f b4 25 80 	jlt.u %d4,%d11,80004e32 <IfxAsclin_setBitTiming+0x114>
        {
            f           = (fpd * n) / (n * d + count);
80004dec:	4b 08 61 01 	utof %d0,%d8
80004df0:	0b 6b 00 40 	add %d4,%d11,%d6
80004df4:	4b 04 61 d1 	utof %d13,%d4
80004df8:	4b 09 41 00 	mul.f %d0,%d9,%d0
            newRelError = __absf(fOvs - f);
80004dfc:	80 2a       	mov.d %d10,%a2
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
        {
            f           = (fpd * n) / (n * d + count);
80004dfe:	4b d0 51 00 	div.f %d0,%d0,%d13
            newRelError = __absf(fOvs - f);
80004e02:	6b 00 31 0f 	sub.f %d0,%d15,%d0
80004e06:	4b a0 01 d0 	cmp.f %d13,%d0,%d10
80004e0a:	37 0d 61 d0 	extr.u %d13,%d13,0,1
80004e0e:	9b 00 00 a8 	addih %d10,%d0,32768
80004e12:	2b 0a 40 0d 	sel %d0,%d13,%d10,%d0

            if (relError > (newRelError))
80004e16:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
80004e1a:	37 0d 61 d1 	extr.u %d13,%d13,2,1
80004e1e:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
80004e22:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
80004e26:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
80004e2a:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
        {
            adder_facL = (adder_facL_min * n) / nBest;
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004e2e:	c2 1b       	add %d11,1
80004e30:	3c db       	j 80004de6 <IfxAsclin_setBitTiming+0xc8>
                dBest          = (n * d + count);
                adder_facL_min = count;
            }
        }

        if (relError <= limit)
80004e32:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004e36:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004e3a:	f6 04       	jnz %d0,80004e42 <IfxAsclin_setBitTiming+0x124>
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004e3c:	c2 18       	add %d8,1
80004e3e:	42 56       	add %d6,%d5
80004e40:	3c c6       	j 80004dcc <IfxAsclin_setBitTiming+0xae>
80004e42:	02 15       	mov %d5,%d1
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004e44:	19 f3 0c 10 	ld.w %d3,[%a15]76
80004e48:	8f f3 c1 31 	andn %d3,%d3,31
80004e4c:	59 f3 0c 10 	st.w [%a15]76,%d3
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004e50:	19 ff 0c 10 	ld.w %d15,[%a15]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004e54:	bf 0f fe 7f 	jlt %d15,0,80004e50 <IfxAsclin_setBitTiming+0x132>
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80004e58:	4c f8       	ld.w %d15,[%a15]32
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004e5a:	19 a2 04 00 	ld.w %d2,[%sp]4
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80004e5e:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004e62:	c2 f2       	add %d2,-1
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80004e64:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
80004e66:	4c f8       	ld.w %d15,[%a15]32

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004e68:	80 ea       	mov.d %d10,%a14
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
80004e6a:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
80004e6e:	80 c4       	mov.d %d4,%a12
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
80004e70:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004e72:	4c f5       	ld.w %d15,[%a15]20
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
80004e74:	40 f4       	mov.aa %a4,%a15
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004e76:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
80004e7a:	68 52       	st.w [%a15]20,%d2

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004e7c:	4c f5       	ld.w %d15,[%a15]20

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80004e7e:	80 d2       	mov.d %d2,%a13

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004e80:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80004e84:	7b 00 00 f8 	movh %d15,32768

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004e88:	68 56       	st.w [%a15]20,%d6

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80004e8a:	ab 0f 80 72 	sel %d7,%d2,%d15,0
80004e8e:	4c f5       	ld.w %d15,[%a15]20
80004e90:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
80004e94:	a6 7f       	or %d15,%d7
80004e96:	68 5f       	st.w [%a15]20,%d15

    IfxAsclin_setClockSource(asclin, source);
80004e98:	6d ff 09 ff 	call 80004caa <IfxAsclin_setClockSource>

    return TRUE;
}
80004e9c:	82 12       	mov %d2,1
80004e9e:	00 90       	ret 

80004ea0 <IfxAsclin_write16>:
    }
}


uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004ea0:	9f 04 04 80 	jned %d4,0,80004ea8 <IfxAsclin_write16+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80004ea4:	82 02       	mov %d2,0
80004ea6:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80004ea8:	b9 5f 00 00 	ld.hu %d15,[%a5]0
80004eac:	b0 25       	add.a %a5,2
80004eae:	59 4f 04 10 	st.w [%a4]68,%d15
80004eb2:	3c f7       	j 80004ea0 <IfxAsclin_write16>

80004eb4 <IfxAsclin_write32>:
    return count;
}


uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004eb4:	9f 04 04 80 	jned %d4,0,80004ebc <IfxAsclin_write32+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80004eb8:	82 02       	mov %d2,0
80004eba:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80004ebc:	4c 50       	ld.w %d15,[%a5]0
80004ebe:	b0 45       	add.a %a5,4
80004ec0:	59 4f 04 10 	st.w [%a4]68,%d15
80004ec4:	3c f8       	j 80004eb4 <IfxAsclin_write32>

80004ec6 <IfxAsclin_write8>:
    return count;
}

#include <stdio.h>
uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004ec6:	9f 04 04 80 	jned %d4,0,80004ece <IfxAsclin_write8+0x8>
        count--;

    }

    return count;
}
80004eca:	82 02       	mov %d2,0
80004ecc:	00 90       	ret 
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {

        txData->U = *data++;
80004ece:	0c 50       	ld.bu %d15,[%a5]0
80004ed0:	b0 15       	add.a %a5,1
80004ed2:	59 4f 04 10 	st.w [%a4]68,%d15
80004ed6:	3c f8       	j 80004ec6 <IfxAsclin_write8>

80004ed8 <IfxAsclin_Asc_getReadCount>:
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
80004ed8:	cc 42       	ld.a %a15,[%a4]8


sint32 IfxAsclin_Asc_getReadCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_readCount(asclin->rx);
}
80004eda:	88 22       	ld.h %d2,[%a15]4
80004edc:	00 90       	ret 

80004ede <IfxAsclin_Asc_getReadEvent>:


IfxStdIf_DPipe_ReadEvent IfxAsclin_Asc_getReadEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->rx->eventWriter;
80004ede:	99 42 08 00 	ld.a %a2,[%a4]8
}
80004ee2:	d9 22 1d 00 	lea %a2,[%a2]29
80004ee6:	00 90       	ret 

80004ee8 <IfxAsclin_Asc_getSendCount>:


uint32 IfxAsclin_Asc_getSendCount(IfxAsclin_Asc *asclin)
{
    return asclin->sendCount;
80004ee8:	19 42 10 00 	ld.w %d2,[%a4]16
}
80004eec:	00 90       	ret 

80004eee <IfxAsclin_Asc_getTxTimeStamp>:


Ifx_TickTime IfxAsclin_Asc_getTxTimeStamp(IfxAsclin_Asc *asclin)
{
    return asclin->txTimestamp;
80004eee:	09 42 54 09 	ld.d %e2,[%a4]20
}
80004ef2:	00 90       	ret 

80004ef4 <IfxAsclin_Asc_getWriteCount>:


sint32 IfxAsclin_Asc_getWriteCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_writeCount(asclin->tx);
80004ef4:	cc 41       	ld.a %a15,[%a4]4
 *
 * \return Returns the free size in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)
{
    return (Ifx_SizeT)(fifo->size - Ifx_Fifo_readCount(fifo));
80004ef6:	88 c2       	ld.h %d2,[%a15]24
80004ef8:	8c f2       	ld.h %d15,[%a15]4
80004efa:	a2 f2       	sub %d2,%d15
}
80004efc:	37 02 50 20 	extr %d2,%d2,0,16
80004f00:	00 90       	ret 

80004f02 <IfxAsclin_Asc_getWriteEvent>:


IfxStdIf_DPipe_WriteEvent IfxAsclin_Asc_getWriteEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->tx->eventWriter;
80004f02:	99 42 04 00 	ld.a %a2,[%a4]4
}
80004f06:	d9 22 1d 00 	lea %a2,[%a2]29
80004f0a:	00 90       	ret 

80004f0c <IfxAsclin_Asc_isrError>:
}


void IfxAsclin_Asc_isrError(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin; /* getting the pointer to ASCLIN registers from module handler*/
80004f0c:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.PE;
80004f0e:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
80004f10:	ef 0f 0a 00 	jz.t %d15,16,80004f24 <IfxAsclin_Asc_isrError+0x18>
}


IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.PEC = 1;
80004f14:	4c ff       	ld.w %d15,[%a15]60
80004f16:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80004f1a:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
80004f1c:	0c 4e       	ld.bu %d15,[%a4]14
80004f1e:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
80004f22:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.FE;
80004f24:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
80004f26:	ef 2f 0a 00 	jz.t %d15,18,80004f3a <IfxAsclin_Asc_isrError+0x2e>
}


IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.FEC = 1;
80004f2a:	4c ff       	ld.w %d15,[%a15]60
80004f2c:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80004f30:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
80004f32:	0c 4e       	ld.bu %d15,[%a4]14
80004f34:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
80004f38:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFO;
80004f3a:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
80004f3c:	ef af 0a 00 	jz.t %d15,26,80004f50 <IfxAsclin_Asc_isrError+0x44>
}


IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFOC = 1;
80004f40:	4c ff       	ld.w %d15,[%a15]60
80004f42:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80004f46:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
80004f48:	0c 4e       	ld.bu %d15,[%a4]14
80004f4a:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
80004f4e:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFU;
80004f50:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
80004f52:	ef bf 0a 00 	jz.t %d15,27,80004f66 <IfxAsclin_Asc_isrError+0x5a>
}


IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFUC = 1;
80004f56:	4c ff       	ld.w %d15,[%a15]60
80004f58:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80004f5c:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
80004f5e:	0c 4e       	ld.bu %d15,[%a4]14
80004f60:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
80004f64:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.TFO;
80004f66:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
80004f68:	ef ef 0a 00 	jz.t %d15,30,80004f7c <IfxAsclin_Asc_isrError+0x70>
}


IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.TFOC = 1;
80004f6c:	4c ff       	ld.w %d15,[%a15]60
80004f6e:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80004f72:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
80004f74:	0c 4e       	ld.bu %d15,[%a4]14
80004f76:	b7 1f 01 f2 	insert %d15,%d15,1,4,1
80004f7a:	2c 4e       	st.b [%a4]14,%d15
80004f7c:	00 90       	ret 

80004f7e <IfxAsclin_Asc_resetSendCount>:
}


void IfxAsclin_Asc_resetSendCount(IfxAsclin_Asc *asclin)
{
    asclin->sendCount = 0;
80004f7e:	82 0f       	mov %d15,0
80004f80:	6c 44       	st.w [%a4]16,%d15
80004f82:	00 90       	ret 

80004f84 <IfxAsclin_Asc_canReadCount>:
}


boolean IfxAsclin_Asc_canReadCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canReadCount(asclin->rx, count, timeout);
80004f84:	99 44 08 00 	ld.a %a4,[%a4]8
80004f88:	1d 00 df 18 	j 80008146 <Ifx_Fifo_canReadCount>

80004f8c <IfxAsclin_Asc_flushTx>:

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80004f8c:	82 f2       	mov %d2,-1
80004f8e:	06 f2       	sh %d2,-1
80004f90:	ba f4       	eq %d15,%d4,-1
80004f92:	0b 52 00 f2 	and.eq %d15,%d2,%d5
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
}


boolean IfxAsclin_Asc_flushTx(IfxAsclin_Asc *asclin, Ifx_TickTime timeout)
{
80004f96:	40 4f       	mov.aa %a15,%a4
80004f98:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
80004f9a:	82 f9       	mov %d9,-1
80004f9c:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80004f9e:	ee 16       	jnz %d15,80004fca <IfxAsclin_Asc_flushTx+0x3e>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80004fa0:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80004fa4:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80004fa8:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80004fac:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004fae:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80004fb2:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80004fb6:	02 39       	mov %d9,%d3
80004fb8:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80004fbc:	76 23       	jz %d2,80004fc2 <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
80004fbe:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80004fc2:	0b 69 40 90 	addx %d9,%d9,%d6
80004fc6:	0b 58 50 80 	addc %d8,%d8,%d5
 *
 * \return TRUE if the buffer is emptied.
 */
IFX_INLINE boolean Ifx_Fifo_flush(Ifx_Fifo *fifo, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(fifo, fifo->size, timeout);
80004fca:	c8 14       	ld.a %a4,[%a15]4
80004fcc:	02 57       	mov %d7,%d5
80004fce:	c9 44 18 00 	ld.h %d4,[%a4]24
80004fd2:	6d 00 fd 19 	call 800083cc <Ifx_Fifo_canWriteCount>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80004fd6:	82 f4       	mov %d4,-1
80004fd8:	06 f4       	sh %d4,-1
    boolean      result;

    /* Flush the software FIFO */
    result = Ifx_Fifo_flush(asclin->tx, timeout);

    if (result)
80004fda:	f6 23       	jnz %d2,80004fe0 <IfxAsclin_Asc_flushTx+0x54>
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
    {
        deadLine = TIME_INFINITE;
80004fdc:	82 02       	mov %d2,0
80004fde:	00 90       	ret 
    {
        /* Flush the hardware FIFO (wait until all bytes have been transmitted) */
        do
        {
            result = IfxAsclin_getTxFifoFillLevel(asclin->asclin) == 0;
80004fe0:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
80004fe2:	4c 23       	ld.w %d15,[%a2]12
80004fe4:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
80004fe8:	6e 1e       	jz %d15,80005024 <IfxAsclin_Asc_flushTx+0x98>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80004fea:	ba f9       	eq %d15,%d9,-1
80004fec:	0b 84 00 f2 	and.eq %d15,%d4,%d8
80004ff0:	ee f9       	jnz %d15,80004fe2 <IfxAsclin_Asc_flushTx+0x56>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80004ff2:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80004ff6:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80004ffa:	0d 00 40 03 	disable 
80004ffe:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005000:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005004:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005008:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000500c:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005010:	76 23       	jz %d2,80005016 <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
80005012:	0d 00 00 03 	enable 
80005016:	0b 8f 00 21 	eq %d2,%d15,%d8
8000501a:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
8000501e:	0b 8f 90 22 	or.lt %d2,%d15,%d8
80005022:	3c dc       	j 80004fda <IfxAsclin_Asc_flushTx+0x4e>
80005024:	82 12       	mov %d2,1
    }

    return result;
}
80005026:	00 90       	ret 

80005028 <IfxAsclin_Asc_canWriteCount>:
}


boolean IfxAsclin_Asc_canWriteCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(asclin->tx, count, timeout);
80005028:	99 44 04 00 	ld.a %a4,[%a4]4
8000502c:	1d 00 d0 19 	j 800083cc <Ifx_Fifo_canWriteCount>

80005030 <IfxAsclin_Asc_clearRx>:
}


void IfxAsclin_Asc_clearRx(IfxAsclin_Asc *asclin)
{
    IfxAsclin_flushRxFifo(asclin->asclin);
80005030:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
80005032:	4c f4       	ld.w %d15,[%a15]16
80005034:	96 01       	or %d15,1
80005036:	68 4f       	st.w [%a15]16,%d15
    Ifx_Fifo_clear(asclin->rx);
80005038:	99 44 08 00 	ld.a %a4,[%a4]8
8000503c:	1d 00 ad 19 	j 80008396 <Ifx_Fifo_clear>

80005040 <IfxAsclin_Asc_clearTx>:
}


void IfxAsclin_Asc_clearTx(IfxAsclin_Asc *asclin)
{
80005040:	40 4f       	mov.aa %a15,%a4
    Ifx_Fifo_clear(asclin->tx);
80005042:	99 44 04 00 	ld.a %a4,[%a4]4
80005046:	6d 00 a8 19 	call 80008396 <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
8000504a:	c8 0f       	ld.a %a15,[%a15]0
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
8000504c:	4c f3       	ld.w %d15,[%a15]12
8000504e:	96 01       	or %d15,1
80005050:	68 3f       	st.w [%a15]12,%d15
80005052:	00 90       	ret 

80005054 <IfxAsclin_Asc_read>:
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005054:	99 44 08 00 	ld.a %a4,[%a4]8
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005058:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
8000505c:	94 64       	ld.h %d4,[%a6]
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000505e:	40 6f       	mov.aa %a15,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005060:	6d 00 e0 18 	call 80008220 <Ifx_Fifo_read>

    *count -= left;
80005064:	8c f0       	ld.h %d15,[%a15]0
80005066:	a2 2f       	sub %d15,%d2
80005068:	a8 0f       	st.h [%a15]0,%d15

    return left == 0;
}
8000506a:	8b 02 00 22 	eq %d2,%d2,0
8000506e:	00 90       	ret 

80005070 <IfxAsclin_Asc_isrTransmit>:
    }
}

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
80005070:	20 18       	sub.a %sp,24
80005072:	40 4f       	mov.aa %a15,%a4
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005074:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80005078:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000507c:	0d 00 40 03 	disable 
80005080:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005082:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005086:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000508a:	02 52       	mov %d2,%d5
8000508c:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005090:	76 43       	jz %d4,80005096 <IfxAsclin_Asc_isrTransmit+0x26>
    {
        __enable();
80005092:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
80005096:	89 f2 54 09 	st.d [%a15]20,%e2
    asclin->sendCount++;

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
8000509a:	c8 14       	ld.a %a4,[%a15]4

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
    asclin->txTimestamp = IfxStm_now();
    asclin->sendCount++;
8000509c:	4c f4       	ld.w %d15,[%a15]16
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
8000509e:	c9 44 04 00 	ld.h %d4,[%a4]4
800050a2:	c2 1f       	add %d15,1
800050a4:	68 4f       	st.w [%a15]16,%d15

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
800050a6:	df 04 32 00 	jeq %d4,0,8000510a <IfxAsclin_Asc_isrTransmit+0x9a>
    {

        switch (asclin->dataBufferMode)
800050aa:	0c ff       	ld.bu %d15,[%a15]15
800050ac:	6e 03       	jz %d15,800050b2 <IfxAsclin_Asc_isrTransmit+0x42>
800050ae:	9e 1d       	jeq %d15,1,800050e8 <IfxAsclin_Asc_isrTransmit+0x78>
800050b0:	00 90       	ret 
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
800050b2:	c8 02       	ld.a %a2,[%a15]0
        case Ifx_DataBufferMode_normal:
        {

            uint8          ascData[16];
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;
800050b4:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
800050b6:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
800050ba:	4c 23       	ld.w %d15,[%a2]12
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
800050bc:	d2 06       	mov %e6,0
800050be:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800050c2:	d9 a5 08 00 	lea %a5,[%sp]8
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
800050c6:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
800050c8:	0c a7       	ld.bu %d15,[%sp]7
800050ca:	8b 0f 01 f1 	rsub %d15,%d15,16
800050ce:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800050d2:	0b 4f 90 f1 	min.u %d15,%d15,%d4
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
800050d6:	37 0f 50 40 	extr %d4,%d15,0,16
800050da:	6d 00 a3 18 	call 80008220 <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
800050de:	c8 04       	ld.a %a4,[%a15]0
800050e0:	d9 a5 08 00 	lea %a5,[%sp]8
800050e4:	02 f4       	mov %d4,%d15
800050e6:	3c 10       	j 80005106 <IfxAsclin_Asc_isrTransmit+0x96>
        {

            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
800050e8:	d2 06       	mov %e6,0
800050ea:	d9 a5 08 00 	lea %a5,[%sp]8
800050ee:	3b c0 00 40 	mov %d4,12
800050f2:	6d 00 97 18 	call 80008220 <Ifx_Fifo_read>

            ascData = packedData.data;
800050f6:	39 af 10 00 	ld.bu %d15,[%sp]16
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800050fa:	c8 04       	ld.a %a4,[%a15]0
            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);

            ascData = packedData.data;
800050fc:	d9 a5 18 00 	lea %a5,[%sp]24
80005100:	89 5f 2f f4 	st.b [+%a5]-17,%d15
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
80005104:	82 14       	mov %d4,1
        }
        break;
80005106:	1d ff e0 fe 	j 80004ec6 <IfxAsclin_write8>
    }
    else
    {

        /* Transmit buffer is empty */
        asclin->txInProgress = FALSE;
8000510a:	28 c4       	st.b [%a15]12,%d4
8000510c:	00 90       	ret 

8000510e <IfxAsclin_Asc_isrReceive>:

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
8000510e:	0c 4f       	ld.bu %d15,[%a4]15
    }
}


void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
80005110:	20 20       	sub.a %sp,32
80005112:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005114:	6e 34       	jz %d15,8000517c <IfxAsclin_Asc_isrReceive+0x6e>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
80005116:	82 18       	mov %d8,1

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005118:	df 1f 45 80 	jne %d15,1,800051a2 <IfxAsclin_Asc_isrReceive+0x94>
    }
    case Ifx_DataBufferMode_timeStampSingle:
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
8000511c:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->RXFIFOCON.B.FILL;
8000511e:	4c 24       	ld.w %d15,[%a2]16
80005120:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005124:	6e 2b       	jz %d15,8000517a <IfxAsclin_Asc_isrReceive+0x6c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005126:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
8000512a:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000512e:	0d 00 40 03 	disable 
80005132:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005134:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005138:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000513c:	8f 02 40 21 	or %d2,%d2,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005140:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005144:	76 33       	jz %d3,8000514a <IfxAsclin_Asc_isrReceive+0x3c>
    {
        __enable();
80005146:	0d 00 00 03 	enable 
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
8000514a:	c8 04       	ld.a %a4,[%a15]0
8000514c:	d9 a5 10 00 	lea %a5,[%sp]16
80005150:	82 14       	mov %d4,1
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
80005152:	78 02       	st.w [%sp]8,%d15
80005154:	59 a2 04 00 	st.w [%sp]4,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005158:	6d ff 7a fd 	call 80004c4c <IfxAsclin_read8>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000515c:	c8 24       	ld.a %a4,[%a15]8

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
8000515e:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
80005162:	d2 06       	mov %e6,0
80005164:	d9 a5 04 00 	lea %a5,[%sp]4
80005168:	3b c0 00 40 	mov %d4,12

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
8000516c:	2c ac       	st.b [%sp]12,%d15

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000516e:	6d 00 a7 19 	call 800084bc <Ifx_Fifo_write>
80005172:	df 02 d5 7f 	jeq %d2,0,8000511c <IfxAsclin_Asc_isrReceive+0xe>
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
80005176:	28 d8       	st.b [%a15]13,%d8
80005178:	3c d2       	j 8000511c <IfxAsclin_Asc_isrReceive+0xe>
8000517a:	00 90       	ret 
    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
    {
        uint8 count;
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
8000517c:	d4 44       	ld.a %a4,[%a4]
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
8000517e:	d9 a5 10 00 	lea %a5,[%sp]16
80005182:	4c 44       	ld.w %d15,[%a4]16
80005184:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005188:	02 f4       	mov %d4,%d15
8000518a:	6d ff 61 fd 	call 80004c4c <IfxAsclin_read8>

        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
8000518e:	c8 24       	ld.a %a4,[%a15]8
80005190:	d2 06       	mov %e6,0
80005192:	d9 a5 10 00 	lea %a5,[%sp]16
80005196:	02 f4       	mov %d4,%d15
80005198:	6d 00 92 19 	call 800084bc <Ifx_Fifo_write>
8000519c:	76 23       	jz %d2,800051a2 <IfxAsclin_Asc_isrReceive+0x94>
        {
            /* Receive buffer is full, data is discard */
            asclin->rxSwFifoOverflow = TRUE;
8000519e:	82 1f       	mov %d15,1
800051a0:	28 df       	st.b [%a15]13,%d15
800051a2:	00 90       	ret 

800051a4 <IfxAsclin_Asc_blockingRead>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
800051a4:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
800051a6:	82 1f       	mov %d15,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
800051a8:	40 4f       	mov.aa %a15,%a4
    Ifx_SizeT count = 1;
800051aa:	ac a3       	st.h [%sp]6,%d15
    uint8     data;

    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
800051ac:	82 f4       	mov %d4,-1
800051ae:	40 f4       	mov.aa %a4,%a15
800051b0:	d9 a5 05 00 	lea %a5,[%sp]5
800051b4:	d9 a6 06 00 	lea %a6,[%sp]6
800051b8:	9b 04 00 58 	addih %d5,%d4,32768
800051bc:	6d ff 4c ff 	call 80005054 <IfxAsclin_Asc_read>
800051c0:	df 12 f6 ff 	jne %d2,1,800051ac <IfxAsclin_Asc_blockingRead+0x8>
    {}

    return data;
}
800051c4:	39 a2 05 00 	ld.bu %d2,[%sp]5
800051c8:	00 90       	ret 

800051ca <IfxAsclin_Asc_disableModule>:
}


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
800051ca:	cc 40       	ld.a %a15,[%a4]0
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
800051cc:	6d 00 c5 0f 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800051d0:	02 24       	mov %d4,%d2


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
800051d2:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800051d4:	6d 00 c1 0e 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
800051d8:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclinSFR); /* disabling the module */
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
800051da:	02 f4       	mov %d4,%d15
800051dc:	8f 12 40 21 	or %d2,%d2,1
800051e0:	68 02       	st.w [%a15]0,%d2
800051e2:	1d 00 ef 0f 	j 800071c0 <IfxScuWdt_setCpuEndinit>

800051e6 <IfxAsclin_Asc_initModule>:
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
800051e6:	cc 50       	ld.a %a15,[%a5]0
    return &asclin->tx->eventWriter;
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
800051e8:	40 4e       	mov.aa %a14,%a4
800051ea:	40 5c       	mov.aa %a12,%a5
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
    IfxAsclin_Status status    = IfxAsclin_Status_noError;

    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
800051ec:	ec 40       	st.a [%a4]0,%a15

    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
800051ee:	40 f4       	mov.aa %a4,%a15
800051f0:	6d ff 71 fc 	call 80004ad2 <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
800051f4:	40 f4       	mov.aa %a4,%a15
800051f6:	82 04       	mov %d4,0
800051f8:	6d ff 59 fd 	call 80004caa <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800051fc:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
800051fe:	40 f4       	mov.aa %a4,%a15
80005200:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
80005204:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80005206:	8c c4       	ld.h %d15,[%a12]8
80005208:	48 52       	ld.w %d2,[%a15]20
8000520a:	c2 ff       	add %d15,-1
8000520c:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
80005210:	68 5f       	st.w [%a15]20,%d15
80005212:	39 c4 28 00 	ld.bu %d4,[%a12]40
80005216:	6d ff 4a fd 	call 80004caa <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
8000521a:	40 f4       	mov.aa %a4,%a15
8000521c:	19 c4 04 00 	ld.w %d4,[%a12]4
80005220:	39 c5 0a 00 	ld.bu %d5,[%a12]10
80005224:	39 c6 0d 00 	ld.bu %d6,[%a12]13
80005228:	39 c7 0c 00 	ld.bu %d7,[%a12]12
8000522c:	6d ff 79 fd 	call 80004d1e <IfxAsclin_setBitTiming>
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005230:	40 f4       	mov.aa %a4,%a15
80005232:	82 04       	mov %d4,0
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
80005234:	02 29       	mov %d9,%d2
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005236:	6d ff 3a fd 	call 80004caa <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.LB = enable ? 1 : 0;
8000523a:	39 c2 38 00 	ld.bu %d2,[%a12]56
8000523e:	7b 00 00 f1 	movh %d15,4096
80005242:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005246:	4c f1       	ld.w %d15,[%a15]4
80005248:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
8000524c:	a6 2f       	or %d15,%d2
8000524e:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
80005250:	39 c2 14 00 	ld.bu %d2,[%a12]20
80005254:	7b 00 00 f4 	movh %d15,16384
80005258:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000525c:	4c f6       	ld.w %d15,[%a15]24
8000525e:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
80005262:	a6 2f       	or %d15,%d2
80005264:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
{
    asclin->FRAMECON.B.ODD = type;
80005266:	48 62       	ld.w %d2,[%a15]24
80005268:	39 cf 12 00 	ld.bu %d15,[%a12]18
8000526c:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
80005270:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
80005272:	48 62       	ld.w %d2,[%a15]24
80005274:	0c cf       	ld.bu %d15,[%a12]15
80005276:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
8000527a:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir)
{
    asclin->FRAMECON.B.MSB = dir;
8000527c:	48 62       	ld.w %d2,[%a15]24
8000527e:	39 cf 11 00 	ld.bu %d15,[%a12]17
80005282:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
80005286:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
{
    asclin->DATCON.B.DATLEN = length;
80005288:	48 72       	ld.w %d2,[%a15]28
8000528a:	39 cf 13 00 	ld.bu %d15,[%a12]19
8000528e:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
80005292:	68 7f       	st.w [%a15]28,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
80005294:	48 32       	ld.w %d2,[%a15]12
80005296:	39 cf 16 00 	ld.bu %d15,[%a12]22
8000529a:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000529e:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width)
{
    asclin->RXFIFOCON.B.OUTW = width;
800052a0:	48 42       	ld.w %d2,[%a15]16
800052a2:	39 cf 17 00 	ld.bu %d15,[%a12]23
800052a6:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800052aa:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
{
    asclin->FRAMECON.B.IDLE = delay;
800052ac:	48 62       	ld.w %d2,[%a15]24
800052ae:	0c ce       	ld.bu %d15,[%a12]14
800052b0:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
800052b4:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
800052b6:	39 c2 18 00 	ld.bu %d2,[%a12]24
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800052ba:	da 0f       	mov %d15,15
800052bc:	0b f2 90 21 	min.u %d2,%d2,%d15
800052c0:	48 33       	ld.w %d3,[%a15]12
800052c2:	37 23 04 24 	insert %d2,%d3,%d2,8,4
800052c6:	68 32       	st.w [%a15]12,%d2
}


IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level)
{
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
800052c8:	39 c2 19 00 	ld.bu %d2,[%a12]25
800052cc:	0b f2 90 f1 	min.u %d15,%d2,%d15
800052d0:	48 42       	ld.w %d2,[%a15]16
800052d2:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
800052d6:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800052d8:	39 cf 10 00 	ld.bu %d15,[%a12]16
800052dc:	48 62       	ld.w %d2,[%a15]24
800052de:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
800052e2:	68 6f       	st.w [%a15]24,%d15
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/

    /* Pin mapping */
    const IfxAsclin_Asc_Pins *pins = config->pins;
800052e4:	99 cd 24 00 	ld.a %a13,[%a12]36

    if (pins != NULL_PTR)
800052e8:	bd 0d 81 00 	jz.a %a13,800053ea <IfxAsclin_Asc_initModule+0x204>
    {
        IfxAsclin_Cts_In *cts = pins->cts;
800052ec:	4c d0       	ld.w %d15,[%a13]0

        if (cts != NULL_PTR)
800052ee:	6e 27       	jz %d15,8000533c <IfxAsclin_Asc_initModule+0x156>
}


IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (cts->pin.port != NULL_PTR)
800052f0:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
800052f2:	79 d5 04 00 	ld.b %d5,[%a13]4
800052f6:	99 24 04 00 	ld.a %a4,[%a2]4
800052fa:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800052fe:	bd 04 1f 00 	jz.a %a4,8000533c <IfxAsclin_Asc_initModule+0x156>
80005302:	39 24 08 00 	ld.bu %d4,[%a2]8
80005306:	8f f5 0f 51 	and %d5,%d5,255
8000530a:	6d 00 ba 03 	call 80005a7e <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
8000530e:	60 f3       	mov.a %a3,%d15
80005310:	02 85       	mov %d5,%d8
80005312:	99 34 04 00 	ld.a %a4,[%a3]4
80005316:	39 34 08 00 	ld.bu %d4,[%a3]8
8000531a:	6d 00 30 04 	call 80005b7a <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
8000531e:	60 f3       	mov.a %a3,%d15
80005320:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
80005322:	19 22 04 00 	ld.w %d2,[%a2]4
80005326:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
8000532a:	59 22 04 00 	st.w [%a2]4,%d2
    if (cts->pin.port != NULL_PTR)
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
        IfxAsclin_enableCts(cts->module, TRUE);
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
8000532e:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
{
    asclin->IOCR.B.CTS = ctsi;
80005330:	0c 3c       	ld.bu %d15,[%a3]12
80005332:	19 22 04 00 	ld.w %d2,[%a2]4
80005336:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
8000533a:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rx_In *rx = pins->rx;
8000533c:	4c d2       	ld.w %d15,[%a13]8

        if (rx != NULL_PTR)
8000533e:	6e 20       	jz %d15,8000537e <IfxAsclin_Asc_initModule+0x198>
}


IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (rx->pin.port != NULL_PTR)
80005340:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
80005342:	79 d5 0c 00 	ld.b %d5,[%a13]12
80005346:	99 24 04 00 	ld.a %a4,[%a2]4
8000534a:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000534e:	bd 04 18 00 	jz.a %a4,8000537e <IfxAsclin_Asc_initModule+0x198>
80005352:	39 24 08 00 	ld.bu %d4,[%a2]8
80005356:	8f f5 0f 51 	and %d5,%d5,255
8000535a:	6d 00 92 03 	call 80005a7e <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
8000535e:	60 f3       	mov.a %a3,%d15
80005360:	02 85       	mov %d5,%d8
80005362:	99 34 04 00 	ld.a %a4,[%a3]4
80005366:	39 34 08 00 	ld.bu %d4,[%a3]8
8000536a:	6d 00 08 04 	call 80005b7a <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
8000536e:	60 f3       	mov.a %a3,%d15
80005370:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti)
{
    asclin->IOCR.B.ALTI = alti;
80005372:	0c 3c       	ld.bu %d15,[%a3]12
80005374:	19 22 04 00 	ld.w %d2,[%a2]4
80005378:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
8000537c:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rts_Out *rts = pins->rts;
8000537e:	4c d4       	ld.w %d15,[%a13]16

        if (rts != NULL_PTR)
80005380:	6e 1a       	jz %d15,800053b4 <IfxAsclin_Asc_initModule+0x1ce>
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80005382:	60 f2       	mov.a %a2,%d15
80005384:	39 d2 14 00 	ld.bu %d2,[%a13]20
80005388:	39 23 0c 00 	ld.bu %d3,[%a2]12
8000538c:	99 24 04 00 	ld.a %a4,[%a2]4
80005390:	0f 23 a0 50 	or %d5,%d3,%d2
80005394:	39 24 08 00 	ld.bu %d4,[%a2]8
80005398:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
8000539c:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800053a0:	6d 00 6f 03 	call 80005a7e <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
800053a4:	60 f3       	mov.a %a3,%d15
800053a6:	02 85       	mov %d5,%d8
800053a8:	99 34 04 00 	ld.a %a4,[%a3]4
800053ac:	39 34 08 00 	ld.bu %d4,[%a3]8
800053b0:	6d 00 e5 03 	call 80005b7a <IfxPort_setPinPadDriver>
        }

        IfxAsclin_Tx_Out *tx = pins->tx;
800053b4:	4c d6       	ld.w %d15,[%a13]24

        if (tx != NULL_PTR)
800053b6:	6e 1a       	jz %d15,800053ea <IfxAsclin_Asc_initModule+0x204>
800053b8:	60 f2       	mov.a %a2,%d15
800053ba:	39 d2 1c 00 	ld.bu %d2,[%a13]28
800053be:	39 23 0c 00 	ld.bu %d3,[%a2]12
800053c2:	99 24 04 00 	ld.a %a4,[%a2]4
800053c6:	0f 23 a0 50 	or %d5,%d3,%d2
800053ca:	39 24 08 00 	ld.bu %d4,[%a2]8
800053ce:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
800053d2:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800053d6:	6d 00 54 03 	call 80005a7e <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
800053da:	60 f3       	mov.a %a3,%d15
800053dc:	02 85       	mov %d5,%d8
800053de:	99 34 04 00 	ld.a %a4,[%a3]4
800053e2:	39 34 08 00 	ld.bu %d4,[%a3]8
800053e6:	6d 00 ca 03 	call 80005b7a <IfxPort_setPinPadDriver>
        }
    }

    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
800053ea:	40 f4       	mov.aa %a4,%a15
800053ec:	39 c4 28 00 	ld.bu %d4,[%a12]40
800053f0:	6d ff 5d fc 	call 80004caa <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSENABLE.U = 0x00000000;
800053f4:	82 0f       	mov %d15,0
800053f6:	59 ff 00 10 	st.w [%a15]64,%d15
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
800053fa:	82 f2       	mov %d2,-1
800053fc:	68 f2       	st.w [%a15]60,%d2

    IfxAsclin_disableAllFlags(asclinSFR);                     /* disable all flags */
    IfxAsclin_clearAllFlags(asclinSFR);                       /* clear all flags */

    /* HW error flags */
    asclin->errorFlags.ALL = 0;
800053fe:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
80005400:	4c ca       	ld.w %d15,[%a12]40
80005402:	2e 87       	jz.t %d15,8,80005410 <IfxAsclin_Asc_initModule+0x22a>
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80005404:	19 ff 00 10 	ld.w %d15,[%a15]64
80005408:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000540c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableParityErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.frameError)
80005410:	4c ca       	ld.w %d15,[%a12]40
80005412:	2e 97       	jz.t %d15,9,80005420 <IfxAsclin_Asc_initModule+0x23a>
}


IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
80005414:	19 ff 00 10 	ld.w %d15,[%a15]64
80005418:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
8000541c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableFrameErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoOverflow)
80005420:	4c ca       	ld.w %d15,[%a12]40
80005422:	2e a7       	jz.t %d15,10,80005430 <IfxAsclin_Asc_initModule+0x24a>
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80005424:	19 ff 00 10 	ld.w %d15,[%a15]64
80005428:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
8000542c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoOverflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoUnderflow)
80005430:	4c ca       	ld.w %d15,[%a12]40
80005432:	2e b7       	jz.t %d15,11,80005440 <IfxAsclin_Asc_initModule+0x25a>
}


IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
80005434:	19 ff 00 10 	ld.w %d15,[%a15]64
80005438:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
8000543c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoUnderflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.txFifoOverflow)
80005440:	4c ca       	ld.w %d15,[%a12]40
80005442:	2e c7       	jz.t %d15,12,80005450 <IfxAsclin_Asc_initModule+0x26a>
}


IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
80005444:	19 ff 00 10 	ld.w %d15,[%a15]64
80005448:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000544c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableTxFifoOverflowFlag(asclinSFR, TRUE);
    }

    /* transmission flags */
    asclin->rxSwFifoOverflow = FALSE;
80005450:	82 0f       	mov %d15,0
80005452:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
80005454:	2c ec       	st.b [%a14]12,%d15

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
80005456:	d2 04       	mov %e4,0
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005458:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
8000545c:	82 0f       	mov %d15,0
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
8000545e:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
80005462:	6c e4       	st.w [%a14]16,%d15
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005464:	e9 e3 0f 00 	st.b [%a14]15,%d3
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
        elementSize = 1;
80005468:	82 1f       	mov %d15,1
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
8000546a:	76 34       	jz %d3,80005472 <IfxAsclin_Asc_initModule+0x28c>
        break;
    case Ifx_DataBufferMode_timeStampSingle:
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
        break;
    default:
        elementSize = 0;
8000546c:	ba 13       	eq %d15,%d3,1
8000546e:	ab cf a0 ff 	seln %d15,%d15,%d15,12
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
80005472:	99 c4 2c 00 	ld.a %a4,[%a12]44
80005476:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
8000547a:	02 f5       	mov %d5,%d15
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
8000547c:	bc 44       	jz.a %a4,80005484 <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
8000547e:	6d 00 36 16 	call 800080ea <Ifx_Fifo_init>
80005482:	3c 03       	j 80005488 <IfxAsclin_Asc_initModule+0x2a2>
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
80005484:	6d 00 50 16 	call 80008124 <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
80005488:	99 c4 34 00 	ld.a %a4,[%a12]52
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
8000548c:	b5 e2 04 00 	st.a [%a14]4,%a2
80005490:	c9 c4 30 00 	ld.h %d4,[%a12]48
    }

    if (config->rxBuffer != NULL_PTR)
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005494:	02 f5       	mov %d5,%d15
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
    }

    if (config->rxBuffer != NULL_PTR)
80005496:	bc 44       	jz.a %a4,8000549e <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005498:	6d 00 29 16 	call 800080ea <Ifx_Fifo_init>
8000549c:	3c 03       	j 800054a2 <IfxAsclin_Asc_initModule+0x2bc>
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
8000549e:	6d 00 43 16 	call 80008124 <Ifx_Fifo_create>
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;
800054a2:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
800054a6:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
800054aa:	8b 3f 00 82 	eq %d8,%d15,3
800054ae:	02 83       	mov %d3,%d8
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
800054b0:	b5 e2 08 00 	st.a [%a14]8,%a2
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
800054b4:	8b 02 00 35 	or.ne %d3,%d2,0
800054b8:	df 03 1e 00 	jeq %d3,0,800054f4 <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
800054bc:	40 f4       	mov.aa %a4,%a15
800054be:	6d ff a1 fb 	call 80004c00 <IfxAsclin_getSrcPointerRx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800054c2:	54 22       	ld.w %d2,[%a2]
800054c4:	39 c3 1e 00 	ld.bu %d3,[%a12]30
800054c8:	8f f2 cf 21 	andn %d2,%d2,255
800054cc:	a6 32       	or %d2,%d3
800054ce:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800054d0:	54 22       	ld.w %d2,[%a2]
800054d2:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800054d6:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800054d8:	54 22       	ld.w %d2,[%a2]
800054da:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800054de:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
800054e0:	19 f2 00 10 	ld.w %d2,[%a15]64
800054e4:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
800054e8:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800054ec:	54 22       	ld.w %d2,[%a2]
800054ee:	b7 f2 01 25 	insert %d2,%d2,15,10,1
800054f2:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.rxPriority);
        IfxAsclin_enableRxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
800054f4:	b9 c2 1c 00 	ld.hu %d2,[%a12]28
800054f8:	8b 02 00 85 	or.ne %d8,%d2,0
800054fc:	df 08 1e 00 	jeq %d8,0,80005538 <IfxAsclin_Asc_initModule+0x352>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
80005500:	40 f4       	mov.aa %a4,%a15
80005502:	6d ff 89 fb 	call 80004c14 <IfxAsclin_getSrcPointerTx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005506:	54 22       	ld.w %d2,[%a2]
80005508:	39 c3 1c 00 	ld.bu %d3,[%a12]28
8000550c:	8f f2 cf 21 	andn %d2,%d2,255
80005510:	a6 32       	or %d2,%d3
80005512:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005514:	54 22       	ld.w %d2,[%a2]
80005516:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
8000551a:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
8000551c:	54 22       	ld.w %d2,[%a2]
8000551e:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
80005522:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
80005524:	19 f2 00 10 	ld.w %d2,[%a15]64
80005528:	b7 f2 81 2f 	insert %d2,%d2,15,31,1
8000552c:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80005530:	54 22       	ld.w %d2,[%a2]
80005532:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005536:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.txPriority);
        IfxAsclin_enableTxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
80005538:	b9 c2 20 00 	ld.hu %d2,[%a12]32
8000553c:	df 02 1e 00 	jeq %d2,0,80005578 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
80005540:	40 f4       	mov.aa %a4,%a15
80005542:	6d ff 55 fb 	call 80004bec <IfxAsclin_getSrcPointerEr>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005546:	54 22       	ld.w %d2,[%a2]
80005548:	39 c3 20 00 	ld.bu %d3,[%a12]32
8000554c:	8f f2 cf 21 	andn %d2,%d2,255
80005550:	a6 32       	or %d2,%d3
80005552:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005554:	54 22       	ld.w %d2,[%a2]
80005556:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
8000555a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
8000555c:	4c 20       	ld.w %d15,[%a2]0
8000555e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80005562:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80005564:	19 ff 00 10 	ld.w %d15,[%a15]64
80005568:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000556c:	59 ff 00 10 	st.w [%a15]64,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80005570:	4c 20       	ld.w %d15,[%a2]0
80005572:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80005576:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
80005578:	4c f4       	ld.w %d15,[%a15]16

    IfxAsclin_flushRxFifo(asclinSFR);              // flushing Rx FIFO
    IfxAsclin_flushTxFifo(asclinSFR);              // flushing Tx FIFO

    return status;
}
8000557a:	02 92       	mov %d2,%d9
8000557c:	96 02       	or %d15,2
8000557e:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
80005580:	4c f3       	ld.w %d15,[%a15]12
80005582:	96 02       	or %d15,2
80005584:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
80005586:	4c f4       	ld.w %d15,[%a15]16
80005588:	96 01       	or %d15,1
8000558a:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
8000558c:	4c f3       	ld.w %d15,[%a15]12
8000558e:	96 01       	or %d15,1
80005590:	68 3f       	st.w [%a15]12,%d15
80005592:	00 90       	ret 

80005594 <IfxAsclin_Asc_initModuleConfig>:

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
80005594:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005596:	7b 10 7e 34 	movh %d3,18401

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
8000559a:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
8000559e:	82 12       	mov %d2,1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
800055a0:	82 0f       	mov %d15,0

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
800055a2:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
800055a6:	59 43 04 00 	st.w [%a4]4,%d3
    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
800055aa:	e9 42 0f 00 	st.b [%a4]15,%d2

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
800055ae:	82 33       	mov %d3,3
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
800055b0:	e9 42 10 00 	st.b [%a4]16,%d2
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
800055b4:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
800055b8:	e9 42 17 00 	st.b [%a4]23,%d2
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
800055bc:	82 f2       	mov %d2,-1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
800055be:	e9 4f 38 00 	st.b [%a4]56,%d15

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
800055c2:	e9 43 0a 00 	st.b [%a4]10,%d3

    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
800055c6:	2c 4c       	st.b [%a4]12,%d15
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
800055c8:	e9 43 0d 00 	st.b [%a4]13,%d3
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
800055cc:	2c 4e       	st.b [%a4]14,%d15
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
800055ce:	e9 4f 11 00 	st.b [%a4]17,%d15
    config->frame.parityBit               = FALSE;                             /* disable parity*/
800055d2:	e9 4f 14 00 	st.b [%a4]20,%d15
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
800055d6:	e9 4f 12 00 	st.b [%a4]18,%d15
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800055da:	82 73       	mov %d3,7

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
800055dc:	e9 4f 18 00 	st.b [%a4]24,%d15
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
800055e0:	e9 4f 19 00 	st.b [%a4]25,%d15
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
800055e4:	e9 4f 1a 00 	st.b [%a4]26,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
800055e8:	e9 42 29 00 	st.b [%a4]41,%d2
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
800055ec:	82 0f       	mov %d15,0

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
800055ee:	82 02       	mov %d2,0
}


void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;
800055f0:	f4 45       	st.a [%a4],%a5
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800055f2:	e9 43 13 00 	st.b [%a4]19,%d3
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
800055f6:	ac 4f       	st.h [%a4]30,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
800055f8:	ac 4e       	st.h [%a4]28,%d15
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
800055fa:	f9 4f 20 00 	st.h [%a4]32,%d15
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
800055fe:	e9 4f 22 00 	st.b [%a4]34,%d15

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
80005602:	59 42 24 00 	st.w [%a4]36,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
80005606:	59 42 34 00 	st.w [%a4]52,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
8000560a:	59 42 2c 00 	st.w [%a4]44,%d2

    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
8000560e:	f9 42 2a 00 	st.h [%a4]42,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
80005612:	f9 42 30 00 	st.h [%a4]48,%d2

    config->dataBufferMode = Ifx_DataBufferMode_normal;
80005616:	e9 4f 39 00 	st.b [%a4]57,%d15
8000561a:	00 90       	ret 

8000561c <IfxAsclin_Asc_initiateTransmission>:
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
8000561c:	0c 4c       	ld.bu %d15,[%a4]12
    config->dataBufferMode = Ifx_DataBufferMode_normal;
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
8000561e:	20 10       	sub.a %sp,16
80005620:	40 4f       	mov.aa %a15,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
80005622:	ee 20       	jnz %d15,80005662 <IfxAsclin_Asc_initiateTransmission+0x46>
    {

        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005624:	99 44 04 00 	ld.a %a4,[%a4]4
80005628:	8c 42       	ld.h %d15,[%a4]4
8000562a:	6e 1c       	jz %d15,80005662 <IfxAsclin_Asc_initiateTransmission+0x46>
        {
            uint8 data;

            asclin->txInProgress = TRUE;
8000562c:	82 1f       	mov %d15,1
8000562e:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
80005630:	0c ff       	ld.bu %d15,[%a15]15
80005632:	6e 0c       	jz %d15,8000564a <IfxAsclin_Asc_initiateTransmission+0x2e>
80005634:	de 11       	jne %d15,1,80005656 <IfxAsclin_Asc_initiateTransmission+0x3a>
            break;
            case Ifx_DataBufferMode_timeStampSingle:
            {

                Ifx_DataBufferMode_TimeStampSingle packedData;
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005636:	d2 06       	mov %e6,0
80005638:	d9 a5 04 00 	lea %a5,[%sp]4
8000563c:	3b c0 00 40 	mov %d4,12
80005640:	6d 00 f0 15 	call 80008220 <Ifx_Fifo_read>
                data = packedData.data;
80005644:	0c ac       	ld.bu %d15,[%sp]12
80005646:	2c a3       	st.b [%sp]3,%d15
80005648:	3c 07       	j 80005656 <IfxAsclin_Asc_initiateTransmission+0x3a>
            switch (asclin->dataBufferMode)
            {
            case Ifx_DataBufferMode_normal: // here
            {

                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
8000564a:	d2 06       	mov %e6,0
8000564c:	d9 a5 03 00 	lea %a5,[%sp]3
80005650:	82 14       	mov %d4,1
80005652:	6d 00 e7 15 	call 80008220 <Ifx_Fifo_read>
                data = packedData.data;
            }
            break;
            }

            IfxAsclin_write8(asclin->asclin, &data, 1);
80005656:	c8 04       	ld.a %a4,[%a15]0
80005658:	d9 a5 03 00 	lea %a5,[%sp]3
8000565c:	82 14       	mov %d4,1
8000565e:	6d ff 34 fc 	call 80004ec6 <IfxAsclin_write8>
80005662:	00 90       	ret 

80005664 <IfxAsclin_Asc_write>:
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005664:	40 4f       	mov.aa %a15,%a4

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
80005666:	0c 4c       	ld.bu %d15,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005668:	99 44 04 00 	ld.a %a4,[%a4]4

    if (*count != 0)
8000566c:	94 63       	ld.h %d3,[%a6]
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000566e:	0b 45 10 88 	mov %e8,%d5,%d4
80005672:	40 5d       	mov.aa %a13,%a5

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005674:	c9 44 18 00 	ld.h %d4,[%a4]24
#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
80005678:	82 12       	mov %d2,1
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;

    if (*count != 0)
8000567a:	df 03 25 00 	jeq %d3,0,800056c4 <IfxAsclin_Asc_write+0x60>
8000567e:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005680:	ee 13       	jnz %d15,800056a6 <IfxAsclin_Asc_write+0x42>
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005682:	37 04 70 f0 	extr.u %d15,%d4,0,16

    if (*count != 0)
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005686:	7f 3f 10 00 	jge %d15,%d3,800056a6 <IfxAsclin_Asc_write+0x42>
        {


            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
8000568a:	0b 89 10 68 	mov %e6,%d9,%d8
8000568e:	6d 00 17 17 	call 800084bc <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
80005692:	40 f4       	mov.aa %a4,%a15
80005694:	6d ff c4 ff 	call 8000561c <IfxAsclin_Asc_initiateTransmission>

            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
80005698:	94 c4       	ld.h %d4,[%a12]
8000569a:	c8 14       	ld.a %a4,[%a15]4
8000569c:	a2 f4       	sub %d4,%d15
8000569e:	10 d5       	addsc.a %a5,%a13,%d15,0
800056a0:	37 04 50 40 	extr %d4,%d4,0,16
800056a4:	3c 03       	j 800056aa <IfxAsclin_Asc_write+0x46>

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
800056a6:	40 d5       	mov.aa %a5,%a13
800056a8:	02 34       	mov %d4,%d3
800056aa:	0b 89 10 68 	mov %e6,%d9,%d8
800056ae:	6d 00 07 17 	call 800084bc <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
800056b2:	40 f4       	mov.aa %a4,%a15

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
800056b4:	02 2f       	mov %d15,%d2

            IfxAsclin_Asc_initiateTransmission(asclin);
800056b6:	6d ff b3 ff 	call 8000561c <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
800056ba:	94 c2       	ld.h %d2,[%a12]
800056bc:	a2 f2       	sub %d2,%d15
800056be:	b4 c2       	st.h [%a12],%d2
        result  = left == 0;
800056c0:	8b 0f 00 22 	eq %d2,%d15,0

    }

    return result;
}
800056c4:	00 90       	ret 

800056c6 <IfxAsclin_Asc_blockingWrite>:
    return data;
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
800056c6:	20 10       	sub.a %sp,16
800056c8:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800056cc:	82 f4       	mov %d4,-1
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
800056ce:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800056d0:	d9 a5 07 00 	lea %a5,[%sp]7
800056d4:	d9 a6 0e 00 	lea %a6,[%sp]14
800056d8:	9b 04 00 58 	addih %d5,%d4,32768
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
800056dc:	ac a7       	st.h [%sp]14,%d15

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
}
800056de:	1d ff c3 ff 	j 80005664 <IfxAsclin_Asc_write>

800056e2 <IfxAsclin_Asc_stdIfDPipeInit>:


boolean IfxAsclin_Asc_stdIfDPipeInit(IfxStdIf_DPipe *stdif, IfxAsclin_Asc *asclin)
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));
800056e2:	40 42       	mov.aa %a2,%a4
800056e4:	82 0f       	mov %d15,0
800056e6:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
800056ea:	24 2f       	st.b [%a2+],%d15
800056ec:	fc ff       	loop %a15,800056ea <IfxAsclin_Asc_stdIfDPipeInit+0x8>

    /* Set the API link */
    stdif->driver         = asclin;
    stdif->write          = (IfxStdIf_DPipe_Write) & IfxAsclin_Asc_write;
800056ee:	7b 00 00 f8 	movh %d15,32768
800056f2:	1b 4f 66 f5 	addi %d15,%d15,22116
800056f6:	6c 42       	st.w [%a4]8,%d15
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
800056f8:	7b 00 00 f8 	movh %d15,32768
800056fc:	1b 4f 05 f5 	addi %d15,%d15,20564
80005700:	6c 43       	st.w [%a4]12,%d15
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
80005702:	7b 00 00 f8 	movh %d15,32768
80005706:	1b 8f ed f4 	addi %d15,%d15,20184
8000570a:	6c 44       	st.w [%a4]16,%d15
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
8000570c:	7b 00 00 f8 	movh %d15,32768
80005710:	1b ef ed f4 	addi %d15,%d15,20190
80005714:	6c 45       	st.w [%a4]20,%d15
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
80005716:	7b 00 00 f8 	movh %d15,32768
8000571a:	1b 4f ef f4 	addi %d15,%d15,20212
8000571e:	6c 46       	st.w [%a4]24,%d15
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
80005720:	7b 00 00 f8 	movh %d15,32768
80005724:	1b 2f f0 f4 	addi %d15,%d15,20226
80005728:	6c 47       	st.w [%a4]28,%d15
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
8000572a:	7b 00 00 f8 	movh %d15,32768
8000572e:	1b 4f f8 f4 	addi %d15,%d15,20356
80005732:	6c 48       	st.w [%a4]32,%d15
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
80005734:	7b 00 00 f8 	movh %d15,32768
80005738:	1b 8f 02 f5 	addi %d15,%d15,20520
8000573c:	6c 49       	st.w [%a4]36,%d15
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
8000573e:	7b 00 00 f8 	movh %d15,32768
80005742:	1b cf f8 f4 	addi %d15,%d15,20364
80005746:	6c 4a       	st.w [%a4]40,%d15
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
80005748:	7b 00 00 f8 	movh %d15,32768
8000574c:	1b 0f 04 f5 	addi %d15,%d15,20544
80005750:	6c 4b       	st.w [%a4]44,%d15
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
80005752:	7b 00 00 f8 	movh %d15,32768
80005756:	1b 0f 03 f5 	addi %d15,%d15,20528
8000575a:	6c 4c       	st.w [%a4]48,%d15
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
8000575c:	7b 00 00 f8 	movh %d15,32768
80005760:	1b ef 10 f5 	addi %d15,%d15,20750
80005764:	6c 4d       	st.w [%a4]52,%d15
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
80005766:	7b 00 00 f8 	movh %d15,32768
8000576a:	1b 0f 07 f5 	addi %d15,%d15,20592
8000576e:	6c 4e       	st.w [%a4]56,%d15
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
80005770:	7b 00 00 f8 	movh %d15,32768
80005774:	1b cf f0 f4 	addi %d15,%d15,20236
80005778:	6c 4f       	st.w [%a4]60,%d15
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
8000577a:	7b 00 00 f8 	movh %d15,32768
8000577e:	1b 8f ee f4 	addi %d15,%d15,20200
80005782:	59 4f 00 10 	st.w [%a4]64,%d15
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
80005786:	7b 00 00 f8 	movh %d15,32768
8000578a:	1b ef ee f4 	addi %d15,%d15,20206
8000578e:	59 4f 04 10 	st.w [%a4]68,%d15
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
80005792:	7b 00 00 f8 	movh %d15,32768
80005796:	1b ef f7 f4 	addi %d15,%d15,20350
8000579a:	59 4f 08 10 	st.w [%a4]72,%d15
    stdif->txDisabled     = FALSE;
8000579e:	82 0f       	mov %d15,0
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));

    /* Set the API link */
    stdif->driver         = asclin;
800057a0:	f4 45       	st.a [%a4],%a5
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
    stdif->txDisabled     = FALSE;
800057a2:	2c 44       	st.b [%a4]4,%d15
    return TRUE;
}
800057a4:	82 12       	mov %d2,1
800057a6:	00 90       	ret 

800057a8 <IfxPort_getAddress>:
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
800057a8:	91 00 00 28 	movh.a %a2,32768
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
800057ac:	82 05       	mov %d5,0
}


Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
800057ae:	82 02       	mov %d2,0
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
800057b0:	d9 22 80 b0 	lea %a2,[%a2]2752 <80000ac0 <IfxPort_cfg_indexMap>>
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
800057b4:	8f f5 0f f1 	and %d15,%d5,255
800057b8:	8b 02 00 32 	eq %d3,%d2,0
800057bc:	8b 0f 61 34 	and.lt.u %d3,%d15,16
800057c0:	76 3a       	jz %d3,800057d4 <IfxPort_getAddress+0x2c>
800057c2:	02 5f       	mov %d15,%d5
800057c4:	16 ff       	and %d15,255
    {
        if (IfxPort_cfg_indexMap[i].index == port)
800057c6:	d0 2f       	addsc.a %a15,%a2,%d15,3
800057c8:	82 02       	mov %d2,0
800057ca:	4c f1       	ld.w %d15,[%a15]4
800057cc:	7e 42       	jne %d15,%d4,800057d0 <IfxPort_getAddress+0x28>
        {
            module = IfxPort_cfg_indexMap[i].module;
800057ce:	48 02       	ld.w %d2,[%a15]0
800057d0:	c2 15       	add %d5,1
800057d2:	3c f1       	j 800057b4 <IfxPort_getAddress+0xc>

        i++;
    }

    return module;
}
800057d4:	60 22       	mov.a %a2,%d2
800057d6:	00 90       	ret 

800057d8 <IfxPort_getIndex>:

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800057d8:	91 00 00 38 	movh.a %a3,32768
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
800057dc:	82 0f       	mov %d15,0
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800057de:	d9 33 80 b0 	lea %a3,[%a3]2752 <80000ac0 <IfxPort_cfg_indexMap>>
800057e2:	a0 ff       	mov.a %a15,15
800057e4:	d0 32       	addsc.a %a2,%a3,%d15,3
800057e6:	d4 25       	ld.a %a5,[%a2]
800057e8:	7d 45 05 80 	jne.a %a5,%a4,800057f2 <IfxPort_getIndex+0x1a>
        {
            result = (IfxPort_Index)IfxPort_cfg_indexMap[index].index;
800057ec:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
800057f0:	00 90       	ret 
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
800057f2:	c2 1f       	add %d15,1
800057f4:	fc f8       	loop %a15,800057e4 <IfxPort_getIndex+0xc>
IfxPort_Index IfxPort_getIndex(Ifx_P *port)
{
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;
800057f6:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
800057f8:	00 90       	ret 

800057fa <IfxPort_resetESR>:


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
800057fa:	40 4f       	mov.aa %a15,%a4
800057fc:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800057fe:	6d 00 ac 0c 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005802:	02 24       	mov %d4,%d2
}


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005804:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005806:	6d 00 a8 0b 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 0);
8000580a:	82 12       	mov %d2,1
8000580c:	d9 f4 10 10 	lea %a4,[%a15]80
80005810:	0f 82 00 20 	sh %d2,%d2,%d8

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005814:	d2 06       	mov %e6,0
80005816:	02 27       	mov %d7,%d2
80005818:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
8000581c:	02 f4       	mov %d4,%d15
8000581e:	1d 00 d1 0c 	j 800071c0 <IfxScuWdt_setCpuEndinit>

80005822 <IfxPort_disableEmergencyStop>:
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005822:	91 00 00 38 	movh.a %a3,32768
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005826:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005828:	d9 33 80 d0 	lea %a3,[%a3]2880 <80000b40 <IfxPort_cfg_esrMasks>>
8000582c:	a0 ff       	mov.a %a15,15
8000582e:	d0 32       	addsc.a %a2,%a3,%d15,3
80005830:	d4 25       	ld.a %a5,[%a2]
80005832:	7d 54 0c 80 	jne.a %a4,%a5,8000584a <IfxPort_disableEmergencyStop+0x28>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005836:	b9 2f 04 00 	ld.hu %d15,[%a2]4
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
8000583a:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
8000583c:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
80005840:	6e 08       	jz %d15,80005850 <IfxPort_disableEmergencyStop+0x2e>
            {
                IfxPort_resetESR(port, pinIndex);
80005842:	6d ff dc ff 	call 800057fa <IfxPort_resetESR>
                result = TRUE;
80005846:	82 12       	mov %d2,1
80005848:	00 90       	ret 
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
8000584a:	c2 1f       	add %d15,1
8000584c:	fc f1       	loop %a15,8000582e <IfxPort_disableEmergencyStop+0xc>
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
8000584e:	82 02       	mov %d2,0
            break;
        }
    }

    return result;
}
80005850:	00 90       	ret 

80005852 <IfxPort_setESR>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
80005852:	40 4f       	mov.aa %a15,%a4
80005854:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005856:	6d 00 80 0c 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
8000585a:	02 24       	mov %d4,%d2
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000585c:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
8000585e:	6d 00 7c 0b 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 1U << pinIndex);
80005862:	82 12       	mov %d2,1
80005864:	0f 82 00 20 	sh %d2,%d2,%d8
80005868:	d9 f4 10 10 	lea %a4,[%a15]80
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
8000586c:	53 12 40 60 	mul.u %e6,%d2,1

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005870:	02 27       	mov %d7,%d2
80005872:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005876:	02 f4       	mov %d4,%d15
80005878:	1d 00 a4 0c 	j 800071c0 <IfxScuWdt_setCpuEndinit>

8000587c <IfxPort_enableEmergencyStop>:
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
8000587c:	82 19       	mov %d9,1
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
8000587e:	91 00 00 d8 	movh.a %a13,32768
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005882:	40 4c       	mov.aa %a12,%a4
80005884:	02 48       	mov %d8,%d4
80005886:	0f 49 00 90 	sh %d9,%d9,%d4
    sint32  portIndex;
    boolean result = FALSE;
8000588a:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
8000588c:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
8000588e:	d9 dd 80 d0 	lea %a13,[%a13]2880 <80000b40 <IfxPort_cfg_esrMasks>>
80005892:	d0 df       	addsc.a %a15,%a13,%d15,3
80005894:	c8 02       	ld.a %a2,[%a15]0
80005896:	7d 2c 0b 80 	jne.a %a12,%a2,800058ac <IfxPort_enableEmergencyStop+0x30>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
8000589a:	b9 f3 04 00 	ld.hu %d3,[%a15]4
8000589e:	26 93       	and %d3,%d9
800058a0:	76 36       	jz %d3,800058ac <IfxPort_enableEmergencyStop+0x30>
            {
                IfxPort_setESR(port, pinIndex);
800058a2:	40 c4       	mov.aa %a4,%a12
800058a4:	02 84       	mov %d4,%d8
800058a6:	6d ff d6 ff 	call 80005852 <IfxPort_setESR>
                result = TRUE;
800058aa:	82 12       	mov %d2,1
boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
800058ac:	c2 1f       	add %d15,1
800058ae:	8b 0f 21 32 	ne %d3,%d15,16
800058b2:	df 03 f0 ff 	jne %d3,0,80005892 <IfxPort_enableEmergencyStop+0x16>
            }
        }
    }

    return result;
}
800058b6:	00 90       	ret 

800058b8 <IfxPort_setGroupModeInput>:
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800058b8:	82 0f       	mov %d15,0
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode)
{
800058ba:	20 20       	sub.a %sp,32
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800058bc:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
800058be:	78 04       	st.w [%sp]16,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800058c0:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
800058c2:	78 05       	st.w [%sp]20,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800058c4:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
800058c6:	78 06       	st.w [%sp]24,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800058c8:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
800058ca:	78 07       	st.w [%sp]28,%d15
800058cc:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800058d0:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
800058d4:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800058d8:	3b 80 0f 70 	mov %d7,248
800058dc:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
800058e0:	9f 0f 07 80 	jned %d15,0,800058ee <IfxPort_setGroupModeInput+0x36>
800058e4:	d9 44 10 00 	lea %a4,[%a4]16
800058e8:	82 0f       	mov %d15,0
800058ea:	a0 3f       	mov.a %a15,3
800058ec:	3c 1e       	j 80005928 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
800058ee:	57 05 61 24 	extr.u %d2,%d5,%d4,1
800058f2:	df 02 19 00 	jeq %d2,0,80005924 <IfxPort_setGroupModeInput+0x6c>
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800058f6:	8f 34 c0 31 	andn %d3,%d4,3
800058fa:	60 32       	mov.a %a2,%d3
800058fc:	d9 af 20 00 	lea %a15,[%sp]32
80005900:	30 2f       	add.a %a15,%a2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005902:	8f 34 00 21 	and %d2,%d4,3
80005906:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
80005908:	19 f0 f0 ff 	ld.w %d0,[%a15]-16
8000590c:	0f 27 00 30 	sh %d3,%d7,%d2
80005910:	a6 03       	or %d3,%d0
80005912:	59 f3 f0 ff 	st.w [%a15]-16,%d3
            iocrVal[index]  |= (mode) << shift;
80005916:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
8000591a:	0f 26 00 20 	sh %d2,%d6,%d2
8000591e:	a6 32       	or %d2,%d3
80005920:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005924:	c2 14       	add %d4,1
80005926:	3c dd       	j 800058e0 <IfxPort_setGroupModeInput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005928:	d9 a3 20 00 	lea %a3,[%sp]32
8000592c:	90 32       	addsc.a %a2,%a3,%d15,2
8000592e:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005932:	76 47       	jz %d4,80005940 <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005934:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005938:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
8000593a:	02 43       	mov %d3,%d4
8000593c:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005940:	c2 1f       	add %d15,1
80005942:	b0 44       	add.a %a4,4
80005944:	fc f2       	loop %a15,80005928 <IfxPort_setGroupModeInput+0x70>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005946:	00 90       	ret 

80005948 <IfxPort_setGroupModeOutput>:
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005948:	82 0f       	mov %d15,0
    }
}


void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
8000594a:	20 20       	sub.a %sp,32
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
8000594c:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
8000594e:	78 04       	st.w [%sp]16,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005950:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005952:	78 05       	st.w [%sp]20,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005954:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005956:	78 06       	st.w [%sp]24,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005958:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
8000595a:	78 07       	st.w [%sp]28,%d15
8000595c:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005960:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005964:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005968:	3b 80 0f 00 	mov %d0,248
8000596c:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005970:	9f 0f 07 80 	jned %d15,0,8000597e <IfxPort_setGroupModeOutput+0x36>
80005974:	d9 44 10 00 	lea %a4,[%a4]16
80005978:	82 0f       	mov %d15,0
8000597a:	a0 3f       	mov.a %a15,3
8000597c:	3c 1f       	j 800059ba <IfxPort_setGroupModeOutput+0x72>
    {
        if ((imask & (1U << i)) != 0)
8000597e:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005982:	df 02 1a 00 	jeq %d2,0,800059b6 <IfxPort_setGroupModeOutput+0x6e>
        {
            uint32 index = i / 4;
80005986:	8f e4 1f 30 	sh %d3,%d4,-2
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
8000598a:	d9 a2 20 00 	lea %a2,[%sp]32
8000598e:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005992:	8f 34 00 21 	and %d2,%d4,3
80005996:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
80005998:	a6 63       	or %d3,%d6
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
8000599a:	0f 20 00 70 	sh %d7,%d0,%d2
8000599e:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
800059a2:	0f 23 00 20 	sh %d2,%d3,%d2
800059a6:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800059aa:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
800059ac:	a6 32       	or %d2,%d3
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800059ae:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
800059b2:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
800059b6:	c2 14       	add %d4,1
800059b8:	3c dc       	j 80005970 <IfxPort_setGroupModeOutput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
800059ba:	d9 a3 20 00 	lea %a3,[%sp]32
800059be:	90 32       	addsc.a %a2,%a3,%d15,2
800059c0:	19 24 f0 ff 	ld.w %d4,[%a2]-16
800059c4:	76 47       	jz %d4,800059d2 <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
800059c6:	19 22 e0 ff 	ld.w %d2,[%a2]-32
800059ca:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
800059cc:	02 43       	mov %d3,%d4
800059ce:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode | index) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
800059d2:	c2 1f       	add %d15,1
800059d4:	b0 44       	add.a %a4,4
800059d6:	fc f2       	loop %a15,800059ba <IfxPort_setGroupModeOutput+0x72>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
800059d8:	00 90       	ret 

800059da <IfxPort_setGroupPadDriver>:


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
800059da:	20 10       	sub.a %sp,16
800059dc:	02 4f       	mov %d15,%d4
800059de:	02 5a       	mov %d10,%d5
800059e0:	40 4c       	mov.aa %a12,%a4
800059e2:	02 69       	mov %d9,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800059e4:	6d 00 b9 0b 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
800059e8:	02 24       	mov %d4,%d2
}


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800059ea:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
800059ec:	6d 00 b5 0a 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
800059f0:	82 03       	mov %d3,0
800059f2:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
800059f4:	59 a3 08 00 	st.w [%sp]8,%d3
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
800059f8:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
800059fc:	59 a3 0c 00 	st.w [%sp]12,%d3
80005a00:	8b 1f a1 22 	ge.u %d2,%d15,17
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005a04:	8b 0f 01 31 	rsub %d3,%d15,16
            pdrVal[i]  = 0;
            pdrMask[i] = 0;
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;
80005a08:	0f fa 00 50 	sh %d5,%d10,%d15
80005a0c:	ab 03 a0 32 	seln %d3,%d2,%d3,0

        for (i = pinIndex; i < 16; i++)
80005a10:	9f 03 03 80 	jned %d3,0,80005a16 <IfxPort_setGroupPadDriver+0x3c>
80005a14:	3c 1d       	j 80005a4e <IfxPort_setGroupPadDriver+0x74>
        {
            if ((imask & (1U << i)) != 0)
80005a16:	57 05 61 2f 	extr.u %d2,%d5,%d15,1
80005a1a:	df 02 18 00 	jeq %d2,0,80005a4a <IfxPort_setGroupPadDriver+0x70>
            {
                uint32 index = i / 8;
80005a1e:	8f df 1f 40 	sh %d4,%d15,-3
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005a22:	d9 a2 10 00 	lea %a2,[%sp]16
80005a26:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005a2a:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005a2e:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005a32:	06 22       	sh %d2,2
                pdrMask[index] |= (0xFUL << shift);
80005a34:	d7 f4 04 42 	insert %d4,%d4,15,%d2,4
                pdrVal[index]  |= (padDriver << shift);
80005a38:	0f 29 00 20 	sh %d2,%d9,%d2
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005a3c:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005a40:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005a44:	a6 42       	or %d2,%d4
80005a46:	59 f2 f0 ff 	st.w [%a15]-16,%d2
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;

        for (i = pinIndex; i < 16; i++)
80005a4a:	c2 1f       	add %d15,1
80005a4c:	3c e2       	j 80005a10 <IfxPort_setGroupPadDriver+0x36>
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005a4e:	58 02       	ld.w %d15,[%sp]8
80005a50:	6e 08       	jz %d15,80005a60 <IfxPort_setGroupPadDriver+0x86>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005a52:	d9 cf 00 10 	lea %a15,[%a12]64
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005a56:	54 a6       	ld.w %d6,[%sp]
80005a58:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a5a:	02 f7       	mov %d7,%d15
80005a5c:	49 f6 40 08 	ldmst [%a15]0,%e6
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005a60:	58 03       	ld.w %d15,[%sp]12
80005a62:	6e 09       	jz %d15,80005a74 <IfxPort_setGroupPadDriver+0x9a>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005a64:	d9 cc 04 10 	lea %a12,[%a12]68
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005a68:	19 a6 04 00 	ld.w %d6,[%sp]4
80005a6c:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a6e:	02 f7       	mov %d7,%d15
80005a70:	49 c6 40 08 	ldmst [%a12]0,%e6
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005a74:	02 84       	mov %d4,%d8
}
80005a76:	d9 aa 10 00 	lea %sp,[%sp]16
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005a7a:	1d 00 a3 0b 	j 800071c0 <IfxScuWdt_setCpuEndinit>

80005a7e <IfxPort_setPinMode>:
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
80005a7e:	91 40 00 2f 	movh.a %a2,61444

void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005a82:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005a86:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80005a8a:	40 4f       	mov.aa %a15,%a4
80005a8c:	02 4f       	mov %d15,%d4
80005a8e:	02 5a       	mov %d10,%d5
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80005a90:	d9 4c 10 00 	lea %a12,[%a4]16
    uint8                 iocrIndex = (pinIndex / 4);
80005a94:	8f e4 1f b0 	sh %d11,%d4,-2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005a98:	06 39       	sh %d9,3

    if (port == &MODULE_P40)
80005a9a:	7d 24 11 80 	jne.a %a4,%a2,80005abc <IfxPort_setPinMode+0x3e>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a9e:	6d 00 5c 0b 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>
        IfxScuWdt_clearCpuEndinit(passwd);
80005aa2:	02 24       	mov %d4,%d2
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005aa4:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80005aa6:	6d 00 58 0a 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80005aaa:	19 f2 20 10 	ld.w %d2,[%a15]96
        IfxScuWdt_setCpuEndinit(passwd);
80005aae:	02 84       	mov %d4,%d8

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
80005ab0:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005ab4:	59 ff 20 10 	st.w [%a15]96,%d15
        IfxScuWdt_setCpuEndinit(passwd);
80005ab8:	6d 00 84 0b 	call 800071c0 <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80005abc:	da ff       	mov %d15,255
80005abe:	01 cb 02 f6 	addsc.a %a15,%a12,%d11,2
80005ac2:	0f 9f 00 f0 	sh %d15,%d15,%d9
80005ac6:	0f 9a 00 20 	sh %d2,%d10,%d9
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005aca:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005acc:	02 f3       	mov %d3,%d15
80005ace:	49 f2 40 08 	ldmst [%a15]0,%e2
80005ad2:	00 90       	ret 

80005ad4 <IfxPort_setPinModeLvdsHigh>:
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
80005ad4:	02 5a       	mov %d10,%d5
80005ad6:	40 4f       	mov.aa %a15,%a4
80005ad8:	02 49       	mov %d9,%d4
80005ada:	02 6f       	mov %d15,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005adc:	6d 00 3d 0b 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005ae0:	02 24       	mov %d4,%d2
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005ae2:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005ae4:	6d 00 39 0a 	call 80006f56 <IfxScuWdt_clearCpuEndinit>

    if (mode < IfxPort_Mode_outputPushPullGeneral)
80005ae8:	37 0a 48 50 	extr %d5,%d10,0,8
80005aec:	bf 05 11 00 	jlt %d5,0,80005b0e <IfxPort_setPinModeLvdsHigh+0x3a>
    {
        if (pinIndex < 2)
80005af0:	bf 29 21 80 	jlt.u %d9,2,80005b32 <IfxPort_setPinModeLvdsHigh+0x5e>
        {}
        else
        {
            port->LPCR1.B_P21.RDIS_CTRL = enablePortControlled;
80005af4:	19 f2 24 20 	ld.w %d2,[%a15]164
80005af8:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005afc:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005b00:	19 ff 24 20 	ld.w %d15,[%a15]164
80005b04:	8f 2f c0 f1 	andn %d15,%d15,2
80005b08:	59 ff 24 20 	st.w [%a15]164,%d15
80005b0c:	3c 13       	j 80005b32 <IfxPort_setPinModeLvdsHigh+0x5e>
        }
    }
    else
    {
        port->LPCR2.B.TDIS_CTRL = enablePortControlled;
80005b0e:	19 f2 28 20 	ld.w %d2,[%a15]168
80005b12:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005b16:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_DIS    = 0;
80005b1a:	19 ff 28 20 	ld.w %d15,[%a15]168
80005b1e:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80005b22:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_PD     = 0;
80005b26:	19 ff 28 20 	ld.w %d15,[%a15]168
80005b2a:	b7 0f 01 f7 	insert %d15,%d15,0,14,1
80005b2e:	59 ff 28 20 	st.w [%a15]168,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80005b32:	02 84       	mov %d4,%d8
80005b34:	1d 00 46 0b 	j 800071c0 <IfxScuWdt_setCpuEndinit>

80005b38 <IfxPort_setPinModeLvdsMedium>:
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005b38:	0b 65 10 a8 	mov %e10,%d5,%d6
80005b3c:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005b3e:	8f f4 1f 90 	sh %d9,%d4,-1
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005b42:	02 48       	mov %d8,%d4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005b44:	6d 00 09 0b 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005b48:	02 24       	mov %d4,%d2
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005b4a:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005b4c:	6d 00 05 0a 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
80005b50:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005b52:	d9 f2 00 10 	lea %a2,[%a15]64
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005b56:	01 28 02 26 	addsc.a %a2,%a2,%d8,2


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005b5a:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005b5e:	d9 f4 20 20 	lea %a4,[%a15]160
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005b62:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005b66:	0f 2b 00 50 	sh %d5,%d11,%d2
80005b6a:	74 25       	st.w [%a2],%d5
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005b6c:	54 46       	ld.w %d6,[%a4]
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005b6e:	02 f4       	mov %d4,%d15
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005b70:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005b74:	74 46       	st.w [%a4],%d6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005b76:	1d 00 25 0b 	j 800071c0 <IfxScuWdt_setCpuEndinit>

80005b7a <IfxPort_setPinPadDriver>:
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80005b7a:	0b 45 10 88 	mov %e8,%d5,%d4
80005b7e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005b80:	6d 00 eb 0a 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005b84:	02 24       	mov %d4,%d2
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005b86:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005b88:	6d 00 e7 09 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
80005b8c:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005b90:	06 22       	sh %d2,2
80005b92:	06 d8       	sh %d8,-3
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80005b94:	d9 ff 00 10 	lea %a15,[%a15]64
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005b98:	3b f0 00 30 	mov %d3,15
80005b9c:	01 f8 02 f6 	addsc.a %a15,%a15,%d8,2
80005ba0:	0f 23 00 30 	sh %d3,%d3,%d2
80005ba4:	0f 29 00 60 	sh %d6,%d9,%d2
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005ba8:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005baa:	02 37       	mov %d7,%d3
80005bac:	49 f6 40 08 	ldmst [%a15]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005bb0:	02 f4       	mov %d4,%d15
80005bb2:	1d 00 07 0b 	j 800071c0 <IfxScuWdt_setCpuEndinit>
	...

80005bb8 <IfxScuCcu_calculateSysPllDividers>:
        //' K2+1 div should be even for 50% duty cycle
        k2Steps = 2;

        if (fPll > 240000000)
        {
            k2Steps = 1;
80005bb8:	7b e0 e4 30 	movh %d3,3662
80005bbc:	1b 13 c0 31 	addi %d3,%d3,7169
80005bc0:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005bc4:	82 2f       	mov %d15,2
80005bc6:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005bca:	8f 4c 00 80 	sh %d8,%d12,4
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005bce:	7b c0 be 00 	movh %d0,3052

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005bd2:	91 40 0f 50 	movh.a %a5,244
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005bd6:	7b 80 82 6e 	movh %d6,59432
80005bda:	91 80 7d 61 	movh.a %a6,6104

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
    uint8   deviationAllowed = 2;
    uint32  fOsc             = cfg->xtalFrequency;
80005bde:	19 4e 10 10 	ld.w %d14,[%a4]80
80005be2:	60 83       	mov.a %a3,%d8
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005be4:	1b 00 20 0c 	addi %d0,%d0,-15872

        uint32       p;
        uint32       n;
        uint32       k2;
        uint32       k2Steps;
        uint32       bestK2 = 0, bestN = 0, bestP = 0;
80005be8:	d2 0a       	mov %e10,0
80005bea:	82 09       	mov %d9,0
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005bec:	3b 00 01 50 	mov %d5,16
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005bf0:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005bf4:	82 f7       	mov %d7,-1
80005bf6:	1b 06 c0 67 	addi %d6,%d6,31744
80005bfa:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005bfe:	a0 ff       	mov.a %a15,15
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005c00:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005c04:	7b 60 f8 1f 	movh %d1,65414
80005c08:	1b 01 e0 1e 	addi %d1,%d1,-4608
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005c0c:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005c0e:	0b 12 40 10 	addx %d1,%d2,%d1
80005c12:	8b f3 bf 20 	addc %d2,%d3,-1
80005c16:	80 53       	mov.d %d3,%a5
80005c18:	ba 02       	eq %d15,%d2,0
80005c1a:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005c1e:	8b 02 00 f5 	or.ne %d15,%d2,0
80005c22:	ee 24       	jnz %d15,80005c6a <IfxScuCcu_calculateSysPllDividers+0xb2>
80005c24:	02 5d       	mov %d13,%d5
80005c26:	82 11       	mov %d1,1
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005c28:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005c2c:	80 68       	mov.d %d8,%a6
80005c2e:	ba 03       	eq %d15,%d3,0
80005c30:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005c34:	8b 03 00 f5 	or.ne %d15,%d3,0
80005c38:	ee 13       	jnz %d15,80005c5e <IfxScuCcu_calculateSysPllDividers+0xa6>
80005c3a:	82 18       	mov %d8,1
80005c3c:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
                    {
                        for (n = nMin; n <= nMax; n++)
                        {
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);
80005c40:	4b d8 11 22 	div.u %e2,%d8,%d13
80005c44:	e2 e2       	mul %d2,%d14
80005c46:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005c48:	df 02 18 00 	jeq %d2,0,80005c78 <IfxScuCcu_calculateSysPllDividers+0xc0>
                                bestP          = p;

                                goto EXITCALC_LOOP;
                            }

                            if (fPllLeastError > fPllError)
80005c4c:	82 1f       	mov %d15,1
80005c4e:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005c52:	6a 8b       	cmovn %d11,%d15,%d8
80005c54:	6a 20       	cmovn %d0,%d15,%d2
80005c56:	6a 5a       	cmovn %d10,%d15,%d5
80005c58:	6a 19       	cmovn %d9,%d15,%d1
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
                    {
                        for (n = nMin; n <= nMax; n++)
80005c5a:	c2 18       	add %d8,1
80005c5c:	fc 22       	loop %a2,80005c40 <IfxScuCcu_calculateSysPllDividers+0x88>
80005c5e:	80 3f       	mov.d %d15,%a3
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
80005c60:	42 c1       	add %d1,%d12
80005c62:	42 fd       	add %d13,%d15
80005c64:	8b 11 68 f2 	lt.u %d15,%d1,129
80005c68:	ee e0       	jnz %d15,80005c28 <IfxScuCcu_calculateSysPllDividers+0x70>
80005c6a:	60 c2       	mov.a %a2,%d12
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005c6c:	c2 f5       	add %d5,-1
80005c6e:	01 23 20 30 	sub.a %a3,%a3,%a2
80005c72:	fd f0 c7 7f 	loop %a15,80005c00 <IfxScuCcu_calculateSysPllDividers+0x48>
80005c76:	3c 05       	j 80005c80 <IfxScuCcu_calculateSysPllDividers+0xc8>

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
                                bestN          = n;
80005c78:	0b 58 10 a8 	mov %e10,%d8,%d5
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
80005c7c:	02 19       	mov %d9,%d1
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
80005c7e:	82 00       	mov %d0,0
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005c80:	da 64       	mov %d15,100
80005c82:	06 14       	sh %d4,1
80005c84:	4b f4 11 42 	div.u %e4,%d4,%d15
80005c88:	82 1f       	mov %d15,1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
        }
        else
        {
            retVal = 1;
80005c8a:	82 12       	mov %d2,1
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005c8c:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005c90:	ee 0f       	jnz %d15,80005cae <IfxScuCcu_calculateSysPllDividers+0xf6>
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005c92:	82 02       	mov %d2,0

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005c94:	c2 fb       	add %d11,-1
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005c96:	c2 fa       	add %d10,-1
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005c98:	c2 f9       	add %d9,-1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005c9a:	59 42 0c 00 	st.w [%a4]12,%d2

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005c9e:	e9 4b 09 00 	st.b [%a4]9,%d11
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005ca2:	e9 4a 08 00 	st.b [%a4]8,%d10
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005ca6:	e9 49 0a 00 	st.b [%a4]10,%d9
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
80005caa:	2c 40       	st.b [%a4]0,%d15
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
80005cac:	82 02       	mov %d2,0
        {
            retVal = 1;
        }
    }
    return retVal;
}
80005cae:	00 90       	ret 

80005cb0 <IfxScuCcu_getOsc0Frequency>:
}


float32 IfxScuCcu_getOsc0Frequency(void)
{
    return (float32)IfxScuCcu_xtalFrequency;
80005cb0:	91 00 00 f7 	movh.a %a15,28672
80005cb4:	19 f2 18 00 	ld.w %d2,[%a15]24 <70000018 <IfxScuCcu_xtalFrequency>>
}
80005cb8:	4b 02 61 21 	utof %d2,%d2
80005cbc:	00 90       	ret 

80005cbe <IfxScuCcu_getOscFrequency>:

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005cbe:	91 30 00 ff 	movh.a %a15,61443
80005cc2:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005cc6:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005cc8:	7b f0 cb 24 	movh %d2,19647

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005ccc:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005cd0:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005cd4:	6e 0c       	jz %d15,80005cec <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005cd6:	4c f0       	ld.w %d15,[%a15]0
        freq = (float32)IfxScuCcu_xtalFrequency;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0;
80005cd8:	82 02       	mov %d2,0

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005cda:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005cde:	5e 17       	jne %d15,1,80005cec <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005ce0:	91 00 00 f7 	movh.a %a15,28672
80005ce4:	19 f2 18 00 	ld.w %d2,[%a15]24 <70000018 <IfxScuCcu_xtalFrequency>>
80005ce8:	4b 02 61 21 	utof %d2,%d2
        /* Reserved values, this */
        freq = 0.0;
    }

    return freq;
}
80005cec:	00 90       	ret 

80005cee <IfxScuCcu_getPllErayFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005cee:	91 30 00 ff 	movh.a %a15,61443
80005cf2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005cf6:	6d ff e4 ff 	call 80005cbe <IfxScuCcu_getOscFrequency>

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005cfa:	4c f9       	ld.w %d15,[%a15]36
80005cfc:	2e 05       	jz.t %d15,0,80005d06 <IfxScuCcu_getPllErayFrequency+0x18>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80005cfe:	4c fb       	ld.w %d15,[%a15]44
80005d00:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005d04:	3c 21       	j 80005d46 <IfxScuCcu_getPllErayFrequency+0x58>
    }
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80005d06:	4c f9       	ld.w %d15,[%a15]36
80005d08:	6f 3f 15 00 	jz.t %d15,3,80005d32 <IfxScuCcu_getPllErayFrequency+0x44>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80005d0c:	48 b4       	ld.w %d4,[%a15]44
80005d0e:	8f f4 07 41 	and %d4,%d4,127
80005d12:	c2 14       	add %d4,1
80005d14:	6d 00 b2 30 	call 8000be78 <__floatsidf>
80005d18:	7b 80 19 54 	movh %d5,16792
80005d1c:	0b 23 10 68 	mov %e6,%d3,%d2
80005d20:	82 04       	mov %d4,0
80005d22:	1b 45 78 5d 	addi %d5,%d5,-10364
80005d26:	6d 00 1d 30 	call 8000bd60 <__divdf3>
80005d2a:	0b 23 10 48 	mov %e4,%d3,%d2
80005d2e:	1d 00 d8 30 	j 8000bede <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
80005d32:	48 a3       	ld.w %d3,[%a15]40
80005d34:	4c fb       	ld.w %d15,[%a15]44
80005d36:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005d3a:	16 7f       	and %d15,127
80005d3c:	c2 13       	add %d3,1
80005d3e:	4b 03 41 31 	itof %d3,%d3
80005d42:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005d46:	c2 1f       	add %d15,1
80005d48:	4b 0f 41 f1 	itof %d15,%d15
80005d4c:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005d50:	00 90       	ret 

80005d52 <IfxScuCcu_getPllErayVcoFrequency>:

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005d52:	91 30 00 ff 	movh.a %a15,61443
80005d56:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005d5a:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005d5c:	7b f0 cb 24 	movh %d2,19647
80005d60:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005d64:	6f 3f 18 80 	jnz.t %d15,3,80005d94 <IfxScuCcu_getPllErayVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLERAYCON0.B.NDIV + 1)) / (SCU_PLLERAYCON0.B.PDIV + 1);
80005d68:	6d ff ab ff 	call 80005cbe <IfxScuCcu_getOscFrequency>
80005d6c:	91 30 00 ff 	movh.a %a15,61443
80005d70:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005d74:	48 03       	ld.w %d3,[%a15]0
80005d76:	4c f0       	ld.w %d15,[%a15]0
80005d78:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005d7c:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005d80:	c2 13       	add %d3,1
80005d82:	4b 03 41 31 	itof %d3,%d3
80005d86:	c2 1f       	add %d15,1
80005d88:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005d8c:	4b 0f 41 f1 	itof %d15,%d15
80005d90:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80005d94:	00 90       	ret 

80005d96 <IfxScuCcu_getPllFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005d96:	91 30 00 ff 	movh.a %a15,61443
80005d9a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005d9e:	6d ff 90 ff 	call 80005cbe <IfxScuCcu_getOscFrequency>

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005da2:	4c f5       	ld.w %d15,[%a15]20
80005da4:	2e 06       	jz.t %d15,0,80005db0 <IfxScuCcu_getPllFrequency+0x1a>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80005da6:	4c f7       	ld.w %d15,[%a15]28
80005da8:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005dac:	c2 1f       	add %d15,1
80005dae:	3c 28       	j 80005dfe <IfxScuCcu_getPllFrequency+0x68>
    }
    else if (scu->PLLSTAT.B.FINDIS == 1)
80005db0:	4c f5       	ld.w %d15,[%a15]20
80005db2:	6f 3f 15 00 	jz.t %d15,3,80005ddc <IfxScuCcu_getPllFrequency+0x46>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80005db6:	48 74       	ld.w %d4,[%a15]28
80005db8:	8f f4 07 41 	and %d4,%d4,127
80005dbc:	c2 14       	add %d4,1
80005dbe:	6d 00 5d 30 	call 8000be78 <__floatsidf>
80005dc2:	7b 80 19 54 	movh %d5,16792
80005dc6:	0b 23 10 68 	mov %e6,%d3,%d2
80005dca:	82 04       	mov %d4,0
80005dcc:	1b 45 78 5d 	addi %d5,%d5,-10364
80005dd0:	6d 00 c8 2f 	call 8000bd60 <__divdf3>
80005dd4:	0b 23 10 48 	mov %e4,%d3,%d2
80005dd8:	1d 00 83 30 	j 8000bede <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
80005ddc:	48 64       	ld.w %d4,[%a15]24
80005dde:	4c f7       	ld.w %d15,[%a15]28
80005de0:	37 04 e7 44 	extr.u %d4,%d4,9,7
80005de4:	8f ff 07 31 	and %d3,%d15,127
80005de8:	4c f6       	ld.w %d15,[%a15]24
80005dea:	c2 14       	add %d4,1
80005dec:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005df0:	4b 04 41 41 	itof %d4,%d4
80005df4:	c2 1f       	add %d15,1
80005df6:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80005dfa:	4b 42 41 20 	mul.f %d2,%d2,%d4
80005dfe:	4b 0f 41 f1 	itof %d15,%d15
80005e02:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005e06:	00 90       	ret 

80005e08 <IfxScuCcu_getPllVcoFrequency>:

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005e08:	91 30 00 ff 	movh.a %a15,61443
80005e0c:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80005e10:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005e12:	7b f0 cb 24 	movh %d2,19647
80005e16:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005e1a:	6f 3f 18 80 	jnz.t %d15,3,80005e4a <IfxScuCcu_getPllVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLCON0.B.NDIV + 1)) / (SCU_PLLCON0.B.PDIV + 1);
80005e1e:	6d ff 50 ff 	call 80005cbe <IfxScuCcu_getOscFrequency>
80005e22:	91 30 00 ff 	movh.a %a15,61443
80005e26:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80005e2a:	48 03       	ld.w %d3,[%a15]0
80005e2c:	4c f0       	ld.w %d15,[%a15]0
80005e2e:	37 03 e7 34 	extr.u %d3,%d3,9,7
80005e32:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005e36:	c2 13       	add %d3,1
80005e38:	4b 03 41 31 	itof %d3,%d3
80005e3c:	c2 1f       	add %d15,1
80005e3e:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005e42:	4b 0f 41 f1 	itof %d15,%d15
80005e46:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80005e4a:	00 90       	ret 

80005e4c <IfxScuCcu_getSourceFrequency>:

float32 IfxScuCcu_getSourceFrequency(void)
{
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
80005e4c:	91 30 00 ff 	movh.a %a15,61443
80005e50:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005e54:	4c f0       	ld.w %d15,[%a15]0
80005e56:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005e5a:	6e 06       	jz %d15,80005e66 <IfxScuCcu_getSourceFrequency+0x1a>
80005e5c:	1e 13       	jeq %d15,1,80005e62 <IfxScuCcu_getSourceFrequency+0x16>
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
        break;
    default:
        sourcefreq = 0;
80005e5e:	82 02       	mov %d2,0
80005e60:	00 90       	ret 
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
80005e62:	1d ff 9a ff 	j 80005d96 <IfxScuCcu_getPllFrequency>
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
80005e66:	7b f0 cb 24 	movh %d2,19647
80005e6a:	1b 02 c2 2b 	addi %d2,%d2,-17376
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
80005e6e:	00 90       	ret 

80005e70 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
80005e70:	02 4f       	mov %d15,%d4
80005e72:	6d ff ed ff 	call 80005e4c <IfxScuCcu_getSourceFrequency>
80005e76:	91 30 00 ff 	movh.a %a15,61443
80005e7a:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005e7e:	48 03       	ld.w %d3,[%a15]0
80005e80:	37 03 64 34 	extr.u %d3,%d3,8,4
80005e84:	4b 03 41 31 	itof %d3,%d3
80005e88:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
80005e8c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
80005e90:	4b f2 41 20 	mul.f %d2,%d2,%d15
80005e94:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80005e98:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80005e9c:	a2 3f       	sub %d15,%d3
80005e9e:	3f 2f fd ff 	jlt.u %d15,%d2,80005e98 <IfxScuCcu_wait+0x28>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80005ea2:	00 90       	ret 

80005ea4 <IfxScuCcu_getBbbFrequency>:
float32 IfxScuCcu_getBbbFrequency(void)
{
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80005ea4:	6d ff d4 ff 	call 80005e4c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80005ea8:	91 30 00 ff 	movh.a %a15,61443
80005eac:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005eb0:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
        break;
    default:
        bbbFrequency = 0.0;
80005eb2:	82 0f       	mov %d15,0
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80005eb4:	37 03 64 36 	extr.u %d3,%d3,12,4
80005eb8:	ff 53 30 80 	jge.u %d3,5,80005f18 <IfxScuCcu_getBbbFrequency+0x74>
80005ebc:	91 00 00 f8 	movh.a %a15,32768
80005ec0:	d9 ff cc b5 	lea %a15,[%a15]24268 <80005ecc <IfxScuCcu_getBbbFrequency+0x28>>
80005ec4:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80005ec8:	dc 0f       	ji %a15
80005eca:	00 00       	nop 
80005ecc:	1d 00 0a 00 	j 80005ee0 <IfxScuCcu_getBbbFrequency+0x3c>
80005ed0:	1d 00 17 00 	j 80005efe <IfxScuCcu_getBbbFrequency+0x5a>
80005ed4:	1d 00 18 00 	j 80005f04 <IfxScuCcu_getBbbFrequency+0x60>
80005ed8:	1d 00 19 00 	j 80005f0a <IfxScuCcu_getBbbFrequency+0x66>
80005edc:	1d 00 1a 00 	j 80005f10 <IfxScuCcu_getBbbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
80005ee0:	91 30 00 ff 	movh.a %a15,61443
80005ee4:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80005ee8:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
80005eea:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
80005eec:	8f f3 00 31 	and %d3,%d3,15
80005ef0:	df 03 14 00 	jeq %d3,0,80005f18 <IfxScuCcu_getBbbFrequency+0x74>
        {
            bbbFrequency = 0.0;
        }
        else
        {
            bbbFrequency = sourceFrequency / SCU_CCUCON2.B.BBBDIV;
80005ef4:	4c f0       	ld.w %d15,[%a15]0
80005ef6:	16 0f       	and %d15,15
80005ef8:	4b 0f 41 f1 	itof %d15,%d15
80005efc:	3c 0c       	j 80005f14 <IfxScuCcu_getBbbFrequency+0x70>
        }

        break;
    case 1:
        bbbFrequency = sourceFrequency / 30;
80005efe:	7b 00 1f f4 	movh %d15,16880
80005f02:	3c 09       	j 80005f14 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 2:
        bbbFrequency = sourceFrequency / 60;
80005f04:	7b 00 27 f4 	movh %d15,17008
80005f08:	3c 06       	j 80005f14 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 3:
        bbbFrequency = sourceFrequency / 120;
80005f0a:	7b 00 2f f4 	movh %d15,17136
80005f0e:	3c 03       	j 80005f14 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
80005f10:	7b 00 37 f4 	movh %d15,17264
80005f14:	4b f2 51 f0 	div.f %d15,%d2,%d15
        bbbFrequency = 0.0;
        break;
    }

    return bbbFrequency;
}
80005f18:	02 f2       	mov %d2,%d15
80005f1a:	00 90       	ret 

80005f1c <IfxScuCcu_getMaxFrequency>:
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80005f1c:	91 30 00 ff 	movh.a %a15,61443
80005f20:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>

float32 IfxScuCcu_getMaxFrequency(void)
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();
80005f24:	6d ff 94 ff 	call 80005e4c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80005f28:	4c f0       	ld.w %d15,[%a15]0
80005f2a:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80005f2e:	ff 5f 2d 80 	jge.u %d15,5,80005f88 <IfxScuCcu_getMaxFrequency+0x6c>
80005f32:	91 00 00 f8 	movh.a %a15,32768
80005f36:	d9 ff c0 d5 	lea %a15,[%a15]24384 <80005f40 <IfxScuCcu_getMaxFrequency+0x24>>
80005f3a:	90 ff       	addsc.a %a15,%a15,%d15,2
80005f3c:	dc 0f       	ji %a15
80005f3e:	00 00       	nop 
80005f40:	1d 00 0a 00 	j 80005f54 <IfxScuCcu_getMaxFrequency+0x38>
80005f44:	1d 00 14 00 	j 80005f6c <IfxScuCcu_getMaxFrequency+0x50>
80005f48:	1d 00 15 00 	j 80005f72 <IfxScuCcu_getMaxFrequency+0x56>
80005f4c:	1d 00 16 00 	j 80005f78 <IfxScuCcu_getMaxFrequency+0x5c>
80005f50:	1d 00 17 00 	j 80005f7e <IfxScuCcu_getMaxFrequency+0x62>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON5.B.MAXDIV == 0)
80005f54:	91 30 00 ff 	movh.a %a15,61443
80005f58:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80005f5c:	4c f0       	ld.w %d15,[%a15]0
80005f5e:	16 0f       	and %d15,15
80005f60:	6e 15       	jz %d15,80005f8a <IfxScuCcu_getMaxFrequency+0x6e>
        {
            maxFrequency = sourceFrequency;
        }
        else
        {
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
80005f62:	4c f0       	ld.w %d15,[%a15]0
80005f64:	16 0f       	and %d15,15
80005f66:	4b 0f 41 f1 	itof %d15,%d15
80005f6a:	3c 0c       	j 80005f82 <IfxScuCcu_getMaxFrequency+0x66>
        }

        break;
    case 1:
        maxFrequency = sourceFrequency / 15;
80005f6c:	7b 00 17 f4 	movh %d15,16752
80005f70:	3c 09       	j 80005f82 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 2:
        maxFrequency = sourceFrequency / 30;
80005f72:	7b 00 1f f4 	movh %d15,16880
80005f76:	3c 06       	j 80005f82 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 3:
        maxFrequency = sourceFrequency / 60;
80005f78:	7b 00 27 f4 	movh %d15,17008
80005f7c:	3c 03       	j 80005f82 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 4:
        maxFrequency = sourceFrequency / 120;
80005f7e:	7b 00 2f f4 	movh %d15,17136
80005f82:	4b f2 51 20 	div.f %d2,%d2,%d15
        break;
80005f86:	00 90       	ret 
    default:
        maxFrequency = 0.0;
80005f88:	82 02       	mov %d2,0
        break;
    }

    return maxFrequency;
}
80005f8a:	00 90       	ret 

80005f8c <IfxScuCcu_getBaud1Frequency>:


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80005f8c:	91 30 00 ff 	movh.a %a15,61443
80005f90:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005f94:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD1DIV == 0)
    {
        frequency = 0;
80005f96:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80005f98:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
80005f9c:	76 87       	jz %d8,80005faa <IfxScuCcu_getBaud1Frequency+0x1e>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
80005f9e:	6d ff bf ff 	call 80005f1c <IfxScuCcu_getMaxFrequency>
80005fa2:	4b 08 41 f1 	itof %d15,%d8
80005fa6:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
80005faa:	00 90       	ret 

80005fac <IfxScuCcu_getBaud2Frequency>:


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80005fac:	91 30 00 ff 	movh.a %a15,61443
80005fb0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005fb4:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD2DIV == 0)
    {
        frequency = 0;
80005fb6:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80005fb8:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
80005fbc:	16 f0       	and %d15,240
80005fbe:	6e 07       	jz %d15,80005fcc <IfxScuCcu_getBaud2Frequency+0x20>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
80005fc0:	6d ff ae ff 	call 80005f1c <IfxScuCcu_getMaxFrequency>
80005fc4:	4b 08 41 f1 	itof %d15,%d8
80005fc8:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
80005fcc:	00 90       	ret 

80005fce <IfxScuCcu_getSpbFrequency>:
float32 IfxScuCcu_getSpbFrequency(void)
{
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80005fce:	6d ff 3f ff 	call 80005e4c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80005fd2:	91 30 00 ff 	movh.a %a15,61443
80005fd6:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005fda:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
        break;
    default:
        spbFrequency = 0.0;
80005fdc:	82 0f       	mov %d15,0
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80005fde:	37 03 64 36 	extr.u %d3,%d3,12,4
80005fe2:	ff 53 30 80 	jge.u %d3,5,80006042 <IfxScuCcu_getSpbFrequency+0x74>
80005fe6:	91 00 00 f8 	movh.a %a15,32768
80005fea:	d9 ff f4 f5 	lea %a15,[%a15]24564 <80005ff4 <IfxScuCcu_getSpbFrequency+0x26>>
80005fee:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80005ff2:	dc 0f       	ji %a15
80005ff4:	1d 00 0a 00 	j 80006008 <IfxScuCcu_getSpbFrequency+0x3a>
80005ff8:	1d 00 18 00 	j 80006028 <IfxScuCcu_getSpbFrequency+0x5a>
80005ffc:	1d 00 19 00 	j 8000602e <IfxScuCcu_getSpbFrequency+0x60>
80006000:	1d 00 1a 00 	j 80006034 <IfxScuCcu_getSpbFrequency+0x66>
80006004:	1d 00 1b 00 	j 8000603a <IfxScuCcu_getSpbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
80006008:	91 30 00 ff 	movh.a %a15,61443
8000600c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006010:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
80006012:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
80006014:	37 03 64 38 	extr.u %d3,%d3,16,4
80006018:	df 03 15 00 	jeq %d3,0,80006042 <IfxScuCcu_getSpbFrequency+0x74>
        {
            spbFrequency = 0.0;
        }
        else
        {
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
8000601c:	4c f0       	ld.w %d15,[%a15]0
8000601e:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80006022:	4b 0f 41 f1 	itof %d15,%d15
80006026:	3c 0c       	j 8000603e <IfxScuCcu_getSpbFrequency+0x70>
        }

        break;
    case 1:
        spbFrequency = sourceFrequency / 30;
80006028:	7b 00 1f f4 	movh %d15,16880
8000602c:	3c 09       	j 8000603e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 2:
        spbFrequency = sourceFrequency / 60;
8000602e:	7b 00 27 f4 	movh %d15,17008
80006032:	3c 06       	j 8000603e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 3:
        spbFrequency = sourceFrequency / 120;
80006034:	7b 00 2f f4 	movh %d15,17136
80006038:	3c 03       	j 8000603e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
8000603a:	7b 00 37 f4 	movh %d15,17264
8000603e:	4b f2 51 f0 	div.f %d15,%d2,%d15
        spbFrequency = 0.0;
        break;
    }

    return spbFrequency;
}
80006042:	02 f2       	mov %d2,%d15
80006044:	00 90       	ret 

80006046 <IfxScuCcu_getModuleFrequency>:
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
80006046:	91 30 00 ff 	movh.a %a15,61443
8000604a:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
8000604e:	48 09       	ld.w %d9,[%a15]0
    spbFreq = IfxScuCcu_getSpbFrequency();
80006050:	6d ff bf ff 	call 80005fce <IfxScuCcu_getSpbFrequency>

    if (scuFdr.B.DM == 1)
80006054:	bb 00 00 fc 	mov.u %d15,49152
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
    spbFreq = IfxScuCcu_getSpbFrequency();
80006058:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
8000605a:	26 9f       	and %d15,%d9
8000605c:	3b 00 00 24 	mov %d2,16384
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
80006060:	b7 09 16 85 	insert %d8,%d9,0,10,22
    spbFreq = IfxScuCcu_getSpbFrequency();

    if (scuFdr.B.DM == 1)
80006064:	7e 29       	jne %d15,%d2,80006076 <IfxScuCcu_getModuleFrequency+0x30>
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
80006066:	3b 00 40 20 	mov %d2,1024
8000606a:	a2 82       	sub %d2,%d8
8000606c:	4b 02 41 21 	itof %d2,%d2
80006070:	4b 23 51 20 	div.f %d2,%d3,%d2
80006074:	00 90       	ret 
    }
    else if (scuFdr.B.DM == 2)
80006076:	bb 00 00 48 	mov.u %d4,32768
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
    }
    else
    {
        moduleFreq = 0;
8000607a:	82 02       	mov %d2,0

    if (scuFdr.B.DM == 1)
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
    }
    else if (scuFdr.B.DM == 2)
8000607c:	7e 49       	jne %d15,%d4,8000608e <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
8000607e:	4b 08 41 21 	itof %d2,%d8
80006082:	7b 00 a8 f3 	movh %d15,14976
80006086:	4b 23 41 20 	mul.f %d2,%d3,%d2
8000608a:	4b f2 41 20 	mul.f %d2,%d2,%d15
    {
        moduleFreq = 0;
    }

    return moduleFreq;
}
8000608e:	00 90       	ret 

80006090 <IfxScuCcu_getSriFrequency>:
float32 IfxScuCcu_getSriFrequency(void)
{
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006090:	6d ff de fe 	call 80005e4c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006094:	91 30 00 ff 	movh.a %a15,61443
80006098:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000609c:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
        break;
    default:
        sriFrequency = 0.0;
8000609e:	82 0f       	mov %d15,0
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
800060a0:	37 03 64 36 	extr.u %d3,%d3,12,4
800060a4:	ff 53 31 80 	jge.u %d3,5,80006106 <IfxScuCcu_getSriFrequency+0x76>
800060a8:	91 00 00 f8 	movh.a %a15,32768
800060ac:	d9 ff 38 26 	lea %a15,[%a15]24760 <800060b8 <IfxScuCcu_getSriFrequency+0x28>>
800060b0:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800060b4:	dc 0f       	ji %a15
800060b6:	00 00       	nop 
800060b8:	1d 00 0a 00 	j 800060cc <IfxScuCcu_getSriFrequency+0x3c>
800060bc:	1d 00 18 00 	j 800060ec <IfxScuCcu_getSriFrequency+0x5c>
800060c0:	1d 00 19 00 	j 800060f2 <IfxScuCcu_getSriFrequency+0x62>
800060c4:	1d 00 1a 00 	j 800060f8 <IfxScuCcu_getSriFrequency+0x68>
800060c8:	1d 00 1b 00 	j 800060fe <IfxScuCcu_getSriFrequency+0x6e>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
800060cc:	91 30 00 ff 	movh.a %a15,61443
800060d0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800060d4:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
800060d6:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
800060d8:	37 03 64 34 	extr.u %d3,%d3,8,4
800060dc:	df 03 15 00 	jeq %d3,0,80006106 <IfxScuCcu_getSriFrequency+0x76>
        {
            sriFrequency = 0.0;
        }
        else
        {
            sriFrequency = sourceFrequency / SCU_CCUCON0.B.SRIDIV;
800060e0:	4c f0       	ld.w %d15,[%a15]0
800060e2:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800060e6:	4b 0f 41 f1 	itof %d15,%d15
800060ea:	3c 0c       	j 80006102 <IfxScuCcu_getSriFrequency+0x72>
        }

        break;
    case 1:
        sriFrequency = sourceFrequency / 30;
800060ec:	7b 00 1f f4 	movh %d15,16880
800060f0:	3c 09       	j 80006102 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 2:
        sriFrequency = sourceFrequency / 60;
800060f2:	7b 00 27 f4 	movh %d15,17008
800060f6:	3c 06       	j 80006102 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 3:
        sriFrequency = sourceFrequency / 120;
800060f8:	7b 00 2f f4 	movh %d15,17136
800060fc:	3c 03       	j 80006102 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
800060fe:	7b 00 37 f4 	movh %d15,17264
80006102:	4b f2 51 f0 	div.f %d15,%d2,%d15
        sriFrequency = 0.0;
        break;
    }

    return sriFrequency;
}
80006106:	02 f2       	mov %d2,%d15
80006108:	00 90       	ret 

8000610a <IfxScuCcu_getCpuFrequency>:
    return bbbFrequency;
}


float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu)
{
8000610a:	02 4f       	mov %d15,%d4
    float32 frequency = IfxScuCcu_getSriFrequency();
8000610c:	6d ff c2 ff 	call 80006090 <IfxScuCcu_getSriFrequency>
    uint32  cpuDiv    = 0;

    switch (cpu)
80006110:	1e 1d       	jeq %d15,1,8000612a <IfxScuCcu_getCpuFrequency+0x20>
80006112:	6e 07       	jz %d15,80006120 <IfxScuCcu_getCpuFrequency+0x16>
80006114:	de 2a       	jne %d15,2,80006148 <IfxScuCcu_getCpuFrequency+0x3e>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
80006116:	91 30 00 ff 	movh.a %a15,61443
8000611a:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000611e:	3c 0a       	j 80006132 <IfxScuCcu_getCpuFrequency+0x28>
    uint32  cpuDiv    = 0;

    switch (cpu)
    {
    case IfxCpu_ResourceCpu_0:
        cpuDiv = SCU_CCUCON6.U;
80006120:	91 30 00 ff 	movh.a %a15,61443
80006124:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006128:	3c 05       	j 80006132 <IfxScuCcu_getCpuFrequency+0x28>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
8000612a:	91 30 00 ff 	movh.a %a15,61443
8000612e:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
80006132:	4c f0       	ld.w %d15,[%a15]0
    default:
        frequency = 0.0;
        break;
    }

    if (cpuDiv != 0)
80006134:	6e 0b       	jz %d15,8000614a <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
80006136:	4b 0f 61 f1 	utof %d15,%d15
8000613a:	7b 00 c8 33 	movh %d3,15488
8000613e:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
80006142:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006146:	00 90       	ret 
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
        break;
    default:
        frequency = 0.0;
80006148:	82 02       	mov %d2,0
    {
        frequency = frequency * (cpuDiv / 64.0f);
    }

    return frequency;
}
8000614a:	00 90       	ret 

8000614c <IfxScuCcu_getFsi2Frequency>:


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000614c:	91 30 00 ff 	movh.a %a15,61443
80006150:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006154:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
80006156:	7b 00 03 30 	movh %d3,48
8000615a:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000615c:	37 0f 62 8a 	extr.u %d8,%d15,20,2

    if (ccucon0.B.FSI2DIV == 0)
    {
        frequency = 0;
80006160:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSI2DIV == 0)
80006162:	76 3f       	jz %d3,80006180 <IfxScuCcu_getFsi2Frequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
80006164:	6d ff 96 ff 	call 80006090 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
80006168:	3b 00 f0 30 	mov %d3,3840
8000616c:	26 3f       	and %d15,%d3
8000616e:	1b 0f f0 ff 	addi %d15,%d15,-256
80006172:	8f 0f d0 f1 	andn %d15,%d15,256
80006176:	ee 05       	jnz %d15,80006180 <IfxScuCcu_getFsi2Frequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSI2DIV;
80006178:	4b 08 41 f1 	itof %d15,%d8
8000617c:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
80006180:	00 90       	ret 

80006182 <IfxScuCcu_getFsiFrequency>:


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006182:	91 30 00 ff 	movh.a %a15,61443
80006186:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000618a:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
8000618c:	7b 00 30 30 	movh %d3,768
80006190:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006192:	37 0f 62 8c 	extr.u %d8,%d15,24,2

    if (ccucon0.B.FSIDIV == 0)
    {
        frequency = 0;
80006196:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSIDIV == 0)
80006198:	76 3f       	jz %d3,800061b6 <IfxScuCcu_getFsiFrequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
8000619a:	6d ff 7b ff 	call 80006090 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
8000619e:	3b 00 f0 30 	mov %d3,3840
800061a2:	26 3f       	and %d15,%d3
800061a4:	1b 0f f0 ff 	addi %d15,%d15,-256
800061a8:	8f 0f d0 f1 	andn %d15,%d15,256
800061ac:	ee 05       	jnz %d15,800061b6 <IfxScuCcu_getFsiFrequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSIDIV;
800061ae:	4b 08 41 f1 	itof %d15,%d8
800061b2:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
800061b6:	00 90       	ret 

800061b8 <IfxScuCcu_init>:
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
800061b8:	19 4f 10 10 	ld.w %d15,[%a4]80
800061bc:	91 00 00 c7 	movh.a %a12,28672
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg)
{
800061c0:	40 4f       	mov.aa %a15,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
800061c2:	59 cf 18 00 	st.w [%a12]24 <70000018 <IfxScuCcu_xtalFrequency>>,%d15

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
800061c6:	6d 00 c8 07 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>
800061ca:	02 29       	mov %d9,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
800061cc:	6d 00 e3 07 	call 80007192 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800061d0:	02 94       	mov %d4,%d9
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
800061d2:	02 28       	mov %d8,%d2

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800061d4:	6d 00 c1 06 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800061d8:	91 30 00 2f 	movh.a %a2,61443
800061dc:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800061e0:	54 2c       	ld.w %d12,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;
800061e2:	4c 20       	ld.w %d15,[%a2]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800061e4:	02 94       	mov %d4,%d9

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
800061e6:	96 08       	or %d15,8
800061e8:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
800061ea:	6d 00 eb 07 	call 800071c0 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800061ee:	02 84       	mov %d4,%d8
800061f0:	6d 00 ce 06 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800061f4:	37 0c e1 c1 	extr.u %d12,%d12,3,1

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        while (SCU_CCUCON0.B.LCK != 0U)
800061f8:	91 30 00 3f 	movh.a %a3,61443
800061fc:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006200:	4c 30       	ld.w %d15,[%a3]0
80006202:	91 30 00 2f 	movh.a %a2,61443
80006206:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000620a:	bf 0f fb 7f 	jlt %d15,0,80006200 <IfxScuCcu_init+0x48>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
8000620e:	4c 20       	ld.w %d15,[%a2]0
80006210:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006214:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006216:	4c 20       	ld.w %d15,[%a2]0
80006218:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000621c:	6c 20       	st.w [%a2]0,%d15

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
8000621e:	91 30 00 2f 	movh.a %a2,61443
80006222:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006226:	4c 20       	ld.w %d15,[%a2]0
80006228:	96 10       	or %d15,16
8000622a:	6c 20       	st.w [%a2]0,%d15
        /* Now PLL is in free running mode */

        /* Select Clock Source as PLL input clock */
        while (SCU_CCUCON0.B.LCK != 0U)
8000622c:	91 30 00 2f 	movh.a %a2,61443
80006230:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006234:	4c 20       	ld.w %d15,[%a2]0
80006236:	bf 0f ff 7f 	jlt %d15,0,80006234 <IfxScuCcu_init+0x7c>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
8000623a:	91 30 00 2f 	movh.a %a2,61443
8000623e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006242:	4c 20       	ld.w %d15,[%a2]0
80006244:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006248:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
8000624a:	4c 20       	ld.w %d15,[%a2]0
8000624c:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006250:	6c 20       	st.w [%a2]0,%d15
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
80006252:	6d 00 82 07 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006256:	91 30 00 2f 	movh.a %a2,61443
8000625a:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
8000625e:	02 2f       	mov %d15,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006260:	54 22       	ld.w %d2,[%a2]

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80006262:	40 23       	mov.aa %a3,%a2
    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006264:	8f 02 c6 21 	andn %d2,%d2,96
80006268:	74 22       	st.w [%a2],%d2

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
8000626a:	19 c6 18 00 	ld.w %d6,[%a12]24 <70000018 <IfxScuCcu_xtalFrequency>>
8000626e:	7b 60 02 20 	movh %d2,38
80006272:	1b 02 5a 22 	addi %d2,%d2,9632
80006276:	4b 26 11 62 	div.u %e6,%d6,%d2
8000627a:	54 22       	ld.w %d2,[%a2]
8000627c:	c2 f6       	add %d6,-1
8000627e:	37 62 05 68 	insert %d6,%d2,%d6,16,5
80006282:	74 26       	st.w [%a2],%d6

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
80006284:	54 22       	ld.w %d2,[%a2]
80006286:	8f 42 40 21 	or %d2,%d2,4
8000628a:	74 22       	st.w [%a2],%d2

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000628c:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
80006290:	54 32       	ld.w %d2,[%a3]
80006292:	6f 12 05 80 	jnz.t %d2,1,8000629c <IfxScuCcu_init+0xe4>
80006296:	fc 2d       	loop %a2,80006290 <IfxScuCcu_init+0xd8>
    {
        TimeoutCtr--;

        if (TimeoutCtr == 0)
        {
            status = 1;
80006298:	82 1b       	mov %d11,1
8000629a:	3c 05       	j 800062a4 <IfxScuCcu_init+0xec>

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000629c:	54 32       	ld.w %d2,[%a3]
8000629e:	6f 82 fc 7f 	jz.t %d2,8,80006296 <IfxScuCcu_init+0xde>


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;
800062a2:	82 0b       	mov %d11,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
800062a4:	02 f4       	mov %d4,%d15
800062a6:	6d 00 58 06 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
800062aa:	91 30 00 2f 	movh.a %a2,61443
800062ae:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
800062b2:	54 22       	ld.w %d2,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
        IfxScuWdt_setCpuEndinit(endinitPw);
800062b4:	02 f4       	mov %d4,%d15
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
800062b6:	8f 82 40 21 	or %d2,%d2,8
800062ba:	74 22       	st.w [%a2],%d2
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
800062bc:	91 30 00 2f 	movh.a %a2,61443
800062c0:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800062c4:	54 22       	ld.w %d2,[%a2]
800062c6:	8f 82 40 21 	or %d2,%d2,8
800062ca:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinitPw);
800062cc:	6d 00 7a 07 	call 800071c0 <IfxScuWdt_setCpuEndinit>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */

        status             |= IfxScuCcu_isOscillatorStable();

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800062d0:	02 84       	mov %d4,%d8
800062d2:	6d 00 e3 07 	call 80007298 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
800062d6:	df 0b 29 81 	jne %d11,0,80006528 <IfxScuCcu_init+0x370>

        /*Setting up P N and K2 values equate pll to evr osc freq */
        {
            {
                /*Set the K2 divider value for the step corresponding to step count */
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800062da:	02 84       	mov %d4,%d8
800062dc:	6d 00 58 06 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
800062e0:	91 30 00 2f 	movh.a %a2,61443
800062e4:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800062e8:	4c 20       	ld.w %d15,[%a2]0
800062ea:	6f 5f ff 7f 	jz.t %d15,5,800062e8 <IfxScuCcu_init+0x130>
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800062ee:	91 30 00 2f 	movh.a %a2,61443
800062f2:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800062f6:	54 22       	ld.w %d2,[%a2]
800062f8:	0c fa       	ld.bu %d15,[%a15]10
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800062fa:	7b 20 85 43 	movh %d4,14418
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800062fe:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006302:	1b 74 71 4b 	addi %d4,%d4,-18665
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80006306:	6c 20       	st.w [%a2]0,%d15

                {
                    /*change P and N divider values */
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
80006308:	91 30 00 2f 	movh.a %a2,61443
8000630c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006310:	54 22       	ld.w %d2,[%a2]
80006312:	0c f8       	ld.bu %d15,[%a15]8
80006314:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
80006318:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
8000631a:	54 22       	ld.w %d2,[%a2]
8000631c:	0c f9       	ld.bu %d15,[%a15]9
8000631e:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
80006322:	6c 20       	st.w [%a2]0,%d15

                    /* Disable oscillator disconnect feature
                     * in case of PLL unlock, PLL stays connected to fref */
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
80006324:	4c 20       	ld.w %d15,[%a2]0
80006326:	96 40       	or %d15,64
80006328:	6c 20       	st.w [%a2]0,%d15
                    //                    workaround for Errata: PLL TC 005
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
8000632a:	4c 20       	ld.w %d15,[%a2]0
8000632c:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80006330:	6c 20       	st.w [%a2]0,%d15
                    /* Connect PLL to fREF as oscillator clock is connected to PLL   */
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
80006332:	4c 20       	ld.w %d15,[%a2]0
80006334:	96 20       	or %d15,32
80006336:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80006338:	4c 20       	ld.w %d15,[%a2]0
8000633a:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000633e:	6c 20       	st.w [%a2]0,%d15

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;
80006340:	4c 20       	ld.w %d15,[%a2]0
80006342:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80006346:	6c 20       	st.w [%a2]0,%d15

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006348:	6d ff 94 fd 	call 80005e70 <IfxScuCcu_wait>

                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
8000634c:	91 30 00 2f 	movh.a %a2,61443
80006350:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006354:	4c 20       	ld.w %d15,[%a2]0
80006356:	6f 2f ff 7f 	jz.t %d15,2,80006354 <IfxScuCcu_init+0x19c>
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
8000635a:	91 30 00 2f 	movh.a %a2,61443
8000635e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006362:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
80006364:	91 30 00 3f 	movh.a %a3,61443
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80006368:	8f 1f c0 f1 	andn %d15,%d15,1
8000636c:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
8000636e:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006372:	4c 30       	ld.w %d15,[%a3]0
80006374:	91 30 00 2f 	movh.a %a2,61443
80006378:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000637c:	bf 0f fb 7f 	jlt %d15,0,80006372 <IfxScuCcu_init+0x1ba>
                    {
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_CCUCON0.B.CLKSEL = 0x01;
80006380:	4c 20       	ld.w %d15,[%a2]0
80006382:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006386:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
80006388:	4c 20       	ld.w %d15,[%a2]0
8000638a:	91 30 00 cf 	movh.a %a12,61443
8000638e:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006392:	bf 0f fb 7f 	jlt %d15,0,80006388 <IfxScuCcu_init+0x1d0>
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80006396:	48 34       	ld.w %d4,[%a15]12
80006398:	6d ff 6c fd 	call 80005e70 <IfxScuCcu_wait>

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
8000639c:	4c f5       	ld.w %d15,[%a15]20
8000639e:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
800063a0:	48 42       	ld.w %d2,[%a15]16
                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
800063a2:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
800063a6:	26 f2       	and %d2,%d15
800063a8:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
800063ac:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon0.B.UP     = 1;
800063b0:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
800063b4:	91 30 00 3f 	movh.a %a3,61443
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
                        ccucon0.B.UP     = 1;
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
800063b8:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
800063ba:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800063be:	4c 30       	ld.w %d15,[%a3]0
800063c0:	91 30 00 2f 	movh.a %a2,61443
800063c4:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800063c8:	bf 0f fb 7f 	jlt %d15,0,800063be <IfxScuCcu_init+0x206>
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
800063cc:	4c f7       	ld.w %d15,[%a15]28
800063ce:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800063d0:	48 62       	ld.w %d2,[%a15]24
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
800063d2:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800063d6:	26 f2       	and %d2,%d15
800063d8:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon1.B.INSEL = 1;
800063dc:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon1.B.UP    = 1;
800063e0:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON1     = ccucon1;
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800063e4:	91 30 00 3f 	movh.a %a3,61443
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
                        ccucon1.B.INSEL = 1;
                        ccucon1.B.UP    = 1;
                        SCU_CCUCON1     = ccucon1;
800063e8:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800063ea:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800063ee:	4c 30       	ld.w %d15,[%a3]0
800063f0:	91 30 00 2f 	movh.a %a2,61443
800063f4:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800063f8:	bf 0f fb 7f 	jlt %d15,0,800063ee <IfxScuCcu_init+0x236>
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
800063fc:	4c f9       	ld.w %d15,[%a15]36
800063fe:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80006400:	48 82       	ld.w %d2,[%a15]32
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
80006402:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80006406:	26 f2       	and %d2,%d15
80006408:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon2.B.UP = 1;
8000640c:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON2  = ccucon2;
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
80006410:	91 30 00 3f 	movh.a %a3,61443
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
                        ccucon2.B.UP = 1;
                        SCU_CCUCON2  = ccucon2;
80006414:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
80006416:	d9 33 0c 16 	lea %a3,[%a3]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
8000641a:	4c 30       	ld.w %d15,[%a3]0
8000641c:	91 30 00 2f 	movh.a %a2,61443
80006420:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006424:	bf 0f fb 7f 	jlt %d15,0,8000641a <IfxScuCcu_init+0x262>
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80006428:	54 23       	ld.w %d3,[%a2]
8000642a:	4c fb       	ld.w %d15,[%a15]44
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
8000642c:	48 a2       	ld.w %d2,[%a15]40
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
8000642e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80006432:	26 f2       	and %d2,%d15
80006434:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon5.B.UP = 1;
80006438:	b7 1f 01 ff 	insert %d15,%d15,1,30,1

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
8000643c:	48 c2       	ld.w %d2,[%a15]48
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
                        ccucon5.B.UP = 1;
                        SCU_CCUCON5  = ccucon5;
8000643e:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
80006440:	91 30 00 2f 	movh.a %a2,61443
80006444:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006448:	54 23       	ld.w %d3,[%a2]
8000644a:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
                        SCU_CCUCON8 = ccucon8;
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000644c:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000644e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80006452:	26 f2       	and %d2,%d15
80006454:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
80006458:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
8000645a:	91 30 00 2f 	movh.a %a2,61443
8000645e:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
80006462:	54 23       	ld.w %d3,[%a2]
80006464:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006466:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006468:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
8000646c:	26 f2       	and %d2,%d15
8000646e:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
80006472:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006474:	91 30 00 2f 	movh.a %a2,61443
80006478:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000647c:	54 23       	ld.w %d3,[%a2]
8000647e:	19 ff 04 10 	ld.w %d15,[%a15]68 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
80006482:	19 f2 00 10 	ld.w %d2,[%a15]64 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006486:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
8000648a:	26 f2       	and %d2,%d15
8000648c:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON8 = ccucon8;
80006490:	6c 20       	st.w [%a2]0,%d15
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006492:	6d 00 03 07 	call 80007298 <IfxScuWdt_setSafetyEndinit>
            }
        }

        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
80006496:	91 00 80 cf 	movh.a %a12,63488
8000649a:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
8000649e:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
800064a2:	54 c3       	ld.w %d3,[%a12]

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
800064a4:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
800064a8:	0f f3 e0 30 	andn %d3,%d3,%d15
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
800064ac:	26 f2       	and %d2,%d15
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
800064ae:	02 94       	mov %d4,%d9
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
800064b0:	0f 23 a0 f0 	or %d15,%d3,%d2
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
800064b4:	6d 00 51 05 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
800064b8:	6c c0       	st.w [%a12]0,%d15
                IfxScuWdt_setCpuEndinit(endinit_pw);
800064ba:	02 94       	mov %d4,%d9
800064bc:	6d 00 82 06 	call 800071c0 <IfxScuWdt_setCpuEndinit>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800064c0:	91 30 00 df 	movh.a %a13,61443
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800064c4:	91 30 00 cf 	movh.a %a12,61443
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
800064c8:	82 0d       	mov %d13,0
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800064ca:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800064ce:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
800064d2:	0c f0       	ld.bu %d15,[%a15]0
800064d4:	8f fd 0f 21 	and %d2,%d13,255
800064d8:	7f f2 28 80 	jge.u %d2,%d15,80006528 <IfxScuCcu_init+0x370>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800064dc:	02 84       	mov %d4,%d8
800064de:	6d 00 57 05 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800064e2:	4c d0       	ld.w %d15,[%a13]0
800064e4:	6f 5f ff 7f 	jz.t %d15,5,800064e2 <IfxScuCcu_init+0x32a>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800064e8:	02 df       	mov %d15,%d13
800064ea:	16 ff       	and %d15,255
800064ec:	53 cf 20 a0 	mul %d10,%d15,12
800064f0:	c8 12       	ld.a %a2,[%a15]4
800064f2:	4c c0       	ld.w %d15,[%a12]0
800064f4:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800064f6:	02 84       	mov %d4,%d8
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800064f8:	30 32       	add.a %a2,%a3
800064fa:	14 22       	ld.bu %d2,[%a2]
800064fc:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
80006500:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006502:	6d 00 cb 06 	call 80007298 <IfxScuWdt_setSafetyEndinit>
            }

            /*call the hook function if configured */
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
80006506:	c8 12       	ld.a %a2,[%a15]4
80006508:	60 a3       	mov.a %a3,%d10
8000650a:	30 32       	add.a %a2,%a3
8000650c:	99 22 08 00 	ld.a %a2,[%a2]8
80006510:	bc 23       	jz.a %a2,80006516 <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
80006512:	2d 02 00 00 	calli %a2
            }

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
80006516:	c8 12       	ld.a %a2,[%a15]4
80006518:	60 a3       	mov.a %a3,%d10
8000651a:	c2 1d       	add %d13,1
8000651c:	30 32       	add.a %a2,%a3
8000651e:	19 24 04 00 	ld.w %d4,[%a2]4
80006522:	6d ff a7 fc 	call 80005e70 <IfxScuCcu_wait>
80006526:	3c d6       	j 800064d2 <IfxScuCcu_init+0x31a>
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006528:	02 84       	mov %d4,%d8
8000652a:	6d 00 31 05 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
8000652e:	91 30 00 ff 	movh.a %a15,61443
80006532:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006536:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006538:	02 84       	mov %d4,%d8
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
8000653a:	8f 0f c4 f1 	andn %d15,%d15,64
8000653e:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006540:	6d 00 ac 06 	call 80007298 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006544:	91 30 00 ff 	movh.a %a15,61443
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006548:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
8000654a:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000654e:	6d 00 04 05 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006552:	4c f0       	ld.w %d15,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006554:	06 3c       	sh %d12,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006556:	96 08       	or %d15,8
80006558:	68 0f       	st.w [%a15]0,%d15
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000655a:	91 30 00 ff 	movh.a %a15,61443
8000655e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006562:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006564:	02 94       	mov %d4,%d9
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006566:	8f 8f c0 f1 	andn %d15,%d15,8
8000656a:	a6 fc       	or %d12,%d15
8000656c:	68 0c       	st.w [%a15]0,%d12
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000656e:	6d 00 29 06 	call 800071c0 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
80006572:	02 b2       	mov %d2,%d11
80006574:	00 90       	ret 

80006576 <IfxScuCcu_initConfig>:


void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg)
{
    *cfg = IfxScuCcu_defaultClockConfig;
80006576:	91 00 00 f8 	movh.a %a15,32768
8000657a:	d9 ff 88 f0 	lea %a15,[%a15]3016 <80000bc8 <IfxScuCcu_defaultClockConfig>>
8000657e:	c5 02 14 00 	lea %a2,14 <_.+0x13>
80006582:	44 ff       	ld.w %d15,[%a15+]
80006584:	64 4f       	st.w [%a4+],%d15
80006586:	fc 2e       	loop %a2,80006582 <IfxScuCcu_initConfig+0xc>
80006588:	00 90       	ret 

8000658a <IfxScuCcu_initErayPll>:
}


boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
8000658a:	40 4c       	mov.aa %a12,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
8000658c:	6d 00 e5 05 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>
80006590:	02 2f       	mov %d15,%d2
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006592:	6d 00 00 06 	call 80007192 <IfxScuWdt_getSafetyWatchdogPassword>

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006596:	02 f4       	mov %d4,%d15
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006598:	02 28       	mov %d8,%d2

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000659a:	6d 00 de 04 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
8000659e:	91 30 00 ff 	movh.a %a15,61443
800065a2:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800065a6:	48 03       	ld.w %d3,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
800065a8:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800065aa:	02 f4       	mov %d4,%d15
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
800065ac:	8f 82 40 21 	or %d2,%d2,8
800065b0:	68 02       	st.w [%a15]0,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800065b2:	37 03 e1 a1 	extr.u %d10,%d3,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
        IfxScuWdt_setCpuEndinit(endinit_pw);
800065b6:	6d 00 05 06 	call 800071c0 <IfxScuWdt_setCpuEndinit>
    }
    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800065ba:	02 84       	mov %d4,%d8
800065bc:	6d 00 e8 04 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>

    // ensure that PLL enabled
    if (!SCU_PLLERAYCON0.B.PLLPWD || SCU_PLLERAYCON0.B.VCOPWD || SCU_PLLERAYSTAT.B.PWDSTAT)
800065c0:	91 30 00 ff 	movh.a %a15,61443
800065c4:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800065c8:	48 02       	ld.w %d2,[%a15]0
800065ca:	ef 02 0c 00 	jz.t %d2,16,800065e2 <IfxScuCcu_initErayPll+0x58>
800065ce:	48 02       	ld.w %d2,[%a15]0
800065d0:	6f 12 09 80 	jnz.t %d2,1,800065e2 <IfxScuCcu_initErayPll+0x58>
800065d4:	91 30 00 ff 	movh.a %a15,61443
800065d8:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800065dc:	48 02       	ld.w %d2,[%a15]0
800065de:	6f 12 19 00 	jz.t %d2,1,80006610 <IfxScuCcu_initErayPll+0x86>
    {   // PLLPWD=0 or VCOPWD=1 or PWDSTAT=1?
      // enable PLL and leave power saving mode
        SCU_PLLERAYCON0.B.PLLPWD = 1;
800065e2:	91 30 00 ff 	movh.a %a15,61443
800065e6:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800065ea:	48 02       	ld.w %d2,[%a15]0
800065ec:	b7 f2 01 28 	insert %d2,%d2,15,16,1
800065f0:	68 02       	st.w [%a15]0,%d2
        SCU_PLLERAYCON0.B.VCOPWD = 0;
800065f2:	48 02       	ld.w %d2,[%a15]0
800065f4:	8f 22 c0 21 	andn %d2,%d2,2
800065f8:	68 02       	st.w [%a15]0,%d2

        while (SCU_PLLERAYSTAT.B.PWDSTAT)  // poll PWDSTAT
800065fa:	91 30 00 ff 	movh.a %a15,61443
800065fe:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006602:	48 02       	ld.w %d2,[%a15]0
80006604:	6f 12 ff ff 	jnz.t %d2,1,80006602 <IfxScuCcu_initErayPll+0x78>
        {}

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(cfg->pllInitialStep.waitTime);
80006608:	19 c4 04 00 	ld.w %d4,[%a12]4
8000660c:	6d ff 32 fc 	call 80005e70 <IfxScuCcu_wait>
    }

    /* Enter Prescalar mode */
    /* Update K and N dividers */
    if (!SCU_PLLERAYSTAT.B.VCOBYST)      // checking PLLERAYBYPST flag
80006610:	91 30 00 ff 	movh.a %a15,61443
80006614:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006618:	48 02       	ld.w %d2,[%a15]0
8000661a:	6f 02 15 80 	jnz.t %d2,0,80006644 <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
8000661e:	48 02       	ld.w %d2,[%a15]0
80006620:	6f 42 ff 7f 	jz.t %d2,4,8000661e <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
80006624:	91 30 00 ff 	movh.a %a15,61443
80006628:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
8000662c:	48 02       	ld.w %d2,[%a15]0
8000662e:	b7 32 07 28 	insert %d2,%d2,3,16,7
80006632:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
80006634:	91 30 00 ff 	movh.a %a15,61443
80006638:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000663c:	48 02       	ld.w %d2,[%a15]0
8000663e:	8f 12 40 21 	or %d2,%d2,1
80006642:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
80006644:	91 30 00 ff 	movh.a %a15,61443
80006648:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
8000664c:	48 02       	ld.w %d2,[%a15]0
8000664e:	6f 52 ff 7f 	jz.t %d2,5,8000664c <IfxScuCcu_initErayPll+0xc2>
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
80006652:	91 30 00 ff 	movh.a %a15,61443
80006656:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
8000665a:	48 03       	ld.w %d3,[%a15]0
8000665c:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006660:	02 84       	mov %d4,%d8
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
80006662:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006666:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.PDIV  = cfg->pllInitialStep.pDivider;
80006668:	91 30 00 ff 	movh.a %a15,61443
8000666c:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006670:	48 03       	ld.w %d3,[%a15]0
80006672:	14 c2       	ld.bu %d2,[%a12]
80006674:	37 23 04 2c 	insert %d2,%d3,%d2,24,4
80006678:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.NDIV  = cfg->pllInitialStep.nDivider;
8000667a:	48 03       	ld.w %d3,[%a15]0
8000667c:	39 c2 01 00 	ld.bu %d2,[%a12]1
80006680:	37 23 85 24 	insert %d2,%d3,%d2,9,5
80006684:	68 02       	st.w [%a15]0,%d2
     *  CLRFINDIS = 1 ==> Connect OSC to PLL
     *  PLLPWD = 1    ==> PLL Power Saving Mode : Normal behaviour
     *  NDIV = NDIV
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
80006686:	48 02       	ld.w %d2,[%a15]0
80006688:	b7 f2 01 29 	insert %d2,%d2,15,18,1
8000668c:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;
8000668e:	48 02       	ld.w %d2,[%a15]0
80006690:	8f 02 42 21 	or %d2,%d2,32
80006694:	68 02       	st.w [%a15]0,%d2

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006696:	6d 00 01 06 	call 80007298 <IfxScuWdt_setSafetyEndinit>

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
8000669a:	91 10 00 f0 	movh.a %a15,1
8000669e:	91 30 00 2f 	movh.a %a2,61443
800066a2:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800066a6:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
800066aa:	fd f0 04 00 	loop %a15,800066b2 <IfxScuCcu_initErayPll+0x128>
    {}

    // check for timeout, exit immediately (don't disable VCO bypass) of not locked
    if (!time_out_ctr)
    {
        status = TRUE;
800066ae:	82 19       	mov %d9,1
800066b0:	3c 05       	j 800066ba <IfxScuCcu_initErayPll+0x130>
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
800066b2:	54 22       	ld.w %d2,[%a2]
800066b4:	6f 22 fb 7f 	jz.t %d2,2,800066aa <IfxScuCcu_initErayPll+0x120>

boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
800066b8:	82 09       	mov %d9,0
    if (!time_out_ctr)
    {
        status = TRUE;
    }

    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800066ba:	02 84       	mov %d4,%d8
800066bc:	6d 00 68 04 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>
    /*Bypass VCO*/
    SCU_PLLERAYCON0.B.VCOBYP = 0U;
800066c0:	91 30 00 ff 	movh.a %a15,61443
800066c4:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800066c8:	48 02       	ld.w %d2,[%a15]0
800066ca:	8f 12 c0 21 	andn %d2,%d2,1
800066ce:	68 02       	st.w [%a15]0,%d2

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
800066d0:	91 30 00 ff 	movh.a %a15,61443
800066d4:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800066d8:	48 02       	ld.w %d2,[%a15]0
800066da:	6f 02 ff ff 	jnz.t %d2,0,800066d8 <IfxScuCcu_initErayPll+0x14e>
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800066de:	91 30 00 ff 	movh.a %a15,61443
800066e2:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800066e6:	48 02       	ld.w %d2,[%a15]0
    {
        status = TRUE;
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066e8:	02 84       	mov %d4,%d8

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800066ea:	37 02 61 21 	extr.u %d2,%d2,2,1

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800066ee:	91 30 00 ff 	movh.a %a15,61443
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
    {
        status = TRUE;
800066f2:	ab 19 80 92 	sel %d9,%d2,%d9,1
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066f6:	6d 00 d1 05 	call 80007298 <IfxScuWdt_setSafetyEndinit>

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800066fa:	02 f4       	mov %d4,%d15
800066fc:	6d 00 2d 04 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006700:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
80006704:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006706:	8f 3a 00 30 	sh %d3,%d10,3

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
8000670a:	8f 82 40 21 	or %d2,%d2,8
8000670e:	68 02       	st.w [%a15]0,%d2
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006710:	91 30 00 ff 	movh.a %a15,61443
80006714:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006718:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000671a:	02 f4       	mov %d4,%d15
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000671c:	8f 82 c0 21 	andn %d2,%d2,8
80006720:	a6 32       	or %d2,%d3
80006722:	68 02       	st.w [%a15]0,%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006724:	6d 00 4e 05 	call 800071c0 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
80006728:	02 92       	mov %d2,%d9
8000672a:	00 90       	ret 

8000672c <IfxScuCcu_initErayPllConfig>:


void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg)
{
    *cfg = IfxScuCcu_defaultErayPllConfig;
8000672c:	91 00 00 f8 	movh.a %a15,32768
80006730:	d9 ff 80 f0 	lea %a15,[%a15]3008 <80000bc0 <IfxScuCcu_defaultErayPllConfig>>
80006734:	09 f2 40 09 	ld.d %e2,[%a15]
80006738:	89 42 40 09 	st.d [%a4],%e2
8000673c:	00 90       	ret 

8000673e <IfxScuCcu_setCpuFrequency>:
    return status;
}


float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq)
{
8000673e:	02 5a       	mov %d10,%d5
80006740:	02 49       	mov %d9,%d4
    uint16  endinitSfty_pw;
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();
80006742:	6d ff a7 fc 	call 80006090 <IfxScuCcu_getSriFrequency>
80006746:	02 2f       	mov %d15,%d2

    if (cpuFreq >= sriFreq)
80006748:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
8000674c:	87 22 a2 20 	or.t %d2,%d2,2,%d2,1
    {
        cpuDiv = 0;
80006750:	82 08       	mov %d8,0
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();

    if (cpuFreq >= sriFreq)
80006752:	f6 29       	jnz %d2,80006764 <IfxScuCcu_setCpuFrequency+0x26>
    {
        cpuDiv = 0;
    }
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
80006754:	7b 00 28 84 	movh %d8,17024
80006758:	4b 8a 41 80 	mul.f %d8,%d10,%d8
8000675c:	4b f8 51 80 	div.f %d8,%d8,%d15
80006760:	4b 08 71 81 	ftouz %d8,%d8
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006764:	6d 00 17 05 	call 80007192 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006768:	02 24       	mov %d4,%d2
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
8000676a:	02 2a       	mov %d10,%d2

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000676c:	6d 00 10 04 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>

        switch (cpu)
80006770:	df 19 0f 00 	jeq %d9,1,8000678e <IfxScuCcu_setCpuFrequency+0x50>
80006774:	76 98       	jz %d9,80006784 <IfxScuCcu_setCpuFrequency+0x46>
80006776:	df 29 11 80 	jne %d9,2,80006798 <IfxScuCcu_setCpuFrequency+0x5a>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
8000677a:	91 30 00 ff 	movh.a %a15,61443
8000677e:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
80006782:	3c 0a       	j 80006796 <IfxScuCcu_setCpuFrequency+0x58>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        switch (cpu)
        {
        case IfxCpu_ResourceCpu_0:
            SCU_CCUCON6.U = cpuDiv;
80006784:	91 30 00 ff 	movh.a %a15,61443
80006788:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
8000678c:	3c 05       	j 80006796 <IfxScuCcu_setCpuFrequency+0x58>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
8000678e:	91 30 00 ff 	movh.a %a15,61443
80006792:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
80006796:	68 08       	st.w [%a15]0,%d8

        default:
            break;
        }

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006798:	02 a4       	mov %d4,%d10
8000679a:	6d 00 7f 05 	call 80007298 <IfxScuWdt_setSafetyEndinit>
    }

    if (cpuDiv != 0)
8000679e:	76 89       	jz %d8,800067b0 <IfxScuCcu_setCpuFrequency+0x72>
    {
        sriFreq = sriFreq * (cpuDiv / 64.0f);
800067a0:	4b 08 61 81 	utof %d8,%d8
800067a4:	7b 00 c8 23 	movh %d2,15488
800067a8:	4b 28 41 80 	mul.f %d8,%d8,%d2
800067ac:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
    }

    return sriFreq;
}
800067b0:	02 f2       	mov %d2,%d15
800067b2:	00 90       	ret 

800067b4 <IfxScuCcu_setGtmFrequency>:


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
800067b4:	91 30 00 ff 	movh.a %a15,61443
800067b8:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
    return sriFreq;
}


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
800067bc:	02 48       	mov %d8,%d4
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
800067be:	4c f0       	ld.w %d15,[%a15]0

    float32         inputFreq = IfxScuCcu_getSourceFrequency();
800067c0:	6d ff 46 fb 	call 80005e4c <IfxScuCcu_getSourceFrequency>
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
800067c4:	4b 82 51 20 	div.f %d2,%d2,%d8
800067c8:	4b 02 31 31 	ftoiz %d3,%d2
800067cc:	4b 03 41 41 	itof %d4,%d3
800067d0:	6b 04 31 22 	sub.f %d2,%d2,%d4
800067d4:	7b 00 f0 43 	movh %d4,16128
800067d8:	4b 42 01 20 	cmp.f %d2,%d2,%d4
800067dc:	37 02 61 21 	extr.u %d2,%d2,2,1
800067e0:	42 32       	add %d2,%d3
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800067e2:	82 13       	mov %d3,1
800067e4:	0b 32 b0 21 	max.u %d2,%d2,%d3
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
800067e8:	8b e2 00 52 	eq %d5,%d2,14
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
800067ec:	1b 92 ff 4f 	addi %d4,%d2,-7
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
    {
        gtmDiv = 12;
800067f0:	ab c2 a0 95 	seln %d9,%d5,%d2,12
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
800067f4:	8f 12 c0 31 	andn %d3,%d2,1
800067f8:	02 92       	mov %d2,%d9
800067fa:	8b 74 a0 92 	ge.u %d9,%d4,7
800067fe:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006802:	6d 00 c8 04 	call 80007192 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006806:	02 24       	mov %d4,%d2
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006808:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
8000680a:	6d 00 c1 03 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON1.B.LCK != 0U)
8000680e:	40 f2       	mov.aa %a2,%a15
80006810:	54 22       	ld.w %d2,[%a2]
80006812:	91 30 00 ff 	movh.a %a15,61443
80006816:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000681a:	bf 02 fb 7f 	jlt %d2,0,80006810 <IfxScuCcu_setGtmFrequency+0x5c>
    {}

    ccucon1.B.GTMDIV = gtmDiv;
8000681e:	37 9f 04 f6 	insert %d15,%d15,%d9,12,4
    ccucon1.B.UP     = 1U;
80006822:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON1.U    = ccucon1.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006826:	02 84       	mov %d4,%d8
    while (SCU_CCUCON1.B.LCK != 0U)
    {}

    ccucon1.B.GTMDIV = gtmDiv;
    ccucon1.B.UP     = 1U;
    SCU_CCUCON1.U    = ccucon1.U;
80006828:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
8000682a:	6d 00 37 05 	call 80007298 <IfxScuWdt_setSafetyEndinit>
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
8000682e:	6d ff 0f fb 	call 80005e4c <IfxScuCcu_getSourceFrequency>
80006832:	4c f0       	ld.w %d15,[%a15]0
80006834:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006838:	4b 0f 41 f1 	itof %d15,%d15

    return IfxScuCcu_getGtmFrequency();
}
8000683c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006840:	00 90       	ret 

80006842 <IfxScuCcu_setPll2ErayFrequency>:


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
80006842:	02 48       	mov %d8,%d4
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
80006844:	6d 00 a7 04 	call 80007192 <IfxScuWdt_getSafetyWatchdogPassword>
80006848:	02 2f       	mov %d15,%d2
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
8000684a:	6d ff 84 fa 	call 80005d52 <IfxScuCcu_getPllErayVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(password);
8000684e:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006850:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006852:	6d 00 9d 03 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006856:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
8000685a:	91 30 00 ff 	movh.a %a15,61443
8000685e:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006862:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006864:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(password);
80006868:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
8000686a:	6b 03 31 88 	sub.f %d8,%d8,%d3
8000686e:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006872:	37 82 04 84 	insert %d8,%d2,%d8,8,4
80006876:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(password);
80006878:	6d 00 10 05 	call 80007298 <IfxScuWdt_setSafetyEndinit>

IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
{
    float32 pll2ErayFrequency;

    pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
8000687c:	6d ff 6b fa 	call 80005d52 <IfxScuCcu_getPllErayVcoFrequency>
80006880:	4c f0       	ld.w %d15,[%a15]0
80006882:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006886:	c2 1f       	add %d15,1
80006888:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2ErayFrequency();
}
8000688c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006890:	00 90       	ret 

80006892 <IfxScuCcu_setPll2Frequency>:


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
80006892:	02 48       	mov %d8,%d4
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006894:	6d 00 7f 04 	call 80007192 <IfxScuWdt_getSafetyWatchdogPassword>
80006898:	02 2f       	mov %d15,%d2
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
8000689a:	6d ff b7 fa 	call 80005e08 <IfxScuCcu_getPllVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000689e:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
800068a0:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800068a2:	6d 00 75 03 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
800068a6:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
800068aa:	91 30 00 ff 	movh.a %a15,61443
800068ae:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800068b2:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
800068b4:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068b8:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
800068ba:	6b 03 31 88 	sub.f %d8,%d8,%d3
800068be:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
800068c2:	37 82 07 84 	insert %d8,%d2,%d8,8,7
800068c6:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068c8:	6d 00 e8 04 	call 80007298 <IfxScuWdt_setSafetyEndinit>


IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void)
{
    float32 pll2Frequency;
    pll2Frequency = IfxScuCcu_getPllVcoFrequency() / (SCU_PLLCON1.B.K3DIV + 1);
800068cc:	6d ff 9e fa 	call 80005e08 <IfxScuCcu_getPllVcoFrequency>
800068d0:	4c f0       	ld.w %d15,[%a15]0
800068d2:	37 0f 67 f4 	extr.u %d15,%d15,8,7
800068d6:	c2 1f       	add %d15,1
800068d8:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2Frequency();
}
800068dc:	4b f2 51 20 	div.f %d2,%d2,%d15
800068e0:	00 90       	ret 

800068e2 <IfxScuCcu_setSpbFrequency>:


float32 IfxScuCcu_setSpbFrequency(float32 spbFreq)
{
800068e2:	02 4f       	mov %d15,%d4
    /* TODO: check whether it is necessary to disable trap and/or the safety */
    uint16          l_EndInitPW;
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
800068e4:	6d ff b4 fa 	call 80005e4c <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
800068e8:	4b f2 51 20 	div.f %d2,%d2,%d15
800068ec:	82 24       	mov %d4,2
800068ee:	4b 02 71 21 	ftouz %d2,%d2
800068f2:	0b 42 b0 41 	max.u %d4,%d2,%d4
    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
    {
        spbDiv = spbDiv - 1;
    }

    if (spbDiv == 14)
800068f6:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
800068fa:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
    spbDiv = __maxu(spbDiv, 2);

    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
800068fe:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
80006902:	8f 14 c0 f1 	andn %d15,%d4,1
80006906:	02 a4       	mov %d4,%d10
80006908:	8b 72 a0 a2 	ge.u %d10,%d2,7
8000690c:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
    if (spbDiv == 14)
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
80006910:	6d 00 23 04 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>
80006914:	02 28       	mov %d8,%d2
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006916:	6d 00 3e 04 	call 80007192 <IfxScuWdt_getSafetyWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
8000691a:	02 84       	mov %d4,%d8
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
8000691c:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
8000691e:	6d 00 1c 03 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006922:	91 30 00 ff 	movh.a %a15,61443
80006926:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
8000692a:	48 02       	ld.w %d2,[%a15]0
8000692c:	3b 00 3e f0 	mov %d15,992
80006930:	a6 2f       	or %d15,%d2
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006932:	02 84       	mov %d4,%d8

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006934:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006936:	6d 00 45 04 	call 800071c0 <IfxScuWdt_setCpuEndinit>

    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
8000693a:	02 94       	mov %d4,%d9
8000693c:	6d 00 28 03 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006940:	91 30 00 2f 	movh.a %a2,61443
80006944:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006948:	4c 20       	ld.w %d15,[%a2]0
8000694a:	91 30 00 ff 	movh.a %a15,61443
8000694e:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006952:	bf 0f fb 7f 	jlt %d15,0,80006948 <IfxScuCcu_setSpbFrequency+0x66>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006956:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SPBDIV = spbDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006958:	02 94       	mov %d4,%d9

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SPBDIV = spbDiv;
8000695a:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
    ccucon0.B.UP     = 1;
8000695e:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006962:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006964:	6d 00 9a 04 	call 80007298 <IfxScuWdt_setSafetyEndinit>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006968:	02 84       	mov %d4,%d8
8000696a:	6d 00 f6 02 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
8000696e:	91 30 00 ff 	movh.a %a15,61443
80006972:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006976:	4c f0       	ld.w %d15,[%a15]0
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006978:	02 84       	mov %d4,%d8
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
8000697a:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
8000697e:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006980:	6d 00 20 04 	call 800071c0 <IfxScuWdt_setCpuEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006984:	91 30 00 ff 	movh.a %a15,61443
80006988:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000698c:	4c f0       	ld.w %d15,[%a15]0
8000698e:	bf 0f ff 7f 	jlt %d15,0,8000698c <IfxScuCcu_setSpbFrequency+0xaa>
    {}

    return IfxScuCcu_getSpbFrequency();
80006992:	1d ff 1e fb 	j 80005fce <IfxScuCcu_getSpbFrequency>

80006996 <IfxScuCcu_setSriFrequency>:
}


float32 IfxScuCcu_setSriFrequency(float32 sriFreq)
{
80006996:	02 4f       	mov %d15,%d4
    float32         freq   = 0;
    float32         source = IfxScuCcu_getSourceFrequency();
80006998:	6d ff 5a fa 	call 80005e4c <IfxScuCcu_getSourceFrequency>
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
8000699c:	4b f2 51 20 	div.f %d2,%d2,%d15
800069a0:	4b 02 31 31 	ftoiz %d3,%d2
800069a4:	4b 03 41 f1 	itof %d15,%d3
800069a8:	6b 0f 31 22 	sub.f %d2,%d2,%d15
800069ac:	7b 00 f0 f3 	movh %d15,16128
800069b0:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
800069b4:	37 0f 61 f1 	extr.u %d15,%d15,2,1
800069b8:	82 12       	mov %d2,1
800069ba:	42 3f       	add %d15,%d3
800069bc:	0b 2f b0 f1 	max.u %d15,%d15,%d2
    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
800069c0:	8b ef 00 42 	eq %d4,%d15,14
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
800069c4:	92 93       	add %d3,%d15,-7
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
    {
        sriDiv = 12;
800069c6:	ab cf a0 94 	seln %d9,%d4,%d15,12
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
800069ca:	8f 1f c0 21 	andn %d2,%d15,1
800069ce:	02 9f       	mov %d15,%d9
800069d0:	8b 73 a0 92 	ge.u %d9,%d3,7
800069d4:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069d8:	6d 00 dd 03 	call 80007192 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069dc:	02 24       	mov %d4,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069de:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069e0:	6d 00 d6 02 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
800069e4:	91 30 00 2f 	movh.a %a2,61443
800069e8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800069ec:	4c 20       	ld.w %d15,[%a2]0
800069ee:	91 30 00 ff 	movh.a %a15,61443
800069f2:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800069f6:	bf 0f fb 7f 	jlt %d15,0,800069ec <IfxScuCcu_setSriFrequency+0x56>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
800069fa:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SRIDIV = sriDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
800069fc:	02 84       	mov %d4,%d8

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SRIDIV = sriDiv;
800069fe:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
    ccucon0.B.UP     = 1;
80006a02:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006a06:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a08:	6d 00 48 04 	call 80007298 <IfxScuWdt_setSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006a0c:	4c f0       	ld.w %d15,[%a15]0
80006a0e:	bf 0f ff 7f 	jlt %d15,0,80006a0c <IfxScuCcu_setSriFrequency+0x76>
    {}

    freq = IfxScuCcu_getSriFrequency();
80006a12:	1d ff 3f fb 	j 80006090 <IfxScuCcu_getSriFrequency>

80006a16 <IfxScuCcu_switchToBackupClock>:
{
    uint16 endinit_pw, endinitSfty_pw;
    int    pllStepsCount;
    uint8  smuTrapEnable;

    if (SCU_CCUCON0.B.CLKSEL == 0) /* Already source is backup clock */
80006a16:	91 30 00 ff 	movh.a %a15,61443
80006a1a:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006a1e:	4c f0       	ld.w %d15,[%a15]0
80006a20:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006a24:	df 0f 81 00 	jeq %d15,0,80006b26 <IfxScuCcu_switchToBackupClock+0x110>
80006a28:	40 4f       	mov.aa %a15,%a4
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006a2a:	6d 00 b4 03 	call 80007192 <IfxScuWdt_getSafetyWatchdogPassword>
80006a2e:	02 29       	mov %d9,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006a30:	6d 00 93 03 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006a34:	0c f0       	ld.bu %d15,[%a15]0
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006a36:	02 28       	mov %d8,%d2
80006a38:	53 cf 20 20 	mul %d2,%d15,12
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006a3c:	91 30 00 ef 	movh.a %a14,61443
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006a40:	91 30 00 df 	movh.a %a13,61443
80006a44:	60 22       	mov.a %a2,%d2
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006a46:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006a4a:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006a4e:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006a52:	6e 1b       	jz %d15,80006a88 <IfxScuCcu_switchToBackupClock+0x72>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006a54:	02 94       	mov %d4,%d9
80006a56:	6d 00 9b 02 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006a5a:	54 e2       	ld.w %d2,[%a14]
80006a5c:	6f 52 ff 7f 	jz.t %d2,5,80006a5a <IfxScuCcu_switchToBackupClock+0x44>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006a60:	c8 12       	ld.a %a2,[%a15]4
80006a62:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006a64:	02 94       	mov %d4,%d9
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006a66:	30 c2       	add.a %a2,%a12
80006a68:	14 22       	ld.bu %d2,[%a2]

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006a6a:	c2 ff       	add %d15,-1
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006a6c:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006a70:	74 d2       	st.w [%a13],%d2

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006a72:	6d 00 13 04 	call 80007298 <IfxScuWdt_setSafetyEndinit>

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount - 1].waitTime);
80006a76:	c8 12       	ld.a %a2,[%a15]4
80006a78:	30 c2       	add.a %a2,%a12
80006a7a:	19 24 04 00 	ld.w %d4,[%a2]4
80006a7e:	6d ff f9 f9 	call 80005e70 <IfxScuCcu_wait>
80006a82:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006a86:	3c e6       	j 80006a52 <IfxScuCcu_switchToBackupClock+0x3c>
        }
    }

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006a88:	02 84       	mov %d4,%d8
80006a8a:	6d 00 66 02 	call 80006f56 <IfxScuWdt_clearCpuEndinit>

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006a8e:	91 30 00 ff 	movh.a %a15,61443
80006a92:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006a96:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006a98:	4c f0       	ld.w %d15,[%a15]0

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006a9a:	02 84       	mov %d4,%d8
    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006a9c:	96 08       	or %d15,8
80006a9e:	68 0f       	st.w [%a15]0,%d15

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006aa0:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006aa4:	6d 00 8e 03 	call 800071c0 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006aa8:	02 94       	mov %d4,%d9
80006aaa:	6d 00 71 02 	call 80006f8c <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006aae:	91 30 00 2f 	movh.a %a2,61443
80006ab2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006ab6:	4c 20       	ld.w %d15,[%a2]0
80006ab8:	91 30 00 ff 	movh.a %a15,61443
80006abc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006ac0:	bf 0f fb 7f 	jlt %d15,0,80006ab6 <IfxScuCcu_switchToBackupClock+0xa0>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80006ac4:	4c f0       	ld.w %d15,[%a15]0
80006ac6:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006aca:	68 0f       	st.w [%a15]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006acc:	4c f0       	ld.w %d15,[%a15]0
80006ace:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006ad2:	68 0f       	st.w [%a15]0,%d15

        while (SCU_CCUCON0.B.LCK != 0U)
80006ad4:	4c f0       	ld.w %d15,[%a15]0
80006ad6:	bf 0f ff 7f 	jlt %d15,0,80006ad4 <IfxScuCcu_switchToBackupClock+0xbe>
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006ada:	91 30 00 ff 	movh.a %a15,61443
80006ade:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006ae2:	4c f0       	ld.w %d15,[%a15]0

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006ae4:	02 94       	mov %d4,%d9
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006ae6:	96 10       	or %d15,16
80006ae8:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006aea:	4c f0       	ld.w %d15,[%a15]0
80006aec:	8f 0f c4 f1 	andn %d15,%d15,64
80006af0:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006af2:	6d 00 d3 03 	call 80007298 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006af6:	91 30 00 ff 	movh.a %a15,61443
80006afa:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006afe:	02 84       	mov %d4,%d8
80006b00:	6d 00 2b 02 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006b04:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006b06:	8f 3a 00 20 	sh %d2,%d10,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006b0a:	96 08       	or %d15,8
80006b0c:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006b0e:	91 30 00 ff 	movh.a %a15,61443
80006b12:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006b16:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006b18:	02 84       	mov %d4,%d8
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006b1a:	8f 8f c0 f1 	andn %d15,%d15,8
80006b1e:	a6 2f       	or %d15,%d2
80006b20:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006b22:	1d 00 4f 03 	j 800071c0 <IfxScuWdt_setCpuEndinit>
80006b26:	00 90       	ret 

80006b28 <IfxScuEru_clearAllEventFlags>:
/******************************************************************************/

void IfxScuEru_clearAllEventFlags(void)
{
    uint32 mask = (0xFF << 16);
    MODULE_SCU.FMR.U = mask;
80006b28:	91 30 00 ff 	movh.a %a15,61443
80006b2c:	7b f0 0f f0 	movh %d15,255
80006b30:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006b34:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006b38:	00 90       	ret 

80006b3a <IfxScuEru_clearEventFlag>:
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006b3a:	1b 04 01 40 	addi %d4,%d4,16
80006b3e:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006b40:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006b44:	0f 4f 00 f0 	sh %d15,%d15,%d4
    SCU_FMR.U = mask;
80006b48:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006b4c:	68 0f       	st.w [%a15]0,%d15
80006b4e:	00 90       	ret 

80006b50 <IfxScuEru_clearInputChannelConfiguration>:


void IfxScuEru_clearInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006b50:	8f f4 1f f0 	sh %d15,%d4,-1
80006b54:	06 2f       	sh %d15,2
80006b56:	60 ff       	mov.a %a15,%d15
80006b58:	d9 ff 00 06 	lea %a15,[%a15]24576
80006b5c:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006b60:	19 ff 10 80 	ld.w %d15,[%a15]528
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006b64:	6f 04 05 00 	jz.t %d4,0,80006b6e <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006b68:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006b6c:	3c 03       	j 80006b72 <IfxScuEru_clearInputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006b6e:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006b72:	59 ff 10 80 	st.w [%a15]528,%d15
80006b76:	00 90       	ret 

80006b78 <IfxScuEru_clearOutputChannelConfiguration>:


void IfxScuEru_clearOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006b78:	8f f4 1f f0 	sh %d15,%d4,-1
80006b7c:	06 2f       	sh %d15,2
80006b7e:	60 ff       	mov.a %a15,%d15
80006b80:	d9 ff 00 06 	lea %a15,[%a15]24576
80006b84:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006b88:	19 ff 2c 80 	ld.w %d15,[%a15]556
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006b8c:	6f 04 05 00 	jz.t %d4,0,80006b96 <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006b90:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006b94:	3c 03       	j 80006b9a <IfxScuEru_clearOutputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006b96:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006b9a:	59 ff 2c 80 	st.w [%a15]556,%d15
80006b9e:	00 90       	ret 

80006ba0 <IfxScuEru_connectTrigger>:


void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ba0:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006ba4:	91 30 00 ff 	movh.a %a15,61443
80006ba8:	1b 4f 08 f0 	addi %d15,%d15,132
80006bac:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006bb0:	8f 75 00 51 	and %d5,%d5,7
80006bb4:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006bb6:	6f 04 08 00 	jz.t %d4,0,80006bc6 <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006bba:	4c f0       	ld.w %d15,[%a15]0
80006bbc:	8f c5 01 50 	sh %d5,%d5,28
80006bc0:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006bc4:	3c 06       	j 80006bd0 <IfxScuEru_connectTrigger+0x30>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.INP0 = triggerSelect;
80006bc6:	4c f0       	ld.w %d15,[%a15]0
80006bc8:	8f c5 00 50 	sh %d5,%d5,12
80006bcc:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006bd0:	a6 f5       	or %d5,%d15
80006bd2:	68 05       	st.w [%a15]0,%d5
80006bd4:	00 90       	ret 

80006bd6 <IfxScuEru_disableAutoClear>:


void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006bd6:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006bda:	91 30 00 ff 	movh.a %a15,61443
80006bde:	1b 4f 08 f0 	addi %d15,%d15,132
80006be2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006be6:	90 ff       	addsc.a %a15,%a15,%d15,2
80006be8:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006bea:	6f 04 05 00 	jz.t %d4,0,80006bf4 <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006bee:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006bf2:	3c 03       	j 80006bf8 <IfxScuEru_disableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = FALSE;
80006bf4:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006bf8:	68 0f       	st.w [%a15]0,%d15
80006bfa:	00 90       	ret 

80006bfc <IfxScuEru_disableFallingEdgeDetection>:


void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006bfc:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006c00:	91 30 00 ff 	movh.a %a15,61443
80006c04:	1b 4f 08 f0 	addi %d15,%d15,132
80006c08:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006c0c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006c0e:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006c10:	6f 04 05 00 	jz.t %d4,0,80006c1a <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006c14:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006c18:	3c 03       	j 80006c1e <IfxScuEru_disableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = FALSE;
80006c1a:	8f 0f d0 f1 	andn %d15,%d15,256
80006c1e:	68 0f       	st.w [%a15]0,%d15
80006c20:	00 90       	ret 

80006c22 <IfxScuEru_disablePatternDetectionTrigger>:


void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006c22:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006c26:	91 30 00 ff 	movh.a %a15,61443
80006c2a:	1b bf 08 f0 	addi %d15,%d15,139
80006c2e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006c32:	90 ff       	addsc.a %a15,%a15,%d15,2
80006c34:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006c36:	6f 04 05 00 	jz.t %d4,0,80006c40 <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006c3a:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006c3e:	3c 03       	j 80006c44 <IfxScuEru_disablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = FALSE;
80006c40:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006c44:	68 0f       	st.w [%a15]0,%d15
80006c46:	00 90       	ret 

80006c48 <IfxScuEru_disableRisingEdgeDetection>:


void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006c48:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006c4c:	91 30 00 ff 	movh.a %a15,61443
80006c50:	1b 4f 08 f0 	addi %d15,%d15,132
80006c54:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006c58:	90 ff       	addsc.a %a15,%a15,%d15,2
80006c5a:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006c5c:	6f 04 05 00 	jz.t %d4,0,80006c66 <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006c60:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006c64:	3c 03       	j 80006c6a <IfxScuEru_disableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = FALSE;
80006c66:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006c6a:	68 0f       	st.w [%a15]0,%d15
80006c6c:	00 90       	ret 

80006c6e <IfxScuEru_disableTriggerPulse>:


void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006c6e:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006c72:	91 30 00 ff 	movh.a %a15,61443
80006c76:	1b 4f 08 f0 	addi %d15,%d15,132
80006c7a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006c7e:	90 ff       	addsc.a %a15,%a15,%d15,2
80006c80:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006c82:	6f 04 05 00 	jz.t %d4,0,80006c8c <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006c86:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006c8a:	3c 03       	j 80006c90 <IfxScuEru_disableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = FALSE;
80006c8c:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006c90:	68 0f       	st.w [%a15]0,%d15
80006c92:	00 90       	ret 

80006c94 <IfxScuEru_enableAutoClear>:


void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006c94:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006c98:	91 30 00 ff 	movh.a %a15,61443
80006c9c:	1b 4f 08 f0 	addi %d15,%d15,132
80006ca0:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ca4:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ca6:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006ca8:	6f 04 05 00 	jz.t %d4,0,80006cb2 <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006cac:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006cb0:	3c 03       	j 80006cb6 <IfxScuEru_enableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = TRUE;
80006cb2:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006cb6:	68 0f       	st.w [%a15]0,%d15
80006cb8:	00 90       	ret 

80006cba <IfxScuEru_enableFallingEdgeDetection>:


void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006cba:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006cbe:	91 30 00 ff 	movh.a %a15,61443
80006cc2:	1b 4f 08 f0 	addi %d15,%d15,132
80006cc6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006cca:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ccc:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006cce:	6f 04 05 00 	jz.t %d4,0,80006cd8 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006cd2:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006cd6:	3c 03       	j 80006cdc <IfxScuEru_enableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = TRUE;
80006cd8:	8f 0f 50 f1 	or %d15,%d15,256
80006cdc:	68 0f       	st.w [%a15]0,%d15
80006cde:	00 90       	ret 

80006ce0 <IfxScuEru_enablePatternDetectionTrigger>:


void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ce0:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006ce4:	91 30 00 ff 	movh.a %a15,61443
80006ce8:	1b bf 08 f0 	addi %d15,%d15,139
80006cec:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006cf0:	90 ff       	addsc.a %a15,%a15,%d15,2
80006cf2:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006cf4:	6f 04 05 00 	jz.t %d4,0,80006cfe <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006cf8:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006cfc:	3c 03       	j 80006d02 <IfxScuEru_enablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = TRUE;
80006cfe:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006d02:	68 0f       	st.w [%a15]0,%d15
80006d04:	00 90       	ret 

80006d06 <IfxScuEru_enableRisingEdgeDetection>:


void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d06:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006d0a:	91 30 00 ff 	movh.a %a15,61443
80006d0e:	1b 4f 08 f0 	addi %d15,%d15,132
80006d12:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d16:	90 ff       	addsc.a %a15,%a15,%d15,2
80006d18:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006d1a:	6f 04 05 00 	jz.t %d4,0,80006d24 <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006d1e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006d22:	3c 03       	j 80006d28 <IfxScuEru_enableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = TRUE;
80006d24:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006d28:	68 0f       	st.w [%a15]0,%d15
80006d2a:	00 90       	ret 

80006d2c <IfxScuEru_enableTriggerPulse>:


void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d2c:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006d30:	91 30 00 ff 	movh.a %a15,61443
80006d34:	1b 4f 08 f0 	addi %d15,%d15,132
80006d38:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d3c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006d3e:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006d40:	6f 04 05 00 	jz.t %d4,0,80006d4a <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006d44:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006d48:	3c 03       	j 80006d4e <IfxScuEru_enableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = TRUE;
80006d4a:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006d4e:	68 0f       	st.w [%a15]0,%d15
80006d50:	00 90       	ret 

80006d52 <IfxScuEru_getAllEventFlagsStatus>:
}


uint32 IfxScuEru_getAllEventFlagsStatus(void)
{
    return MODULE_SCU.EIFR.U;
80006d52:	91 30 00 ff 	movh.a %a15,61443
80006d56:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d5a:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006d5e:	00 90       	ret 

80006d60 <IfxScuEru_getEventFlagStatus>:


boolean IfxScuEru_getEventFlagStatus(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = (1U << inputChannel);
    return (MODULE_SCU.EIFR.U & mask) ? TRUE : FALSE;
80006d60:	91 30 00 ff 	movh.a %a15,61443
80006d64:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d68:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006d6c:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006d70:	00 90       	ret 

80006d72 <IfxScuEru_getInputChannelConfiguration>:


uint32 IfxScuEru_getInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d72:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006d76:	91 30 00 ff 	movh.a %a15,61443
80006d7a:	1b 4f 08 f0 	addi %d15,%d15,132
80006d7e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d82:	90 ff       	addsc.a %a15,%a15,%d15,2
80006d84:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006d86:	6f 04 05 00 	jz.t %d4,0,80006d90 <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006d8a:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006d8e:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.EICR[index].U & mask);
80006d90:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006d94:	00 90       	ret 

80006d96 <IfxScuEru_getOutputChannelConfiguration>:


uint32 IfxScuEru_getOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d96:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006d9a:	91 30 00 ff 	movh.a %a15,61443
80006d9e:	1b bf 08 f0 	addi %d15,%d15,139
80006da2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006da6:	90 ff       	addsc.a %a15,%a15,%d15,2
80006da8:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006daa:	6f 04 05 00 	jz.t %d4,0,80006db4 <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006dae:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006db2:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.IGCR[index].U & mask);
80006db4:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006db8:	00 90       	ret 

80006dba <IfxScuEru_getPatternDetectionResult>:


boolean IfxScuEru_getPatternDetectionResult(IfxScuEru_OutputChannel outputChannel)
{
    uint32 mask = (1U << outputChannel);
    return (MODULE_SCU.PDRR.U & mask) ? TRUE : FALSE;
80006dba:	91 30 00 ff 	movh.a %a15,61443
80006dbe:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006dc2:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006dc6:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006dca:	00 90       	ret 

80006dcc <IfxScuEru_getWholePatternDetectionResult>:


uint32 IfxScuEru_getWholePatternDetectionResult(void)
{
    return MODULE_SCU.PDRR.U;
80006dcc:	91 30 00 ff 	movh.a %a15,61443
80006dd0:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006dd4:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006dd8:	00 90       	ret 

80006dda <IfxScuEru_selectExternalInput>:


void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006dda:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006dde:	91 30 00 ff 	movh.a %a15,61443
80006de2:	1b 4f 08 f0 	addi %d15,%d15,132
80006de6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006dea:	8f 75 00 51 	and %d5,%d5,7
80006dee:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006df0:	6f 04 08 00 	jz.t %d4,0,80006e00 <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006df4:	4c f0       	ld.w %d15,[%a15]0
80006df6:	8f 45 01 50 	sh %d5,%d5,20
80006dfa:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
80006dfe:	3c 05       	j 80006e08 <IfxScuEru_selectExternalInput+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EXIS0 = inputSignal;
80006e00:	4c f0       	ld.w %d15,[%a15]0
80006e02:	06 45       	sh %d5,4
80006e04:	8f 0f c7 f1 	andn %d15,%d15,112
80006e08:	a6 f5       	or %d5,%d15
80006e0a:	68 05       	st.w [%a15]0,%d5
80006e0c:	00 90       	ret 

80006e0e <IfxScuEru_setEventFlag>:
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006e0e:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006e10:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006e14:	0f 4f 00 40 	sh %d4,%d15,%d4
    SCU_FMR.U = mask;
80006e18:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006e1c:	68 04       	st.w [%a15]0,%d4
80006e1e:	00 90       	ret 

80006e20 <IfxScuEru_setFlagPatternDetection>:
}


void IfxScuEru_setFlagPatternDetection(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InputChannel inputChannel, boolean state)
{
80006e20:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 shift, mask;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD) // for channels 1, 3 ,5 and 7
80006e24:	6f 04 04 00 	jz.t %d4,0,80006e2c <IfxScuEru_setFlagPatternDetection+0xc>
    {
        shift = (inputChannel + 16);                  // offset at location IPEN10
80006e28:	1b 05 01 50 	addi %d5,%d5,16
80006e2c:	06 2f       	sh %d15,2
80006e2e:	60 f2       	mov.a %a2,%d15
80006e30:	d9 2f 00 06 	lea %a15,[%a2]24576
80006e34:	11 3f 00 ff 	addih.a %a15,%a15,61443
    {
        shift = inputChannel;
        mask  = (1 << shift);
        // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
        uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & ~mask) | ((uint32)state << shift);
80006e38:	19 ff 2c 80 	ld.w %d15,[%a15]556
80006e3c:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
80006e40:	0f 56 00 50 	sh %d5,%d6,%d5
80006e44:	a6 f5       	or %d5,%d15
80006e46:	59 f5 2c 80 	st.w [%a15]556,%d5
80006e4a:	00 90       	ret 

80006e4c <IfxScuEru_setInterruptGatingPattern>:


void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e4c:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80006e50:	91 30 00 ff 	movh.a %a15,61443
80006e54:	1b bf 08 f0 	addi %d15,%d15,139
80006e58:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e5c:	8f 35 00 51 	and %d5,%d5,3
80006e60:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006e62:	6f 04 06 00 	jz.t %d4,0,80006e6e <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80006e66:	4c f0       	ld.w %d15,[%a15]0
80006e68:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
80006e6c:	3c 07       	j 80006e7a <IfxScuEru_setInterruptGatingPattern+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.IGP0 = gatingPattern;
80006e6e:	4c f0       	ld.w %d15,[%a15]0
80006e70:	8f e5 00 50 	sh %d5,%d5,14
80006e74:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
80006e78:	a6 f5       	or %d5,%d15
80006e7a:	68 05       	st.w [%a15]0,%d5
80006e7c:	00 90       	ret 

80006e7e <IfxScuWdt_changeCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80006e7e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80006e82:	16 07       	and %d15,7
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
{
    Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
80006e84:	53 cf 20 f0 	mul %d15,%d15,12
80006e88:	60 f2       	mov.a %a2,%d15
80006e8a:	d9 2f 00 46 	lea %a15,[%a2]24832
80006e8e:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
80006e92:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80006e94:	2e 16       	jz.t %d15,1,80006ea0 <IfxScuWdt_changeCpuWatchdogPassword+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80006e96:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80006e9a:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
80006e9e:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80006ea0:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80006ea4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80006ea8:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
80006eac:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80006eae:	4c f0       	ld.w %d15,[%a15]0
80006eb0:	6f 0f ff 7f 	jz.t %d15,0,80006eae <IfxScuWdt_changeCpuWatchdogPassword+0x30>
    {}
}
80006eb4:	00 90       	ret 

80006eb6 <IfxScuWdt_changeCpuWatchdogReload>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80006eb6:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80006eba:	16 07       	and %d15,7

void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
{
    /* Select CPU Watchdog based on Core Id */
    uint32              coreId = IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
80006ebc:	53 cf 20 f0 	mul %d15,%d15,12
80006ec0:	60 f2       	mov.a %a2,%d15
80006ec2:	d9 2f 00 46 	lea %a15,[%a2]24832
80006ec6:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
80006eca:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80006ecc:	2e 16       	jz.t %d15,1,80006ed8 <IfxScuWdt_changeCpuWatchdogReload+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80006ece:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80006ed2:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80006ed6:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80006ed8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80006edc:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
80006ee0:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80006ee4:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
80006ee6:	4c f0       	ld.w %d15,[%a15]0
80006ee8:	6f 0f ff 7f 	jz.t %d15,0,80006ee6 <IfxScuWdt_changeCpuWatchdogReload+0x30>
    {}
}
80006eec:	00 90       	ret 

80006eee <IfxScuWdt_changeSafetyWatchdogPassword>:
{
    Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
80006eee:	91 30 00 ff 	movh.a %a15,61443
80006ef2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006ef6:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80006ef8:	2e 16       	jz.t %d15,1,80006f04 <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80006efa:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80006efe:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
80006f02:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80006f04:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80006f08:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80006f0c:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
80006f10:	91 30 00 ff 	movh.a %a15,61443
80006f14:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006f18:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80006f1a:	4c f0       	ld.w %d15,[%a15]0
80006f1c:	6f 0f ff 7f 	jz.t %d15,0,80006f1a <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
80006f20:	00 90       	ret 

80006f22 <IfxScuWdt_changeSafetyWatchdogReload>:
    /* Initialize pointer to Safety Watchdog */
    Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
80006f22:	91 30 00 ff 	movh.a %a15,61443
80006f26:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006f2a:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80006f2c:	2e 16       	jz.t %d15,1,80006f38 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80006f2e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80006f32:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80006f36:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80006f38:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80006f3c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
80006f40:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80006f44:	91 30 00 ff 	movh.a %a15,61443
80006f48:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006f4c:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
80006f4e:	4c f0       	ld.w %d15,[%a15]0
80006f50:	6f 0f ff 7f 	jz.t %d15,0,80006f4e <IfxScuWdt_changeSafetyWatchdogReload+0x2c>
    {}
}
80006f54:	00 90       	ret 

80006f56 <IfxScuWdt_clearCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80006f56:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80006f5a:	16 07       	and %d15,7


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80006f5c:	53 cf 20 f0 	mul %d15,%d15,12
80006f60:	06 24       	sh %d4,2
80006f62:	60 f2       	mov.a %a2,%d15
80006f64:	d9 2f 00 46 	lea %a15,[%a2]24832
80006f68:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80006f6c:	4c f0       	ld.w %d15,[%a15]0
80006f6e:	2e 16       	jz.t %d15,1,80006f7a <IfxScuWdt_clearCpuEndinit+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80006f70:	4c f0       	ld.w %d15,[%a15]0
80006f72:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80006f76:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80006f78:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80006f7a:	4c f0       	ld.w %d15,[%a15]0
80006f7c:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80006f80:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80006f82:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80006f84:	4c f0       	ld.w %d15,[%a15]0
80006f86:	6f 0f ff ff 	jnz.t %d15,0,80006f84 <IfxScuWdt_clearCpuEndinit+0x2e>
}
80006f8a:	00 90       	ret 

80006f8c <IfxScuWdt_clearSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80006f8c:	91 30 00 ff 	movh.a %a15,61443
80006f90:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006f94:	4c f0       	ld.w %d15,[%a15]0
80006f96:	06 24       	sh %d4,2
80006f98:	2e 16       	jz.t %d15,1,80006fa4 <IfxScuWdt_clearSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80006f9a:	4c f0       	ld.w %d15,[%a15]0
80006f9c:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80006fa0:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80006fa2:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80006fa4:	91 30 00 ff 	movh.a %a15,61443
80006fa8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006fac:	4c f0       	ld.w %d15,[%a15]0
80006fae:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80006fb2:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80006fb4:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80006fb6:	4c f0       	ld.w %d15,[%a15]0
80006fb8:	6f 0f ff ff 	jnz.t %d15,0,80006fb6 <IfxScuWdt_clearSafetyEndinit+0x2a>


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
}
80006fbc:	00 90       	ret 

80006fbe <IfxScuWdt_disableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80006fbe:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80006fc2:	16 07       	and %d15,7

void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80006fc4:	53 cf 20 f0 	mul %d15,%d15,12
80006fc8:	06 24       	sh %d4,2
80006fca:	60 f2       	mov.a %a2,%d15
80006fcc:	d9 2f 00 46 	lea %a15,[%a2]24832
80006fd0:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80006fd4:	4c f0       	ld.w %d15,[%a15]0
80006fd6:	2e 16       	jz.t %d15,1,80006fe2 <IfxScuWdt_disableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80006fd8:	4c f0       	ld.w %d15,[%a15]0
80006fda:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80006fde:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80006fe0:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80006fe2:	4c f0       	ld.w %d15,[%a15]0
80006fe4:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80006fe8:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80006fea:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80006fec:	4c f0       	ld.w %d15,[%a15]0
80006fee:	6f 0f ff ff 	jnz.t %d15,0,80006fec <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80006ff2:	4c f1       	ld.w %d15,[%a15]4
80006ff4:	96 08       	or %d15,8
80006ff6:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80006ff8:	4c f0       	ld.w %d15,[%a15]0
80006ffa:	2e 16       	jz.t %d15,1,80007006 <IfxScuWdt_disableCpuWatchdog+0x48>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80006ffc:	4c f0       	ld.w %d15,[%a15]0
80006ffe:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007002:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007004:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007006:	4c f0       	ld.w %d15,[%a15]0
80007008:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000700c:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000700e:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80007010:	4c f0       	ld.w %d15,[%a15]0
80007012:	6f 0f ff 7f 	jz.t %d15,0,80007010 <IfxScuWdt_disableCpuWatchdog+0x52>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80007016:	00 90       	ret 

80007018 <IfxScuWdt_disableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007018:	91 30 00 ff 	movh.a %a15,61443
8000701c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007020:	4c f0       	ld.w %d15,[%a15]0
80007022:	06 24       	sh %d4,2
80007024:	2e 16       	jz.t %d15,1,80007030 <IfxScuWdt_disableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007026:	4c f0       	ld.w %d15,[%a15]0
80007028:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000702c:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000702e:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007030:	91 30 00 ff 	movh.a %a15,61443
80007034:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007038:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000703a:	40 f2       	mov.aa %a2,%a15
8000703c:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007040:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007042:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007044:	4c 20       	ld.w %d15,[%a2]0
80007046:	91 30 00 ff 	movh.a %a15,61443
8000704a:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000704e:	6f 0f fb ff 	jnz.t %d15,0,80007044 <IfxScuWdt_disableSafetyWatchdog+0x2c>


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80007052:	91 30 00 2f 	movh.a %a2,61443
80007056:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
8000705a:	4c 20       	ld.w %d15,[%a2]0
8000705c:	96 08       	or %d15,8
8000705e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007060:	4c f0       	ld.w %d15,[%a15]0
80007062:	2e 16       	jz.t %d15,1,8000706e <IfxScuWdt_disableSafetyWatchdog+0x56>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007064:	4c f0       	ld.w %d15,[%a15]0
80007066:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000706a:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000706c:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000706e:	91 30 00 ff 	movh.a %a15,61443
80007072:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007076:	4c f0       	ld.w %d15,[%a15]0
80007078:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000707c:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000707e:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80007080:	4c f0       	ld.w %d15,[%a15]0
80007082:	6f 0f ff 7f 	jz.t %d15,0,80007080 <IfxScuWdt_disableSafetyWatchdog+0x68>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007086:	00 90       	ret 

80007088 <IfxScuWdt_enableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007088:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000708c:	16 07       	and %d15,7

void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000708e:	53 cf 20 f0 	mul %d15,%d15,12
80007092:	06 24       	sh %d4,2
80007094:	60 f2       	mov.a %a2,%d15
80007096:	d9 2f 00 46 	lea %a15,[%a2]24832
8000709a:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8000709e:	4c f0       	ld.w %d15,[%a15]0
800070a0:	2e 16       	jz.t %d15,1,800070ac <IfxScuWdt_enableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070a2:	4c f0       	ld.w %d15,[%a15]0
800070a4:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070a8:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070aa:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070ac:	4c f0       	ld.w %d15,[%a15]0
800070ae:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070b2:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070b4:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
800070b6:	4c f0       	ld.w %d15,[%a15]0
800070b8:	6f 0f ff ff 	jnz.t %d15,0,800070b6 <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
800070bc:	4c f1       	ld.w %d15,[%a15]4
800070be:	8f 8f c0 f1 	andn %d15,%d15,8
800070c2:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800070c4:	4c f0       	ld.w %d15,[%a15]0
800070c6:	2e 16       	jz.t %d15,1,800070d2 <IfxScuWdt_enableCpuWatchdog+0x4a>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070c8:	4c f0       	ld.w %d15,[%a15]0
800070ca:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070ce:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070d0:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070d2:	4c f0       	ld.w %d15,[%a15]0
800070d4:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070d8:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070da:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800070dc:	4c f0       	ld.w %d15,[%a15]0
800070de:	6f 0f ff 7f 	jz.t %d15,0,800070dc <IfxScuWdt_enableCpuWatchdog+0x54>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800070e2:	00 90       	ret 

800070e4 <IfxScuWdt_enableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800070e4:	91 30 00 ff 	movh.a %a15,61443
800070e8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070ec:	4c f0       	ld.w %d15,[%a15]0
800070ee:	06 24       	sh %d4,2
800070f0:	2e 16       	jz.t %d15,1,800070fc <IfxScuWdt_enableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800070f2:	4c f0       	ld.w %d15,[%a15]0
800070f4:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800070f8:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800070fa:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800070fc:	91 30 00 ff 	movh.a %a15,61443
80007100:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007104:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007106:	40 f2       	mov.aa %a2,%a15
80007108:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000710c:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000710e:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007110:	4c 20       	ld.w %d15,[%a2]0
80007112:	91 30 00 ff 	movh.a %a15,61443
80007116:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000711a:	6f 0f fb ff 	jnz.t %d15,0,80007110 <IfxScuWdt_enableSafetyWatchdog+0x2c>


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
8000711e:	91 30 00 2f 	movh.a %a2,61443
80007122:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007126:	4c 20       	ld.w %d15,[%a2]0
80007128:	8f 8f c0 f1 	andn %d15,%d15,8
8000712c:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000712e:	4c f0       	ld.w %d15,[%a15]0
80007130:	2e 16       	jz.t %d15,1,8000713c <IfxScuWdt_enableSafetyWatchdog+0x58>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007132:	4c f0       	ld.w %d15,[%a15]0
80007134:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007138:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000713a:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000713c:	91 30 00 ff 	movh.a %a15,61443
80007140:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007144:	4c f0       	ld.w %d15,[%a15]0
80007146:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000714a:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000714c:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000714e:	4c f0       	ld.w %d15,[%a15]0
80007150:	6f 0f ff 7f 	jz.t %d15,0,8000714e <IfxScuWdt_enableSafetyWatchdog+0x6a>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007154:	00 90       	ret 

80007156 <IfxScuWdt_getCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007156:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000715a:	16 07       	and %d15,7


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
8000715c:	53 cf 20 f0 	mul %d15,%d15,12
80007160:	60 f2       	mov.a %a2,%d15
80007162:	d9 2f 00 46 	lea %a15,[%a2]24832
80007166:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
8000716a:	48 02       	ld.w %d2,[%a15]0
8000716c:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
80007170:	8f f2 83 21 	xor %d2,%d2,63
80007174:	00 90       	ret 

80007176 <IfxScuWdt_getCpuWatchdogEndInit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007176:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000717a:	16 07       	and %d15,7


boolean IfxScuWdt_getCpuWatchdogEndInit(void)
{
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
8000717c:	53 cf 20 f0 	mul %d15,%d15,12
80007180:	60 f2       	mov.a %a2,%d15
80007182:	d9 2f 00 46 	lea %a15,[%a2]24832
80007186:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
8000718a:	48 02       	ld.w %d2,[%a15]0
}
8000718c:	8f 12 00 21 	and %d2,%d2,1
80007190:	00 90       	ret 

80007192 <IfxScuWdt_getSafetyWatchdogPassword>:
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80007192:	91 30 00 ff 	movh.a %a15,61443
80007196:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000719a:	48 02       	ld.w %d2,[%a15]0
8000719c:	37 02 6e 21 	extr.u %d2,%d2,2,14


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
800071a0:	8f f2 83 21 	xor %d2,%d2,63
800071a4:	00 90       	ret 

800071a6 <IfxScuWdt_initConfig>:


void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
{
    config->password                      = IFXSCUWDT_RESET_PASSWORD;
800071a6:	da 3c       	mov %d15,60
800071a8:	ac 40       	st.h [%a4]0,%d15
    config->reload                        = 0xFFFC;
800071aa:	82 cf       	mov %d15,-4
800071ac:	ac 41       	st.h [%a4]2,%d15
    config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
800071ae:	82 0f       	mov %d15,0
800071b0:	2c 44       	st.b [%a4]4,%d15
    config->disableWatchdog               = FALSE;
800071b2:	2c 45       	st.b [%a4]5,%d15
    config->enableSmuRestriction          = FALSE;
800071b4:	2c 46       	st.b [%a4]6,%d15
    config->enableAutomaticPasswordChange = FALSE;
800071b6:	2c 47       	st.b [%a4]7,%d15
    config->enableTimerCheck              = FALSE;
800071b8:	2c 48       	st.b [%a4]8,%d15
    config->enableTimerCheckTolerance     = FALSE;
800071ba:	2c 49       	st.b [%a4]9,%d15
    config->clrInternalResetFlag          = FALSE;
800071bc:	2c 4a       	st.b [%a4]10,%d15
800071be:	00 90       	ret 

800071c0 <IfxScuWdt_setCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800071c0:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800071c4:	16 07       	and %d15,7
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800071c6:	53 cf 20 f0 	mul %d15,%d15,12
800071ca:	06 24       	sh %d4,2
800071cc:	60 f2       	mov.a %a2,%d15
800071ce:	d9 2f 00 46 	lea %a15,[%a2]24832
800071d2:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800071d6:	4c f0       	ld.w %d15,[%a15]0
800071d8:	2e 16       	jz.t %d15,1,800071e4 <IfxScuWdt_setCpuEndinit+0x24>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071da:	4c f0       	ld.w %d15,[%a15]0
800071dc:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071e0:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071e2:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071e4:	4c f0       	ld.w %d15,[%a15]0
800071e6:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071ea:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071ec:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800071ee:	4c f0       	ld.w %d15,[%a15]0
800071f0:	6f 0f ff 7f 	jz.t %d15,0,800071ee <IfxScuWdt_setCpuEndinit+0x2e>
}
800071f4:	00 90       	ret 

800071f6 <IfxScuWdt_initCpuWatchdog>:
{
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    Ifx_SCU_WDTCPU_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
800071f6:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
800071f8:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
800071fa:	6f 12 0b 00 	jz.t %d2,1,80007210 <IfxScuWdt_initCpuWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800071fe:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
80007202:	37 02 6e 31 	extr.u %d3,%d2,2,14
80007206:	8f f3 83 31 	xor %d3,%d3,63
8000720a:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
8000720e:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
80007210:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
80007212:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
80007216:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
8000721a:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
8000721e:	b9 53 02 00 	ld.hu %d3,[%a5]2
80007222:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
80007226:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
80007228:	54 42       	ld.w %d2,[%a4]
8000722a:	6f 02 ff ff 	jnz.t %d2,0,80007228 <IfxScuWdt_initCpuWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
8000722e:	39 52 04 00 	ld.bu %d2,[%a5]4
80007232:	df 12 0a 00 	jeq %d2,1,80007246 <IfxScuWdt_initCpuWatchdog+0x50>
80007236:	76 26       	jz %d2,80007242 <IfxScuWdt_initCpuWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
80007238:	8b 22 20 22 	ne %d2,%d2,2
8000723c:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
80007240:	3c 07       	j 8000724e <IfxScuWdt_initCpuWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
80007242:	82 0f       	mov %d15,0
        break;
80007244:	3c 05       	j 8000724e <IfxScuWdt_initCpuWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
80007246:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
8000724a:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
8000724e:	39 52 05 00 	ld.bu %d2,[%a5]5
80007252:	8b 02 20 22 	ne %d2,%d2,0
80007256:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
8000725a:	39 52 06 00 	ld.bu %d2,[%a5]6
8000725e:	8b 02 20 22 	ne %d2,%d2,0
80007262:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
80007266:	39 52 07 00 	ld.bu %d2,[%a5]7
8000726a:	8b 02 20 22 	ne %d2,%d2,0
8000726e:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
80007272:	39 52 08 00 	ld.bu %d2,[%a5]8
80007276:	8b 02 20 22 	ne %d2,%d2,0
8000727a:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
8000727e:	39 52 09 00 	ld.bu %d2,[%a5]9
80007282:	8b 02 20 22 	ne %d2,%d2,0
80007286:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
8000728a:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set CPU ENDINIT protection */
    IfxScuWdt_setCpuEndinit(config->password);
8000728c:	b9 54 00 00 	ld.hu %d4,[%a5]0
80007290:	1d ff 98 ff 	j 800071c0 <IfxScuWdt_setCpuEndinit>

80007294 <IfxScuWdt_serviceCpuWatchdog>:
}


void IfxScuWdt_serviceCpuWatchdog(uint16 password)
{
    IfxScuWdt_setCpuEndinit(password);
80007294:	1d ff 96 ff 	j 800071c0 <IfxScuWdt_setCpuEndinit>

80007298 <IfxScuWdt_setSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007298:	91 30 00 ff 	movh.a %a15,61443
8000729c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072a0:	4c f0       	ld.w %d15,[%a15]0
800072a2:	06 24       	sh %d4,2
800072a4:	2e 16       	jz.t %d15,1,800072b0 <IfxScuWdt_setSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072a6:	4c f0       	ld.w %d15,[%a15]0
800072a8:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072ac:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072ae:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072b0:	91 30 00 ff 	movh.a %a15,61443
800072b4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072b8:	4c f0       	ld.w %d15,[%a15]0
800072ba:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072be:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072c0:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800072c2:	4c f0       	ld.w %d15,[%a15]0
800072c4:	6f 0f ff 7f 	jz.t %d15,0,800072c2 <IfxScuWdt_setSafetyEndinit+0x2a>


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
    IfxScuWdt_setSafetyEndinitInline(password);
}
800072c8:	00 90       	ret 

800072ca <IfxScuWdt_initSafetyWatchdog>:
{
    Ifx_SCU_WDTS_CON0 wdt_con0;
    Ifx_SCU_WDTS_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
800072ca:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
800072cc:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
800072ce:	6f 12 0b 00 	jz.t %d2,1,800072e4 <IfxScuWdt_initSafetyWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800072d2:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800072d6:	37 02 6e 31 	extr.u %d3,%d2,2,14
800072da:	8f f3 83 31 	xor %d3,%d3,63
800072de:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800072e2:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
800072e4:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
800072e6:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
800072ea:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
800072ee:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
800072f2:	b9 53 02 00 	ld.hu %d3,[%a5]2
800072f6:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
800072fa:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
800072fc:	54 42       	ld.w %d2,[%a4]
800072fe:	6f 02 ff ff 	jnz.t %d2,0,800072fc <IfxScuWdt_initSafetyWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
80007302:	39 52 04 00 	ld.bu %d2,[%a5]4
80007306:	df 12 0a 00 	jeq %d2,1,8000731a <IfxScuWdt_initSafetyWatchdog+0x50>
8000730a:	76 26       	jz %d2,80007316 <IfxScuWdt_initSafetyWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
8000730c:	8b 22 20 22 	ne %d2,%d2,2
80007310:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
80007314:	3c 07       	j 80007322 <IfxScuWdt_initSafetyWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
80007316:	82 0f       	mov %d15,0
        break;
80007318:	3c 05       	j 80007322 <IfxScuWdt_initSafetyWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
8000731a:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
8000731e:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
80007322:	39 52 05 00 	ld.bu %d2,[%a5]5
80007326:	8b 02 20 22 	ne %d2,%d2,0
8000732a:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
8000732e:	39 52 06 00 	ld.bu %d2,[%a5]6
80007332:	8b 02 20 22 	ne %d2,%d2,0
80007336:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
8000733a:	39 52 07 00 	ld.bu %d2,[%a5]7
8000733e:	8b 02 20 22 	ne %d2,%d2,0
80007342:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
80007346:	39 52 08 00 	ld.bu %d2,[%a5]8
8000734a:	8b 02 20 22 	ne %d2,%d2,0
8000734e:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
80007352:	39 52 09 00 	ld.bu %d2,[%a5]9
80007356:	8b 02 20 22 	ne %d2,%d2,0
8000735a:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7
    wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
8000735e:	39 52 0a 00 	ld.bu %d2,[%a5]10
80007362:	8b 02 00 22 	eq %d2,%d2,0
80007366:	67 2f 00 f0 	ins.t %d15,%d15,0,%d2,0

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
8000736a:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set Safety ENDINIT protection */
    IfxScuWdt_setSafetyEndinit(config->password);
8000736c:	b9 54 00 00 	ld.hu %d4,[%a5]0
80007370:	1d ff 94 ff 	j 80007298 <IfxScuWdt_setSafetyEndinit>

80007374 <IfxScuWdt_serviceSafetyWatchdog>:
}


void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
{
    IfxScuWdt_setSafetyEndinit(password);
80007374:	1d ff 92 ff 	j 80007298 <IfxScuWdt_setSafetyEndinit>

80007378 <IfxScuWdt_enableWatchdogWithDebugger>:
    volatile uint32 *oecPtr    = (volatile uint32 *)0xF0000478;
    volatile uint32 *ostatePtr = (volatile uint32 *)0xF0000480;
    volatile uint32 *ocntrlPtr = (volatile uint32 *)0xF000047C;

    /* read OSTATE.OEN */
    ostateValue = *ostatePtr;
80007378:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
8000737c:	2e 07       	jz.t %d15,0,8000738a <IfxScuWdt_enableWatchdogWithDebugger+0x12>
    }

    if (oenEnabled)
    {
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
8000737e:	3b 00 00 f3 	mov %d15,12288
80007382:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
}


boolean IfxScuWdt_enableWatchdogWithDebugger(void)
{
    boolean          status = 0, oenEnabled = 0, watchdogEnabled = 0;
80007386:	82 0f       	mov %d15,0
80007388:	3c 11       	j 800073aa <IfxScuWdt_enableWatchdogWithDebugger+0x32>

    if (!oenEnabled)
    {
        /* enable the debug interface (OSTATE.OEN )if it is not already enabled */
        /* pattern for enabling OSTATE.OEN */
        *oecPtr = 0xA1;
8000738a:	3b 10 0a 20 	mov %d2,161
8000738e:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
80007392:	da 5e       	mov %d15,94
80007394:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15
        *oecPtr = 0xA1;
80007398:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
8000739c:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15

        /* read OSTATE.OEN again*/
        ostateValue = *ostatePtr;
800073a0:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
        oenEnabled  = (ostateValue & 0x00000001);
    }

    if (oenEnabled)
800073a4:	6f 0f ed ff 	jnz.t %d15,0,8000737e <IfxScuWdt_enableWatchdogWithDebugger+0x6>
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
    }
    else
    {
        status = 1;
800073a8:	82 1f       	mov %d15,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, oenEnabled == 1);

    /* read OSTATE.WDTSUS */
    ostateValue     = *ostatePtr;
800073aa:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
800073ae:	37 02 e1 23 	extr.u %d2,%d2,7,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, watchdogEnabled == 1);

    return status;
}
800073b2:	ab 1f 80 22 	sel %d2,%d2,%d15,1
800073b6:	00 90       	ret 

800073b8 <IfxVadc_Adc_deInitGroup>:
    Ifx_VADC_G     *vadcG      = IfxVadc_Adc_getGroupRegsFromGroup(group);
    /* Get group index */
    IfxVadc_GroupId groupIndex = group->groupId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800073b8:	0c 48       	ld.bu %d15,[%a4]8
800073ba:	d4 4c       	ld.a %a12,[%a4]
800073bc:	1b 0f 01 f0 	addi %d15,%d15,16
800073c0:	16 ff       	and %d15,255
800073c2:	99 4d 04 00 	ld.a %a13,[%a4]4
800073c6:	02 f4       	mov %d4,%d15
800073c8:	40 c4       	mov.aa %a4,%a12
800073ca:	6d ff 91 e8 	call 800044ec <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG)
{
    vadcG->ARBCFG.B.ANONC = IfxVadc_AnalogConverterMode_off;   /* turn off group */
800073ce:	54 d2       	ld.w %d2,[%a13]
    IfxVadc_resetGroup(vadcG);
    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800073d0:	40 c4       	mov.aa %a4,%a12
800073d2:	8f 32 c0 21 	andn %d2,%d2,3
800073d6:	74 d2       	st.w [%a13],%d2
800073d8:	02 f4       	mov %d4,%d15
800073da:	1d ff 6d e8 	j 800044b4 <IfxVadc_disableAccess>

800073de <IfxVadc_Adc_disableModule>:
}


void IfxVadc_Adc_disableModule(Ifx_VADC *vadc)
{
800073de:	40 4f       	mov.aa %a15,%a4
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800073e0:	6d ff bb fe 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
800073e4:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800073e6:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
800073e8:	6d ff b7 fd 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.B.DISR = 1;
800073ec:	48 02       	ld.w %d2,[%a15]0
    IfxScuWdt_setCpuEndinit(passwd);
800073ee:	02 f4       	mov %d4,%d15

IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->CLC.B.DISR = 1;
800073f0:	8f 12 40 21 	or %d2,%d2,1
800073f4:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
800073f6:	1d ff e5 fe 	j 800071c0 <IfxScuWdt_setCpuEndinit>

800073fa <IfxVadc_Adc_getChannelConfig>:
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
800073fa:	99 42 04 00 	ld.a %a2,[%a4]4
800073fe:	99 2d 04 00 	ld.a %a13,[%a2]4
    IfxVadc_ChannelId channelIndex = channel->channel;
80007402:	79 42 00 00 	ld.b %d2,[%a4]0

    config->channelId = channel->channel;
    config->group     = channel->group;
80007406:	b5 52 14 00 	st.a [%a5]20,%a2


IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U = vadcG->CHCTR[channelIndex].U;
8000740a:	1b 02 06 f0 	addi %d15,%d2,96
8000740e:	90 d2       	addsc.a %a2,%a13,%d15,2
void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
    IfxVadc_ChannelId channelIndex = channel->channel;

    config->channelId = channel->channel;
80007410:	e9 52 0c 00 	st.b [%a5]12,%d2
80007414:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
80007416:	40 4c       	mov.aa %a12,%a4

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
80007418:	37 0f 62 30 	extr.u %d3,%d15,0,2
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
8000741c:	40 5f       	mov.aa %a15,%a5

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
8000741e:	e9 53 0d 00 	st.b [%a5]13,%d3
    config->reference           = (IfxVadc_ChannelReference)tempChctr.B.REFSEL;
80007422:	37 0f e1 35 	extr.u %d3,%d15,11,1
80007426:	e9 53 0e 00 	st.b [%a5]14,%d3
    config->resultRegister      = (IfxVadc_ChannelResult)tempChctr.B.RESREG;
8000742a:	37 0f 64 38 	extr.u %d3,%d15,16,4
8000742e:	e9 53 0f 00 	st.b [%a5]15,%d3
    config->globalResultUsage   = tempChctr.B.RESTBS;
80007432:	37 0f 61 3a 	extr.u %d3,%d15,20,1
80007436:	34 53       	st.b [%a5],%d3
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
80007438:	37 0f 62 32 	extr.u %d3,%d15,4,2
8000743c:	e9 53 10 00 	st.b [%a5]16,%d3
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
80007440:	37 0f 62 33 	extr.u %d3,%d15,6,2
80007444:	e9 53 11 00 	st.b [%a5]17,%d3
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
80007448:	37 0f 64 36 	extr.u %d3,%d15,12,4
8000744c:	e9 53 12 00 	st.b [%a5]18,%d3
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
80007450:	37 0f 62 34 	extr.u %d3,%d15,8,2
80007454:	e9 53 13 00 	st.b [%a5]19,%d3
    config->synchonize          = tempChctr.B.SYNC;
80007458:	37 0f 61 35 	extr.u %d3,%d15,10,1
    config->rightAlignedStorage = tempChctr.B.RESPOS;
8000745c:	37 0f e1 fa 	extr.u %d15,%d15,21,1
    config->globalResultUsage   = tempChctr.B.RESTBS;
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
    config->synchonize          = tempChctr.B.SYNC;
80007460:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007464:	2c 53       	st.b [%a5]3,%d15


IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CHASS assignChannels;
    assignChannels.U = vadcG->CHASS.U;
80007466:	4c d2       	ld.w %d15,[%a13]8

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
80007468:	57 0f 61 22 	extr.u %d2,%d15,%d2,1
8000746c:	8f 12 80 21 	xor %d2,%d2,1
80007470:	e9 52 02 00 	st.b [%a5]2,%d2
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007474:	99 42 04 00 	ld.a %a2,[%a4]4
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007478:	79 4f 00 00 	ld.b %d15,[%a4]0


IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
    serviceRequestNodePtr.U = vadcG->CEVNP0.U;
8000747c:	19 d2 20 40 	ld.w %d2,[%a13]288
80007480:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
80007482:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
    config->rightAlignedStorage = tempChctr.B.RESPOS;

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007486:	39 28 08 00 	ld.bu %d8,[%a2]8
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
8000748a:	0b 8f 10 48 	mov %e4,%d15,%d8
8000748e:	6d ff 60 e9 	call 8000474e <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
80007492:	54 22       	ld.w %d2,[%a2]
80007494:	6f a2 0a 00 	jz.t %d2,10,800074a8 <IfxVadc_Adc_getChannelConfig+0xae>
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)channelServiceRequestNodePtr;
80007498:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)src->B.SRPN;
8000749a:	4c 20       	ld.w %d15,[%a2]0
8000749c:	16 ff       	and %d15,255
8000749e:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)src->B.TOS;
800074a0:	4c 20       	ld.w %d15,[%a2]0
800074a2:	37 0f e2 f5 	extr.u %d15,%d15,11,2
800074a6:	3c 05       	j 800074b0 <IfxVadc_Adc_getChannelConfig+0xb6>
    }
    else
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)0;
800074a8:	82 0f       	mov %d15,0
800074aa:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)0;
800074ac:	82 0f       	mov %d15,0
800074ae:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)0;
800074b0:	28 9f       	st.b [%a15]9,%d15
    }

    uint32 resultServiceRequestNodePtr;

    if (config->resultRegister < IfxVadc_ChannelResult_8)
800074b2:	0c ff       	ld.bu %d15,[%a15]15
800074b4:	79 c2 00 00 	ld.b %d2,[%a12]0
800074b8:	ff 8f 08 80 	jge.u %d15,8,800074c8 <IfxVadc_Adc_getChannelConfig+0xce>


IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
    resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
800074bc:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
800074c0:	06 22       	sh %d2,2
800074c2:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
800074c6:	3c 08       	j 800074d6 <IfxVadc_Adc_getChannelConfig+0xdc>
    }
    else
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer1(vadcG)).U >> ((channel->channel - IfxVadc_ChannelResult_8) * 4)) & 0xF;
800074c8:	9a 82       	add %d15,%d2,-8


IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
    resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
800074ca:	19 d3 34 40 	ld.w %d3,[%a13]308
800074ce:	8f 2f 00 20 	sh %d2,%d15,2
800074d2:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
    }

    src = IfxVadc_getSrcAddress(groupIndex, resultServiceRequestNodePtr);
800074d6:	16 ff       	and %d15,255
800074d8:	0b 8f 10 48 	mov %e4,%d15,%d8
800074dc:	6d ff 39 e9 	call 8000474e <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
800074e0:	54 22       	ld.w %d2,[%a2]
800074e2:	6f a2 0a 00 	jz.t %d2,10,800074f6 <IfxVadc_Adc_getChannelConfig+0xfc>
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)resultServiceRequestNodePtr;
800074e6:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)src->B.SRPN;
800074e8:	4c 20       	ld.w %d15,[%a2]0
800074ea:	16 ff       	and %d15,255
800074ec:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)src->B.TOS;
800074ee:	4c 20       	ld.w %d15,[%a2]0
800074f0:	37 0f e2 f5 	extr.u %d15,%d15,11,2
800074f4:	3c 05       	j 800074fe <IfxVadc_Adc_getChannelConfig+0x104>
    }
    else
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)0;
800074f6:	82 0f       	mov %d15,0
800074f8:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)0;
800074fa:	82 0f       	mov %d15,0
800074fc:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)0;
800074fe:	28 8f       	st.b [%a15]8,%d15
80007500:	00 90       	ret 

80007502 <IfxVadc_Adc_getChannelConversionTime>:
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
80007502:	cc 41       	ld.a %a15,[%a4]4
80007504:	c8 12       	ld.a %a2,[%a15]4
}


IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
80007506:	79 4f 00 00 	ld.b %d15,[%a4]0
8000750a:	08 8a       	ld.bu %d10,[%a15]8
8000750c:	c8 0f       	ld.a %a15,[%a15]0
8000750e:	1b 0f 06 f0 	addi %d15,%d15,96
80007512:	90 22       	addsc.a %a2,%a2,%d15,2
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
80007514:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
80007516:	40 f4       	mov.aa %a4,%a15
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
80007518:	02 49       	mov %d9,%d4
8000751a:	54 28       	ld.w %d8,[%a2]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
8000751c:	6d ff 9a e8 	call 80004650 <IfxVadc_getAdcAnalogFrequency>
80007520:	02 2f       	mov %d15,%d2
80007522:	6d ff b0 e8 	call 80004682 <IfxVadc_getAdcModuleFrequency>
80007526:	8f 38 00 81 	and %d8,%d8,3
8000752a:	74 a9       	st.w [%sp],%d9
8000752c:	40 f4       	mov.aa %a4,%a15
8000752e:	0b a8 10 48 	mov %e4,%d8,%d10
80007532:	0b f2 10 68 	mov %e6,%d2,%d15
}
80007536:	1d ff c1 e9 	j 800048b8 <IfxVadc_getChannelConversionTime>

8000753a <IfxVadc_Adc_getGroupConfig>:

void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
8000753a:	d4 4d       	ld.a %a13,[%a4]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
8000753c:	40 4e       	mov.aa %a14,%a4
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
8000753e:	99 4c 04 00 	ld.a %a12,[%a4]4
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007542:	40 d4       	mov.aa %a4,%a13
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
80007544:	40 5f       	mov.aa %a15,%a5
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007546:	6d ff 85 e8 	call 80004650 <IfxVadc_getAdcAnalogFrequency>

    config->groupId                    = group->groupId;
8000754a:	0c e8       	ld.bu %d15,[%a14]8
    config->module                     = &group->module;
8000754c:	e8 0e       	st.a [%a15]0,%a14
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);

    config->groupId                    = group->groupId;
8000754e:	28 4f       	st.b [%a15]4,%d15
}


IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
80007550:	4c c0       	ld.w %d15,[%a12]0
80007552:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
80007556:	e9 ff 32 00 	st.b [%a15]50,%d15
8000755a:	82 0f       	mov %d15,0
}


IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
{
    return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
8000755c:	1b 8f 00 30 	addi %d3,%d15,8
80007560:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
80007564:	d0 f3       	addsc.a %a3,%a15,%d15,3
80007566:	54 23       	ld.w %d3,[%a2]
80007568:	37 03 63 34 	extr.u %d3,%d3,8,3
8000756c:	e9 33 0c 00 	st.b [%a3]12,%d3
}


IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
{
    uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
80007570:	54 23       	ld.w %d3,[%a2]
80007572:	8f f3 01 31 	and %d3,%d3,31

    if (sampleTime > 16)
80007576:	8b 13 61 42 	lt.u %d4,%d3,17
8000757a:	f6 44       	jnz %d4,80007582 <IfxVadc_Adc_getGroupConfig+0x48>
    {
        sampleTime = (sampleTime - 15) * 16;
8000757c:	1b 13 ff 3f 	addi %d3,%d3,-15
80007580:	06 43       	sh %d3,4
    }

    return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
80007582:	c2 23       	add %d3,2
80007584:	4b 03 41 31 	itof %d3,%d3
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
80007588:	92 14       	add %d4,%d15,1
8000758a:	4b 23 51 30 	div.f %d3,%d3,%d2
8000758e:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
80007592:	74 23       	st.w [%a2],%d3
    config->groupId                    = group->groupId;
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007594:	1e 13       	jeq %d15,1,8000759a <IfxVadc_Adc_getGroupConfig+0x60>
80007596:	82 1f       	mov %d15,1
80007598:	3c e2       	j 8000755c <IfxVadc_Adc_getGroupConfig+0x22>
}


IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN1;
8000759a:	19 c2 04 00 	ld.w %d2,[%a12]4
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
    }

    if (IfxVadc_isRequestScanSlotEnabled(vadcG) == TRUE)
8000759e:	ef 92 33 00 	jz.t %d2,25,80007604 <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
800075a2:	e9 ff 34 00 	st.b [%a15]52,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
800075a6:	19 c2 04 00 	ld.w %d2,[%a12]4
800075aa:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
800075ae:	e9 f2 1e 00 	st.b [%a15]30,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
800075b2:	19 c2 04 00 	ld.w %d2,[%a12]4
800075b6:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
800075ba:	e9 f2 1f 00 	st.b [%a15]31,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
800075be:	19 c3 20 20 	ld.w %d3,[%a12]160
800075c2:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
800075c6:	e9 f3 1b 00 	st.b [%a15]27,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
800075ca:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800075ce:	8b f3 00 32 	eq %d3,%d3,15
800075d2:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotScanEnabled          = TRUE;
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);
800075d6:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800075da:	f6 35       	jnz %d3,800075e4 <IfxVadc_Adc_getGroupConfig+0xaa>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
800075dc:	19 cf 24 20 	ld.w %d15,[%a12]164
800075e0:	16 03       	and %d15,3
800075e2:	3c 02       	j 800075e6 <IfxVadc_Adc_getGroupConfig+0xac>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_getScanSlotGatingMode(vadcG);
        }
        else if (config->scanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800075e4:	76 23       	jz %d2,800075ea <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800075e6:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
800075ea:	19 cf 20 20 	ld.w %d15,[%a12]160
800075ee:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
800075f2:	e9 ff 1a 00 	st.b [%a15]26,%d15
}


IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ASMR.B.SCAN;
800075f6:	19 cf 24 20 	ld.w %d15,[%a12]164
800075fa:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
800075fe:	e9 ff 18 00 	st.b [%a15]24,%d15
80007602:	3c 0c       	j 8000761a <IfxVadc_Adc_getGroupConfig+0xe0>
    }
    else
    {
        config->scanRequest.autoscanEnabled             = FALSE;
80007604:	82 0f       	mov %d15,0
80007606:	e9 ff 18 00 	st.b [%a15]24,%d15
        config->scanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
8000760a:	e9 ff 1c 00 	st.b [%a15]28,%d15
        config->scanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;    /* Use CCU6061 TRIG0 */
8000760e:	e9 ff 1a 00 	st.b [%a15]26,%d15
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
80007612:	e9 ff 1d 00 	st.b [%a15]29,%d15
        config->scanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;   /* Trigger source taken from Gating Input */
80007616:	e9 ff 1b 00 	st.b [%a15]27,%d15
}


IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN0;
8000761a:	4c c1       	ld.w %d15,[%a12]4
8000761c:	37 0f 61 fc 	extr.u %d15,%d15,24,1
    }

    if (IfxVadc_isRequestQueueSlotEnabled(vadcG) == TRUE)
80007620:	df 1f 30 80 	jne %d15,1,80007680 <IfxVadc_Adc_getGroupConfig+0x146>
    {
        config->arbiter.requestSlotQueueEnabled          = TRUE;
80007624:	e9 ff 33 00 	st.b [%a15]51,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
80007628:	19 c2 04 00 	ld.w %d2,[%a12]4
8000762c:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
80007630:	e9 f2 26 00 	st.b [%a15]38,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
80007634:	19 c2 04 00 	ld.w %d2,[%a12]4
80007638:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
8000763c:	e9 f2 27 00 	st.b [%a15]39,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
80007640:	19 c3 00 20 	ld.w %d3,[%a12]128
80007644:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
80007648:	e9 f3 23 00 	st.b [%a15]35,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
8000764c:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007650:	8b f3 00 32 	eq %d3,%d3,15
80007654:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotQueueEnabled          = TRUE;
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);
80007658:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000765c:	f6 35       	jnz %d3,80007666 <IfxVadc_Adc_getGroupConfig+0x12c>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
8000765e:	19 cf 04 20 	ld.w %d15,[%a12]132
80007662:	16 03       	and %d15,3
80007664:	3c 02       	j 80007668 <IfxVadc_Adc_getGroupConfig+0x12e>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_getQueueSlotGatingMode(vadcG);
        }
        else if (config->queueRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007666:	76 23       	jz %d2,8000766c <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007668:	e9 ff 24 00 	st.b [%a15]36,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
8000766c:	19 cf 00 20 	ld.w %d15,[%a12]128
80007670:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->queueRequest.triggerConfig.gatingSource = IfxVadc_getQueueSlotGatingSource(vadcG);
80007674:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.flushQueueAfterInit        = FALSE;
80007678:	82 0f       	mov %d15,0
8000767a:	e9 ff 20 00 	st.b [%a15]32,%d15
8000767e:	3c 0c       	j 80007696 <IfxVadc_Adc_getGroupConfig+0x15c>
    }
    else
    {
        config->queueRequest.flushQueueAfterInit         = FALSE;
80007680:	82 0f       	mov %d15,0
80007682:	e9 ff 20 00 	st.b [%a15]32,%d15
        config->queueRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007686:	e9 ff 24 00 	st.b [%a15]36,%d15
        config->queueRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;        /* Use CCU6061 TRIG0 */
8000768a:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
8000768e:	e9 ff 25 00 	st.b [%a15]37,%d15
        config->queueRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;       /* Trigger source taken from Gating Input */
80007692:	e9 ff 23 00 	st.b [%a15]35,%d15
}


IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN2;
80007696:	4c c1       	ld.w %d15,[%a12]4
80007698:	37 0f 61 fd 	extr.u %d15,%d15,26,1
    }

    if (IfxVadc_isRequestBackgroundScanSlotEnabled(vadcG) == TRUE)
8000769c:	df 1f 33 80 	jne %d15,1,80007702 <IfxVadc_Adc_getGroupConfig+0x1c8>
    {
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
800076a0:	e9 ff 35 00 	st.b [%a15]53,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
800076a4:	19 c2 04 00 	ld.w %d2,[%a12]4
800076a8:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
800076ac:	e9 f2 2e 00 	st.b [%a15]46,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
800076b0:	19 c2 04 00 	ld.w %d2,[%a12]4
800076b4:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
800076b8:	e9 f2 2f 00 	st.b [%a15]47,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
800076bc:	19 d3 00 80 	ld.w %d3,[%a13]512
800076c0:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
800076c4:	e9 f3 2b 00 	st.b [%a15]43,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
800076c8:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800076cc:	8b f3 00 32 	eq %d3,%d3,15
800076d0:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);
800076d4:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800076d8:	f6 35       	jnz %d3,800076e2 <IfxVadc_Adc_getGroupConfig+0x1a8>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
800076da:	19 df 04 80 	ld.w %d15,[%a13]516
800076de:	16 03       	and %d15,3
800076e0:	3c 02       	j 800076e4 <IfxVadc_Adc_getGroupConfig+0x1aa>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_getBackgroundScanGatingMode(vadc);
        }
        else if (config->backgroundScanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800076e2:	76 23       	jz %d2,800076e8 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800076e4:	e9 ff 2c 00 	st.b [%a15]44,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
800076e8:	19 df 00 80 	ld.w %d15,[%a13]512
800076ec:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
800076f0:	e9 ff 2a 00 	st.b [%a15]42,%d15
}


IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc)
{
    return (boolean)vadc->BRSMR.B.SCAN;
800076f4:	19 df 04 80 	ld.w %d15,[%a13]516
800076f8:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
800076fc:	e9 ff 28 00 	st.b [%a15]40,%d15
80007700:	3c 0c       	j 80007718 <IfxVadc_Adc_getGroupConfig+0x1de>
    }
    else
    {
        config->backgroundScanRequest.autoBackgroundScanEnabled   = FALSE;
80007702:	82 0f       	mov %d15,0
80007704:	e9 ff 28 00 	st.b [%a15]40,%d15
        config->backgroundScanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007708:	e9 ff 2c 00 	st.b [%a15]44,%d15
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
8000770c:	e9 ff 2a 00 	st.b [%a15]42,%d15
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
80007710:	e9 ff 2d 00 	st.b [%a15]45,%d15
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
80007714:	e9 ff 2b 00 	st.b [%a15]43,%d15


IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
{
    uint8 masterIndex = 0;
    masterIndex = vadcG->SYNCTR.B.STSEL;
80007718:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
8000771c:	39 e7 08 00 	ld.bu %d7,[%a14]8
80007720:	8f 33 00 31 	and %d3,%d3,3
80007724:	02 72       	mov %d2,%d7
IFX_INLINE IfxVadc_GroupId IfxVadc_Adc_getMasterId(IfxVadc_GroupId slave, IfxVadc_Adc_SYNCTR_STSEL masterIndex)
{
    uint8           i, idxOffset;
    IfxVadc_GroupId masterId = slave;

    if (masterIndex == 0)
80007726:	df 03 1f 00 	jeq %d3,0,80007764 <IfxVadc_Adc_getGroupConfig+0x22a>
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
8000772a:	7b 00 00 58 	movh %d5,32768
8000772e:	1b 85 eb 50 	addi %d5,%d5,3768
80007732:	13 87 20 55 	madd %d5,%d5,%d7,8
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007736:	8b 47 60 42 	lt.u %d4,%d7,4
8000773a:	82 02       	mov %d2,0
8000773c:	ab 42 80 24 	sel %d2,%d4,%d2,4

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007740:	1a 25       	add %d15,%d5,%d2
80007742:	60 f4       	mov.a %a4,%d15
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007744:	82 04       	mov %d4,0

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007746:	a0 32       	mov.a %a2,3
80007748:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
8000774c:	8f f4 0f 61 	and %d6,%d4,255
80007750:	14 35       	ld.bu %d5,[%a3]
80007752:	5f 35 06 80 	jne %d5,%d3,8000775e <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
80007756:	42 62       	add %d2,%d6
80007758:	8f f2 0f 21 	and %d2,%d2,255
8000775c:	3c 04       	j 80007764 <IfxVadc_Adc_getGroupConfig+0x22a>
8000775e:	c2 14       	add %d4,1
80007760:	fc 24       	loop %a2,80007748 <IfxVadc_Adc_getGroupConfig+0x20e>
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
80007762:	02 72       	mov %d2,%d7
80007764:	28 52       	st.b [%a15]5,%d2


IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
{
    Ifx_VADC_GLOBCFG globCfg;
    globCfg.U = vadc->GLOBCFG.U;
80007766:	19 d2 00 20 	ld.w %d2,[%a13]128

    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
8000776a:	1b 07 01 f0 	addi %d15,%d7,16
8000776e:	57 02 61 ff 	extr.u %d15,%d2,%d15,1
80007772:	e9 ff 30 00 	st.b [%a15]48,%d15
80007776:	00 90       	ret 

80007778 <IfxVadc_Adc_initChannel>:


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
80007778:	99 52 14 00 	ld.a %a2,[%a5]20
8000777c:	d4 2e       	ld.a %a14,[%a2]
8000777e:	99 2c 04 00 	ld.a %a12,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
80007782:	39 28 08 00 	ld.bu %d8,[%a2]8
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
80007786:	b5 42 04 00 	st.a [%a4]4,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
8000778a:	02 84       	mov %d4,%d8
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
8000778c:	40 4d       	mov.aa %a13,%a4
    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
8000778e:	40 e4       	mov.aa %a4,%a14
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
80007790:	40 5f       	mov.aa %a15,%a5
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;
80007792:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007796:	6d ff ab e6 	call 800044ec <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
8000779a:	1b 09 06 20 	addi %d2,%d9,96
8000779e:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
800077a2:	0c fe       	ld.bu %d15,[%a15]14
800077a4:	54 22       	ld.w %d2,[%a2]
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800077a6:	40 e4       	mov.aa %a4,%a14
800077a8:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
800077ac:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
800077ae:	54 22       	ld.w %d2,[%a2]
800077b0:	0c ff       	ld.bu %d15,[%a15]15
800077b2:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
800077b6:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
800077b8:	54 22       	ld.w %d2,[%a2]
800077ba:	39 ff 10 00 	ld.bu %d15,[%a15]16
800077be:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
800077c2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
800077c4:	54 22       	ld.w %d2,[%a2]
800077c6:	39 ff 11 00 	ld.bu %d15,[%a15]17
800077ca:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800077ce:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize)
{
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
800077d0:	54 22       	ld.w %d2,[%a2]
800077d2:	0c f1       	ld.bu %d15,[%a15]1
800077d4:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
800077d8:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass)
{
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
800077da:	54 22       	ld.w %d2,[%a2]
800077dc:	0c fd       	ld.bu %d15,[%a15]13
800077de:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
800077e2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck)
{
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
800077e4:	54 22       	ld.w %d2,[%a2]
800077e6:	39 ff 13 00 	ld.bu %d15,[%a15]19
800077ea:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
800077ee:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage)
{
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
800077f0:	54 22       	ld.w %d2,[%a2]
800077f2:	0c f3       	ld.bu %d15,[%a15]3
800077f4:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
800077f8:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage)
{
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
800077fa:	54 22       	ld.w %d2,[%a2]
800077fc:	0c f0       	ld.bu %d15,[%a15]0
800077fe:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
80007802:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode)
{
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
80007804:	54 22       	ld.w %d2,[%a2]
80007806:	39 ff 12 00 	ld.bu %d15,[%a15]18
8000780a:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
8000780e:	6c 20       	st.w [%a2]0,%d15
80007810:	1b 08 01 f0 	addi %d15,%d8,16
80007814:	16 ff       	and %d15,255
80007816:	02 f4       	mov %d4,%d15
80007818:	6d ff 6a e6 	call 800044ec <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
8000781c:	08 23       	ld.bu %d3,[%a15]2
8000781e:	82 12       	mov %d2,1
80007820:	0f 92 00 20 	sh %d2,%d2,%d9
80007824:	f6 35       	jnz %d3,8000782e <IfxVadc_Adc_initChannel+0xb6>
}


IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U |= (1 << channelIndex);
80007826:	19 c3 08 00 	ld.w %d3,[%a12]8
8000782a:	a6 32       	or %d2,%d3
8000782c:	3c 05       	j 80007836 <IfxVadc_Adc_initChannel+0xbe>
}


IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U &= ~(1 << channelIndex);
8000782e:	19 c3 08 00 	ld.w %d3,[%a12]8
80007832:	0f 23 e0 20 	andn %d2,%d3,%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007836:	02 f4       	mov %d4,%d15
80007838:	59 c2 08 00 	st.w [%a12]8,%d2
8000783c:	40 e4       	mov.aa %a4,%a14
8000783e:	6d ff 3b e6 	call 800044b4 <IfxVadc_disableAccess>
}


IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel)
{
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
80007842:	79 d3 00 00 	ld.b %d3,[%a13]0
80007846:	19 c5 20 40 	ld.w %d5,[%a12]288
8000784a:	8f 23 00 f0 	sh %d15,%d3,2
8000784e:	3b f0 00 20 	mov %d2,15
80007852:	0f f2 00 20 	sh %d2,%d2,%d15
80007856:	0f 25 e0 20 	andn %d2,%d5,%d2

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
8000785a:	08 b4       	ld.bu %d4,[%a15]11
8000785c:	59 c2 20 40 	st.w [%a12]288,%d2
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80007860:	19 c2 20 40 	ld.w %d2,[%a12]288
80007864:	0f f4 00 f0 	sh %d15,%d4,%d15
80007868:	a6 2f       	or %d15,%d2
8000786a:	59 cf 20 40 	st.w [%a12]288,%d15

    if (config->channelPriority > 0)
8000786e:	b9 ff 06 00 	ld.hu %d15,[%a15]6
80007872:	6e 1f       	jz %d15,800078b0 <IfxVadc_Adc_initChannel+0x138>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80007874:	02 84       	mov %d4,%d8
80007876:	08 b5       	ld.bu %d5,[%a15]11
80007878:	6d ff 6b e7 	call 8000474e <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
{
    vadcG->CEFCLR.U = 1 << channelId;
8000787c:	79 f2 0c 00 	ld.b %d2,[%a15]12
80007880:	82 1f       	mov %d15,1
80007882:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007886:	59 cf 10 40 	st.w [%a12]272,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
8000788a:	54 22       	ld.w %d2,[%a2]
8000788c:	08 63       	ld.bu %d3,[%a15]6
8000788e:	8f f2 cf 21 	andn %d2,%d2,255
80007892:	a6 32       	or %d2,%d3

        IfxVadc_clearChannelRequest(vadcG, config->channelId);
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80007894:	0c f9       	ld.bu %d15,[%a15]9
80007896:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007898:	54 22       	ld.w %d2,[%a2]
8000789a:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
8000789e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800078a0:	4c 20       	ld.w %d15,[%a2]0
800078a2:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
800078a6:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800078a8:	4c 20       	ld.w %d15,[%a2]0
800078aa:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
800078ae:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
800078b0:	0c ff       	ld.bu %d15,[%a15]15
800078b2:	08 a2       	ld.bu %d2,[%a15]10
800078b4:	ff 8f 15 80 	jge.u %d15,8,800078de <IfxVadc_Adc_initChannel+0x166>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
800078b8:	19 c4 30 40 	ld.w %d4,[%a12]304
800078bc:	06 2f       	sh %d15,2
800078be:	3b f0 00 30 	mov %d3,15
800078c2:	0f f3 00 30 	sh %d3,%d3,%d15
800078c6:	0f 34 e0 30 	andn %d3,%d4,%d3
800078ca:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
800078ce:	19 c3 30 40 	ld.w %d3,[%a12]304
800078d2:	0f f2 00 f0 	sh %d15,%d2,%d15
800078d6:	a6 3f       	or %d15,%d3
800078d8:	59 cf 30 40 	st.w [%a12]304,%d15
800078dc:	3c 14       	j 80007904 <IfxVadc_Adc_initChannel+0x18c>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
800078de:	c2 8f       	add %d15,-8
800078e0:	19 c4 34 40 	ld.w %d4,[%a12]308
800078e4:	06 2f       	sh %d15,2
800078e6:	3b f0 00 30 	mov %d3,15
800078ea:	0f f3 00 30 	sh %d3,%d3,%d15
800078ee:	0f 34 e0 30 	andn %d3,%d4,%d3
800078f2:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
800078f6:	19 c3 34 40 	ld.w %d3,[%a12]308
800078fa:	0f f2 00 f0 	sh %d15,%d2,%d15
800078fe:	a6 3f       	or %d15,%d3
80007900:	59 cf 34 40 	st.w [%a12]308,%d15
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
80007904:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80007908:	6e 24       	jz %d15,80007950 <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
8000790a:	02 84       	mov %d4,%d8
8000790c:	08 a5       	ld.bu %d5,[%a15]10
8000790e:	6d ff 20 e7 	call 8000474e <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
{
    vadcG->RCR[resultRegister].B.SRGEN = 1;
80007912:	0c ff       	ld.bu %d15,[%a15]15
80007914:	1b 0f 08 f0 	addi %d15,%d15,128
80007918:	90 c3       	addsc.a %a3,%a12,%d15,2
8000791a:	4c 30       	ld.w %d15,[%a3]0
8000791c:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80007920:	6c 30       	st.w [%a3]0,%d15
}


IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
{
    vadcG->REFCLR.U = 0x0000FFFFu;
80007922:	bb f0 ff ff 	mov.u %d15,65535
80007926:	59 cf 14 40 	st.w [%a12]276,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
8000792a:	54 22       	ld.w %d2,[%a2]
8000792c:	08 43       	ld.bu %d3,[%a15]4
8000792e:	8f f2 cf 21 	andn %d2,%d2,255
80007932:	a6 32       	or %d2,%d3

        IfxVadc_enableServiceRequest(vadcG, config->resultRegister);
        IfxVadc_clearAllResultRequests(vadcG);
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
80007934:	0c f8       	ld.bu %d15,[%a15]8
80007936:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007938:	54 22       	ld.w %d2,[%a2]
8000793a:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
8000793e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007940:	4c 20       	ld.w %d15,[%a2]0
80007942:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007946:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007948:	4c 20       	ld.w %d15,[%a2]0
8000794a:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
8000794e:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007950:	40 e4       	mov.aa %a4,%a14
80007952:	02 84       	mov %d4,%d8
80007954:	6d ff b0 e5 	call 800044b4 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007958:	0c ff       	ld.bu %d15,[%a15]15
    channel->channel   = config->channelId;

    return Status;
}
8000795a:	82 02       	mov %d2,0
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
    /* Software initialization */
    channel->resultreg = config->resultRegister;
8000795c:	2c d1       	st.b [%a13]1,%d15
    channel->channel   = config->channelId;
8000795e:	0c fc       	ld.bu %d15,[%a15]12
80007960:	2c d0       	st.b [%a13]0,%d15

    return Status;
}
80007962:	00 90       	ret 

80007964 <IfxVadc_Adc_initChannelConfig>:
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
80007964:	40 42       	mov.aa %a2,%a4
80007966:	d2 02       	mov %e2,0
80007968:	89 22 48 01 	st.d [%a2+]8,%e2
8000796c:	89 22 48 01 	st.d [%a2+]8,%e2
80007970:	89 22 48 01 	st.d [%a2+]8,%e2
    config->group = group;
80007974:	b5 45 14 00 	st.a [%a4]20,%a5
80007978:	00 90       	ret 

8000797a <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
8000797a:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
8000797c:	39 58 04 00 	ld.bu %d8,[%a5]4


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007980:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007982:	8f a8 00 90 	sh %d9,%d8,10
80007986:	1b 09 48 f0 	addi %d15,%d9,1152
8000798a:	10 cd       	addsc.a %a13,%a12,%d15,0

    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
8000798c:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];

    /* check for write access */
    group->group   = vadcG;
8000798e:	b5 4d 04 00 	st.a [%a4]4,%a13
    group->module  = *config->module;
80007992:	6c 40       	st.w [%a4]0,%d15
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
80007994:	e9 48 08 00 	st.b [%a4]8,%d8
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007998:	40 c4       	mov.aa %a4,%a12
    config->group = group;
}


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
8000799a:	40 5f       	mov.aa %a15,%a5
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
8000799c:	6d ff 5a e6 	call 80004650 <IfxVadc_getAdcAnalogFrequency>

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800079a0:	1b 08 01 f0 	addi %d15,%d8,16
800079a4:	8f ff 0f a1 	and %d10,%d15,255
800079a8:	40 c4       	mov.aa %a4,%a12
800079aa:	02 a4       	mov %d4,%d10
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
800079ac:	02 2b       	mov %d11,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800079ae:	6d ff 9f e5 	call 800044ec <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
800079b2:	39 ff 33 00 	ld.bu %d15,[%a15]51
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
800079b6:	40 d4       	mov.aa %a4,%a13
    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
800079b8:	5e 17       	jne %d15,1,800079c6 <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
800079ba:	82 14       	mov %d4,1
800079bc:	39 f5 26 00 	ld.bu %d5,[%a15]38
800079c0:	39 f6 27 00 	ld.bu %d6,[%a15]39
800079c4:	3c 03       	j 800079ca <IfxVadc_Adc_initGroup+0x50>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
800079c6:	d2 04       	mov %e4,0
800079c8:	82 06       	mov %d6,0
800079ca:	82 07       	mov %d7,0
800079cc:	6d ff 06 e8 	call 800049d8 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
800079d0:	39 ff 34 00 	ld.bu %d15,[%a15]52
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
800079d4:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
800079d6:	5e 17       	jne %d15,1,800079e4 <IfxVadc_Adc_initGroup+0x6a>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
800079d8:	82 14       	mov %d4,1
800079da:	39 f5 1e 00 	ld.bu %d5,[%a15]30
800079de:	39 f6 1f 00 	ld.bu %d6,[%a15]31
800079e2:	3c 03       	j 800079e8 <IfxVadc_Adc_initGroup+0x6e>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
800079e4:	d2 04       	mov %e4,0
800079e6:	82 06       	mov %d6,0
800079e8:	82 17       	mov %d7,1
800079ea:	6d ff f7 e7 	call 800049d8 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
800079ee:	39 ff 35 00 	ld.bu %d15,[%a15]53
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
800079f2:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
800079f4:	5e 17       	jne %d15,1,80007a02 <IfxVadc_Adc_initGroup+0x88>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
800079f6:	82 14       	mov %d4,1
800079f8:	39 f5 2e 00 	ld.bu %d5,[%a15]46
800079fc:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007a00:	3c 03       	j 80007a06 <IfxVadc_Adc_initGroup+0x8c>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
80007a02:	d2 04       	mov %e4,0
80007a04:	82 06       	mov %d6,0
80007a06:	82 27       	mov %d7,2
80007a08:	6d ff e8 e7 	call 800049d8 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
80007a0c:	0c f5       	ld.bu %d15,[%a15]5
80007a0e:	be 8b       	jeq %d15,%d8,80007a44 <IfxVadc_Adc_initGroup+0xca>
}


IFX_INLINE IfxVadc_Adc_SYNCTR_STSEL IfxVadc_Adc_getMasterKernelIndex(IfxVadc_GroupId slave, IfxVadc_GroupId master)
{
    return IfxVadc_Adc_masterIndex[slave][master];
80007a10:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007a14:	91 00 00 28 	movh.a %a2,32768
80007a18:	d9 22 f8 a0 	lea %a2,[%a2]3768 <80000eb8 <IfxVadc_Adc_masterIndex>>
80007a1c:	10 22       	addsc.a %a2,%a2,%d15,0
80007a1e:	0c 20       	ld.bu %d15,[%a2]0
}


IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex)
{
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80007a20:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007a24:	8f 3f 00 21 	and %d2,%d15,3
80007a28:	19 23 40 30 	ld.w %d3,[%a2]1216
80007a2c:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007a30:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007a34:	19 23 40 30 	ld.w %d3,[%a2]1216
80007a38:	da 08       	mov %d15,8
80007a3a:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007a3e:	a6 3f       	or %d15,%d3
80007a40:	59 2f 40 30 	st.w [%a2]1216,%d15
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007a44:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007a48:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007a4c:	8f 3f c0 f1 	andn %d15,%d15,3
80007a50:	59 2f 40 20 	st.w [%a2]1152,%d15
}


IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength)
{
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
80007a54:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007a58:	19 22 40 20 	ld.w %d2,[%a2]1152
80007a5c:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007a60:	59 2f 40 20 	st.w [%a2]1152,%d15
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007a64:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007a68:	df 1f 5a 80 	jne %d15,1,80007b1c <IfxVadc_Adc_initGroup+0x1a2>
    {
        const IfxVadc_Adc_QueueConfig *queueSlot = &config->queueRequest;

        /* configure external Trigger if enabled */
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007a6c:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007a70:	6e 28       	jz %d15,80007ac0 <IfxVadc_Adc_initGroup+0x146>
}


IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80007a72:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007a76:	96 04       	or %d15,4
80007a78:	59 2f 44 40 	st.w [%a2]1284,%d15


IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U        = vadcG->QCTRL0.U;
80007a7c:	19 23 40 40 	ld.w %d3,[%a2]1280
        {
            /* enable external trigger */
            IfxVadc_enableQueueSlotExternalTrigger(vadcG);
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
80007a80:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007a84:	39 ff 23 00 	ld.bu %d15,[%a15]35
    qctrl0.B.XTWC   = 1;
80007a88:	b7 13 81 37 	insert %d3,%d3,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80007a8c:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    qctrl0.B.XTSEL  = triggerSource;
80007a90:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80007a94:	59 23 40 40 	st.w [%a2]1280,%d3

            /* if last input is used the trigger input selection is extend by Gating inputs */
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80007a98:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007a9c:	8b ff 20 f2 	ne %d15,%d15,15
80007aa0:	ee 16       	jnz %d15,80007acc <IfxVadc_Adc_initGroup+0x152>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007aa2:	19 23 40 40 	ld.w %d3,[%a2]1280
            {
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007aa6:	39 ff 22 00 	ld.bu %d15,[%a15]34
    qctrl0.B.GTWC      = 1;
80007aaa:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007aae:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007ab2:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007ab6:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007aba:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007abe:	3c 05       	j 80007ac8 <IfxVadc_Adc_initGroup+0x14e>
}


IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
80007ac0:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007ac4:	8f 4f c0 f1 	andn %d15,%d15,4
80007ac8:	59 2f 44 40 	st.w [%a2]1284,%d15
            /* disable external trigger */
            IfxVadc_disableQueueSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007acc:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007ad0:	8b ff 00 f2 	eq %d15,%d15,15
80007ad4:	ee 15       	jnz %d15,80007afe <IfxVadc_Adc_initGroup+0x184>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007ad6:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80007ada:	39 f2 22 00 	ld.bu %d2,[%a15]34
80007ade:	19 23 40 40 	ld.w %d3,[%a2]1280
80007ae2:	39 ff 24 00 	ld.bu %d15,[%a15]36
    qctrl0.B.GTWC      = 1;
80007ae6:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007aea:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007aee:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007af2:	19 22 44 40 	ld.w %d2,[%a2]1284
80007af6:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007afa:	59 2f 44 40 	st.w [%a2]1284,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80007afe:	39 f2 20 00 	ld.bu %d2,[%a15]32
}


IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
{
    vadcG->QMR0.B.FLUSH = flushQueue;
80007b02:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007b06:	3b 00 40 f0 	mov %d15,1024
80007b0a:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007b0e:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007b12:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007b16:	a6 2f       	or %d15,%d2
80007b18:	59 2f 44 40 	st.w [%a2]1284,%d15
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007b1c:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007b20:	df 1f 5a 80 	jne %d15,1,80007bd4 <IfxVadc_Adc_initGroup+0x25a>
    {
        const IfxVadc_Adc_ScanConfig *scanSlot = &config->scanRequest;

        /* configure external Trigger if enabled */
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007b24:	39 ff 1d 00 	ld.bu %d15,[%a15]29
}


IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
80007b28:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007b2c:	6e 28       	jz %d15,80007b7c <IfxVadc_Adc_initGroup+0x202>
80007b2e:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007b32:	96 04       	or %d15,4
80007b34:	59 2f 64 40 	st.w [%a2]1316,%d15


IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U        = vadcG->ASCTRL.U;
80007b38:	19 23 60 40 	ld.w %d3,[%a2]1312
        {
            /* enable external trigger */
            IfxVadc_enableScanSlotExternalTrigger(vadcG);

            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80007b3c:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007b40:	39 ff 1b 00 	ld.bu %d15,[%a15]27
    asctrl.B.XTWC   = 1;
80007b44:	b7 13 81 37 	insert %d3,%d3,1,15,1
    asctrl.B.XTMODE = triggerMode;
80007b48:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    asctrl.B.XTSEL  = triggerSource;
80007b4c:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->ASCTRL.U = asctrl.U;
80007b50:	59 23 60 40 	st.w [%a2]1312,%d3

            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007b54:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007b58:	8b ff 20 f2 	ne %d15,%d15,15
80007b5c:	ee 16       	jnz %d15,80007b88 <IfxVadc_Adc_initGroup+0x20e>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007b5e:	19 23 60 40 	ld.w %d3,[%a2]1312
            {
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007b62:	39 ff 1a 00 	ld.bu %d15,[%a15]26
    asctrl.B.GTWC      = 1;
80007b66:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007b6a:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007b6e:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007b72:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007b76:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007b7a:	3c 05       	j 80007b84 <IfxVadc_Adc_initGroup+0x20a>
}


IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
80007b7c:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007b80:	8f 4f c0 f1 	andn %d15,%d15,4
80007b84:	59 2f 64 40 	st.w [%a2]1316,%d15
        {
            IfxVadc_disableScanSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007b88:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007b8c:	8b ff 00 f2 	eq %d15,%d15,15
80007b90:	ee 15       	jnz %d15,80007bba <IfxVadc_Adc_initGroup+0x240>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007b92:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80007b96:	39 f2 1a 00 	ld.bu %d2,[%a15]26
80007b9a:	19 23 60 40 	ld.w %d3,[%a2]1312
80007b9e:	39 ff 1c 00 	ld.bu %d15,[%a15]28
    asctrl.B.GTWC      = 1;
80007ba2:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007ba6:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007baa:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007bae:	19 22 64 40 	ld.w %d2,[%a2]1316
80007bb2:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007bb6:	59 2f 64 40 	st.w [%a2]1316,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80007bba:	39 ff 18 00 	ld.bu %d15,[%a15]24
}


IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable)
{
    vadcG->ASMR.B.SCAN = autoscanEnable;
80007bbe:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007bc2:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007bc6:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007bca:	8f 0f c1 f1 	andn %d15,%d15,16
80007bce:	a6 2f       	or %d15,%d2
80007bd0:	59 2f 64 40 	st.w [%a2]1316,%d15
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007bd4:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007bd8:	df 1f 4f 80 	jne %d15,1,80007c76 <IfxVadc_Adc_initGroup+0x2fc>
    {
        const IfxVadc_Adc_BackgroundScanConfig *backgroundScanSlot = &config->backgroundScanRequest;

        /* configure external Trigger if enabled */
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007bdc:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007be0:	6e 29       	jz %d15,80007c32 <IfxVadc_Adc_initGroup+0x2b8>
}


IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80007be2:	19 cf 04 80 	ld.w %d15,[%a12]516
80007be6:	96 04       	or %d15,4
80007be8:	59 cf 04 80 	st.w [%a12]516,%d15


IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U        = vadc->BRSCTRL.U;
80007bec:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_enableBackgroundScanSlotExternalTrigger(vadc);

            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
80007bf0:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007bf4:	39 ff 2b 00 	ld.bu %d15,[%a15]43
    brsctrl.B.XTWC   = 1;
80007bf8:	b7 13 81 37 	insert %d3,%d3,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80007bfc:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    brsctrl.B.XTSEL  = triggerSource;
80007c00:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80007c04:	59 c3 00 80 	st.w [%a12]512,%d3

            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007c08:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007c0c:	8b ff 20 f2 	ne %d15,%d15,15
80007c10:	ee 11       	jnz %d15,80007c32 <IfxVadc_Adc_initGroup+0x2b8>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007c12:	19 c3 00 80 	ld.w %d3,[%a12]512
            {
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007c16:	39 ff 2a 00 	ld.bu %d15,[%a15]42
    brsctrl.B.GTWC     = 1;
80007c1a:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007c1e:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80007c22:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007c26:	19 cf 04 80 	ld.w %d15,[%a12]516
80007c2a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007c2e:	59 cf 04 80 	st.w [%a12]516,%d15
        {
            /* do nothing */
        }

        /* configure Gating if enabled */
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007c32:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007c36:	8b ff 00 f2 	eq %d15,%d15,15
80007c3a:	ee 13       	jnz %d15,80007c60 <IfxVadc_Adc_initGroup+0x2e6>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007c3c:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80007c40:	39 f2 2a 00 	ld.bu %d2,[%a15]42
    brsctrl.B.GTWC     = 1;
80007c44:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007c48:	37 23 04 38 	insert %d3,%d3,%d2,16,4
80007c4c:	39 ff 2c 00 	ld.bu %d15,[%a15]44
    vadc->BRSCTRL.U    = brsctrl.U;
80007c50:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007c54:	19 c2 04 80 	ld.w %d2,[%a12]516
80007c58:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007c5c:	59 cf 04 80 	st.w [%a12]516,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80007c60:	39 ff 28 00 	ld.bu %d15,[%a15]40
}


IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable)
{
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80007c64:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007c68:	19 cf 04 80 	ld.w %d15,[%a12]516
80007c6c:	8f 0f c1 f1 	andn %d15,%d15,16
80007c70:	a6 2f       	or %d15,%d2
80007c72:	59 cf 04 80 	st.w [%a12]516,%d15
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
80007c76:	0c f5       	ld.bu %d15,[%a15]5
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007c78:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c7c:	3a 8f       	eq %d15,%d15,%d8
80007c7e:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007c82:	19 2f 40 20 	ld.w %d15,[%a2]1152
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
80007c86:	02 84       	mov %d4,%d8
80007c88:	8f 3f c0 f1 	andn %d15,%d15,3
80007c8c:	a6 2f       	or %d15,%d2
80007c8e:	59 2f 40 20 	st.w [%a2]1152,%d15
80007c92:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007c96:	40 c4       	mov.aa %a4,%a12
80007c98:	6d ff 69 e4 	call 8000456a <IfxVadc_disablePostCalibration>
}


IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
80007c9c:	8f 88 00 80 	sh %d8,%d8,8
80007ca0:	82 05       	mov %d5,0
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80007ca2:	3b f0 0f 40 	mov %d4,255

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
80007ca6:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007caa:	0b 58 00 20 	add %d2,%d8,%d5
80007cae:	1b 82 12 20 	addi %d2,%d2,296
80007cb2:	0c 2c       	ld.bu %d15,[%a2]12
80007cb4:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007cb8:	54 22       	ld.w %d2,[%a2]
80007cba:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007cbe:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007cc0:	9a 15       	add %d15,%d5,1
80007cc2:	d0 f2       	addsc.a %a2,%a15,%d15,3

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007cc4:	54 23       	ld.w %d3,[%a2]
80007cc6:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007cca:	4b 03 71 31 	ftouz %d3,%d3
80007cce:	c2 e3       	add %d3,-2

    if (ticks > 31)
80007cd0:	8b 03 62 f2 	lt.u %d15,%d3,32
80007cd4:	ee 04       	jnz %d15,80007cdc <IfxVadc_Adc_initGroup+0x362>
    {
        ticks = (ticks / 16) + 15;
80007cd6:	06 c3       	sh %d3,-4
80007cd8:	1b f3 00 30 	addi %d3,%d3,15
80007cdc:	0b 43 90 31 	min.u %d3,%d3,%d4
}


IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007ce0:	1a 58       	add %d15,%d8,%d5
80007ce2:	1b 8f 12 f0 	addi %d15,%d15,296
80007ce6:	90 c2       	addsc.a %a2,%a12,%d15,2
80007ce8:	4c 20       	ld.w %d15,[%a2]0
80007cea:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007cee:	74 23       	st.w [%a2],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007cf0:	df 15 04 00 	jeq %d5,1,80007cf8 <IfxVadc_Adc_initGroup+0x37e>
80007cf4:	82 15       	mov %d5,1
80007cf6:	3c d8       	j 80007ca6 <IfxVadc_Adc_initGroup+0x32c>
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007cf8:	40 c4       	mov.aa %a4,%a12
80007cfa:	02 a4       	mov %d4,%d10
80007cfc:	6d ff dc e3 	call 800044b4 <IfxVadc_disableAccess>

    return status;
}
80007d00:	82 02       	mov %d2,0
80007d02:	00 90       	ret 

80007d04 <IfxVadc_Adc_initGroupConfig>:
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
80007d04:	40 42       	mov.aa %a2,%a4
80007d06:	7b 60 58 f3 	movh %d15,13702
80007d0a:	d2 02       	mov %e2,0
80007d0c:	a0 6f       	mov.a %a15,6
80007d0e:	89 22 48 01 	st.d [%a2+]8,%e2
80007d12:	fc fe       	loop %a15,80007d0e <IfxVadc_Adc_initGroupConfig+0xa>
80007d14:	1b df 7b f3 	addi %d15,%d15,14269
80007d18:	6c 42       	st.w [%a4]8,%d15
80007d1a:	6c 44       	st.w [%a4]16,%d15
80007d1c:	82 1f       	mov %d15,1
80007d1e:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007d22:	e9 4f 20 00 	st.b [%a4]32,%d15
80007d26:	e9 4f 26 00 	st.b [%a4]38,%d15
80007d2a:	e9 4f 2e 00 	st.b [%a4]46,%d15
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80007d2e:	f4 45       	st.a [%a4],%a5
80007d30:	00 90       	ret 

80007d32 <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
80007d32:	cc 50       	ld.a %a15,[%a5]0
    config->disablePostCalibration = FALSE;
}


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
80007d34:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007d36:	ec 40       	st.a [%a4]0,%a15
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007d38:	6d ff 0f fa 	call 80007156 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007d3c:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007d3e:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80007d40:	6d ff 0b f9 	call 80006f56 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80007d44:	82 02       	mov %d2,0
80007d46:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007d48:	02 f4       	mov %d4,%d15
80007d4a:	6d ff 3b fa 	call 800071c0 <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80007d4e:	40 f4       	mov.aa %a4,%a15
80007d50:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007d54:	6d ff 30 e6 	call 800049b4 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007d58:	19 c4 18 00 	ld.w %d4,[%a12]24
80007d5c:	40 f4       	mov.aa %a4,%a15
80007d5e:	4b 04 71 41 	ftouz %d4,%d4
    {
        return IfxVadc_Status_notInitialised;
80007d62:	82 1f       	mov %d15,1
    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007d64:	6d ff 42 e5 	call 800047e8 <IfxVadc_initializeFAdcI>
80007d68:	df 02 57 00 	jeq %d2,0,80007e16 <IfxVadc_Adc_initModule+0xe4>
    {
        /* do nothing */
    }

    /* Set digital Frequency */
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
80007d6c:	19 c4 14 00 	ld.w %d4,[%a12]20
80007d70:	40 f4       	mov.aa %a4,%a15
80007d72:	4b 04 71 41 	ftouz %d4,%d4
80007d76:	6d ff 24 e5 	call 800047be <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007d7a:	40 f4       	mov.aa %a4,%a15
80007d7c:	6d ff 6a e4 	call 80004650 <IfxVadc_getAdcAnalogFrequency>
80007d80:	82 03       	mov %d3,0
80007d82:	3b f0 0f 60 	mov %d6,255

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
    {
        /* configure ADC channel resolution ( conversion mode ) */
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
80007d86:	9a 13       	add %d15,%d3,1
}


IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
80007d88:	1b 83 02 40 	addi %d4,%d3,40
80007d8c:	d0 c2       	addsc.a %a2,%a12,%d15,3
80007d8e:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80007d92:	0c 20       	ld.bu %d15,[%a2]0
80007d94:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80007d96:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
80007d9a:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
80007d9e:	6c 30       	st.w [%a3]0,%d15

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007da0:	4c 21       	ld.w %d15,[%a2]4
80007da2:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80007da6:	4b 0f 71 f1 	ftouz %d15,%d15
80007daa:	c2 ef       	add %d15,-2

    if (ticks > 31)
80007dac:	8b 0f 62 52 	lt.u %d5,%d15,32
80007db0:	f6 54       	jnz %d5,80007db8 <IfxVadc_Adc_initModule+0x86>
    {
        ticks = (ticks / 16) + 15;
80007db2:	06 cf       	sh %d15,-4
80007db4:	1b ff 00 f0 	addi %d15,%d15,15
80007db8:	0b 6f 90 f1 	min.u %d15,%d15,%d6
}


IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007dbc:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80007dc0:	54 24       	ld.w %d4,[%a2]
80007dc2:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80007dc6:	6c 20       	st.w [%a2]0,%d15
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
80007dc8:	df 13 04 00 	jeq %d3,1,80007dd0 <IfxVadc_Adc_initModule+0x9e>
80007dcc:	82 13       	mov %d3,1
80007dce:	3c dc       	j 80007d86 <IfxVadc_Adc_initModule+0x54>
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007dd0:	39 c2 20 00 	ld.bu %d2,[%a12]32

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
80007dd4:	82 0f       	mov %d15,0
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007dd6:	df 12 20 80 	jne %d2,1,80007e16 <IfxVadc_Adc_initModule+0xe4>
80007dda:	82 08       	mov %d8,0
80007ddc:	1b 08 01 f0 	addi %d15,%d8,16
80007de0:	16 ff       	and %d15,255
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007de2:	02 f4       	mov %d4,%d15
80007de4:	40 f4       	mov.aa %a4,%a15
80007de6:	6d ff 83 e3 	call 800044ec <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007dea:	8f a8 00 20 	sh %d2,%d8,10
80007dee:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
80007df2:	c2 18       	add %d8,1
80007df4:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007df8:	02 f4       	mov %d4,%d15
80007dfa:	8f 32 40 21 	or %d2,%d2,3
80007dfe:	59 22 40 20 	st.w [%a2]1152,%d2
80007e02:	40 f4       	mov.aa %a4,%a15

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007e04:	8b 88 20 f2 	ne %d15,%d8,8
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007e08:	6d ff 56 e3 	call 800044b4 <IfxVadc_disableAccess>

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007e0c:	ee e8       	jnz %d15,80007ddc <IfxVadc_Adc_initModule+0xaa>
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
        }

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
80007e0e:	40 f4       	mov.aa %a4,%a15
80007e10:	6d ff 19 e6 	call 80004a42 <IfxVadc_startupCalibration>
    }

    return status;
80007e14:	82 0f       	mov %d15,0
}
80007e16:	02 f2       	mov %d2,%d15
80007e18:	00 90       	ret 

80007e1a <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007e1a:	7b 90 b9 f4 	movh %d15,19353
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80007e1e:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007e20:	1b 0f 68 f9 	addi %d15,%d15,-27008
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80007e24:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80007e26:	e8 05       	st.a [%a15]0,%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007e28:	68 6f       	st.w [%a15]24,%d15

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
80007e2a:	6d ff 1f e4 	call 80004668 <IfxVadc_getAdcDigitalFrequency>
80007e2e:	68 52       	st.w [%a15]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
80007e30:	6d ff cf f0 	call 80005fce <IfxScuCcu_getSpbFrequency>
80007e34:	68 72       	st.w [%a15]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
    config->globalInputClass[0].sampleTime = 1.0e-6;
80007e36:	7b 60 58 23 	movh %d2,13702
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80007e3a:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
80007e3c:	1b d2 7b 23 	addi %d2,%d2,14269
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80007e40:	28 8f       	st.b [%a15]8,%d15
    config->globalInputClass[0].sampleTime = 1.0e-6;
80007e42:	68 12       	st.w [%a15]4,%d2
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
80007e44:	e9 ff 10 00 	st.b [%a15]16,%d15
    config->globalInputClass[1].sampleTime = 1.0e-6;
80007e48:	68 32       	st.w [%a15]12,%d2
    config->startupCalibration             = FALSE;
80007e4a:	e9 ff 20 00 	st.b [%a15]32,%d15
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
80007e4e:	e9 ff 21 00 	st.b [%a15]33,%d15
80007e52:	00 90       	ret 

80007e54 <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
80007e54:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80007e56:	82 0f       	mov %d15,0
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80007e58:	40 a2       	mov.aa %a2,%sp


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80007e5a:	2c 49       	st.b [%a4]9,%d15
    emuxConfig->groupId               = IfxVadc_GroupId_0;
80007e5c:	2c 48       	st.b [%a4]8,%d15
    emuxConfig->emuxInterface         = IfxVadc_EmuxInterface_0;
80007e5e:	2c 4a       	st.b [%a4]10,%d15
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
80007e60:	2c 45       	st.b [%a4]5,%d15
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
80007e62:	2c 46       	st.b [%a4]6,%d15
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
80007e64:	2c 47       	st.b [%a4]7,%d15
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
80007e66:	2c 44       	st.b [%a4]4,%d15
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
80007e68:	e9 4f 1c 00 	st.b [%a4]28,%d15
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80007e6c:	d2 02       	mov %e2,0
80007e6e:	89 22 48 01 	st.d [%a2+]8,%e2
80007e72:	89 22 48 01 	st.d [%a2+]8,%e2
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
80007e76:	3b 00 f8 ff 	mov %d15,-128
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
80007e7a:	f4 45       	st.a [%a4],%a5
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80007e7c:	40 af       	mov.aa %a15,%sp
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
80007e7e:	2c ac       	st.b [%sp]12,%d15
80007e80:	d9 44 0c 00 	lea %a4,[%a4]12
80007e84:	09 f2 48 01 	ld.d %e2,[%a15+]8
80007e88:	89 42 48 01 	st.d [%a4+]8,%e2
80007e8c:	09 f2 48 01 	ld.d %e2,[%a15+]8
80007e90:	89 42 48 01 	st.d [%a4+]8,%e2
80007e94:	00 90       	ret 

80007e96 <IfxVadc_Adc_initExternalMultiplexerMode>:


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
80007e96:	0c 58       	ld.bu %d15,[%a5]8
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
80007e98:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
80007e9a:	8f af 00 20 	sh %d2,%d15,10
80007e9e:	1b 02 48 20 	addi %d2,%d2,1152
80007ea2:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
}


IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group)
{
    if (emuxInterface == IfxVadc_EmuxInterface_0)
80007ea6:	39 52 0a 00 	ld.bu %d2,[%a5]10
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
80007eaa:	40 4c       	mov.aa %a12,%a4
80007eac:	40 5f       	mov.aa %a15,%a5
80007eae:	16 0f       	and %d15,15
80007eb0:	f6 2a       	jnz %d2,80007ec4 <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
80007eb2:	19 42 30 f0 	ld.w %d2,[%a4]1008
80007eb6:	8f f2 c0 21 	andn %d2,%d2,15
80007eba:	a6 2f       	or %d15,%d2
80007ebc:	59 cf 30 f0 	st.w [%a12]1008,%d15
80007ec0:	82 0f       	mov %d15,0
80007ec2:	3c 07       	j 80007ed0 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
    }
    else
    {
        vadc->EMUXSEL.B.EMUXGRP1 = group;
80007ec4:	19 42 30 f0 	ld.w %d2,[%a4]1008
80007ec8:	06 4f       	sh %d15,4
80007eca:	8f 02 cf 21 	andn %d2,%d2,240
80007ece:	3c f6       	j 80007eba <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
    {
        if (emuxControl->emuxOutPinConfig.pins[count] != NULL_PTR)
80007ed0:	90 f2       	addsc.a %a2,%a15,%d15,2
80007ed2:	99 2d 0c 00 	ld.a %a13,[%a2]12
80007ed6:	bd 0d 19 00 	jz.a %a13,80007f08 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
80007eda:	39 d3 0c 00 	ld.bu %d3,[%a13]12
80007ede:	39 f2 18 00 	ld.bu %d2,[%a15]24
80007ee2:	99 d4 04 00 	ld.a %a4,[%a13]4
80007ee6:	0f 23 a0 50 	or %d5,%d3,%d2
80007eea:	39 d4 08 00 	ld.bu %d4,[%a13]8
80007eee:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
80007ef2:	39 f8 19 00 	ld.bu %d8,[%a15]25
80007ef6:	6d ff c4 ed 	call 80005a7e <IfxPort_setPinMode>


IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
    IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
80007efa:	99 d4 04 00 	ld.a %a4,[%a13]4
80007efe:	39 d4 08 00 	ld.bu %d4,[%a13]8
80007f02:	02 85       	mov %d5,%d8
80007f04:	6d ff 3b ee 	call 80005b7a <IfxPort_setPinPadDriver>
80007f08:	c2 1f       	add %d15,1
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
80007f0a:	df 3f e3 ff 	jne %d15,3,80007ed0 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
        }
    }

    IfxVadc_configExternalMultiplexerMode(vadc, vadcG, emuxControl->mode, emuxControl->channels, emuxControl->startChannel, emuxControl->code, emuxControl->sampleTimeControl, emuxControl->channelSelectionStyle);
80007f0e:	0c f7       	ld.bu %d15,[%a15]7
80007f10:	08 44       	ld.bu %d4,[%a15]4
80007f12:	78 00       	st.w [%sp]0,%d15
80007f14:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80007f18:	08 95       	ld.bu %d5,[%a15]9
80007f1a:	08 56       	ld.bu %d6,[%a15]5
80007f1c:	08 67       	ld.bu %d7,[%a15]6
80007f1e:	78 01       	st.w [%sp]4,%d15
80007f20:	40 c4       	mov.aa %a4,%a12
80007f22:	40 e5       	mov.aa %a5,%a14
80007f24:	1d ff 00 e3 	j 80004524 <IfxVadc_configExternalMultiplexerMode>

80007f28 <Ifx_CircularBuffer_get32>:

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80007f28:	cc 40       	ld.a %a15,[%a4]0
80007f2a:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 4;

    if (buffer->index >= buffer->length)
80007f2e:	b9 43 06 00 	ld.hu %d3,[%a4]6

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80007f32:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
80007f34:	c2 4f       	add %d15,4
80007f36:	37 0f 70 f0 	extr.u %d15,%d15,0,16

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80007f3a:	48 02       	ld.w %d2,[%a15]0

    buffer->index += 4;
80007f3c:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80007f3e:	3f 3f 04 80 	jlt.u %d15,%d3,80007f46 <Ifx_CircularBuffer_get32+0x1e>
    {
        buffer->index = 0;
80007f42:	82 0f       	mov %d15,0
80007f44:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80007f46:	00 90       	ret 

80007f48 <Ifx_CircularBuffer_get16>:


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80007f48:	cc 40       	ld.a %a15,[%a4]0
80007f4a:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 2;

    if (buffer->index >= buffer->length)
80007f4e:	b9 43 06 00 	ld.hu %d3,[%a4]6
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80007f52:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
80007f54:	c2 2f       	add %d15,2
80007f56:	37 0f 70 f0 	extr.u %d15,%d15,0,16
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80007f5a:	b9 f2 00 00 	ld.hu %d2,[%a15]0

    buffer->index += 2;
80007f5e:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80007f60:	3f 3f 04 80 	jlt.u %d15,%d3,80007f68 <Ifx_CircularBuffer_get16+0x20>
    {
        buffer->index = 0;
80007f64:	82 0f       	mov %d15,0
80007f66:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80007f68:	00 90       	ret 

80007f6a <Ifx_CircularBuffer_addDataIncr>:
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80007f6a:	cc 40       	ld.a %a15,[%a4]0
80007f6c:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    buffer->index                          += 4;

    if (buffer->index >= buffer->length)
80007f70:	b9 42 06 00 	ld.hu %d2,[%a4]6
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80007f74:	90 ff       	addsc.a %a15,%a15,%d15,2
    buffer->index                          += 4;
80007f76:	c2 4f       	add %d15,4
80007f78:	37 0f 70 f0 	extr.u %d15,%d15,0,16
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80007f7c:	68 04       	st.w [%a15]0,%d4
    buffer->index                          += 4;
80007f7e:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80007f80:	3f 2f 04 80 	jlt.u %d15,%d2,80007f88 <Ifx_CircularBuffer_addDataIncr+0x1e>
    {
        buffer->index = 0;
80007f84:	82 0f       	mov %d15,0
80007f86:	ac 42       	st.h [%a4]4,%d15
80007f88:	00 90       	ret 

80007f8a <Ifx_CircularBuffer_read8>:
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
80007f8a:	80 52       	mov.d %d2,%a5
80007f8c:	37 04 70 40 	extr.u %d4,%d4,0,16
80007f90:	8f 02 60 31 	nor %d3,%d2,0
80007f94:	1a 42       	add %d15,%d2,%d4
80007f96:	42 3f       	add %d15,%d3
80007f98:	42 23       	add %d3,%d2
80007f9a:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
80007f9c:	40 5f       	mov.aa %a15,%a5
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80007f9e:	82 06       	mov %d6,0
80007fa0:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80007fa4:	6f f3 03 00 	jz.t %d3,15,80007faa <Ifx_CircularBuffer_read8+0x20>
80007fa8:	82 0f       	mov %d15,0
    uint8 *Dest = (uint8 *)data;

    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
80007faa:	b9 43 04 00 	ld.hu %d3,[%a4]4
80007fae:	d4 42       	ld.a %a2,[%a4]
80007fb0:	60 33       	mov.a %a3,%d3
80007fb2:	30 32       	add.a %a2,%a3
80007fb4:	14 23       	ld.bu %d3,[%a2]
80007fb6:	24 f3       	st.b [%a15+],%d3
        Dest  = &Dest[1];
        buffer->index++;
80007fb8:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
80007fbc:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
        Dest  = &Dest[1];
        buffer->index++;
80007fc0:	c2 13       	add %d3,1
80007fc2:	37 03 70 30 	extr.u %d3,%d3,0,16
80007fc6:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
80007fca:	3f 53 04 80 	jlt.u %d3,%d5,80007fd2 <Ifx_CircularBuffer_read8+0x48>
        {
            buffer->index = 0;
80007fce:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
80007fd2:	9f 0f ec ff 	jned %d15,0,80007faa <Ifx_CircularBuffer_read8+0x20>
80007fd6:	c2 f4       	add %d4,-1
80007fd8:	37 04 50 40 	extr %d4,%d4,0,16
80007fdc:	8b 04 40 43 	max %d4,%d4,0
80007fe0:	c2 14       	add %d4,1

    return Dest;
}
80007fe2:	1a 42       	add %d15,%d2,%d4
80007fe4:	60 f2       	mov.a %a2,%d15
80007fe6:	00 90       	ret 

80007fe8 <Ifx_CircularBuffer_read32>:


void *Ifx_CircularBuffer_read32(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
80007fe8:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
80007fec:	d4 42       	ld.a %a2,[%a4]
80007fee:	1b f4 ff 5f 	addi %d5,%d4,-1
80007ff2:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
80007ff6:	b9 46 06 00 	ld.hu %d6,[%a4]6
80007ffa:	82 03       	mov %d3,0
80007ffc:	37 05 70 20 	extr.u %d2,%d5,0,16
80008000:	6f f5 03 00 	jz.t %d5,15,80008006 <_SMALL_DATA2_+0x6>
80008004:	82 02       	mov %d2,0
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
80008006:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
80008008:	c2 4f       	add %d15,4
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
8000800a:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
8000800c:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
80008010:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008014:	c2 13       	add %d3,1
80008016:	68 05       	st.w [%a15]0,%d5
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008018:	0b 6f 30 51 	lt.u %d5,%d15,%d6
8000801c:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
80008020:	9f 02 f3 ff 	jned %d2,0,80008006 <_SMALL_DATA2_+0x6>
80008024:	c2 f4       	add %d4,-1
80008026:	37 04 50 40 	extr %d4,%d4,0,16
8000802a:	ac 42       	st.h [%a4]4,%d15
8000802c:	8b 04 40 43 	max %d4,%d4,0
80008030:	c2 14       	add %d4,1

    return Dest;
}
80008032:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008036:	00 90       	ret 

80008038 <Ifx_CircularBuffer_write8>:


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008038:	80 52       	mov.d %d2,%a5
8000803a:	37 04 70 40 	extr.u %d4,%d4,0,16
8000803e:	8f 02 60 31 	nor %d3,%d2,0
80008042:	1a 42       	add %d15,%d2,%d4
80008044:	42 3f       	add %d15,%d3
80008046:	42 23       	add %d3,%d2
80008048:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
8000804a:	40 5f       	mov.aa %a15,%a5
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
8000804c:	82 06       	mov %d6,0
8000804e:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008052:	6f f3 03 00 	jz.t %d3,15,80008058 <Ifx_CircularBuffer_write8+0x20>
80008056:	82 0f       	mov %d15,0
    const uint8 *source = (const uint8 *)data;

    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
80008058:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000805c:	d4 42       	ld.a %a2,[%a4]
8000805e:	60 33       	mov.a %a3,%d3
80008060:	04 f5       	ld.bu %d5,[%a15+]
80008062:	30 32       	add.a %a2,%a3
80008064:	34 25       	st.b [%a2],%d5
        source                                 = &source[1];
        buffer->index++;
80008066:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
8000806a:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
        source                                 = &source[1];
        buffer->index++;
8000806e:	c2 13       	add %d3,1
80008070:	37 03 70 30 	extr.u %d3,%d3,0,16
80008074:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
80008078:	3f 53 04 80 	jlt.u %d3,%d5,80008080 <Ifx_CircularBuffer_write8+0x48>
        {
            buffer->index = 0;
8000807c:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
80008080:	9f 0f ec ff 	jned %d15,0,80008058 <Ifx_CircularBuffer_write8+0x20>
80008084:	c2 f4       	add %d4,-1
80008086:	37 04 50 40 	extr %d4,%d4,0,16
8000808a:	8b 04 40 43 	max %d4,%d4,0
8000808e:	c2 14       	add %d4,1

    return source;
}
80008090:	1a 42       	add %d15,%d2,%d4
80008092:	60 f2       	mov.a %a2,%d15
80008094:	00 90       	ret 

80008096 <Ifx_CircularBuffer_write32>:


const void *Ifx_CircularBuffer_write32(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008096:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
8000809a:	d4 42       	ld.a %a2,[%a4]
8000809c:	1b f4 ff 5f 	addi %d5,%d4,-1
800080a0:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *((uint32 *)(&base[buffer->index])) = *source;
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
800080a4:	b9 46 06 00 	ld.hu %d6,[%a4]6
800080a8:	82 03       	mov %d3,0
800080aa:	37 05 70 20 	extr.u %d2,%d5,0,16
800080ae:	6f f5 03 00 	jz.t %d5,15,800080b4 <Ifx_CircularBuffer_write32+0x1e>
800080b2:	82 02       	mov %d2,0
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
800080b4:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
800080b8:	c2 13       	add %d3,1
800080ba:	48 05       	ld.w %d5,[%a15]0
800080bc:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
800080be:	c2 4f       	add %d15,4
800080c0:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
800080c4:	68 05       	st.w [%a15]0,%d5
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800080c6:	0b 6f 30 51 	lt.u %d5,%d15,%d6
800080ca:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
800080ce:	9f 02 f3 ff 	jned %d2,0,800080b4 <Ifx_CircularBuffer_write32+0x1e>
800080d2:	c2 f4       	add %d4,-1
800080d4:	37 04 50 40 	extr %d4,%d4,0,16
800080d8:	ac 42       	st.h [%a4]4,%d15
800080da:	8b 04 40 43 	max %d4,%d4,0
800080de:	c2 14       	add %d4,1

    return source;
}
800080e0:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
800080e4:	00 90       	ret 

800080e6 <Ifx_Fifo_destroy>:
}


void Ifx_Fifo_destroy(Ifx_Fifo *fifo)
{
    free(fifo);
800080e6:	1d 00 d0 20 	j 8000c286 <free>

800080ea <Ifx_Fifo_init>:
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
800080ea:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800080ec:	80 42       	mov.d %d2,%a4
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
800080ee:	e9 4f 1c 00 	st.b [%a4]28,%d15
        fifo->eventWriter        = TRUE;
800080f2:	82 1f       	mov %d15,1
800080f4:	e9 4f 1d 00 	st.b [%a4]29,%d15
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800080f8:	1b 72 02 f0 	addi %d15,%d2,39
800080fc:	8f 7f c0 f1 	andn %d15,%d15,7
80008100:	6c 40       	st.w [%a4]0,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
80008102:	c2 34       	add %d4,3
    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
80008104:	82 0f       	mov %d15,0
80008106:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
80008108:	ac 48       	st.h [%a4]16,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
8000810a:	8f 34 c0 41 	andn %d4,%d4,3
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
8000810e:	82 0f       	mov %d15,0
    free(fifo);
}


Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
80008110:	40 42       	mov.aa %a2,%a4
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
80008112:	6c 43       	st.w [%a4]12,%d15
80008114:	6c 42       	st.w [%a4]8,%d15
        fifo->startIndex         = fifo->endIndex = 0;
80008116:	ac 4b       	st.h [%a4]22,%d15
80008118:	ac 4a       	st.h [%a4]20,%d15
        fifo->size               = size;
8000811a:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
8000811e:	f9 45 1a 00 	st.h [%a4]26,%d5
    }

    return fifo;
}
80008122:	00 90       	ret 

80008124 <Ifx_Fifo_create>:
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
80008124:	c2 34       	add %d4,3
80008126:	37 04 50 f0 	extr %d15,%d4,0,16
 * This is valid is an OS is used.
 *
 */
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
8000812a:	02 58       	mov %d8,%d5
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
8000812c:	8f 3f c0 f1 	andn %d15,%d15,3

    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
80008130:	1b 8f 02 40 	addi %d4,%d15,40
80008134:	6d 00 a3 20 	call 8000c27a <malloc>
80008138:	40 24       	mov.aa %a4,%a2

    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
8000813a:	bc 25       	jz.a %a2,80008144 <Ifx_Fifo_create+0x20>
    {
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
8000813c:	0b f8 10 48 	mov %e4,%d8,%d15
80008140:	1d ff d5 ff 	j 800080ea <Ifx_Fifo_init>
    }

    return fifo;
}
80008144:	00 90       	ret 

80008146 <Ifx_Fifo_canReadCount>:
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
80008146:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
80008148:	82 02       	mov %d2,0
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
8000814a:	3f f4 6a 00 	jlt %d4,%d15,8000821e <Ifx_Fifo_canReadCount+0xd8>
8000814e:	8c 4c       	ld.h %d15,[%a4]24
80008150:	3f 4f 67 00 	jlt %d15,%d4,8000821e <Ifx_Fifo_canReadCount+0xd8>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008154:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
80008158:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000815c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008160:	00 00       	nop 
    else
    {
        boolean interruptState;
        sint32  waitCount;
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);
80008162:	8c 42       	ld.h %d15,[%a4]4
80008164:	a2 f4       	sub %d4,%d15

        if (waitCount <= 0)
80008166:	4e 4c       	jgtz %d4,8000817e <Ifx_Fifo_canReadCount+0x38>
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE;
80008168:	82 1f       	mov %d15,1
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);

        if (waitCount <= 0)
        {
            fifo->shared.readerWaitx = 0;
8000816a:	59 42 08 00 	st.w [%a4]8,%d2
            fifo->eventReader        = TRUE;
8000816e:	e9 4f 1c 00 	st.b [%a4]28,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
80008172:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008174:	df 00 55 00 	jeq %d0,0,8000821e <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
80008178:	0d 00 00 03 	enable 
8000817c:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000817e:	82 f2       	mov %d2,-1
80008180:	06 f2       	sh %d2,-1
80008182:	ba f6       	eq %d15,%d6,-1
80008184:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008188:	82 f5       	mov %d5,-1
8000818a:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000818c:	ee 16       	jnz %d15,800081b8 <Ifx_Fifo_canReadCount+0x72>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000818e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008192:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008196:	0d 00 40 03 	disable 
8000819a:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000819c:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800081a0:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800081a4:	02 15       	mov %d5,%d1
800081a6:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800081aa:	76 23       	jz %d2,800081b0 <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
800081ac:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800081b0:	0b 65 40 50 	addx %d5,%d5,%d6
800081b4:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
800081b8:	82 0f       	mov %d15,0
800081ba:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
800081be:	59 44 08 00 	st.w [%a4]8,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800081c2:	76 03       	jz %d0,800081c8 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
800081c4:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800081c8:	82 f6       	mov %d6,-1
800081ca:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800081cc:	39 4f 1c 00 	ld.bu %d15,[%a4]28
800081d0:	6e 08       	jz %d15,800081e0 <Ifx_Fifo_canReadCount+0x9a>
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
            result = fifo->eventReader == TRUE;
800081d2:	39 42 1c 00 	ld.bu %d2,[%a4]28
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
800081d6:	82 0f       	mov %d15,0
800081d8:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
800081da:	8b 12 00 22 	eq %d2,%d2,1
800081de:	00 90       	ret 
800081e0:	ba f5       	eq %d15,%d5,-1
800081e2:	0b 36 00 f2 	and.eq %d15,%d6,%d3
800081e6:	ee f3       	jnz %d15,800081cc <Ifx_Fifo_canReadCount+0x86>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800081e8:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800081ec:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800081f0:	0d 00 40 03 	disable 
800081f4:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800081f6:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800081fa:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800081fe:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008202:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008206:	76 23       	jz %d2,8000820c <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
80008208:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
            fifo->shared.readerWaitx = waitCount;
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000820c:	0b 3f 00 21 	eq %d2,%d15,%d3
80008210:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008214:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008218:	df 02 da ff 	jne %d2,0,800081cc <Ifx_Fifo_canReadCount+0x86>
8000821c:	3c db       	j 800081d2 <Ifx_Fifo_canReadCount+0x8c>
            result = fifo->eventReader == TRUE;
        }
    }

    return result;
}
8000821e:	00 90       	ret 

80008220 <Ifx_Fifo_read>:
    return count - blockSize;
}

#include <stdio.h>
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
80008220:	20 08       	sub.a %sp,8
80008222:	40 4f       	mov.aa %a15,%a4
80008224:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
80008226:	df 04 b6 00 	jeq %d4,0,80008392 <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
8000822a:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000822c:	82 f2       	mov %d2,-1
8000822e:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
80008230:	8c 4c       	ld.h %d15,[%a4]24
80008232:	06 f2       	sh %d2,-1
80008234:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
80008236:	8c 4a       	ld.h %d15,[%a4]20
    {
        deadLine = TIME_INFINITE;
80008238:	82 fa       	mov %d10,-1
8000823a:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000823c:	ba f6       	eq %d15,%d6,-1
8000823e:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008242:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008244:	ee 16       	jnz %d15,80008270 <Ifx_Fifo_read+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008246:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000824a:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000824e:	0d 00 40 03 	disable 
80008252:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008254:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008258:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000825c:	02 3a       	mov %d10,%d3
8000825e:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008262:	76 23       	jz %d2,80008268 <Ifx_Fifo_read+0x48>
    {
        __enable();
80008264:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008268:	0b 6a 40 a0 	addx %d10,%d10,%d6
8000826c:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008270:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
80008272:	82 0d       	mov %d13,0
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventReader        = FALSE;
80008274:	82 0e       	mov %d14,0
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
80008276:	a0 0c       	mov.a %a12,0
80008278:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000827a:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
8000827e:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008282:	0d 00 40 03 	disable 
80008286:	00 00       	nop 
{
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
80008288:	88 2b       	ld.h %d11,[%a15]4
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000828a:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
8000828e:	8c fd       	ld.h %d15,[%a15]26
80008290:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventReader        = FALSE;
80008294:	e9 fe 1c 00 	st.b [%a15]28,%d14
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
80008298:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
8000829c:	88 c2       	ld.h %d2,[%a15]24
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
8000829e:	a2 3b       	sub %d11,%d3
800082a0:	37 0b 70 b0 	extr.u %d11,%d11,0,16
800082a4:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
800082a8:	0b f9 80 30 	sub %d3,%d9,%d15
800082ac:	0b 23 80 21 	min %d2,%d3,%d2
800082b0:	68 22       	st.w [%a15]8,%d2
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800082b2:	76 43       	jz %d4,800082b8 <Ifx_Fifo_read+0x98>
    {
        __enable();
800082b4:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginRead(fifo, count);

            if (blockSize != 0)
800082b8:	6e 20       	jz %d15,800082f8 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
800082ba:	40 a4       	mov.aa %a4,%sp
800082bc:	02 f4       	mov %d4,%d15
800082be:	6d ff 66 fe 	call 80007f8a <Ifx_CircularBuffer_read8>
800082c2:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800082c4:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800082c8:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800082cc:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800082d0:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
800082d2:	88 23       	ld.h %d3,[%a15]4
800082d4:	a2 b3       	sub %d3,%d11
800082d6:	a8 23       	st.h [%a15]4,%d3

    if (fifo->shared.writerWaitx != 0)
800082d8:	48 33       	ld.w %d3,[%a15]12
800082da:	76 39       	jz %d3,800082ec <Ifx_Fifo_read+0xcc>
    {
        fifo->shared.writerWaitx -= blockSize;
800082dc:	5a f3       	sub %d15,%d3,%d15

        if (fifo->shared.writerWaitx <= 0)
800082de:	8e f3       	jlez %d15,800082e4 <Ifx_Fifo_read+0xc4>

    fifo->shared.count -= blockSize;

    if (fifo->shared.writerWaitx != 0)
    {
        fifo->shared.writerWaitx -= blockSize;
800082e0:	68 3f       	st.w [%a15]12,%d15
800082e2:	3c 05       	j 800082ec <Ifx_Fifo_read+0xcc>

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE; /* Signal the writer */
800082e4:	82 1f       	mov %d15,1
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
800082e6:	e8 3c       	st.a [%a15]12,%a12
            fifo->eventWriter        = TRUE; /* Signal the writer */
800082e8:	e9 ff 1d 00 	st.b [%a15]29,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800082ec:	76 23       	jz %d2,800082f2 <Ifx_Fifo_read+0xd2>
    {
        __enable();
800082ee:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
800082f2:	a2 b9       	sub %d9,%d11
800082f4:	37 09 50 90 	extr %d9,%d9,0,16
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800082f8:	76 d4       	jz %d13,80008300 <Ifx_Fifo_read+0xe0>
            {
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
800082fa:	82 0f       	mov %d15,0
800082fc:	68 2f       	st.w [%a15]8,%d15
                break;
800082fe:	3c 48       	j 8000838e <Ifx_Fifo_read+0x16e>
80008300:	ba fa       	eq %d15,%d10,-1
80008302:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008306:	ee 1b       	jnz %d15,8000833c <Ifx_Fifo_read+0x11c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008308:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000830c:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008310:	0d 00 40 03 	disable 
80008314:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008316:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000831a:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000831e:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008322:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008326:	76 23       	jz %d2,8000832c <Ifx_Fifo_read+0x10c>
    {
        __enable();
80008328:	0d 00 00 03 	enable 
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
8000832c:	0b 8f 00 21 	eq %d2,%d15,%d8
80008330:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008334:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008338:	df 02 e1 ff 	jne %d2,0,800082fa <Ifx_Fifo_read+0xda>
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
                break;
            }

            if (count != 0)
8000833c:	df 09 29 00 	jeq %d9,0,8000838e <Ifx_Fifo_read+0x16e>
            {
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008340:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008344:	ee 1f       	jnz %d15,80008382 <Ifx_Fifo_read+0x162>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008346:	ba fa       	eq %d15,%d10,-1
80008348:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
8000834c:	ee fa       	jnz %d15,80008340 <Ifx_Fifo_read+0x120>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000834e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008352:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008356:	0d 00 40 03 	disable 
8000835a:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000835c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008360:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008364:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008368:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000836c:	76 23       	jz %d2,80008372 <Ifx_Fifo_read+0x152>
    {
        __enable();
8000836e:	0d 00 00 03 	enable 
80008372:	0b 8f 00 21 	eq %d2,%d15,%d8
80008376:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
8000837a:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000837e:	df 02 e1 ff 	jne %d2,0,80008340 <Ifx_Fifo_read+0x120>
                {}

                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
80008382:	39 fd 1c 00 	ld.bu %d13,[%a15]28
80008386:	8b 0d 00 d2 	eq %d13,%d13,0
8000838a:	1d ff 78 ff 	j 8000827a <Ifx_Fifo_read+0x5a>
            }
        } while (count != 0);

        fifo->startIndex = buffer.index;
8000838e:	8c a2       	ld.h %d15,[%sp]4
80008390:	a8 af       	st.h [%a15]20,%d15
    }

    return count;
}
80008392:	02 92       	mov %d2,%d9
80008394:	00 90       	ret 

80008396 <Ifx_Fifo_clear>:
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008396:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000839a:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000839e:	0d 00 40 03 	disable 
800083a2:	00 00       	nop 
{
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();

    if (fifo->shared.writerWaitx != 0)
800083a4:	4c 43       	ld.w %d15,[%a4]12
800083a6:	6e 06       	jz %d15,800083b2 <Ifx_Fifo_clear+0x1c>
    {
        fifo->shared.writerWaitx = 0;
800083a8:	82 0f       	mov %d15,0
800083aa:	6c 43       	st.w [%a4]12,%d15
        fifo->eventWriter        = TRUE; /* Signal the writer */
800083ac:	82 1f       	mov %d15,1
800083ae:	e9 4f 1d 00 	st.b [%a4]29,%d15
    }

    fifo->eventReader        = FALSE;
800083b2:	82 0f       	mov %d15,0
800083b4:	e9 4f 1c 00 	st.b [%a4]28,%d15
    fifo->shared.readerWaitx = 0;
800083b8:	82 0f       	mov %d15,0
800083ba:	6c 42       	st.w [%a4]8,%d15
    fifo->shared.count       = 0;
800083bc:	ac 42       	st.h [%a4]4,%d15
    fifo->shared.maxcount    = 0;
800083be:	ac 48       	st.h [%a4]16,%d15
    fifo->startIndex         = fifo->endIndex;
800083c0:	8c 4b       	ld.h %d15,[%a4]22
800083c2:	ac 4a       	st.h [%a4]20,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083c4:	76 23       	jz %d2,800083ca <Ifx_Fifo_clear+0x34>
    {
        __enable();
800083c6:	0d 00 00 03 	enable 
800083ca:	00 90       	ret 

800083cc <Ifx_Fifo_canWriteCount>:
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800083cc:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be written to the buffer */
        result = FALSE;
800083ce:	82 02       	mov %d2,0
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800083d0:	3f f4 75 00 	jlt %d4,%d15,800084ba <Ifx_Fifo_canWriteCount+0xee>
800083d4:	8c 4c       	ld.h %d15,[%a4]24
800083d6:	3f 4f 72 00 	jlt %d15,%d4,800084ba <Ifx_Fifo_canWriteCount+0xee>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083da:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
800083de:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083e2:	0d 00 40 03 	disable 
800083e6:	00 00       	nop 
    else
    {
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
800083e8:	c9 43 18 00 	ld.h %d3,[%a4]24
800083ec:	8c 42       	ld.h %d15,[%a4]4
800083ee:	5a f3       	sub %d15,%d3,%d15
800083f0:	3f 4f 0d 00 	jlt %d15,%d4,8000840a <Ifx_Fifo_canWriteCount+0x3e>
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE;
800083f4:	82 1f       	mov %d15,1
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
        {
            fifo->shared.writerWaitx = 0;
800083f6:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
800083fa:	e9 4f 1d 00 	st.b [%a4]29,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
800083fe:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008400:	df 00 5d 00 	jeq %d0,0,800084ba <Ifx_Fifo_canWriteCount+0xee>
    {
        __enable();
80008404:	0d 00 00 03 	enable 
80008408:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000840a:	82 f2       	mov %d2,-1
8000840c:	06 f2       	sh %d2,-1
8000840e:	ba f6       	eq %d15,%d6,-1
80008410:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008414:	82 f5       	mov %d5,-1
80008416:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008418:	ee 16       	jnz %d15,80008444 <Ifx_Fifo_canWriteCount+0x78>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000841a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000841e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008422:	0d 00 40 03 	disable 
80008426:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008428:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000842c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008430:	02 15       	mov %d5,%d1
80008432:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008436:	76 23       	jz %d2,8000843c <Ifx_Fifo_canWriteCount+0x70>
    {
        __enable();
80008438:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
8000843c:	0b 65 40 50 	addx %d5,%d5,%d6
80008440:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
80008444:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
80008446:	c9 42 04 00 	ld.h %d2,[%a4]4
            result                   = TRUE;
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
8000844a:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
8000844e:	8c 4c       	ld.h %d15,[%a4]24
80008450:	5a f2       	sub %d15,%d2,%d15
80008452:	42 f4       	add %d4,%d15
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008454:	82 02       	mov %d2,0
80008456:	0b 42 a0 41 	max %d4,%d2,%d4
8000845a:	59 44 0c 00 	st.w [%a4]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000845e:	76 03       	jz %d0,80008464 <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
80008460:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008464:	82 f6       	mov %d6,-1
80008466:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008468:	39 4f 1d 00 	ld.bu %d15,[%a4]29
8000846c:	6e 08       	jz %d15,8000847c <Ifx_Fifo_canWriteCount+0xb0>
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
            result = fifo->eventWriter == TRUE;
8000846e:	39 42 1d 00 	ld.bu %d2,[%a4]29
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
80008472:	82 0f       	mov %d15,0
80008474:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
80008476:	8b 12 00 22 	eq %d2,%d2,1
8000847a:	00 90       	ret 
8000847c:	ba f5       	eq %d15,%d5,-1
8000847e:	0b 36 00 f2 	and.eq %d15,%d6,%d3
80008482:	ee f3       	jnz %d15,80008468 <Ifx_Fifo_canWriteCount+0x9c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008484:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008488:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000848c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008490:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008492:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008496:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000849a:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000849e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084a2:	76 23       	jz %d2,800084a8 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
800084a4:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800084a8:	0b 3f 00 21 	eq %d2,%d15,%d3
800084ac:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
800084b0:	0b 3f 90 22 	or.lt %d2,%d15,%d3
800084b4:	df 02 da ff 	jne %d2,0,80008468 <Ifx_Fifo_canWriteCount+0x9c>
800084b8:	3c db       	j 8000846e <Ifx_Fifo_canWriteCount+0xa2>
            result = fifo->eventWriter == TRUE;
        }
    }

    return result;
}
800084ba:	00 90       	ret 

800084bc <Ifx_Fifo_write>:
}


#include <stdio.h>
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
800084bc:	20 08       	sub.a %sp,8
800084be:	40 4f       	mov.aa %a15,%a4
800084c0:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
800084c2:	df 04 be 00 	jeq %d4,0,8000863e <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
800084c6:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084c8:	82 f2       	mov %d2,-1
800084ca:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
800084cc:	8c 4c       	ld.h %d15,[%a4]24
800084ce:	06 f2       	sh %d2,-1
800084d0:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
800084d2:	8c 4b       	ld.h %d15,[%a4]22
    {
        deadLine = TIME_INFINITE;
800084d4:	82 fa       	mov %d10,-1
800084d6:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084d8:	ba f6       	eq %d15,%d6,-1
800084da:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800084de:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084e0:	ee 16       	jnz %d15,8000850c <Ifx_Fifo_write+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084e2:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084e6:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084ea:	0d 00 40 03 	disable 
800084ee:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800084f0:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800084f4:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800084f8:	02 3a       	mov %d10,%d3
800084fa:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084fe:	76 23       	jz %d2,80008504 <Ifx_Fifo_write+0x48>
    {
        __enable();
80008500:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008504:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008508:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000850c:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
8000850e:	82 0d       	mov %d13,0
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventWriter        = FALSE;
80008510:	82 0e       	mov %d14,0
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008512:	a0 0c       	mov.a %a12,0
80008514:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008516:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
8000851a:	37 05 e1 57 	extr.u %d5,%d5,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000851e:	0d 00 40 03 	disable 
80008522:	00 00       	nop 
{
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
80008524:	88 c4       	ld.h %d4,[%a15]24
80008526:	88 2b       	ld.h %d11,[%a15]4
80008528:	0b b4 80 b0 	sub %d11,%d4,%d11
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000852c:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
80008530:	8c fd       	ld.h %d15,[%a15]26
80008532:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
80008536:	e9 fe 1d 00 	st.b [%a15]29,%d14
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
8000853a:	4b f2 01 22 	div %e2,%d2,%d15
8000853e:	a2 3b       	sub %d11,%d3
80008540:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008544:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
80008548:	0b f9 80 20 	sub %d2,%d9,%d15
8000854c:	0b 42 80 41 	min %d4,%d2,%d4
80008550:	68 34       	st.w [%a15]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008552:	76 53       	jz %d5,80008558 <Ifx_Fifo_write+0x9c>
    {
        __enable();
80008554:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
80008558:	6e 26       	jz %d15,800085a4 <Ifx_Fifo_write+0xe8>
            {

                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
8000855a:	40 a4       	mov.aa %a4,%sp
8000855c:	02 f4       	mov %d4,%d15
8000855e:	6d ff 6d fd 	call 80008038 <Ifx_CircularBuffer_write8>
80008562:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008564:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80008568:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000856c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008570:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
80008572:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80008574:	88 84       	ld.h %d4,[%a15]16
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
80008576:	42 b2       	add %d2,%d11
80008578:	37 02 50 20 	extr %d2,%d2,0,16
8000857c:	a8 22       	st.h [%a15]4,%d2
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000857e:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80008582:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
80008584:	48 22       	ld.w %d2,[%a15]8
80008586:	76 29       	jz %d2,80008598 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
80008588:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
8000858a:	8e f3       	jlez %d15,80008590 <Ifx_Fifo_write+0xd4>
    fifo->shared.count   += blockSize;
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */

    if (fifo->shared.readerWaitx != 0)
    {
        fifo->shared.readerWaitx -= blockSize;
8000858c:	68 2f       	st.w [%a15]8,%d15
8000858e:	3c 05       	j 80008598 <Ifx_Fifo_write+0xdc>

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80008590:	82 1f       	mov %d15,1
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008592:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80008594:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008598:	76 33       	jz %d3,8000859e <Ifx_Fifo_write+0xe2>
    {
        __enable();
8000859a:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
8000859e:	a2 b9       	sub %d9,%d11
800085a0:	37 09 50 90 	extr %d9,%d9,0,16
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800085a4:	76 d4       	jz %d13,800085ac <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
800085a6:	82 0f       	mov %d15,0
800085a8:	68 3f       	st.w [%a15]12,%d15
                break;
800085aa:	3c 48       	j 8000863a <Ifx_Fifo_write+0x17e>
800085ac:	ba fa       	eq %d15,%d10,-1
800085ae:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800085b2:	ee 1b       	jnz %d15,800085e8 <Ifx_Fifo_write+0x12c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085b4:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085b8:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085bc:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800085c0:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800085c2:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800085c6:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800085ca:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800085ce:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085d2:	76 23       	jz %d2,800085d8 <Ifx_Fifo_write+0x11c>
    {
        __enable();
800085d4:	0d 00 00 03 	enable 
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800085d8:	0b 8f 00 21 	eq %d2,%d15,%d8
800085dc:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
800085e0:	0b f8 90 22 	or.lt %d2,%d8,%d15
800085e4:	df 02 e1 ff 	jne %d2,0,800085a6 <Ifx_Fifo_write+0xea>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
800085e8:	df 09 29 00 	jeq %d9,0,8000863a <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800085ec:	39 ff 1d 00 	ld.bu %d15,[%a15]29
800085f0:	ee 1f       	jnz %d15,8000862e <Ifx_Fifo_write+0x172>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800085f2:	ba fa       	eq %d15,%d10,-1
800085f4:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800085f8:	ee fa       	jnz %d15,800085ec <Ifx_Fifo_write+0x130>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085fa:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085fe:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008602:	0d 00 40 03 	disable 
80008606:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008608:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000860c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008610:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008614:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008618:	76 23       	jz %d2,8000861e <Ifx_Fifo_write+0x162>
    {
        __enable();
8000861a:	0d 00 00 03 	enable 
8000861e:	0b 8f 00 21 	eq %d2,%d15,%d8
80008622:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
80008626:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000862a:	df 02 e1 ff 	jne %d2,0,800085ec <Ifx_Fifo_write+0x130>
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
8000862e:	39 fd 1d 00 	ld.bu %d13,[%a15]29
80008632:	8b 0d 00 d2 	eq %d13,%d13,0
80008636:	1d ff 70 ff 	j 80008516 <Ifx_Fifo_write+0x5a>
            }
        } while (count != 0);

        fifo->endIndex = buffer.index;
8000863a:	8c a2       	ld.h %d15,[%sp]4
8000863c:	a8 bf       	st.h [%a15]22,%d15
    }

    return count;
}
8000863e:	02 92       	mov %d2,%d9
80008640:	00 90       	ret 

80008642 <osEE_tc_core0_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008642:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008646:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000864a:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
8000864e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008652:	54 25       	ld.w %d5,[%a2]
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008654:	48 08       	ld.w %d8,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008656:	37 05 6e 51 	extr.u %d5,%d5,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
8000865a:	37 08 6e 81 	extr.u %d8,%d8,2,14
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000865e:	91 20 00 f7 	movh.a %a15,28674
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008662:	8f f5 83 51 	xor %d5,%d5,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008666:	8f f8 83 81 	xor %d8,%d8,63
8000866a:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
8000866e:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80008670:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
80008674:	3b 00 b8 f0 	mov %d15,2944
80008678:	cd 4f e0 0f 	mtcr $psw,%d15
8000867c:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008680:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008684:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008688:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000868c:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80008690:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008694:	82 12       	mov %d2,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008696:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
8000869a:	cd 42 20 09 	mtcr $pcon1,%d2
8000869e:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800086a2:	53 cf 20 f0 	mul %d15,%d15,12
800086a6:	10 22       	addsc.a %a2,%a2,%d15,0
800086a8:	54 22       	ld.w %d2,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
800086aa:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800086ac:	37 02 6e 21 	extr.u %d2,%d2,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
800086b0:	d9 2f 00 46 	lea %a15,[%a2]24832
800086b4:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800086b8:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
800086ba:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800086be:	2e 16       	jz.t %d15,1,800086ca <osEE_tc_core0_start+0x88>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800086c0:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800086c4:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800086c8:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
800086ca:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
800086ce:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800086d2:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
800086d4:	4c f0       	ld.w %d15,[%a15]0
800086d6:	6f 0f ff ff 	jnz.t %d15,0,800086d4 <osEE_tc_core0_start+0x92>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
800086da:	82 0f       	mov %d15,0
800086dc:	cd cf 20 09 	mtcr $pcon0,%d15
800086e0:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800086e4:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800086e6:	2e 16       	jz.t %d15,1,800086f2 <osEE_tc_core0_start+0xb0>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800086e8:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800086ec:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800086f0:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800086f2:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800086f6:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800086fa:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800086fc:	4c f0       	ld.w %d15,[%a15]0
800086fe:	6f 0f ff 7f 	jz.t %d15,0,800086fc <osEE_tc_core0_start+0xba>
80008702:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008706:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000870a:	91 30 00 ff 	movh.a %a15,61443
8000870e:	53 cf 20 f0 	mul %d15,%d15,12
80008712:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008716:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008718:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000871a:	48 02       	ld.w %d2,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
8000871c:	d9 2f 00 46 	lea %a15,[%a2]24832
80008720:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008724:	37 02 6e 21 	extr.u %d2,%d2,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008728:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
8000872a:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000872e:	2e 16       	jz.t %d15,1,8000873a <osEE_tc_core0_start+0xf8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008730:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008734:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008738:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
8000873a:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
8000873e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008742:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008744:	4c f0       	ld.w %d15,[%a15]0
80008746:	6f 0f ff ff 	jnz.t %d15,0,80008744 <osEE_tc_core0_start+0x102>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
8000874a:	82 0f       	mov %d15,0
8000874c:	cd 0f 04 09 	mtcr $dcon0,%d15
80008750:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008754:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008756:	2e 16       	jz.t %d15,1,80008762 <osEE_tc_core0_start+0x120>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008758:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000875c:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008760:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008762:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008766:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000876a:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
8000876c:	4c f0       	ld.w %d15,[%a15]0
8000876e:	6f 0f ff 7f 	jz.t %d15,0,8000876c <osEE_tc_core0_start+0x12a>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008772:	91 30 00 ff 	movh.a %a15,61443
80008776:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000877a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000877c:	2e 16       	jz.t %d15,1,80008788 <osEE_tc_core0_start+0x146>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000877e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008782:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008786:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008788:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
8000878c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008790:	91 30 00 ff 	movh.a %a15,61443
80008794:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008798:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
8000879a:	4c f0       	ld.w %d15,[%a15]0
8000879c:	91 30 00 2f 	movh.a %a2,61443
800087a0:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800087a4:	6f 0f fb ff 	jnz.t %d15,0,8000879a <osEE_tc_core0_start+0x158>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(0U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB0);
800087a8:	7b 00 00 f8 	movh %d15,32768
800087ac:	1b 0f 30 f1 	addi %d15,%d15,4864
800087b0:	cd 4f e2 0f 	mtcr $btv,%d15
800087b4:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB0);
800087b8:	7b 00 00 f8 	movh %d15,32768
800087bc:	1b 0f 00 f2 	addi %d15,%d15,8192
800087c0:	cd 0f e2 0f 	mtcr $biv,%d15
800087c4:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK0);
800087c8:	7b 20 00 f7 	movh %d15,28674
800087cc:	1b 0f b0 f9 	addi %d15,%d15,-25856
800087d0:	cd 8f e2 0f 	mtcr $isp,%d15
800087d4:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800087d8:	4c 20       	ld.w %d15,[%a2]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800087da:	2e 16       	jz.t %d15,1,800087e6 <osEE_tc_core0_start+0x1a4>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800087dc:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800087e0:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800087e4:	6c 20       	st.w [%a2]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800087e6:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800087ea:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800087ee:	91 30 00 ff 	movh.a %a15,61443
800087f2:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800087f6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800087f8:	4c f0       	ld.w %d15,[%a15]0
800087fa:	6f 0f ff 7f 	jz.t %d15,0,800087f8 <osEE_tc_core0_start+0x1b6>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(0U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
800087fe:	91 10 00 f7 	movh.a %a15,28673
80008802:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
80008806:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
80008808:	91 10 00 f8 	movh.a %a15,32769
8000880c:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
80008810:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
80008812:	91 10 00 f8 	movh.a %a15,32769
80008816:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
8000881a:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_SINGLECORE)) || (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
#else
  osEE_tc_setareg(a9, &osEE_cdb_var_core0);
8000881c:	91 00 00 f8 	movh.a %a15,32768
80008820:	d9 ff 04 60 	lea %a15,[%a15]388 <80000184 <osEE_cdb_var_core0>>
80008824:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
80008826:	7b 20 00 f7 	movh %d15,28674
8000882a:	7b 20 00 47 	movh %d4,28674
8000882e:	1b 0f c0 69 	addi %d6,%d15,-25600
80008832:	1b 04 c0 4b 	addi %d4,%d4,-17408
80008836:	a2 64       	sub %d4,%d6
80008838:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
8000883a:	82 02       	mov %d2,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
8000883c:	df 04 16 00 	jeq %d4,0,80008868 <osEE_tc_core0_start+0x226>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80008840:	9a f4       	add %d15,%d4,-1
80008842:	06 6f       	sh %d15,6
80008844:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008846:	60 3f       	mov.a %a15,%d3
80008848:	82 00       	mov %d0,0
8000884a:	68 00       	st.w [%a15]0,%d0
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
8000884c:	60 4f       	mov.a %a15,%d4
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
8000884e:	8f 43 1e 20 	sh %d2,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008852:	37 03 70 73 	extr.u %d7,%d3,6,16
80008856:	1b 0f fc ff 	addi %d15,%d15,-64

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
8000885a:	b0 ff       	add.a %a15,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
8000885c:	37 27 10 28 	insert %d2,%d7,%d2,16,16
80008860:	42 6f       	add %d15,%d6

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008862:	82 53       	mov %d3,5
80008864:	fd f0 11 01 	loop %a15,80008a86 <osEE_tc_core0_start+0x444>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
80008868:	cd 82 e3 0f 	mtcr $fcx,%d2
8000886c:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008870:	91 30 00 ff 	movh.a %a15,61443
80008874:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008878:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000887a:	2e 16       	jz.t %d15,1,80008886 <osEE_tc_core0_start+0x244>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000887c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008880:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008884:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008886:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
8000888a:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000888e:	91 30 00 ff 	movh.a %a15,61443
80008892:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008896:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008898:	40 f2       	mov.aa %a2,%a15
8000889a:	4c 20       	ld.w %d15,[%a2]0
8000889c:	91 30 00 ff 	movh.a %a15,61443
800088a0:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800088a4:	6f 0f fb ff 	jnz.t %d15,0,8000889a <osEE_tc_core0_start+0x258>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
800088a8:	4c f1       	ld.w %d15,[%a15]4
800088aa:	96 08       	or %d15,8
800088ac:	68 1f       	st.w [%a15]4,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800088ae:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800088b0:	2e 16       	jz.t %d15,1,800088bc <osEE_tc_core0_start+0x27a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800088b2:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800088b6:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800088ba:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800088bc:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800088c0:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800088c4:	91 30 00 ff 	movh.a %a15,61443
800088c8:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800088cc:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800088ce:	4c f0       	ld.w %d15,[%a15]0
800088d0:	6f 0f ff 7f 	jz.t %d15,0,800088ce <osEE_tc_core0_start+0x28c>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800088d4:	91 30 00 ff 	movh.a %a15,61443
800088d8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800088dc:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800088de:	2e 16       	jz.t %d15,1,800088ea <osEE_tc_core0_start+0x2a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800088e0:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800088e4:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800088e8:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800088ea:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800088ee:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800088f2:	91 30 00 ff 	movh.a %a15,61443
800088f6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800088fa:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800088fc:	40 f2       	mov.aa %a2,%a15
800088fe:	4c 20       	ld.w %d15,[%a2]0
80008900:	91 30 00 ff 	movh.a %a15,61443
80008904:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008908:	6f 0f fb ff 	jnz.t %d15,0,800088fe <osEE_tc_core0_start+0x2bc>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
8000890c:	4c f1       	ld.w %d15,[%a15]4
8000890e:	96 08       	or %d15,8
80008910:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008912:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008914:	2e 16       	jz.t %d15,1,80008920 <osEE_tc_core0_start+0x2de>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008916:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
8000891a:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
8000891e:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008920:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008924:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008928:	91 30 00 ff 	movh.a %a15,61443
8000892c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008930:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008932:	4c f0       	ld.w %d15,[%a15]0
80008934:	6f 0f ff 7f 	jz.t %d15,0,80008932 <osEE_tc_core0_start+0x2f0>
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80008938:	91 00 00 48 	movh.a %a4,32768
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
        *block_to_clear.p_ull = 0ULL;
8000893c:	d2 02       	mov %e2,0
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
8000893e:	d9 44 20 31 	lea %a4,[%a4]4320 <800010e0 <__clear_table>>
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
        *block_to_clear.p_ui = 0x0U;
80008942:	82 07       	mov %d7,0
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
        *block_to_clear.p_us = 0x0U;
80008944:	82 06       	mov %d6,0
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
        *block_to_clear.p_uc = 0x0U;
80008946:	82 05       	mov %d5,0

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
80008948:	4c 41       	ld.w %d15,[%a4]4
  while (p_clear_table != NULL) {
    OsEE_tc_init_table_entry_ptr  block_to_clear;
    MemSize                       table_entry_length;

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;
8000894a:	d4 43       	ld.a %a3,[%a4]

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
8000894c:	9e f6       	jeq %d15,-1,80008978 <osEE_tc_core0_start+0x336>
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
8000894e:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80008952:	76 49       	jz %d4,80008964 <osEE_tc_core0_start+0x322>
        *block_to_clear.p_ull = 0ULL;
80008954:	60 4f       	mov.a %a15,%d4
80008956:	40 32       	mov.aa %a2,%a3
80008958:	b0 ff       	add.a %a15,-1
8000895a:	89 22 48 01 	st.d [%a2+]8,%e2
8000895e:	fc fe       	loop %a15,8000895a <osEE_tc_core0_start+0x318>
80008960:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
        ++block_to_clear.p_ull;
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80008964:	2e 22       	jz.t %d15,2,80008968 <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
80008966:	64 37       	st.w [%a3+],%d7
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80008968:	2e 12       	jz.t %d15,1,8000896c <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
8000896a:	a4 36       	st.h [%a3+],%d6
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
8000896c:	2e 02       	jz.t %d15,0,80008970 <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
8000896e:	34 35       	st.b [%a3],%d5
      }

/* Prepare the table pointer for the next iteration */
      ++p_clear_table;
80008970:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
  while (p_clear_table != NULL) {
80008974:	bd 04 ea ff 	jnz.a %a4,80008948 <osEE_tc_core0_start+0x306>
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
80008978:	91 00 00 68 	movh.a %a6,32768
8000897c:	d9 66 08 51 	lea %a6,[%a6]4424 <80001148 <__copy_table>>

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
80008980:	4c 62       	ld.w %d15,[%a6]8
    OsEE_tc_init_table_entry_ptr  block_src;
    OsEE_tc_init_table_entry_ptr  block_dest;
    MemSize                       table_entry_length;

/* Get pointer to the data source block */
    block_src = p_copy_table->block_src;
80008982:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
80008984:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80008988:	df ff 21 00 	jeq %d15,-1,800089ca <osEE_tc_core0_start+0x388>
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
8000898c:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80008990:	76 4f       	jz %d4,800089ae <osEE_tc_core0_start+0x36c>
80008992:	60 4f       	mov.a %a15,%d4
80008994:	40 43       	mov.aa %a3,%a4
80008996:	40 52       	mov.aa %a2,%a5
80008998:	b0 ff       	add.a %a15,-1
        *block_dest.p_ull = *block_src.p_ull;
8000899a:	09 22 48 01 	ld.d %e2,[%a2+]8
8000899e:	89 32 48 01 	st.d [%a3+]8,%e2
800089a2:	fc fc       	loop %a15,8000899a <osEE_tc_core0_start+0x358>
800089a4:	06 34       	sh %d4,3
800089a6:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
800089aa:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
        ++block_dest.p_ull;
        --ull_cnt;
      }

/* Copy the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
800089ae:	2e 23       	jz.t %d15,2,800089b4 <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
800089b0:	44 52       	ld.w %d2,[%a5+]
800089b2:	64 42       	st.w [%a4+],%d2
        ++block_src.p_ui;
        ++block_dest.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
800089b4:	2e 14       	jz.t %d15,1,800089bc <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
800089b6:	09 52 c2 00 	ld.hu %d2,[%a5+]2
800089ba:	a4 42       	st.h [%a4+],%d2
        ++block_src.p_us;
        ++block_dest.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
800089bc:	2e 03       	jz.t %d15,0,800089c2 <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
800089be:	0c 50       	ld.bu %d15,[%a5]0
800089c0:	2c 40       	st.b [%a4]0,%d15
      }

/* Prepare the table pointer for the next iteration */
      ++p_copy_table;
800089c2:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
(
  const OsEE_tc_copy_table * p_copy_table_param
)
{
  const OsEE_tc_copy_table * p_copy_table = p_copy_table_param;
  while (p_copy_table != NULL) {
800089c6:	bd 06 dd ff 	jnz.a %a6,80008980 <osEE_tc_core0_start+0x33e>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800089ca:	91 30 00 ff 	movh.a %a15,61443
800089ce:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800089d2:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800089d4:	2e 16       	jz.t %d15,1,800089e0 <osEE_tc_core0_start+0x39e>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800089d6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800089da:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800089de:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800089e0:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800089e4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800089e8:	91 30 00 ff 	movh.a %a15,61443
800089ec:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800089f0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800089f2:	4c f0       	ld.w %d15,[%a15]0
800089f4:	6f 0f ff ff 	jnz.t %d15,0,800089f2 <osEE_tc_core0_start+0x3b0>
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON8_OFF) = OSEE_TC_SCU_CCUCON8_INIT;
#endif /* OSEE_TC_SCU_CCUCON8_INIT */

/* BUS Divisors */
/* Configure CCUCON0 */
  OSEE_TC_SCU_CCUCON0.reg = OSEE_TC_SCU_CCUCON0_INIT;
800089f8:	7b 20 22 f1 	movh %d15,4642
800089fc:	91 30 00 ff 	movh.a %a15,61443
80008a00:	1b 1f 10 f0 	addi %d15,%d15,257
80008a04:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80008a08:	68 0f       	st.w [%a15]0,%d15
#if (defined(OSEE_TC_SCU_CCUCON5_INIT))
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON5_OFF) = OSEE_TC_SCU_CCUCON5_INIT;
#endif /* OSEE_TC_SCU_CCUCON5_INIT */
/* Configure CCUCON1 and Update CCU 0, 1 & 5. Forced INSEL to 1 even for
   external configuration, otherwise PLL initialization won't work. */
  OSEE_TC_SCU_CCUCON1.reg = OSEE_TC_SCU_CCUCON1_INIT |
80008a0a:	7b 00 00 f5 	movh %d15,20480
80008a0e:	91 30 00 ff 	movh.a %a15,61443
80008a12:	1b 0f 10 f1 	addi %d15,%d15,4352
80008a16:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008a1a:	68 0f       	st.w [%a15]0,%d15
{
  /*
   * Default System Oscillator Configuration
   * MODE:    0   -> External Crystal
   */
  OSEE_TC_SCU_OSCCON.reg = OSEE_TC_SCU_OSCCON_OSCRES |
80008a1c:	7b 70 00 f0 	movh %d15,7
80008a20:	91 30 00 ff 	movh.a %a15,61443
80008a24:	1b cf 01 f0 	addi %d15,%d15,28
80008a28:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80008a2c:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_OSCCON_GAINSEL | OSEE_TC_SCU_OSCCON_MODE(0U) |
    OSEE_TC_SCU_OSCCON_OSCVAL((OSEE_TC_BOARD_FOSC / 2500000U) - 1U);

  while (OSEE_TC_SCU_OSCCON.bits.plllv == 0U) {
80008a2e:	4c f0       	ld.w %d15,[%a15]0
80008a30:	6f 1f ff 7f 	jz.t %d15,1,80008a2e <osEE_tc_core0_start+0x3ec>
    ; /* Oscillator not too low */
  }

  while (OSEE_TC_SCU_OSCCON.bits.pllhv == 0U) {
80008a34:	91 30 00 ff 	movh.a %a15,61443
80008a38:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80008a3c:	4c f0       	ld.w %d15,[%a15]0
80008a3e:	6f 8f ff 7f 	jz.t %d15,8,80008a3c <osEE_tc_core0_start+0x3fa>
/*===================== Configure CCU Clock Control =========================*/
  osEE_tc_conf_clock_ctrl();
/*===================== Configure Oscillator Control ========================*/
  osEE_tc_conf_osc_ctrl();
/*============================ Configure PLL ================================*/
  osEE_tc_set_pll_fsource(OSEE_CPU_CLOCK);
80008a42:	7b c0 be 40 	movh %d4,3052
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008a46:	91 30 00 ff 	movh.a %a15,61443
80008a4a:	1b 04 20 4c 	addi %d4,%d4,-15872
80008a4e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008a52:	6d 00 88 03 	call 80009162 <osEE_tc_set_pll_fsource>
80008a56:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008a58:	2e 16       	jz.t %d15,1,80008a64 <osEE_tc_core0_start+0x422>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008a5a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008a5e:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008a62:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008a64:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008a68:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008a6c:	91 30 00 ff 	movh.a %a15,61443
80008a70:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008a74:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008a76:	4c f0       	ld.w %d15,[%a15]0
80008a78:	6f 0f ff 7f 	jz.t %d15,0,80008a76 <osEE_tc_core0_start+0x434>
  osEE_tc_set_safety_endinit(safety_wdt_pw);
#endif /* OSEE_CPU_CLOCK */
#endif /* !OSEE_BYPASS_CLOCK_CONFIGURATION */
#endif /* !OSEE_TRICORE_ILLD && !OSEE_TC_2G */

  OSEE_EXIT(main());
80008a7c:	6d ff dd dc 	call 80004436 <main>
80008a80:	02 24       	mov %d4,%d2
80008a82:	6d 00 83 35 	call 8000f588 <_exit>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008a86:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008a88:	8f 4f 1e 40 	sh %d4,%d15,-28
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008a8c:	74 22       	st.w [%a2],%d2
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008a8e:	c2 f3       	add %d3,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008a90:	37 0f 70 23 	extr.u %d2,%d15,6,16
80008a94:	37 42 10 28 	insert %d2,%d2,%d4,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
80008a98:	76 36       	jz %d3,80008aa4 <osEE_tc_core0_start+0x462>
80008a9a:	1b 0f fc ff 	addi %d15,%d15,-64
80008a9e:	fc f4       	loop %a15,80008a86 <osEE_tc_core0_start+0x444>
80008aa0:	1d ff e4 fe 	j 80008868 <osEE_tc_core0_start+0x226>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
80008aa4:	cd c2 e3 0f 	mtcr $lcx,%d2
80008aa8:	0d 00 c0 04 	isync 
80008aac:	3c f7       	j 80008a9a <osEE_tc_core0_start+0x458>

80008aae <osEE_tc_core1_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008aae:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008ab2:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ab6:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008aba:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008abe:	19 22 0c 00 	ld.w %d2,[%a2]12 <f003000c <_SMALL_DATA4_+0x4002800c>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008ac2:	48 06       	ld.w %d6,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ac4:	37 02 6e 21 	extr.u %d2,%d2,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008ac8:	37 06 6e 61 	extr.u %d6,%d6,2,14
80008acc:	91 20 00 f6 	movh.a %a15,24578
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008ad0:	8f f2 83 21 	xor %d2,%d2,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008ad4:	8f f6 83 61 	xor %d6,%d6,63
80008ad8:	d9 ff 40 8b 	lea %a15,[%a15]-18944 <6001b600 <__USTACK1>>
80008adc:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80008ade:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
80008ae2:	3b 00 b8 f0 	mov %d15,2944
80008ae6:	cd 4f e0 0f 	mtcr $psw,%d15
80008aea:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008aee:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008af2:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008af6:	cd 0f e0 0f 	mtcr $pcxi,%d15
80008afa:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80008afe:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008b02:	82 13       	mov %d3,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008b04:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008b08:	cd 43 20 09 	mtcr $pcon1,%d3
80008b0c:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008b10:	53 cf 20 f0 	mul %d15,%d15,12
80008b14:	10 22       	addsc.a %a2,%a2,%d15,0
80008b16:	54 23       	ld.w %d3,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008b18:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008b1a:	37 03 6e 31 	extr.u %d3,%d3,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008b1e:	d9 2f 00 46 	lea %a15,[%a2]24832
80008b22:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008b26:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008b28:	8f f3 83 31 	xor %d3,%d3,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008b2c:	2e 16       	jz.t %d15,1,80008b38 <osEE_tc_core1_start+0x8a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008b2e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008b32:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008b36:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008b38:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008b3c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008b40:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008b42:	4c f0       	ld.w %d15,[%a15]0
80008b44:	6f 0f ff ff 	jnz.t %d15,0,80008b42 <osEE_tc_core1_start+0x94>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
80008b48:	82 0f       	mov %d15,0
80008b4a:	cd cf 20 09 	mtcr $pcon0,%d15
80008b4e:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008b52:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008b54:	2e 16       	jz.t %d15,1,80008b60 <osEE_tc_core1_start+0xb2>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008b56:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008b5a:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008b5e:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008b60:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008b64:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008b68:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008b6a:	4c f0       	ld.w %d15,[%a15]0
80008b6c:	6f 0f ff 7f 	jz.t %d15,0,80008b6a <osEE_tc_core1_start+0xbc>
80008b70:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008b74:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008b78:	91 30 00 ff 	movh.a %a15,61443
80008b7c:	53 cf 20 f0 	mul %d15,%d15,12
80008b80:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008b84:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008b86:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008b88:	48 03       	ld.w %d3,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008b8a:	d9 2f 00 46 	lea %a15,[%a2]24832
80008b8e:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008b92:	37 03 6e 31 	extr.u %d3,%d3,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008b96:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008b98:	8f f3 83 31 	xor %d3,%d3,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008b9c:	2e 16       	jz.t %d15,1,80008ba8 <osEE_tc_core1_start+0xfa>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008b9e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008ba2:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008ba6:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008ba8:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008bac:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008bb0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008bb2:	4c f0       	ld.w %d15,[%a15]0
80008bb4:	6f 0f ff ff 	jnz.t %d15,0,80008bb2 <osEE_tc_core1_start+0x104>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
80008bb8:	82 0f       	mov %d15,0
80008bba:	cd 0f 04 09 	mtcr $dcon0,%d15
80008bbe:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008bc2:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008bc4:	2e 16       	jz.t %d15,1,80008bd0 <osEE_tc_core1_start+0x122>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008bc6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008bca:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008bce:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008bd0:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008bd4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008bd8:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008bda:	4c f0       	ld.w %d15,[%a15]0
80008bdc:	6f 0f ff 7f 	jz.t %d15,0,80008bda <osEE_tc_core1_start+0x12c>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008be0:	91 30 00 ff 	movh.a %a15,61443
80008be4:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008be8:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008bea:	2e 16       	jz.t %d15,1,80008bf6 <osEE_tc_core1_start+0x148>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008bec:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008bf0:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008bf4:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008bf6:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008bfa:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008bfe:	91 30 00 ff 	movh.a %a15,61443
80008c02:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008c06:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008c08:	40 f2       	mov.aa %a2,%a15
80008c0a:	4c 20       	ld.w %d15,[%a2]0
80008c0c:	91 30 00 ff 	movh.a %a15,61443
80008c10:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008c14:	6f 0f fb ff 	jnz.t %d15,0,80008c0a <osEE_tc_core1_start+0x15c>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(1U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB1);
80008c18:	7b 00 00 f8 	movh %d15,32768
80008c1c:	1b 0f 30 f1 	addi %d15,%d15,4864
80008c20:	cd 4f e2 0f 	mtcr $btv,%d15
80008c24:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB1);
80008c28:	7b 10 00 f8 	movh %d15,32769
80008c2c:	1b 0f 00 f0 	addi %d15,%d15,0
80008c30:	cd 0f e2 0f 	mtcr $biv,%d15
80008c34:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK1);
80008c38:	7b 20 00 f6 	movh %d15,24578
80008c3c:	1b 0f b0 fb 	addi %d15,%d15,-17664
80008c40:	cd 8f e2 0f 	mtcr $isp,%d15
80008c44:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008c48:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008c4a:	2e 16       	jz.t %d15,1,80008c56 <osEE_tc_core1_start+0x1a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008c4c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008c50:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008c54:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008c56:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008c5a:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008c5e:	91 30 00 ff 	movh.a %a15,61443
80008c62:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008c66:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008c68:	4c f0       	ld.w %d15,[%a15]0
80008c6a:	6f 0f ff 7f 	jz.t %d15,0,80008c68 <osEE_tc_core1_start+0x1ba>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(1U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
80008c6e:	91 10 00 f7 	movh.a %a15,28673
80008c72:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
80008c76:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
80008c78:	91 10 00 f8 	movh.a %a15,32769
80008c7c:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
80008c80:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
80008c82:	91 10 00 f8 	movh.a %a15,32769
80008c86:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
80008c8a:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
#else
  osEE_tc_setareg(a9, &osEE_cdb_var_core1);
80008c8c:	91 00 00 f8 	movh.a %a15,32768
80008c90:	d9 ff 18 50 	lea %a15,[%a15]344 <80000158 <osEE_cdb_var_core1>>
80008c94:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
80008c96:	7b 20 00 36 	movh %d3,24578
80008c9a:	7b 20 00 56 	movh %d5,24578
80008c9e:	1b 03 c0 7b 	addi %d7,%d3,-17408
80008ca2:	1b 05 c0 5d 	addi %d5,%d5,-9216
80008ca6:	a2 75       	sub %d5,%d7
80008ca8:	86 a5       	sha %d5,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
80008caa:	82 0f       	mov %d15,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
80008cac:	df 05 1d 00 	jeq %d5,0,80008ce6 <osEE_tc_core1_start+0x238>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80008cb0:	1b f5 ff 3f 	addi %d3,%d5,-1
80008cb4:	06 63       	sh %d3,6
80008cb6:	0b 73 00 40 	add %d4,%d3,%d7

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008cba:	60 4f       	mov.a %a15,%d4
80008cbc:	82 01       	mov %d1,0
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008cbe:	8f 44 1e f0 	sh %d15,%d4,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008cc2:	37 04 70 03 	extr.u %d0,%d4,6,16
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008cc6:	68 01       	st.w [%a15]0,%d1
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008cc8:	60 5f       	mov.a %a15,%d5
80008cca:	1b 03 fc 3f 	addi %d3,%d3,-64
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008cce:	37 f0 10 f8 	insert %d15,%d0,%d15,16,16
80008cd2:	42 73       	add %d3,%d7

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008cd4:	82 54       	mov %d4,5
80008cd6:	b0 ff       	add.a %a15,-1
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008cd8:	8f 43 1e 70 	sh %d7,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008cdc:	37 03 70 53 	extr.u %d5,%d3,6,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008ce0:	c2 f4       	add %d4,-1
80008ce2:	fd f0 71 00 	loop %a15,80008dc4 <osEE_tc_core1_start+0x316>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
80008ce6:	cd 8f e3 0f 	mtcr $fcx,%d15
80008cea:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008cee:	91 30 00 ff 	movh.a %a15,61443
80008cf2:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008cf6:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008cf8:	2e 16       	jz.t %d15,1,80008d04 <osEE_tc_core1_start+0x256>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008cfa:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008cfe:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008d02:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008d04:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008d08:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008d0c:	91 30 00 ff 	movh.a %a15,61443
80008d10:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008d14:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008d16:	40 f2       	mov.aa %a2,%a15
80008d18:	4c 20       	ld.w %d15,[%a2]0
80008d1a:	91 30 00 ff 	movh.a %a15,61443
80008d1e:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008d22:	6f 0f fb ff 	jnz.t %d15,0,80008d18 <osEE_tc_core1_start+0x26a>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
80008d26:	91 30 00 2f 	movh.a %a2,61443
80008d2a:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008d2e:	4c 24       	ld.w %d15,[%a2]16
80008d30:	96 08       	or %d15,8
80008d32:	6c 24       	st.w [%a2]16,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008d34:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008d36:	2e 16       	jz.t %d15,1,80008d42 <osEE_tc_core1_start+0x294>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008d38:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008d3c:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008d40:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008d42:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008d46:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008d4a:	91 30 00 ff 	movh.a %a15,61443
80008d4e:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008d52:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008d54:	4c f0       	ld.w %d15,[%a15]0
80008d56:	6f 0f ff 7f 	jz.t %d15,0,80008d54 <osEE_tc_core1_start+0x2a6>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008d5a:	91 30 00 ff 	movh.a %a15,61443
80008d5e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008d62:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008d64:	2e 16       	jz.t %d15,1,80008d70 <osEE_tc_core1_start+0x2c2>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008d66:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008d6a:	37 6f 0e f1 	insert %d15,%d15,%d6,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008d6e:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
80008d70:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
80008d74:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
80008d78:	91 30 00 ff 	movh.a %a15,61443
80008d7c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008d80:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
80008d82:	40 f2       	mov.aa %a2,%a15
80008d84:	4c 20       	ld.w %d15,[%a2]0
80008d86:	91 30 00 ff 	movh.a %a15,61443
80008d8a:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008d8e:	6f 0f fb ff 	jnz.t %d15,0,80008d84 <osEE_tc_core1_start+0x2d6>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
80008d92:	4c f1       	ld.w %d15,[%a15]4
80008d94:	96 08       	or %d15,8
80008d96:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008d98:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008d9a:	2e 16       	jz.t %d15,1,80008da6 <osEE_tc_core1_start+0x2f8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008d9c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008da0:	37 6f 0e f1 	insert %d15,%d15,%d6,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008da4:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008da6:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008daa:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008dae:	91 30 00 ff 	movh.a %a15,61443
80008db2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008db6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008db8:	4c f0       	ld.w %d15,[%a15]0
80008dba:	6f 0f ff 7f 	jz.t %d15,0,80008db8 <osEE_tc_core1_start+0x30a>
/* C core 1 private initialization */
  _c_init_tc1();
#endif /* __TASKING__ */

/* Call main function */
  (void)main();
80008dbe:	6d ff 3c db 	call 80004436 <main>

/* TODO: handle main return */
  for (;;) {
    ;
  }
80008dc2:	3c 00       	j 80008dc2 <osEE_tc_core1_start+0x314>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008dc4:	60 32       	mov.a %a2,%d3
80008dc6:	6c 20       	st.w [%a2]0,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008dc8:	37 75 10 f8 	insert %d15,%d5,%d7,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
80008dcc:	76 44       	jz %d4,80008dd4 <osEE_tc_core1_start+0x326>
80008dce:	1b 03 fc 3f 	addi %d3,%d3,-64
80008dd2:	3c 83       	j 80008cd8 <osEE_tc_core1_start+0x22a>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
80008dd4:	cd cf e3 0f 	mtcr $lcx,%d15
80008dd8:	0d 00 c0 04 	isync 
80008ddc:	3c f9       	j 80008dce <osEE_tc_core1_start+0x320>

80008dde <osEE_tc_core2_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008dde:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008de2:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008de6:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008dea:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008dee:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x40028018>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008df2:	48 06       	ld.w %d6,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008df4:	37 02 6e 21 	extr.u %d2,%d2,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008df8:	37 06 6e 61 	extr.u %d6,%d6,2,14
80008dfc:	91 20 00 f5 	movh.a %a15,20482
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008e00:	8f f2 83 21 	xor %d2,%d2,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008e04:	8f f6 83 61 	xor %d6,%d6,63
80008e08:	d9 ff 40 8b 	lea %a15,[%a15]-18944 <5001b600 <__USTACK2>>
80008e0c:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80008e0e:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
80008e12:	3b 00 b8 f0 	mov %d15,2944
80008e16:	cd 4f e0 0f 	mtcr $psw,%d15
80008e1a:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008e1e:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008e22:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008e26:	cd 0f e0 0f 	mtcr $pcxi,%d15
80008e2a:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80008e2e:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008e32:	82 13       	mov %d3,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008e34:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008e38:	cd 43 20 09 	mtcr $pcon1,%d3
80008e3c:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008e40:	53 cf 20 f0 	mul %d15,%d15,12
80008e44:	10 22       	addsc.a %a2,%a2,%d15,0
80008e46:	54 23       	ld.w %d3,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008e48:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008e4a:	37 03 6e 31 	extr.u %d3,%d3,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008e4e:	d9 2f 00 46 	lea %a15,[%a2]24832
80008e52:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008e56:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008e58:	8f f3 83 31 	xor %d3,%d3,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008e5c:	2e 16       	jz.t %d15,1,80008e68 <osEE_tc_core2_start+0x8a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008e5e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008e62:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008e66:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008e68:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008e6c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008e70:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008e72:	4c f0       	ld.w %d15,[%a15]0
80008e74:	6f 0f ff ff 	jnz.t %d15,0,80008e72 <osEE_tc_core2_start+0x94>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
80008e78:	82 0f       	mov %d15,0
80008e7a:	cd cf 20 09 	mtcr $pcon0,%d15
80008e7e:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008e82:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008e84:	2e 16       	jz.t %d15,1,80008e90 <osEE_tc_core2_start+0xb2>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008e86:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008e8a:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008e8e:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008e90:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008e94:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008e98:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008e9a:	4c f0       	ld.w %d15,[%a15]0
80008e9c:	6f 0f ff 7f 	jz.t %d15,0,80008e9a <osEE_tc_core2_start+0xbc>
80008ea0:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008ea4:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ea8:	91 30 00 ff 	movh.a %a15,61443
80008eac:	53 cf 20 f0 	mul %d15,%d15,12
80008eb0:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008eb4:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008eb6:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008eb8:	48 03       	ld.w %d3,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008eba:	d9 2f 00 46 	lea %a15,[%a2]24832
80008ebe:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ec2:	37 03 6e 31 	extr.u %d3,%d3,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008ec6:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008ec8:	8f f3 83 31 	xor %d3,%d3,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008ecc:	2e 16       	jz.t %d15,1,80008ed8 <osEE_tc_core2_start+0xfa>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008ece:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008ed2:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008ed6:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008ed8:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008edc:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008ee0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008ee2:	4c f0       	ld.w %d15,[%a15]0
80008ee4:	6f 0f ff ff 	jnz.t %d15,0,80008ee2 <osEE_tc_core2_start+0x104>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
80008ee8:	82 0f       	mov %d15,0
80008eea:	cd 0f 04 09 	mtcr $dcon0,%d15
80008eee:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008ef2:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008ef4:	2e 16       	jz.t %d15,1,80008f00 <osEE_tc_core2_start+0x122>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008ef6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008efa:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008efe:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008f00:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008f04:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008f08:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008f0a:	4c f0       	ld.w %d15,[%a15]0
80008f0c:	6f 0f ff 7f 	jz.t %d15,0,80008f0a <osEE_tc_core2_start+0x12c>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008f10:	91 30 00 ff 	movh.a %a15,61443
80008f14:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80008f18:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008f1a:	2e 16       	jz.t %d15,1,80008f26 <osEE_tc_core2_start+0x148>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008f1c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008f20:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008f24:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008f26:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008f2a:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008f2e:	91 30 00 ff 	movh.a %a15,61443
80008f32:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80008f36:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008f38:	40 f2       	mov.aa %a2,%a15
80008f3a:	4c 20       	ld.w %d15,[%a2]0
80008f3c:	91 30 00 ff 	movh.a %a15,61443
80008f40:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80008f44:	6f 0f fb ff 	jnz.t %d15,0,80008f3a <osEE_tc_core2_start+0x15c>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(2U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB2);
80008f48:	7b 00 00 f8 	movh %d15,32768
80008f4c:	1b 0f 30 f1 	addi %d15,%d15,4864
80008f50:	cd 4f e2 0f 	mtcr $btv,%d15
80008f54:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB2);
80008f58:	7b 10 00 f8 	movh %d15,32769
80008f5c:	1b 0f 00 f2 	addi %d15,%d15,8192
80008f60:	cd 0f e2 0f 	mtcr $biv,%d15
80008f64:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK2);
80008f68:	7b 20 00 f5 	movh %d15,20482
80008f6c:	1b 0f b0 fb 	addi %d15,%d15,-17664
80008f70:	cd 8f e2 0f 	mtcr $isp,%d15
80008f74:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008f78:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008f7a:	2e 16       	jz.t %d15,1,80008f86 <osEE_tc_core2_start+0x1a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008f7c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008f80:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008f84:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008f86:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008f8a:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008f8e:	91 30 00 ff 	movh.a %a15,61443
80008f92:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80008f96:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008f98:	4c f0       	ld.w %d15,[%a15]0
80008f9a:	6f 0f ff 7f 	jz.t %d15,0,80008f98 <osEE_tc_core2_start+0x1ba>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(2U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
80008f9e:	91 10 00 f7 	movh.a %a15,28673
80008fa2:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
80008fa6:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
80008fa8:	91 10 00 f8 	movh.a %a15,32769
80008fac:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
80008fb0:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
80008fb2:	91 10 00 f8 	movh.a %a15,32769
80008fb6:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
80008fba:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
#else
  osEE_tc_setareg(a9, &osEE_cdb_var_core2);
80008fbc:	91 00 00 f8 	movh.a %a15,32768
80008fc0:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_cdb_var_core2>>
80008fc4:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
80008fc6:	7b 20 00 35 	movh %d3,20482
80008fca:	7b 20 00 55 	movh %d5,20482
80008fce:	1b 03 c0 7b 	addi %d7,%d3,-17408
80008fd2:	1b 05 c0 5d 	addi %d5,%d5,-9216
80008fd6:	a2 75       	sub %d5,%d7
80008fd8:	86 a5       	sha %d5,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
80008fda:	82 0f       	mov %d15,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
80008fdc:	df 05 1d 00 	jeq %d5,0,80009016 <osEE_tc_core2_start+0x238>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80008fe0:	1b f5 ff 3f 	addi %d3,%d5,-1
80008fe4:	06 63       	sh %d3,6
80008fe6:	0b 73 00 40 	add %d4,%d3,%d7

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008fea:	60 4f       	mov.a %a15,%d4
80008fec:	82 01       	mov %d1,0
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008fee:	8f 44 1e f0 	sh %d15,%d4,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008ff2:	37 04 70 03 	extr.u %d0,%d4,6,16
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008ff6:	68 01       	st.w [%a15]0,%d1
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008ff8:	60 5f       	mov.a %a15,%d5
80008ffa:	1b 03 fc 3f 	addi %d3,%d3,-64
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008ffe:	37 f0 10 f8 	insert %d15,%d0,%d15,16,16
80009002:	42 73       	add %d3,%d7

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009004:	82 54       	mov %d4,5
80009006:	b0 ff       	add.a %a15,-1
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80009008:	8f 43 1e 70 	sh %d7,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
8000900c:	37 03 70 53 	extr.u %d5,%d3,6,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009010:	c2 f4       	add %d4,-1
80009012:	fd f0 71 00 	loop %a15,800090f4 <osEE_tc_core2_start+0x316>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
80009016:	cd 8f e3 0f 	mtcr $fcx,%d15
8000901a:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
8000901e:	91 30 00 ff 	movh.a %a15,61443
80009022:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80009026:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009028:	2e 16       	jz.t %d15,1,80009034 <osEE_tc_core2_start+0x256>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000902a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000902e:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009032:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80009034:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80009038:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000903c:	91 30 00 ff 	movh.a %a15,61443
80009040:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80009044:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80009046:	40 f2       	mov.aa %a2,%a15
80009048:	4c 20       	ld.w %d15,[%a2]0
8000904a:	91 30 00 ff 	movh.a %a15,61443
8000904e:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80009052:	6f 0f fb ff 	jnz.t %d15,0,80009048 <osEE_tc_core2_start+0x26a>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
80009056:	91 30 00 2f 	movh.a %a2,61443
8000905a:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000905e:	4c 27       	ld.w %d15,[%a2]28
80009060:	96 08       	or %d15,8
80009062:	6c 27       	st.w [%a2]28,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009064:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009066:	2e 16       	jz.t %d15,1,80009072 <osEE_tc_core2_start+0x294>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009068:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000906c:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009070:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80009072:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80009076:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000907a:	91 30 00 ff 	movh.a %a15,61443
8000907e:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80009082:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80009084:	4c f0       	ld.w %d15,[%a15]0
80009086:	6f 0f ff 7f 	jz.t %d15,0,80009084 <osEE_tc_core2_start+0x2a6>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
8000908a:	91 30 00 ff 	movh.a %a15,61443
8000908e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009092:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80009094:	2e 16       	jz.t %d15,1,800090a0 <osEE_tc_core2_start+0x2c2>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80009096:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
8000909a:	37 6f 0e f1 	insert %d15,%d15,%d6,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
8000909e:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800090a0:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800090a4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800090a8:	91 30 00 ff 	movh.a %a15,61443
800090ac:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800090b0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800090b2:	40 f2       	mov.aa %a2,%a15
800090b4:	4c 20       	ld.w %d15,[%a2]0
800090b6:	91 30 00 ff 	movh.a %a15,61443
800090ba:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800090be:	6f 0f fb ff 	jnz.t %d15,0,800090b4 <osEE_tc_core2_start+0x2d6>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
800090c2:	4c f1       	ld.w %d15,[%a15]4
800090c4:	96 08       	or %d15,8
800090c6:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800090c8:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800090ca:	2e 16       	jz.t %d15,1,800090d6 <osEE_tc_core2_start+0x2f8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800090cc:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800090d0:	37 6f 0e f1 	insert %d15,%d15,%d6,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800090d4:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
800090d6:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
800090da:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
800090de:	91 30 00 ff 	movh.a %a15,61443
800090e2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800090e6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
800090e8:	4c f0       	ld.w %d15,[%a15]0
800090ea:	6f 0f ff 7f 	jz.t %d15,0,800090e8 <osEE_tc_core2_start+0x30a>
/* C core 2 private initialization */
  _c_init_tc2();
#endif /* __TASKING__ */

/* Call main function */
  (void)main();
800090ee:	6d ff a4 d9 	call 80004436 <main>
  
/* TODO: handle main return */
  for (;;) {
    ;
  }
800090f2:	3c 00       	j 800090f2 <osEE_tc_core2_start+0x314>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
800090f4:	60 32       	mov.a %a2,%d3
800090f6:	6c 20       	st.w [%a2]0,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
800090f8:	37 75 10 f8 	insert %d15,%d5,%d7,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
800090fc:	76 44       	jz %d4,80009104 <osEE_tc_core2_start+0x326>
800090fe:	1b 03 fc 3f 	addi %d3,%d3,-64
80009102:	3c 83       	j 80009008 <osEE_tc_core2_start+0x22a>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
80009104:	cd cf e3 0f 	mtcr $lcx,%d15
80009108:	0d 00 c0 04 	isync 
8000910c:	3c f9       	j 800090fe <osEE_tc_core2_start+0x320>

8000910e <osEE_tc_stm_us_ticks>:
#if (defined(__TASKING__))
#define OS_STOP_SEC_GLOBAL_VAR_CLEARED
#include "Os_MemMap.h"
#endif /* __TASKING__ */

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
8000910e:	40 ae       	mov.aa %a14,%sp
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
80009110:	91 00 00 f7 	movh.a %a15,28672
80009114:	19 ff a0 c0 	ld.w %d15,[%a15]2848 <70000b20 <osEE_tc_stm_freq_khz>>
80009118:	3b 80 3e 20 	mov %d2,1000
8000911c:	3f 2f 0c 80 	jlt.u %d15,%d2,80009134 <osEE_tc_stm_us_ticks+0x26>
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
80009120:	7b 20 06 21 	movh %d2,4194
80009124:	1b 32 dd 24 	addi %d2,%d2,19923
80009128:	73 2f 68 20 	mul.u %e2,%d15,%d2
8000912c:	8f a3 1f 20 	sh %d2,%d3,-6
80009130:	e2 42       	mul %d2,%d4
80009132:	00 90       	ret 
  } else if (usec >= OSEE_KILO) {
80009134:	02 25       	mov %d5,%d2
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
80009136:	73 f4 0a 20 	mul %d2,%d4,%d15
8000913a:	7b 20 06 31 	movh %d3,4194
8000913e:	1b 33 dd 34 	addi %d3,%d3,19923
80009142:	73 32 68 20 	mul.u %e2,%d2,%d3
80009146:	8f a3 1f 20 	sh %d2,%d3,-6

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
  } else if (usec >= OSEE_KILO) {
8000914a:	3f 54 0b 80 	jlt.u %d4,%d5,80009160 <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
8000914e:	7b 20 06 21 	movh %d2,4194
80009152:	1b 32 dd 24 	addi %d2,%d2,19923
80009156:	73 24 68 40 	mul.u %e4,%d4,%d2
8000915a:	8f a5 1f 20 	sh %d2,%d5,-6
8000915e:	e2 f2       	mul %d2,%d15
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
  }
  return ticks;
}
80009160:	00 90       	ret 

80009162 <osEE_tc_set_pll_fsource>:
#define OSEE_TC_K2_MIN      (1U)
#define OSEE_TC_N_MAX       (128U)  /* '7 bits */
#define OSEE_TC_N_MIN       (1U)
#define OSEE_TC_DEV_ALLOWED (2U)

void osEE_tc_set_pll_fsource(OsEE_reg fpll) {
80009162:	40 ae       	mov.aa %a14,%sp
  fPllLeastError  = OSEE_TC_CLOCK_MAX;
  fPllError       = OSEE_TC_CLOCK_MAX;

  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
80009164:	7b e0 e4 20 	movh %d2,3662
80009168:	1b 12 c0 21 	addi %d2,%d2,7169
8000916c:	0b 24 30 f1 	lt.u %d15,%d4,%d2
80009170:	82 22       	mov %d2,2
80009172:	ab 12 80 ff 	sel %d15,%d15,%d2,1
80009176:	60 f4       	mov.a %a4,%d15
80009178:	53 ff 20 f0 	mul %d15,%d15,15
8000917c:	60 f5       	mov.a %a5,%d15
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
8000917e:	3b 00 01 e0 	mov %d14,16
80009182:	82 03       	mov %d3,0
80009184:	7b c0 be 20 	movh %d2,3052
80009188:	1b 02 20 2c 	addi %d2,%d2,-15872
8000918c:	02 28       	mov %d8,%d2
8000918e:	82 01       	mov %d1,0
80009190:	82 0b       	mov %d11,0
80009192:	82 0d       	mov %d13,0
80009194:	82 0c       	mov %d12,0
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
80009196:	7b 10 13 a0 	movh %d10,305
8000919a:	1b 0a d0 a2 	addi %d10,%d10,11520

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
8000919e:	91 40 0f 60 	movh.a %a6,244
800091a2:	d9 66 41 02 	lea %a6,[%a6]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
    {
      for (
800091a6:	a0 1d       	mov.a %a13,1
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
800091a8:	53 14 40 60 	mul.u %e6,%d4,1
800091ac:	60 62       	mov.a %a2,%d6
800091ae:	60 73       	mov.a %a3,%d7

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
800091b0:	91 80 7d f1 	movh.a %a15,6104
800091b4:	d9 ff 41 08 	lea %a15,[%a15]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
        {
          for (
800091b8:	a0 1c       	mov.a %a12,1
800091ba:	3c 5e       	j 80009276 <osEE_tc_set_pll_fsource+0x114>
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
800091bc:	4b ea 11 62 	div.u %e6,%d10,%d14
800091c0:	82 07       	mov %d7,0

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
800091c2:	7b 60 f8 ff 	movh %d15,65414
800091c6:	1b 0f e0 fe 	addi %d15,%d15,-4608
800091ca:	0b f6 40 60 	addx %d6,%d6,%d15
800091ce:	8b f7 bf 50 	addc %d5,%d7,-1
800091d2:	ba 05       	eq %d15,%d5,0
800091d4:	80 67       	mov.d %d7,%a6
800091d6:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
800091da:	8b 05 00 f5 	or.ne %d15,%d5,0
800091de:	ee 4a       	jnz %d15,80009272 <osEE_tc_set_pll_fsource+0x110>
    {
      for (
800091e0:	df 00 56 00 	jeq %d0,0,8000928c <osEE_tc_set_pll_fsource+0x12a>
800091e4:	02 e9       	mov %d9,%d14
800091e6:	80 d0       	mov.d %d0,%a13
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
800091e8:	60 e7       	mov.a %a7,%d14
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
800091ea:	80 2f       	mov.d %d15,%a2
800091ec:	73 f0 68 60 	mul.u %e6,%d0,%d15
800091f0:	80 3f       	mov.d %d15,%a3
800091f2:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
800091f6:	7b 80 82 fe 	movh %d15,59432
800091fa:	1b 0f c0 f7 	addi %d15,%d15,31744
800091fe:	0b f6 40 60 	addx %d6,%d6,%d15
80009202:	8b f7 bf 50 	addc %d5,%d7,-1
80009206:	ba 05       	eq %d15,%d5,0
80009208:	80 f7       	mov.d %d7,%a15
8000920a:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
8000920e:	8b 05 00 f5 	or.ne %d15,%d5,0
80009212:	ee 25       	jnz %d15,8000925c <osEE_tc_set_pll_fsource+0xfa>
        {
          for (
80009214:	0f 23 a0 f0 	or %d15,%d3,%d2
80009218:	6e 2d       	jz %d15,80009272 <osEE_tc_set_pll_fsource+0x110>
8000921a:	80 c6       	mov.d %d6,%a12
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
8000921c:	4b 96 11 22 	div.u %e2,%d6,%d9
80009220:	02 2f       	mov %d15,%d2
80009222:	e2 af       	mul %d15,%d10
80009224:	a2 4f       	sub %d15,%d4
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
80009226:	53 1f 40 20 	mul.u %e2,%d15,1
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
8000922a:	df 0f ac 00 	jeq %d15,0,80009382 <osEE_tc_set_pll_fsource+0x220>
              bestK2         = k2;
              bestN          = n;
              bestP          = p;
            }

            if (fPllLeastError > fPllError)
8000922e:	0b 13 00 51 	eq %d5,%d3,%d1
80009232:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
80009236:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
8000923a:	ab 01 80 15 	sel %d1,%d5,%d1,0
8000923e:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
80009242:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
80009246:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
8000924a:	c2 16       	add %d6,1
      {
        fVco = ((uint64_t)fpll) * k2;

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
8000924c:	8b 16 68 52 	lt.u %d5,%d6,129
80009250:	8b 0f 20 54 	and.ne %d5,%d15,0
80009254:	df 05 e4 ff 	jne %d5,0,8000921c <osEE_tc_set_pll_fsource+0xba>
80009258:	02 d6       	mov %d6,%d13
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
8000925a:	02 6d       	mov %d13,%d6
    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
8000925c:	80 4f       	mov.d %d15,%a4
8000925e:	42 f0       	add %d0,%d15
80009260:	80 56       	mov.d %d6,%a5
80009262:	42 69       	add %d9,%d6

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
80009264:	0f 32 a0 50 	or %d5,%d2,%d3
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
80009268:	8b d0 61 f2 	lt.u %d15,%d0,29
8000926c:	8b 05 20 f4 	and.ne %d15,%d5,0
80009270:	ee bd       	jnz %d15,800091ea <osEE_tc_set_pll_fsource+0x88>
80009272:	01 45 20 50 	sub.a %a5,%a5,%a4
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80009276:	c2 fe       	add %d14,-1
    k2Steps = 1;
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
80009278:	0f 32 a0 f0 	or %d15,%d2,%d3
8000927c:	8b 0f 20 02 	ne %d0,%d15,0
  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
  }

  for (
80009280:	8b 0e 20 52 	ne %d5,%d14,0
80009284:	8b 0f 20 54 	and.ne %d5,%d15,0
80009288:	df 05 9a ff 	jne %d5,0,800091bc <osEE_tc_set_pll_fsource+0x5a>
      }
    }
  }

  /* Percent ALLOWED_DEVIATION error allowed */
  fpll_maxerrorallowed = (fpll * OSEE_TC_DEV_ALLOWED) / ((OsEE_reg)100U);
8000928c:	06 14       	sh %d4,1
8000928e:	7b c0 1e f5 	movh %d15,20972
80009292:	1b ff 51 f8 	addi %d15,%d15,-31457
80009296:	73 f4 68 40 	mul.u %e4,%d4,%d15
8000929a:	8f b5 1f 20 	sh %d2,%d5,-5
  if (fPllLeastError < (uint64_t)fpll_maxerrorallowed)
8000929e:	ba 01       	eq %d15,%d1,0
800092a0:	0b 28 50 f2 	and.ge.u %d15,%d8,%d2
800092a4:	8b 01 00 f5 	or.ne %d15,%d1,0
800092a8:	ee 73       	jnz %d15,8000938e <osEE_tc_set_pll_fsource+0x22c>
  {
    /* Divide by K2DIV + 1 */
    OSEE_TC_SCU_PLLCON1.bits.k2div = (uint8_t)(bestK2 - 1U);
800092aa:	c2 fc       	add %d12,-1
800092ac:	91 30 00 ff 	movh.a %a15,61443
800092b0:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800092b4:	4c f0       	ld.w %d15,[%a15]0
800092b6:	37 cf 07 c0 	insert %d12,%d15,%d12,0,7
800092ba:	68 0c       	st.w [%a15]0,%d12

    while (OSEE_TC_SCU_PLLSTAT.bits.k2rdy == 0U) {
800092bc:	91 30 00 ff 	movh.a %a15,61443
800092c0:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800092c4:	4c f0       	ld.w %d15,[%a15]0
800092c6:	6f 5f ff 7f 	jz.t %d15,5,800092c4 <osEE_tc_set_pll_fsource+0x162>
    }

    /* K1 divider default value */

    /* Enabled the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 1U;
800092ca:	91 30 00 ff 	movh.a %a15,61443
800092ce:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800092d2:	4c f0       	ld.w %d15,[%a15]0
800092d4:	96 01       	or %d15,1
800092d6:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
800092d8:	91 30 00 ff 	movh.a %a15,61443
800092dc:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800092e0:	4c f0       	ld.w %d15,[%a15]0
800092e2:	6f 0f ff 7f 	jz.t %d15,0,800092e0 <osEE_tc_set_pll_fsource+0x17e>
      ; /* Wait until prescaler mode is entered */
    }

    /* I will use n=80 and p=2. Because I can get al the
       needed values */
    OSEE_TC_SCU_PLLCON0.bits.pdiv = (uint8_t)(bestP - 1U);
800092e6:	9a fb       	add %d15,%d11,-1
800092e8:	91 30 00 ff 	movh.a %a15,61443
800092ec:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800092f0:	16 0f       	and %d15,15
800092f2:	8f 8f 01 f0 	sh %d15,%d15,24
800092f6:	48 02       	ld.w %d2,[%a15]0
800092f8:	b7 02 04 2c 	insert %d2,%d2,0,24,4
800092fc:	a6 2f       	or %d15,%d2
800092fe:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_PLLCON0.bits.ndiv = (uint8_t)(bestN - 1U);
80009300:	9a fd       	add %d15,%d13,-1
80009302:	16 7f       	and %d15,127
80009304:	8f 9f 00 f0 	sh %d15,%d15,9
80009308:	48 02       	ld.w %d2,[%a15]0
8000930a:	b7 02 87 24 	insert %d2,%d2,0,9,7
8000930e:	a6 2f       	or %d15,%d2
80009310:	68 0f       	st.w [%a15]0,%d15

    /* Power down VCO Normal Behavior */
    OSEE_TC_SCU_PLLCON0.bits.vcopwd = 0U;
80009312:	4c f0       	ld.w %d15,[%a15]0
80009314:	8f 2f c0 f1 	andn %d15,%d15,2
80009318:	68 0f       	st.w [%a15]0,%d15

    /***** Configure PLL normal mode. *****/

    /* Automatic oscillator disconnect disabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 1U;
8000931a:	4c f0       	ld.w %d15,[%a15]0
8000931c:	96 40       	or %d15,64
8000931e:	68 0f       	st.w [%a15]0,%d15
    /* Connect VCO to the oscillator */
    OSEE_TC_SCU_PLLCON0.bits.clrfindis = 1U;
80009320:	4c f0       	ld.w %d15,[%a15]0
80009322:	96 20       	or %d15,32
80009324:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.findis == 1U) {
80009326:	91 30 00 ff 	movh.a %a15,61443
8000932a:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000932e:	4c f0       	ld.w %d15,[%a15]0
80009330:	6f 3f ff ff 	jnz.t %d15,3,8000932e <osEE_tc_set_pll_fsource+0x1cc>
      ; /* Wait until oscillator is connected to the VCO */
    }

    /* Restart VCO lock detection */
    OSEE_TC_SCU_PLLCON0.bits.resld = 1U;
80009334:	91 30 00 ff 	movh.a %a15,61443
80009338:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000933c:	4c f0       	ld.w %d15,[%a15]0
8000933e:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80009342:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
80009344:	91 30 00 ff 	movh.a %a15,61443
80009348:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000934c:	4c f0       	ld.w %d15,[%a15]0
8000934e:	6f 2f ff 7f 	jz.t %d15,2,8000934c <osEE_tc_set_pll_fsource+0x1ea>
      ; /* Wait until the VCO becomes locked */
    }

    /* Disable the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 0U;
80009352:	91 30 00 ff 	movh.a %a15,61443
80009356:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000935a:	4c f0       	ld.w %d15,[%a15]0
8000935c:	8f 1f c0 f1 	andn %d15,%d15,1
80009360:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
80009362:	91 30 00 ff 	movh.a %a15,61443
80009366:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000936a:	4c f0       	ld.w %d15,[%a15]0
8000936c:	6f 0f ff ff 	jnz.t %d15,0,8000936a <osEE_tc_set_pll_fsource+0x208>
      ; /* Wait until normal mode is entered */
    }

    /* Automatic oscillator disconnect enabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
80009370:	91 30 00 ff 	movh.a %a15,61443
80009374:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009378:	4c f0       	ld.w %d15,[%a15]0
8000937a:	8f 0f c4 f1 	andn %d15,%d15,64
8000937e:	68 0f       	st.w [%a15]0,%d15
80009380:	00 90       	ret 
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
            {
              fPllLeastError = fPllError;
80009382:	02 28       	mov %d8,%d2
80009384:	02 31       	mov %d1,%d3
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80009386:	80 7b       	mov.d %d11,%a7
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80009388:	02 0c       	mov %d12,%d0
8000938a:	1d ff 68 ff 	j 8000925a <osEE_tc_set_pll_fsource+0xf8>
8000938e:	00 90       	ret 

80009390 <osEE_tc_get_fsource>:
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
  }

}

OsEE_reg osEE_tc_get_fsource(void) {
80009390:	40 ae       	mov.aa %a14,%sp
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
80009392:	91 30 00 ff 	movh.a %a15,61443
80009396:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000939a:	4c f0       	ld.w %d15,[%a15]0
8000939c:	37 0f 62 fe 	extr.u %d15,%d15,28,2
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
      }
    }
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
800093a0:	7b 60 5f 20 	movh %d2,1526
800093a4:	1b 02 10 2e 	addi %d2,%d2,-7936

OsEE_reg osEE_tc_get_fsource(void) {
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
800093a8:	6e 45       	jz %d15,80009432 <osEE_tc_get_fsource+0xa2>
    /* PLL */
    /* PLL dividers */
    OsEE_reg k1, k2, p, n;
    /* Prescaler mode */
    if (OSEE_TC_SCU_PLLSTAT.bits.vcobyst != 0U)
800093aa:	91 30 00 ff 	movh.a %a15,61443
800093ae:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800093b2:	4c f0       	ld.w %d15,[%a15]0
800093b4:	6f 0f 11 00 	jz.t %d15,0,800093d6 <osEE_tc_get_fsource+0x46>
    {
      k1 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k1div + 1U;
800093b8:	91 30 00 ff 	movh.a %a15,61443
800093bc:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800093c0:	48 02       	ld.w %d2,[%a15]0
800093c2:	37 02 67 28 	extr.u %d2,%d2,16,7
800093c6:	c2 12       	add %d2,1
      fsource = OSEE_TC_BOARD_FOSC / k1;
800093c8:	7b 10 13 f0 	movh %d15,305
800093cc:	1b 0f d0 f2 	addi %d15,%d15,11520
800093d0:	4b 2f 11 22 	div.u %e2,%d15,%d2
800093d4:	00 90       	ret 
    } else {
      /* Free running mode */
      if (OSEE_TC_SCU_PLLSTAT.bits.findis != 0U)
800093d6:	4c f0       	ld.w %d15,[%a15]0
800093d8:	6f 3f 11 00 	jz.t %d15,3,800093fa <osEE_tc_get_fsource+0x6a>
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
800093dc:	91 30 00 ff 	movh.a %a15,61443
800093e0:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800093e4:	48 02       	ld.w %d2,[%a15]0
800093e6:	8f f2 07 21 	and %d2,%d2,127
800093ea:	9a 12       	add %d15,%d2,1
        fsource = OSEE_TC_BOARD_FOSC / k2;
800093ec:	7b 10 13 20 	movh %d2,305
800093f0:	1b 02 d0 22 	addi %d2,%d2,11520
800093f4:	4b f2 11 22 	div.u %e2,%d2,%d15
800093f8:	00 90       	ret 
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
800093fa:	91 30 00 ff 	movh.a %a15,61443
800093fe:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009402:	4c f0       	ld.w %d15,[%a15]0
80009404:	8f ff 07 51 	and %d5,%d15,127
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
80009408:	91 30 00 ff 	movh.a %a15,61443
8000940c:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009410:	4c f0       	ld.w %d15,[%a15]0
80009412:	37 0f 64 3c 	extr.u %d3,%d15,24,4
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;
80009416:	48 02       	ld.w %d2,[%a15]0
80009418:	37 02 e7 44 	extr.u %d4,%d2,9,7
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
        fsource = OSEE_TC_BOARD_FOSC / k2;
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
8000941c:	9a 15       	add %d15,%d5,1
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;

        /* cpu clock value fclk = (fosc * n)/(P * k2) */
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
8000941e:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80009422:	7b 10 13 20 	movh %d2,305
80009426:	1b 02 d0 22 	addi %d2,%d2,11520
8000942a:	4b f2 11 22 	div.u %e2,%d2,%d15
8000942e:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
  }
  return fsource;
}
80009432:	00 90       	ret 

80009434 <osEE_tc_stm_set_clockpersec>:
  return ticks;
}

/* Set inside std time reference  */
void osEE_tc_stm_set_clockpersec(void)
{
80009434:	40 ae       	mov.aa %a14,%sp
#if (defined(__TASKING__))
  /* I don't know where is declared */
  extern unsigned long long setfoschz ( unsigned long long );
#endif /* __TASKING__ */
  /* fSOURCE Frequency */
  OsEE_reg const fsource  = osEE_tc_get_fsource();
80009436:	6d ff ad ff 	call 80009390 <osEE_tc_get_fsource>
  /* Standard Timer Module period rounded */
  OsEE_reg const fstm     = (fsource + 1U) / OSEE_SCU_HW_FSTM_DIV;
8000943a:	91 30 00 ff 	movh.a %a15,61443
8000943e:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80009442:	4c f0       	ld.w %d15,[%a15]0
80009444:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80009448:	c2 12       	add %d2,1
8000944a:	4b f2 11 22 	div.u %e2,%d2,%d15

  /* Set Global variable with freq in Khz value */
  osEE_tc_stm_freq_khz = fstm / OSEE_KILO;
8000944e:	7b 20 06 f1 	movh %d15,4194
80009452:	1b 3f dd f4 	addi %d15,%d15,19923
80009456:	73 f2 68 20 	mul.u %e2,%d2,%d15
8000945a:	8f a3 1f f0 	sh %d15,%d3,-6
8000945e:	91 00 00 f7 	movh.a %a15,28672
80009462:	59 ff a0 c0 	st.w [%a15]2848 <70000b20 <osEE_tc_stm_freq_khz>>,%d15
80009466:	00 90       	ret 

80009468 <osEE_tc_stm_set_sr0>:
    that qualifier on pointers.
 */

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0(OsEE_reg usec,
    OsEE_tc_isr_hw_prio intvec)
{
80009468:	40 ae       	mov.aa %a14,%sp
8000946a:	02 59       	mov %d9,%d5
8000946c:	4d c0 e1 8f 	mfcr %d8,$core_id
    5U;
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80009470:	6d ff 4f fe 	call 8000910e <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
80009474:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
80009478:	8f 38 00 f1 	and %d15,%d8,3
8000947c:	9b 0f 0f 40 	addih %d4,%d15,240
80009480:	8f 84 00 40 	sh %d4,%d4,8
80009484:	60 4f       	mov.a %a15,%d4
 *  \return The timer lower word value read.
 */
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_tc_stm_get_time_lower_word(OsEE_reg stm_id)
{
  return OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_TIM0_OFF);
80009486:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
80009488:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
8000948a:	68 c2       	st.w [%a15]48,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
8000948c:	df 09 23 00 	jeq %d9,0,800094d2 <osEE_tc_stm_set_sr0+0x6a>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
80009490:	48 e2       	ld.w %d2,[%a15]56
80009492:	b7 02 05 24 	insert %d2,%d2,0,8,5
80009496:	68 e2       	st.w [%a15]56,%d2
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
80009498:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize0   = size_of_compare;
8000949c:	48 e2       	ld.w %d2,[%a15]56
8000949e:	37 32 05 30 	insert %d3,%d2,%d3,0,5
800094a2:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 0 with Compare Register 0 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0os     = 0U;
800094a4:	48 f2       	ld.w %d2,[%a15]60
800094a6:	8f 42 c0 21 	andn %d2,%d2,4
800094aa:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en     = 1U;
800094ac:	48 f2       	ld.w %d2,[%a15]60
800094ae:	8f 12 40 21 	or %d2,%d2,1
800094b2:	68 f2       	st.w [%a15]60,%d2

/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 0U), intvec);
800094b4:	06 3f       	sh %d15,3
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800094b6:	60 f2       	mov.a %a2,%d15
800094b8:	d9 2f 50 28 	lea %a15,[%a2]-31600
800094bc:	11 4f 00 ff 	addih.a %a15,%a15,61444
800094c0:	b7 89 99 93 	insert %d9,%d9,8,7,25
800094c4:	8f 38 00 81 	and %d8,%d8,3
800094c8:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
800094cc:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800094ce:	68 09       	st.w [%a15]0,%d9
800094d0:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en                 = 0U;
800094d2:	48 f2       	ld.w %d2,[%a15]60
800094d4:	8f 12 c0 21 	andn %d2,%d2,1
800094d8:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 0U)) = 0U;
800094da:	1b 2f 09 f7 	addi %d15,%d15,28818
800094de:	9b 0f e0 f1 	addih %d15,%d15,7680
800094e2:	06 3f       	sh %d15,3
800094e4:	82 02       	mov %d2,0
800094e6:	60 ff       	mov.a %a15,%d15
800094e8:	68 02       	st.w [%a15]0,%d2
800094ea:	00 90       	ret 

800094ec <osEE_tc_stm_set_sr0_next_match>:
  }
}

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0_next_match(OsEE_reg usec)
{
800094ec:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
800094ee:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP0IRR bit 0 => 0x1 | CMP0IRS bit 1 => 0x2 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x1U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) += osEE_tc_stm_us_ticks(usec);
800094f2:	6d ff 0e fe 	call 8000910e <osEE_tc_stm_us_ticks>
800094f6:	16 03       	and %d15,3
800094f8:	9b 0f 0f f0 	addih %d15,%d15,240
800094fc:	8f 8f 00 f0 	sh %d15,%d15,8
80009500:	60 ff       	mov.a %a15,%d15
80009502:	4c fc       	ld.w %d15,[%a15]48
80009504:	42 f2       	add %d2,%d15
80009506:	68 c2       	st.w [%a15]48,%d2
80009508:	00 90       	ret 

8000950a <osEE_tc_stm_set_sr1>:
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1(OsEE_reg usec,
  OsEE_tc_isr_hw_prio intvec)
{
8000950a:	40 ae       	mov.aa %a14,%sp
8000950c:	02 59       	mov %d9,%d5
8000950e:	4d c0 e1 8f 	mfcr %d8,$core_id
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80009512:	6d ff fe fd 	call 8000910e <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
80009516:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
8000951a:	8f 38 00 f1 	and %d15,%d8,3
8000951e:	9b 0f 0f 40 	addih %d4,%d15,240
80009522:	8f 84 00 40 	sh %d4,%d4,8
80009526:	60 4f       	mov.a %a15,%d4
80009528:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
8000952a:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
8000952c:	68 d2       	st.w [%a15]52,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
8000952e:	df 09 28 00 	jeq %d9,0,8000957e <osEE_tc_stm_set_sr1+0x74>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
80009532:	48 e2       	ld.w %d2,[%a15]56
80009534:	b7 02 05 2c 	insert %d2,%d2,0,24,5
80009538:	68 e2       	st.w [%a15]56,%d2
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
8000953a:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize1   = size_of_compare;
8000953e:	8f f3 01 31 	and %d3,%d3,31
80009542:	8f 03 01 30 	sh %d3,%d3,16
80009546:	48 e2       	ld.w %d2,[%a15]56
80009548:	b7 02 05 28 	insert %d2,%d2,0,16,5
8000954c:	a6 23       	or %d3,%d2
8000954e:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 1 with Compare Register 1 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1os     = 1U;
80009550:	48 f2       	ld.w %d2,[%a15]60
80009552:	8f 02 44 21 	or %d2,%d2,64
80009556:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en     = 1U;
80009558:	48 f2       	ld.w %d2,[%a15]60
8000955a:	8f 02 41 21 	or %d2,%d2,16
8000955e:	68 f2       	st.w [%a15]60,%d2
/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 1U), intvec);
80009560:	06 3f       	sh %d15,3
80009562:	60 f2       	mov.a %a2,%d15
80009564:	d9 2f 54 28 	lea %a15,[%a2]-31596
80009568:	11 4f 00 ff 	addih.a %a15,%a15,61444
8000956c:	b7 89 99 93 	insert %d9,%d9,8,7,25
80009570:	8f 38 00 81 	and %d8,%d8,3
80009574:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
80009578:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000957a:	68 09       	st.w [%a15]0,%d9
8000957c:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en                 = 0U;
8000957e:	48 f2       	ld.w %d2,[%a15]60
80009580:	8f 02 c1 21 	andn %d2,%d2,16
80009584:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 1U)) = 0U;
80009586:	06 3f       	sh %d15,3
80009588:	60 f2       	mov.a %a2,%d15
8000958a:	d9 2f 54 28 	lea %a15,[%a2]-31596
8000958e:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009592:	82 0f       	mov %d15,0
80009594:	68 0f       	st.w [%a15]0,%d15
80009596:	00 90       	ret 

80009598 <osEE_tc_stm_set_sr1_next_match>:
  }
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1_next_match(OsEE_reg usec)
{
80009598:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000959a:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP1IRR bit 2 => 0x4 | CMP1IRS bit 3 => 0x8 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x4U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) += osEE_tc_stm_us_ticks(usec);
8000959e:	6d ff b8 fd 	call 8000910e <osEE_tc_stm_us_ticks>
800095a2:	16 03       	and %d15,3
800095a4:	9b 0f 0f f0 	addih %d15,%d15,240
800095a8:	8f 8f 00 f0 	sh %d15,%d15,8
800095ac:	60 ff       	mov.a %a15,%d15
800095ae:	4c fd       	ld.w %d15,[%a15]52
800095b0:	42 f2       	add %d2,%d15
800095b2:	68 d2       	st.w [%a15]52,%d2
800095b4:	00 90       	ret 

800095b6 <osEE_tc_delay>:
}

void osEE_tc_delay(OsEE_reg usec)
{
800095b6:	40 ae       	mov.aa %a14,%sp
800095b8:	4d c0 e1 ff 	mfcr %d15,$core_id
800095bc:	16 03       	and %d15,3
800095be:	9b 0f 0f f0 	addih %d15,%d15,240
800095c2:	8f 8f 00 f0 	sh %d15,%d15,8
800095c6:	60 f2       	mov.a %a2,%d15
800095c8:	d9 2f 10 00 	lea %a15,[%a2]16
800095cc:	19 28 10 00 	ld.w %d8,[%a2]16
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
  /* Read Start Point */
  OsEE_reg    const start = osEE_tc_stm_get_time_lower_word(stm_id);
  /* Evaluate End Point */
  OsEE_reg    const ticks = osEE_tc_stm_us_ticks(usec);
800095d0:	6d ff 9f fd 	call 8000910e <osEE_tc_stm_us_ticks>
800095d4:	4c f0       	ld.w %d15,[%a15]0

  while (ticks > (osEE_tc_stm_get_time_lower_word(stm_id) - start)) {
800095d6:	a2 8f       	sub %d15,%d8
800095d8:	3f 2f fe ff 	jlt.u %d15,%d2,800095d4 <osEE_tc_delay+0x1e>
    ; /* Wait */
  }
}
800095dc:	00 90       	ret 

800095de <osEE_tc_isr2_wrapper>:

#if (defined(__GNUC__))
#pragma section
#endif /* __GNUC__ */

static void OSEE_COMPILER_KEEP osEE_tc_isr2_wrapper(TaskType isr2_tid) {
800095de:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_SINGLECORE))
  if (isr2_tid == INVALID_TASK) {
800095e0:	df f4 5c 80 	jne %d4,-1,80009698 <osEE_tc_isr2_wrapper+0xba>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800095e4:	4d c0 e2 ff 	mfcr %d15,$icr
    OsEE_icr icr  = osEE_tc_get_icr();
    if (icr.bits.ccpn == 1U) {
800095e8:	16 ff       	and %d15,255
800095ea:	df 1f 59 80 	jne %d15,1,8000969c <osEE_tc_isr2_wrapper+0xbe>
      CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
      CONSTP2CONST(OsEE_KCB, AUTOMATIC, OS_APPL_DATA) p_kcb = p_kdb->p_kcb;
800095ee:	91 00 00 f8 	movh.a %a15,32768
800095f2:	99 f2 00 40 	ld.a %a2,[%a15]256 <80000100 <osEE_kdb_var>>
800095f6:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800095fa:	8f f8 0f f1 	and %d15,%d8,255
800095fe:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009602:	ee 0a       	jnz %d15,80009616 <osEE_tc_isr2_wrapper+0x38>
    OsEE_icr icr_temp = icr;
80009604:	02 8f       	mov %d15,%d8
80009606:	3b 30 01 20 	mov %d2,19
8000960a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000960e:	cd cf e2 0f 	mtcr $icr,%d15
80009612:	0d 00 c0 04 	isync 
80009616:	4d c0 e1 2f 	mfcr %d2,$core_id
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_ack_signal(void)
{
  CoreIdType core_id = osEE_get_curr_core_id();

  OSEE_TC_SRC_REG(OSEE_TC_GPSR_SRC_OFFSET(OSEE_TC_GPSR_G, core_id)) |=
8000961a:	8f f2 0f f1 	and %d15,%d2,255
8000961e:	91 40 00 ff 	movh.a %a15,61444
80009622:	d9 ff 00 09 	lea %a15,[%a15]-28672 <f0039000 <_SMALL_DATA4_+0x40031000>>
80009626:	ff 4f 0b 80 	jge.u %d15,4,8000963c <osEE_tc_isr2_wrapper+0x5e>
8000962a:	37 02 48 20 	extr %d2,%d2,0,8
8000962e:	60 23       	mov.a %a3,%d2
80009630:	d9 3f 40 0e 	lea %a15,[%a3]-7168
80009634:	11 1f c0 f3 	addih.a %a15,%a15,15361
80009638:	30 ff       	add.a %a15,%a15
8000963a:	30 ff       	add.a %a15,%a15
8000963c:	4c f0       	ld.w %d15,[%a15]0
8000963e:	7b 00 20 24 	movh %d2,16896
80009642:	a6 2f       	or %d15,%d2
80009644:	68 0f       	st.w [%a15]0,%d15

      /* Ack IIRQ */
      osEE_tc_ack_signal();

      /* Check for ShutdownAllCores */
      if (p_kcb->ar_shutdown_all_cores_flag) {
80009646:	0c 2e       	ld.bu %d15,[%a2]14
80009648:	6e 12       	jz %d15,8000966c <osEE_tc_isr2_wrapper+0x8e>
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000964a:	40 93       	mov.aa %a3,%a9
        CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
          p_curr_cdb = osEE_get_curr_core();
        osEE_shutdown_os(p_curr_cdb,
8000964c:	39 22 0d 00 	ld.bu %d2,[%a2]13
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009650:	cc 33       	ld.a %a15,[%a3]12
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009652:	39 ff 10 00 	ld.bu %d15,[%a15]16 <f0030003 <_SMALL_DATA4_+0x40028003>>

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
80009656:	82 33       	mov %d3,3
80009658:	e9 f3 10 00 	st.b [%a15]16,%d3
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
8000965c:	e9 f2 12 00 	st.b [%a15]18,%d2

  if (os_status == OSEE_KERNEL_STARTED) {
80009660:	5e 25       	jne %d15,2,8000966a <osEE_tc_isr2_wrapper+0x8c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
80009662:	99 34 14 00 	ld.a %a4,[%a3]20 <f0030014 <_SMALL_DATA4_+0x40028014>>
80009666:	6d 00 aa 0f 	call 8000b5ba <osEE_idle_task_terminate>
8000966a:	3c 00       	j 8000966a <osEE_tc_isr2_wrapper+0x8c>
          p_kcb->ar_shutdown_all_cores_error);
      } else {
        (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
8000966c:	91 00 00 48 	movh.a %a4,32768
80009670:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
80009674:	6d 00 56 0d 	call 8000b120 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009678:	4d c0 e2 3f 	mfcr %d3,$icr
8000967c:	02 3f       	mov %d15,%d3
8000967e:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009682:	8f f8 0f 21 	and %d2,%d8,255
80009686:	5f 23 0b 00 	jeq %d3,%d2,8000969c <osEE_tc_isr2_wrapper+0xbe>
8000968a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000968e:	cd cf e2 0f 	mtcr $icr,%d15
80009692:	0d 00 c0 04 	isync 
80009696:	3c 03       	j 8000969c <osEE_tc_isr2_wrapper+0xbe>
    }
    /* TODO: handle other internal priorities? System Timer? */
  } else
#endif /* !OSEE_SINGLECORE */
  {
    osEE_activate_isr2(isr2_tid);
80009698:	6d 00 ca 0b 	call 8000ae2c <osEE_activate_isr2>
  __asm__ volatile ("svlcx" : : : "memory");
}

/** The rslcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rslcx(void) {
  __asm__ volatile ("rslcx" : : : "memory");
8000969c:	0d 00 40 02 	rslcx 
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
800096a0:	00 80       	rfe 
800096a2:	00 90       	ret 

800096a4 <osEE_shutdown_os>:
  osEE_shutdown_os
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
800096a4:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
800096a6:	cc 43       	ld.a %a15,[%a4]12
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
800096a8:	39 ff 10 00 	ld.bu %d15,[%a15]16

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
800096ac:	82 32       	mov %d2,3
800096ae:	e9 f2 10 00 	st.b [%a15]16,%d2
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
800096b2:	e9 f4 12 00 	st.b [%a15]18,%d4

  if (os_status == OSEE_KERNEL_STARTED) {
800096b6:	5e 25       	jne %d15,2,800096c0 <osEE_shutdown_os+0x1c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
800096b8:	99 44 14 00 	ld.a %a4,[%a4]20
800096bc:	6d 00 7f 0f 	call 8000b5ba <osEE_idle_task_terminate>
  } else {
    osEE_call_shutdown_hook(p_ccb, Error);
  }
  for (;;) {
    ; /* Endless Loop (entered only if Kernel Not Started) */
  }
800096c0:	3c 00       	j 800096c0 <osEE_shutdown_os+0x1c>

800096c2 <DisableAllInterrupts>:
FUNC(void, OS_CODE)
  DisableAllInterrupts
(
  void
)
{
800096c2:	40 ae       	mov.aa %a14,%sp
800096c4:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800096c6:	c8 3f       	ld.a %a15,[%a15]12
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
800096c8:	0d 00 40 03 	disable 
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
800096cc:	82 1f       	mov %d15,1
800096ce:	e9 ff 22 00 	st.b [%a15]34,%d15
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
    p_ccb->service_id            = service_id;
800096d2:	da 0c       	mov %d15,12
800096d4:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
800096d8:	82 0f       	mov %d15,0
800096da:	e9 ff 23 00 	st.b [%a15]35,%d15
800096de:	00 90       	ret 

800096e0 <EnableAllInterrupts>:
FUNC(void, OS_CODE)
  EnableAllInterrupts
(
  void
)
{
800096e0:	40 ae       	mov.aa %a14,%sp
800096e2:	40 9f       	mov.aa %a15,%a9
   * ResumeOSInterrupts() are called and no corresponding DisableAllInterupts()
   * /SuspendAllInterrupts()/SuspendOSInterrupts() was done before, the
   * Operating System module shall not perform this Operating System service.
   * (SRS_Os_11009) */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800096e4:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
800096e6:	da 0f       	mov %d15,15
800096e8:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
800096ec:	82 1f       	mov %d15,1
800096ee:	e9 ff 23 00 	st.b [%a15]35,%d15

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_EnableAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->d_isr_all_cnt > 0U) {
800096f2:	39 ff 22 00 	ld.bu %d15,[%a15]34
800096f6:	6e 09       	jz %d15,80009708 <EnableAllInterrupts+0x28>
    p_ccb->d_isr_all_cnt = 0U;
800096f8:	82 0f       	mov %d15,0
800096fa:	e9 ff 22 00 	st.b [%a15]34,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
800096fe:	0d 00 00 03 	enable 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009702:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009706:	5e 17       	jne %d15,1,80009714 <EnableAllInterrupts+0x34>
    p_ccb->service_id            = service_id;
80009708:	da 0e       	mov %d15,14
8000970a:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000970e:	82 0f       	mov %d15,0
80009710:	e9 ff 23 00 	st.b [%a15]35,%d15
80009714:	00 90       	ret 

80009716 <SuspendAllInterrupts>:
FUNC(void, OS_CODE)
  SuspendAllInterrupts
(
  void
)
{
80009716:	40 ae       	mov.aa %a14,%sp
80009718:	40 94       	mov.aa %a4,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000971a:	cc 43       	ld.a %a15,[%a4]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000971c:	da 11       	mov %d15,17
8000971e:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009722:	82 1f       	mov %d15,1
80009724:	e9 ff 23 00 	st.b [%a15]35,%d15
(
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb,
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb
)
{
  if (p_ccb->s_isr_all_cnt == 0U) {
80009728:	39 ff 20 00 	ld.bu %d15,[%a15]32
8000972c:	ee 0c       	jnz %d15,80009744 <SuspendAllInterrupts+0x2e>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000972e:	4d c0 e2 ff 	mfcr %d15,$icr
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009732:	0d 00 40 03 	disable 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_suspendIRQ();
    p_ccb->prev_s_isr_all_status = flags;
80009736:	68 6f       	st.w [%a15]24,%d15
    ++p_ccb->s_isr_all_cnt;
80009738:	39 ff 20 00 	ld.bu %d15,[%a15]32
8000973c:	c2 1f       	add %d15,1
8000973e:	e9 ff 20 00 	st.b [%a15]32,%d15
80009742:	3c 0b       	j 80009758 <SuspendAllInterrupts+0x42>
  } else if (p_ccb->s_isr_all_cnt < OSEE_MAX_BYTE) {
80009744:	8b ff 0f 22 	eq %d2,%d15,255
80009748:	f6 25       	jnz %d2,80009752 <SuspendAllInterrupts+0x3c>
    ++p_ccb->s_isr_all_cnt;
8000974a:	c2 1f       	add %d15,1
8000974c:	e9 ff 20 00 	st.b [%a15]32,%d15
80009750:	3c 04       	j 80009758 <SuspendAllInterrupts+0x42>
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
80009752:	3b 90 01 40 	mov %d4,25
80009756:	3c a7       	j 800096a4 <osEE_shutdown_os>
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009758:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000975c:	5e 17       	jne %d15,1,8000976a <SuspendAllInterrupts+0x54>
    p_ccb->service_id            = service_id;
8000975e:	da 10       	mov %d15,16
80009760:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009764:	82 0f       	mov %d15,0
80009766:	e9 ff 23 00 	st.b [%a15]35,%d15
8000976a:	00 90       	ret 

8000976c <ResumeAllInterrupts>:
FUNC(void, OS_CODE)
  ResumeAllInterrupts
(
  void
)
{
8000976c:	40 ae       	mov.aa %a14,%sp
8000976e:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009770:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009772:	da 13       	mov %d15,19
80009774:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009778:	82 1f       	mov %d15,1
8000977a:	e9 ff 23 00 	st.b [%a15]35,%d15

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_all_cnt > 0U) {
8000977e:	39 ff 20 00 	ld.bu %d15,[%a15]32
80009782:	6e 0e       	jz %d15,8000979e <ResumeAllInterrupts+0x32>
    --p_ccb->s_isr_all_cnt;
80009784:	c2 ff       	add %d15,-1
80009786:	16 ff       	and %d15,255
80009788:	e9 ff 20 00 	st.b [%a15]32,%d15

    if (p_ccb->s_isr_all_cnt == 0U) {
8000978c:	ee 06       	jnz %d15,80009798 <ResumeAllInterrupts+0x2c>
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000978e:	4c f6       	ld.w %d15,[%a15]24
80009790:	cd cf e2 0f 	mtcr $icr,%d15
80009794:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009798:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000979c:	5e 17       	jne %d15,1,800097aa <ResumeAllInterrupts+0x3e>
    p_ccb->service_id            = service_id;
8000979e:	da 12       	mov %d15,18
800097a0:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
800097a4:	82 0f       	mov %d15,0
800097a6:	e9 ff 23 00 	st.b [%a15]35,%d15
800097aa:	00 90       	ret 

800097ac <SuspendOSInterrupts>:
FUNC(void, OS_CODE)
  SuspendOSInterrupts
(
  void
)
{
800097ac:	40 ae       	mov.aa %a14,%sp
800097ae:	40 94       	mov.aa %a4,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800097b0:	cc 43       	ld.a %a15,[%a4]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
800097b2:	da 15       	mov %d15,21
800097b4:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
800097b8:	82 1f       	mov %d15,1
800097ba:	e9 ff 23 00 	st.b [%a15]35,%d15

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_SuspendOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt == 0U) {
800097be:	39 ff 21 00 	ld.bu %d15,[%a15]33
800097c2:	ee 18       	jnz %d15,800097f2 <SuspendOSInterrupts+0x46>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800097c4:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800097c8:	8f f2 0f f1 	and %d15,%d2,255
800097cc:	8b 3f a1 f2 	ge.u %d15,%d15,19
800097d0:	ee 0a       	jnz %d15,800097e4 <SuspendOSInterrupts+0x38>
    OsEE_icr icr_temp = icr;
800097d2:	02 2f       	mov %d15,%d2
800097d4:	3b 30 01 30 	mov %d3,19
800097d8:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800097dc:	cd cf e2 0f 	mtcr $icr,%d15
800097e0:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_begin_nested_primitive();
    p_ccb->prev_s_isr_os_status = flags;
800097e4:	68 72       	st.w [%a15]28,%d2
    ++p_ccb->s_isr_os_cnt;
800097e6:	39 ff 21 00 	ld.bu %d15,[%a15]33
800097ea:	c2 1f       	add %d15,1
800097ec:	e9 ff 21 00 	st.b [%a15]33,%d15
800097f0:	3c 0c       	j 80009808 <SuspendOSInterrupts+0x5c>
  } else if (p_ccb->s_isr_os_cnt < OSEE_MAX_BYTE) {
800097f2:	8b ff 0f 22 	eq %d2,%d15,255
800097f6:	f6 25       	jnz %d2,80009800 <SuspendOSInterrupts+0x54>
    ++p_ccb->s_isr_os_cnt;
800097f8:	c2 1f       	add %d15,1
800097fa:	e9 ff 21 00 	st.b [%a15]33,%d15
800097fe:	3c 05       	j 80009808 <SuspendOSInterrupts+0x5c>
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
80009800:	3b 90 01 40 	mov %d4,25
80009804:	1d ff 50 ff 	j 800096a4 <osEE_shutdown_os>
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009808:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000980c:	5e 17       	jne %d15,1,8000981a <SuspendOSInterrupts+0x6e>
    p_ccb->service_id            = service_id;
8000980e:	da 14       	mov %d15,20
80009810:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009814:	82 0f       	mov %d15,0
80009816:	e9 ff 23 00 	st.b [%a15]35,%d15
8000981a:	00 90       	ret 

8000981c <ResumeOSInterrupts>:
FUNC(void, OS_CODE)
  ResumeOSInterrupts
(
  void
)
{
8000981c:	40 ae       	mov.aa %a14,%sp
8000981e:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009820:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009822:	da 17       	mov %d15,23
80009824:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009828:	82 1f       	mov %d15,1
8000982a:	e9 ff 23 00 	st.b [%a15]35,%d15

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt > 0U) {
8000982e:	39 ff 21 00 	ld.bu %d15,[%a15]33
80009832:	6e 19       	jz %d15,80009864 <ResumeOSInterrupts+0x48>
    --p_ccb->s_isr_os_cnt;
80009834:	c2 ff       	add %d15,-1
80009836:	16 ff       	and %d15,255
80009838:	e9 ff 21 00 	st.b [%a15]33,%d15

    if (p_ccb->s_isr_os_cnt == 0U) {
8000983c:	ee 11       	jnz %d15,8000985e <ResumeOSInterrupts+0x42>
      osEE_hal_end_nested_primitive(p_ccb->prev_s_isr_os_status);
8000983e:	48 72       	ld.w %d2,[%a15]28
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009840:	4d c0 e2 3f 	mfcr %d3,$icr
80009844:	02 3f       	mov %d15,%d3
80009846:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000984a:	8f f2 0f 21 	and %d2,%d2,255
8000984e:	5f 23 08 00 	jeq %d3,%d2,8000985e <ResumeOSInterrupts+0x42>
80009852:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009856:	cd cf e2 0f 	mtcr $icr,%d15
8000985a:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000985e:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009862:	5e 17       	jne %d15,1,80009870 <ResumeOSInterrupts+0x54>
    p_ccb->service_id            = service_id;
80009864:	da 16       	mov %d15,22
80009866:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000986a:	82 0f       	mov %d15,0
8000986c:	e9 ff 23 00 	st.b [%a15]35,%d15
80009870:	00 90       	ret 

80009872 <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
80009872:	40 ae       	mov.aa %a14,%sp
80009874:	20 10       	sub.a %sp,16
80009876:	02 49       	mov %d9,%d4
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009878:	4d c0 e1 8f 	mfcr %d8,$core_id
  VAR(StatusType, AUTOMATIC)                      ev = E_OK;
  VAR(AppModeType, AUTOMATIC)                     real_mode = Mode;
#if (!defined(OSEE_SINGLECORE))
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
8000987c:	91 00 00 f8 	movh.a %a15,32768
80009880:	99 fc 00 40 	ld.a %a12,[%a15]256 <80000100 <osEE_kdb_var>>
80009884:	40 9d       	mov.aa %a13,%a9
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009886:	cc d3       	ld.a %a15,[%a13]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009888:	4d c0 e2 ef 	mfcr %d14,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000988c:	8f fe 0f f1 	and %d15,%d14,255
80009890:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009894:	ee 0a       	jnz %d15,800098a8 <StartOS+0x36>
    OsEE_icr icr_temp = icr;
80009896:	02 ef       	mov %d15,%d14
80009898:	3b 30 01 20 	mov %d2,19
8000989c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800098a0:	cd cf e2 0f 	mtcr $icr,%d15
800098a4:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
800098a8:	da 4b       	mov %d15,75
800098aa:	e9 ff 13 00 	st.b [%a15]19 <80000013 <BootModeHeader0+0x13>>,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
800098ae:	82 1f       	mov %d15,1
800098b0:	e9 ff 23 00 	st.b [%a15]35 <80000023 <_start+0x3>>,%d15
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800098b4:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000010 <BootModeHeader0+0x10>>
800098b8:	df 0f f1 80 	jne %d15,0,80009a9a <StartOS+0x228>
800098bc:	37 08 48 80 	extr %d8,%d8,0,8
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
800098c0:	df 08 3f 81 	jne %d8,0,80009b3e <StartOS+0x2cc>
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800098c4:	6d 00 8e 0e 	call 8000b5e0 <osEE_cpu_startos>
800098c8:	df 02 03 01 	jeq %d2,0,80009ace <StartOS+0x25c>
800098cc:	1d 00 19 01 	j 80009afe <StartOS+0x28c>
    if (
      (p_kcb->ar_core_mask & ((CoreMaskType)1U << (OsEE_reg)curr_core_id)) ==
        0U
    )
    {
      for(;;) {}  /* Endless Loop */
800098d0:	3c 00       	j 800098d0 <StartOS+0x5e>
    /* Initialize Slaves Hardware after First synchronization point:
       This ensures that all the Master Initializations have been done. */
    if (curr_core_id != OS_CORE_ID_MASTER) {
      if (!osEE_cpu_startos()) {
        /* Enter in an endless loop if it happens */
        for(;;) {}
800098d2:	3c 00       	j 800098d2 <StartOS+0x60>
    and shall enter an endless loop on every core. (SRS_Os_80006) */
    {
      VAR(CoreNumType, AUTOMATIC)  i;

      for (i = 0U; i <= OSEE_CORE_ID_MAX; ++i) {
        if ((p_kcb->ar_core_mask & ((CoreMaskType)1U << i)) != 0U) {
800098d4:	54 c2       	ld.w %d2,[%a12]
800098d6:	57 02 61 2e 	extr.u %d2,%d2,%d14,1
800098da:	df 02 15 00 	jeq %d2,0,80009904 <StartOS+0x92>
          CONST(AppModeType, AUTOMATIC)
            /* MISRA-C 2012: Rule 10.5 deviation. Cast back from
               unsigned to enum is safe here, since we are in a loop
               with the right limits. */
            current_mode = osEE_get_core((CoreIdType)i)->p_ccb->app_mode;
800098de:	37 0e 48 40 	extr %d4,%d14,0,8
800098e2:	6d 00 3b 0f 	call 8000b758 <osEE_get_core>
800098e6:	99 22 0c 00 	ld.a %a2,[%a2]12
800098ea:	39 22 11 00 	ld.bu %d2,[%a2]17

          if (current_mode != DONOTCARE) {
800098ee:	8b f2 0f 32 	eq %d3,%d2,255
800098f2:	f6 39       	jnz %d3,80009904 <StartOS+0x92>
            if (real_mode == DONOTCARE) {
800098f4:	8b ff 0f 32 	eq %d3,%d15,255
800098f8:	f6 33       	jnz %d3,800098fe <StartOS+0x8c>
              real_mode = current_mode;
            } else if (real_mode != current_mode) {
800098fa:	3e 24       	jeq %d15,%d2,80009902 <StartOS+0x90>
            /* Error condition specified by SWS_Os_00608 requirement:
               enter in an endless loop */
              for(;;) {}
800098fc:	3c 00       	j 800098fc <StartOS+0x8a>
               with the right limits. */
            current_mode = osEE_get_core((CoreIdType)i)->p_ccb->app_mode;

          if (current_mode != DONOTCARE) {
            if (real_mode == DONOTCARE) {
              real_mode = current_mode;
800098fe:	02 2f       	mov %d15,%d2
80009900:	3c 02       	j 80009904 <StartOS+0x92>
80009902:	02 2f       	mov %d15,%d2
80009904:	c2 1e       	add %d14,1
    StartOS shall not start the scheduling, shall not call any StartupHooks,
    and shall enter an endless loop on every core. (SRS_Os_80006) */
    {
      VAR(CoreNumType, AUTOMATIC)  i;

      for (i = 0U; i <= OSEE_CORE_ID_MAX; ++i) {
80009906:	df 3e e7 ff 	jne %d14,3,800098d4 <StartOS+0x62>
            }
          }
        }
      }

      if (real_mode != DONOTCARE) {
8000990a:	8b ff 0f 22 	eq %d2,%d15,255
8000990e:	f6 27       	jnz %d2,8000991c <StartOS+0xaa>
        /* Set mode for this core as real_mode */
        if (Mode == DONOTCARE) {
80009910:	8b f9 2f 92 	ne %d9,%d9,255
80009914:	f6 98       	jnz %d9,80009924 <StartOS+0xb2>
          p_ccb->app_mode = real_mode;
80009916:	e9 ff 11 00 	st.b [%a15]17 <80000011 <BootModeHeader0+0x11>>,%d15
8000991a:	3c 05       	j 80009924 <StartOS+0xb2>
        }
      } else {
        /* XXX: It is not specified how to handle the condition that no cores
                defines an AppMode different from DONOTCARE.
                I choose to handle it using OSDEFAULTAPPMODE */
        p_ccb->app_mode = OSDEFAULTAPPMODE;
8000991c:	82 0f       	mov %d15,0
8000991e:	e9 ff 11 00 	st.b [%a15]17 <80000011 <BootModeHeader0+0x11>>,%d15
#if (defined(OSEE_HAS_AUTOSTART_TRIGGER)) || (defined(OSEE_HAS_AUTOSTART_TASK))
        real_mode = OSDEFAULTAPPMODE;
80009922:	82 0f       	mov %d15,0
#if (defined(OSEE_HAS_AUTOSTART_TRIGGER))
    {
      VAR(MemSize, AUTOMATIC) i;
      VAR(MemSize, AUTOMATIC) trigger_size;
      CONSTP2VAR(OsEE_autostart_trigger, AUTOMATIC, OS_APPL_CONST)
        p_auto_triggers = &(*p_cdb->p_autostart_trigger_array)[real_mode];
80009924:	19 d2 20 00 	ld.w %d2,[%a13]32
80009928:	02 f9       	mov %d9,%d15
      P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_CONST) p_alarm_db_tmp;  /* MISRA R13.2 */
#endif /* OSEE_HAS_ALARMS */
      P2VAR(OsEE_SchedTabDB, AUTOMATIC, OS_APPL_CONST) p_st_db_tmp;   /* MISRA R13.2 */
#endif /* OSEE_HAS_SCHEDULE_TABLES */

      trigger_size = p_auto_triggers->trigger_array_size;
8000992a:	60 23       	mov.a %a3,%d2
8000992c:	d0 32       	addsc.a %a2,%a3,%d15,3
8000992e:	4c 21       	ld.w %d15,[%a2]4
80009930:	59 ef f4 ff 	st.w [%a14]-12,%d15
      for (i = 0U; i < trigger_size; ++i) {
80009934:	6e 17       	jz %d15,80009962 <StartOS+0xf0>
80009936:	82 0f       	mov %d15,0
        CONSTP2VAR(OsEE_autostart_trigger_info, AUTOMATIC, OS_APPL_CONST)
          p_trigger_to_act_info = &(*p_auto_triggers->p_trigger_ptr_array)[i];
80009938:	13 89 20 e2 	madd %d14,%d2,%d9,8
8000993c:	60 e2       	mov.a %a2,%d14
8000993e:	54 22       	ld.w %d2,[%a2]
        CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_CONST)
          p_trigger_to_act_db   = p_trigger_to_act_info->p_trigger_db;
80009940:	13 cf 20 32 	madd %d3,%d2,%d15,12
80009944:	60 32       	mov.a %a2,%d3
80009946:	d4 25       	ld.a %a5,[%a2]
#if (!defined(OSEE_HAS_SCHEDULE_TABLES))
        (void)osEE_alarm_set_rel(
80009948:	99 54 04 00 	ld.a %a4,[%a5]4
8000994c:	19 24 04 00 	ld.w %d4,[%a2]4
80009950:	19 25 08 00 	ld.w %d5,[%a2]8
80009954:	6d 00 36 0d 	call 8000b3c0 <osEE_alarm_set_rel>
#endif /* OSEE_HAS_ALARMS */
      P2VAR(OsEE_SchedTabDB, AUTOMATIC, OS_APPL_CONST) p_st_db_tmp;   /* MISRA R13.2 */
#endif /* OSEE_HAS_SCHEDULE_TABLES */

      trigger_size = p_auto_triggers->trigger_array_size;
      for (i = 0U; i < trigger_size; ++i) {
80009958:	c2 1f       	add %d15,1
8000995a:	19 e4 f4 ff 	ld.w %d4,[%a14]-12
8000995e:	5f 4f ef ff 	jne %d15,%d4,8000993c <StartOS+0xca>
#if (defined(OSEE_HAS_AUTOSTART_TASK))
    {
      VAR(MemSize, AUTOMATIC) i;
      VAR(MemSize, AUTOMATIC) tdbsize;
      CONSTP2VAR(OsEE_autostart_tdb, AUTOMATIC, OS_APPL_CONST)
        p_auto_tdb  = &(*p_cdb->p_autostart_tdb_array)[real_mode];
80009962:	19 d2 18 00 	ld.w %d2,[%a13]24
#if (!defined(OSEE_ALLOW_TASK_MIGRATION))
      CONSTP2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)
        p_rq        = &p_ccb->rq;
80009966:	d9 f2 04 00 	lea %a2,[%a15]4 <80000004 <BootModeHeader0+0x4>>
8000996a:	b5 e2 f4 ff 	st.a [%a14]-12 <80000004 <BootModeHeader0+0x4>>,%a2
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000996e:	99 d2 10 00 	ld.a %a2,[%a13]16 <80000004 <BootModeHeader0+0x4>>
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
80009972:	82 1a       	mov %d10,1
80009974:	82 0b       	mov %d11,0
80009976:	0b ab 10 48 	mov %e4,%d11,%d10
8000997a:	49 24 c0 08 	cmpswap.w [%a2]0,%e4
8000997e:	02 4f       	mov %d15,%d4
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
80009980:	df 04 f9 ff 	jne %d4,0,80009972 <StartOS+0x100>
        p_rq        = &p_kcb->rq;
      CONSTP2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)
        pp_free_sn  = &p_ccb->p_free_sn;
#endif /* !OSEE_ALLOW_TASK_MIGRATION */

      tdbsize = p_auto_tdb->tdb_array_size;
80009984:	60 23       	mov.a %a3,%d2
80009986:	01 39 03 26 	addsc.a %a2,%a3,%d9,3
8000998a:	19 2a 04 00 	ld.w %d10,[%a2]4
      for (i = 0U; i < tdbsize; ++i) {
8000998e:	df 0a 1c 00 	jeq %d10,0,800099c6 <StartOS+0x154>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
          p_tdb_to_act = (*p_auto_tdb->p_tdb_ptr_array)[i];
80009992:	13 89 20 92 	madd %d9,%d2,%d9,8
        CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
          p_tcb_to_act = p_tdb_to_act->p_tcb;

        /* Mark the autostart-TASK as Activated */
        ++p_tcb_to_act->current_num_of_act;
        p_tcb_to_act->status = OSEE_TASK_READY;
80009996:	82 1b       	mov %d11,1
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
  (*pp_first)              = p_sn_allocated->p_next;
  p_sn_allocated->p_next  = NULL;
80009998:	82 0e       	mov %d14,0
#endif /* !OSEE_ALLOW_TASK_MIGRATION */

      tdbsize = p_auto_tdb->tdb_array_size;
      for (i = 0U; i < tdbsize; ++i) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
          p_tdb_to_act = (*p_auto_tdb->p_tdb_ptr_array)[i];
8000999a:	60 93       	mov.a %a3,%d9
8000999c:	d4 32       	ld.a %a2,[%a3]
8000999e:	90 22       	addsc.a %a2,%a2,%d15,2
800099a0:	d4 26       	ld.a %a6,[%a2]
        CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
          p_tcb_to_act = p_tdb_to_act->p_tcb;
800099a2:	99 62 0c 00 	ld.a %a2,[%a6]12

        /* Mark the autostart-TASK as Activated */
        ++p_tcb_to_act->current_num_of_act;
800099a6:	14 22       	ld.bu %d2,[%a2]
800099a8:	c2 12       	add %d2,1
800099aa:	34 22       	st.b [%a2],%d2
        p_tcb_to_act->status = OSEE_TASK_READY;
800099ac:	e9 2b 02 00 	st.b [%a2]2,%d11
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
800099b0:	c8 25       	ld.a %a5,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
800099b2:	54 52       	ld.w %d2,[%a5]
800099b4:	68 22       	st.w [%a15]8,%d2
  p_sn_allocated->p_next  = NULL;
800099b6:	74 5e       	st.w [%a5],%d14

        (void)osEE_scheduler_rq_insert(
800099b8:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
800099bc:	6d 00 c7 09 	call 8000ad4a <osEE_scheduler_rq_insert>
      CONSTP2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)
        pp_free_sn  = &p_ccb->p_free_sn;
#endif /* !OSEE_ALLOW_TASK_MIGRATION */

      tdbsize = p_auto_tdb->tdb_array_size;
      for (i = 0U; i < tdbsize; ++i) {
800099c0:	c2 1f       	add %d15,1
800099c2:	5f af ec ff 	jne %d15,%d10,8000999a <StartOS+0x128>
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
800099c6:	99 d2 10 00 	ld.a %a2,[%a13]16
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
800099ca:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
800099ce:	82 0f       	mov %d15,0
800099d0:	6c 20       	st.w [%a2]0,%d15
    Specification paragraph 7.9.4 Multi-Core start-up concept:
    "This release of the AUTOSAR specification does not support timeouts
    during the synchronization phase. Cores that are activated with
    StartCore but do not call StartOS may cause the system to hang.
    It is in the responsibility of the integrator to avoid such behavior." */
    osEE_hal_sync_barrier(p_kdb->p_barrier, &p_kcb->ar_core_mask,
800099d2:	91 00 00 28 	movh.a %a2,32768
800099d6:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
800099da:	99 24 08 00 	ld.a %a4,[%a2]8 <80000008 <BootModeHeader0+0x8>>
800099de:	99 e5 fc ff 	ld.a %a5,[%a14]-4 <80000008 <BootModeHeader0+0x8>>
800099e2:	a0 06       	mov.a %a6,0
800099e4:	6d 00 7f 0e 	call 8000b6e2 <osEE_hal_sync_barrier>
      OSEE_STARTOS_2ND_SYNC_BARRIER_CB);
/* After second synchronization I'm sure that no more AR cores will be
   started: I initialize the Shutdown(AllCores) mask in master core */
    if (curr_core_id == OS_CORE_ID_MASTER) {
800099e8:	f6 84       	jnz %d8,800099f0 <StartOS+0x17e>
      p_kcb->ar_shutdown_mask = p_kcb->ar_core_mask;
800099ea:	54 c3       	ld.w %d3,[%a12]
800099ec:	59 c3 08 00 	st.w [%a12]8,%d3
    }
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
800099f0:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000010 <BootModeHeader0+0x10>>
800099f4:	5e 14       	jne %d15,1,800099fc <StartOS+0x18a>
      p_ccb->os_status = OSEE_KERNEL_STARTED;
800099f6:	82 2f       	mov %d15,2
800099f8:	e9 ff 10 00 	st.b [%a15]16 <80000010 <BootModeHeader0+0x10>>,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
800099fc:	39 ff 23 00 	ld.bu %d15,[%a15]35 <80000023 <_start+0x3>>
80009a00:	5e 17       	jne %d15,1,80009a0e <StartOS+0x19c>
    p_ccb->service_id            = service_id;
80009a02:	da 4a       	mov %d15,74
80009a04:	e9 ff 13 00 	st.b [%a15]19 <80000013 <BootModeHeader0+0x13>>,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009a08:	82 0f       	mov %d15,0
80009a0a:	e9 ff 23 00 	st.b [%a15]35 <80000023 <_start+0x3>>,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */

    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);

#if (!defined(OSEE_STARTOS_RETURN)) && (!defined(OSEE_API_DYNAMIC))
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
80009a0e:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000010 <BootModeHeader0+0x10>>
80009a12:	5e 2f       	jne %d15,2,80009a30 <StartOS+0x1be>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
80009a14:	99 ef f8 ff 	ld.a %a15,[%a14]-8
80009a18:	48 14       	ld.w %d4,[%a15]4
80009a1a:	59 e4 f0 ff 	st.w [%a14]-16,%d4
80009a1e:	40 f4       	mov.aa %a4,%a15
80009a20:	60 45       	mov.a %a5,%d4
80009a22:	60 46       	mov.a %a6,%d4
80009a24:	6d 00 06 0f 	call 8000b830 <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
80009a28:	99 e4 f8 ff 	ld.a %a4,[%a14]-8
80009a2c:	6d 00 ca 09 	call 8000adc0 <osEE_task_end>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009a30:	0d 00 40 03 	disable 
 *  \brief Locks the kernel.
 *  
 *  Locks the kernel using the KDB p_lock spinlock.
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_lock_kernel(void) {
  osEE_hal_spin_lock(osEE_kdb_var.p_lock);
80009a34:	91 00 00 f8 	movh.a %a15,32768
80009a38:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
80009a3c:	c8 1f       	ld.a %a15,[%a15]4
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
80009a3e:	82 1c       	mov %d12,1
80009a40:	82 0d       	mov %d13,0
80009a42:	0b cd 10 28 	mov %e2,%d13,%d12
80009a46:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
80009a4a:	df 02 fa ff 	jne %d2,0,80009a3e <StartOS+0x1cc>
#if (!defined(OSEE_SINGLECORE))
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)
      p_kdb = osEE_lock_and_get_kernel();
    CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)
      p_kcb = p_kdb->p_kcb;
80009a4e:	91 00 00 28 	movh.a %a2,32768
80009a52:	99 25 00 40 	ld.a %a5,[%a2]256 <80000100 <osEE_kdb_var>>

    if (p_kcb->ar_shutdown_all_cores_flag) {
80009a56:	0c 5e       	ld.bu %d15,[%a5]14
80009a58:	6e 0e       	jz %d15,80009a74 <StartOS+0x202>
80009a5a:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
80009a5e:	82 0f       	mov %d15,0
80009a60:	68 0f       	st.w [%a15]0,%d15
         participating to shutdown */
      osEE_unlock_kernel();

      /* [OS587]: Before calling the global ShutdownHook, all cores shall be
          synchronized. (BSW4080007) */
      osEE_hal_sync_barrier(p_kdb->p_barrier, &p_kcb->ar_shutdown_mask,
80009a62:	d9 2f 00 40 	lea %a15,[%a2]256 <80000100 <osEE_kdb_var>>
80009a66:	c8 24       	ld.a %a4,[%a15]8
80009a68:	d9 55 08 00 	lea %a5,[%a5]8 <80000002 <BootModeHeader0+0x2>>
80009a6c:	a0 06       	mov.a %a6,0
80009a6e:	6d 00 3a 0e 	call 8000b6e2 <osEE_hal_sync_barrier>
80009a72:	3c 13       	j 80009a98 <StartOS+0x226>
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009a74:	4d c0 e1 ff 	mfcr %d15,$core_id
        OSEE_SHUTDOWNOS_SYNC_BARRIER_CB);
    } else {
      /* Remove this core from the waiting mask: this core has already reached
         the barrier/ it's already shutdown */
      p_kcb->ar_shutdown_mask &=
        (~((CoreMaskType)1U << (OsEE_reg)osEE_get_curr_core_id()));
80009a78:	37 0f 48 f0 	extr %d15,%d15,0,8
      osEE_hal_sync_barrier(p_kdb->p_barrier, &p_kcb->ar_shutdown_mask,
        OSEE_SHUTDOWNOS_SYNC_BARRIER_CB);
    } else {
      /* Remove this core from the waiting mask: this core has already reached
         the barrier/ it's already shutdown */
      p_kcb->ar_shutdown_mask &=
80009a7c:	19 52 08 00 	ld.w %d2,[%a5]8
80009a80:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80009a84:	6c 52       	st.w [%a5]8,%d15
 *  \brief Unlocks the kernel.
 *  
 *  Unlock the kernel by releasing the KDB p_lock spinlock.
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_unlock_kernel(void) {
  osEE_hal_spin_unlock(osEE_kdb_var.p_lock);
80009a86:	91 00 00 f8 	movh.a %a15,32768
80009a8a:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
80009a8e:	c8 1f       	ld.a %a15,[%a15]4
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80009a90:	0d 00 80 04 	dsync 
80009a94:	82 0f       	mov %d15,0
80009a96:	68 0f       	st.w [%a15]0,%d15
    }
#if (!defined(OSEE_SHUTDOWN_DO_NOT_RETURN_ON_MAIN))
    osEE_hal_disableIRQ();
    osEE_shutdown_os_extra();
    osEE_call_shutdown_hook(p_ccb, p_ccb->last_error);
    for(;;) {} /* Endless Loop */
80009a98:	3c 00       	j 80009a98 <StartOS+0x226>

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
80009a9a:	82 12       	mov %d2,1
80009a9c:	3c 03       	j 80009aa2 <StartOS+0x230>
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
      osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
      ev = E_OS_SYS_INIT;
80009a9e:	3b 80 01 20 	mov %d2,24
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
    p_ccb->service_id            = service_id;
80009aa2:	da 4a       	mov %d15,74
80009aa4:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009aa8:	82 0f       	mov %d15,0
80009aaa:	e9 ff 23 00 	st.b [%a15]35,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009aae:	4d c0 e2 4f 	mfcr %d4,$icr
80009ab2:	02 4f       	mov %d15,%d4
80009ab4:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009ab8:	8f fe 0f 31 	and %d3,%d14,255
80009abc:	5f 34 50 00 	jeq %d4,%d3,80009b5c <StartOS+0x2ea>
80009ac0:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ac4:	cd cf e2 0f 	mtcr $icr,%d15
80009ac8:	0d 00 c0 04 	isync 
80009acc:	00 90       	ret 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009ace:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009ad2:	3b 80 01 20 	mov %d2,24
80009ad6:	df 1f ec ff 	jne %d15,1,80009aae <StartOS+0x23c>
80009ada:	3c e2       	j 80009a9e <StartOS+0x22c>
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
80009adc:	02 9f       	mov %d15,%d9
80009ade:	82 0e       	mov %d14,0
80009ae0:	1d ff fa fe 	j 800098d4 <StartOS+0x62>
          "This release of the AUTOSAR specification does not support timeouts
          during the synchronization phase. Cores that are activated with
          StartCore but do not call StartOS may cause the system to hang.
          It is in the responsibility of the integrator to avoid such
          behavior." */
    osEE_hal_sync_barrier(p_kdb->p_barrier, &p_kcb->ar_core_mask,
80009ae4:	b5 ec fc ff 	st.a [%a14]-4,%a12
80009ae8:	91 00 00 28 	movh.a %a2,32768
80009aec:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009af0:	99 24 08 00 	ld.a %a4,[%a2]8 <80000008 <BootModeHeader0+0x8>>
80009af4:	40 c5       	mov.aa %a5,%a12
80009af6:	a0 06       	mov.a %a6,0
80009af8:	6d 00 f5 0d 	call 8000b6e2 <osEE_hal_sync_barrier>
80009afc:	3c f0       	j 80009adc <StartOS+0x26a>
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
80009afe:	99 d2 14 00 	ld.a %a2,[%a13]20
80009b02:	b5 e2 f8 ff 	st.a [%a14]-8,%a2
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
80009b06:	82 1f       	mov %d15,1
80009b08:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
80009b0c:	e9 f9 11 00 	st.b [%a15]17,%d9
/* [SWS_Os_00610] At least one core shall define an AppMode other than
     "DONOTCARE". (SRS_Os_80006) */
/* [SWS_Os_00611] If the IOC is configured, StartOS shall initialize the data
     structures of the IOC. (SRS_Os_80020) */
    if (
      (p_kcb->ar_core_mask & ((CoreMaskType)1U << (OsEE_reg)curr_core_id)) ==
80009b10:	4c c0       	ld.w %d15,[%a12]0
80009b12:	57 0f 61 f8 	extr.u %d15,%d15,%d8,1
    shall be used. (SRS_Os_80006) */
/* [SWS_Os_00610] At least one core shall define an AppMode other than
     "DONOTCARE". (SRS_Os_80006) */
/* [SWS_Os_00611] If the IOC is configured, StartOS shall initialize the data
     structures of the IOC. (SRS_Os_80020) */
    if (
80009b16:	df 0f dd 7e 	jeq %d15,0,800098d0 <StartOS+0x5e>
80009b1a:	3c e5       	j 80009ae4 <StartOS+0x272>
          "This release of the AUTOSAR specification does not support timeouts
          during the synchronization phase. Cores that are activated with
          StartCore but do not call StartOS may cause the system to hang.
          It is in the responsibility of the integrator to avoid such
          behavior." */
    osEE_hal_sync_barrier(p_kdb->p_barrier, &p_kcb->ar_core_mask,
80009b1c:	b5 ec fc ff 	st.a [%a14]-4,%a12
80009b20:	91 00 00 28 	movh.a %a2,32768
80009b24:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009b28:	99 24 08 00 	ld.a %a4,[%a2]8 <80000008 <BootModeHeader0+0x8>>
80009b2c:	40 c5       	mov.aa %a5,%a12
80009b2e:	a0 06       	mov.a %a6,0
80009b30:	6d 00 d9 0d 	call 8000b6e2 <osEE_hal_sync_barrier>
      OSEE_STARTOS_1ST_SYNC_BARRIER_CB);

    /* Initialize Slaves Hardware after First synchronization point:
       This ensures that all the Master Initializations have been done. */
    if (curr_core_id != OS_CORE_ID_MASTER) {
      if (!osEE_cpu_startos()) {
80009b34:	6d 00 56 0d 	call 8000b5e0 <osEE_cpu_startos>
80009b38:	df 02 cd 7e 	jeq %d2,0,800098d2 <StartOS+0x60>
80009b3c:	3c d0       	j 80009adc <StartOS+0x26a>
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
80009b3e:	99 d3 14 00 	ld.a %a3,[%a13]20
80009b42:	b5 e3 f8 ff 	st.a [%a14]-8,%a3
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
80009b46:	82 1f       	mov %d15,1
80009b48:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
80009b4c:	e9 f9 11 00 	st.b [%a15]17,%d9
/* [SWS_Os_00610] At least one core shall define an AppMode other than
     "DONOTCARE". (SRS_Os_80006) */
/* [SWS_Os_00611] If the IOC is configured, StartOS shall initialize the data
     structures of the IOC. (SRS_Os_80020) */
    if (
      (p_kcb->ar_core_mask & ((CoreMaskType)1U << (OsEE_reg)curr_core_id)) ==
80009b50:	4c c0       	ld.w %d15,[%a12]0
80009b52:	57 0f 61 f8 	extr.u %d15,%d15,%d8,1
    shall be used. (SRS_Os_80006) */
/* [SWS_Os_00610] At least one core shall define an AppMode other than
     "DONOTCARE". (SRS_Os_80006) */
/* [SWS_Os_00611] If the IOC is configured, StartOS shall initialize the data
     structures of the IOC. (SRS_Os_80020) */
    if (
80009b56:	df 0f bd 7e 	jeq %d15,0,800098d0 <StartOS+0x5e>
80009b5a:	3c e1       	j 80009b1c <StartOS+0x2aa>
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
80009b5c:	00 90       	ret 

80009b5e <GetActiveApplicationMode>:
FUNC(AppModeType, OS_CODE)
  GetActiveApplicationMode
(
  void
)
{
80009b5e:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
80009b60:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
80009b62:	c8 3f       	ld.a %a15,[%a15]12

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009b64:	39 ff 10 00 	ld.bu %d15,[%a15]16 <3 <_.+0x2>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
80009b68:	3b f0 0f 20 	mov %d2,255

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009b6c:	6e 03       	jz %d15,80009b72 <GetActiveApplicationMode+0x14>
    app_mode = p_ccb->app_mode;
80009b6e:	39 f2 11 00 	ld.bu %d2,[%a15]17
    p_ccb->service_id            = service_id;
80009b72:	da 46       	mov %d15,70
80009b74:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009b78:	82 0f       	mov %d15,0
80009b7a:	e9 ff 23 00 	st.b [%a15]35,%d15
  }

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetActiveApplicationMode);

  return app_mode;
}
80009b7e:	00 90       	ret 

80009b80 <ActivateTask>:
FUNC(StatusType, OS_CODE)
  ActivateTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009b80:	40 ae       	mov.aa %a14,%sp
80009b82:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009b84:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009b86:	82 1f       	mov %d15,1
80009b88:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009b8c:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009b90:	91 00 00 28 	movh.a %a2,32768
80009b94:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009b98:	4c 24       	ld.w %d15,[%a2]16
80009b9a:	82 38       	mov %d8,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009b9c:	7f f4 3d 80 	jge.u %d4,%d15,80009c16 <ActivateTask+0x96>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009ba0:	91 00 00 28 	movh.a %a2,32768
80009ba4:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009ba8:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009bac:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009bb0:	d4 2c       	ld.a %a12,[%a2]

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009bb2:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009bb6:	ff 2f 30 80 	jge.u %d15,2,80009c16 <ActivateTask+0x96>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009bba:	4d c0 e2 9f 	mfcr %d9,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009bbe:	8f f9 0f f1 	and %d15,%d9,255
80009bc2:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009bc6:	ee 0a       	jnz %d15,80009bda <ActivateTask+0x5a>
    OsEE_icr icr_temp = icr;
80009bc8:	02 9f       	mov %d15,%d9
80009bca:	3b 30 01 20 	mov %d2,19
80009bce:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009bd2:	cd cf e2 0f 	mtcr $icr,%d15
80009bd6:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
80009bda:	40 c4       	mov.aa %a4,%a12
80009bdc:	6d 00 d2 08 	call 8000ad80 <osEE_task_activated>
80009be0:	02 28       	mov %d8,%d2

      if (ev == E_OK) {
80009be2:	f6 28       	jnz %d2,80009bf2 <ActivateTask+0x72>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
80009be4:	91 00 00 48 	movh.a %a4,32768
80009be8:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
80009bec:	40 c5       	mov.aa %a5,%a12
80009bee:	6d 00 43 09 	call 8000ae74 <osEE_scheduler_task_activated>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009bf2:	4d c0 e2 3f 	mfcr %d3,$icr
80009bf6:	02 3f       	mov %d15,%d3
80009bf8:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009bfc:	8f f9 0f 21 	and %d2,%d9,255
80009c00:	5f 23 08 00 	jeq %d3,%d2,80009c10 <ActivateTask+0x90>
80009c04:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c08:	cd cf e2 0f 	mtcr $icr,%d15
80009c0c:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009c10:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009c14:	5e 16       	jne %d15,1,80009c20 <ActivateTask+0xa0>
    p_ccb->service_id            = service_id;
80009c16:	82 0f       	mov %d15,0
80009c18:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009c1c:	e9 ff 23 00 	st.b [%a15]35,%d15
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009c20:	02 82       	mov %d2,%d8
80009c22:	00 90       	ret 

80009c24 <ChainTask>:
FUNC(StatusType, OS_CODE)
  ChainTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009c24:	40 ae       	mov.aa %a14,%sp
80009c26:	40 9f       	mov.aa %a15,%a9
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb = p_cdb->p_ccb;
80009c28:	c8 3f       	ld.a %a15,[%a15]12
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009c2a:	48 03       	ld.w %d3,[%a15]0
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009c2c:	82 5f       	mov %d15,5
80009c2e:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009c32:	82 1f       	mov %d15,1
80009c34:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009c38:	91 00 00 28 	movh.a %a2,32768
80009c3c:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009c40:	4c 24       	ld.w %d15,[%a2]16
80009c42:	82 32       	mov %d2,3
  )
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009c44:	7f f4 4e 80 	jge.u %d4,%d15,80009ce0 <ChainTask+0xbc>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009c48:	91 00 00 28 	movh.a %a2,32768
80009c4c:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009c50:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009c54:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009c58:	d4 2c       	ld.a %a12,[%a2]
      ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
    } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009c5a:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009c5e:	ff 2f 41 80 	jge.u %d15,2,80009ce0 <ChainTask+0xbc>
      VAR(OsEE_reg, AUTOMATIC)  flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009c62:	39 ff 20 00 	ld.bu %d15,[%a15]32
80009c66:	6e 09       	jz %d15,80009c78 <ChainTask+0x54>
        p_ccb->s_isr_all_cnt = 0U;
80009c68:	82 0f       	mov %d15,0
80009c6a:	e9 ff 20 00 	st.b [%a15]32,%d15
80009c6e:	4c f6       	ld.w %d15,[%a15]24
80009c70:	cd cf e2 0f 	mtcr $icr,%d15
80009c74:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009c78:	39 ff 22 00 	ld.bu %d15,[%a15]34
80009c7c:	6e 06       	jz %d15,80009c88 <ChainTask+0x64>
        p_ccb->d_isr_all_cnt = 0U;
80009c7e:	82 0f       	mov %d15,0
80009c80:	e9 ff 22 00 	st.b [%a15]34,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009c84:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c88:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009c8c:	8f f8 0f f1 	and %d15,%d8,255
80009c90:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009c94:	ee 0a       	jnz %d15,80009ca8 <ChainTask+0x84>
    OsEE_icr icr_temp = icr;
80009c96:	02 8f       	mov %d15,%d8
80009c98:	3b 30 01 20 	mov %d2,19
80009c9c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ca0:	cd cf e2 0f 	mtcr $icr,%d15
80009ca4:	0d 00 c0 04 	isync 
      }
#endif /* !OSEE_HAS_SERVICE_PROTECTION */

      flags = osEE_begin_primitive();

      if (p_tdb_act == p_curr) {
80009ca8:	80 cf       	mov.d %d15,%a12
80009caa:	7e 35       	jne %d15,%d3,80009cb4 <ChainTask+0x90>
        /* If the Task chain on it self, flag it. */
        p_tdb_act->p_tcb->status = OSEE_TASK_CHAINED;
80009cac:	cc c3       	ld.a %a15,[%a12]12
80009cae:	82 5f       	mov %d15,5
80009cb0:	28 2f       	st.b [%a15]2,%d15
80009cb2:	3c 1e       	j 80009cee <ChainTask+0xca>
        ev = E_OK;
      } else {
        ev = osEE_task_activated(p_tdb_act);
80009cb4:	40 c4       	mov.aa %a4,%a12
80009cb6:	6d 00 65 08 	call 8000ad80 <osEE_task_activated>
        if (ev == E_OK) {
80009cba:	df 02 21 80 	jne %d2,0,80009cfc <ChainTask+0xd8>
          (void)osEE_scheduler_task_insert(p_kdb, p_tdb_act);
80009cbe:	91 00 00 48 	movh.a %a4,32768
80009cc2:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
80009cc6:	40 c5       	mov.aa %a5,%a12
80009cc8:	6d 00 41 09 	call 8000af4a <osEE_scheduler_task_insert>
80009ccc:	3c 11       	j 80009cee <ChainTask+0xca>
80009cce:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
80009cd2:	cd cf e2 0f 	mtcr $icr,%d15
80009cd6:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009cda:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009cde:	de 19       	jne %d15,1,80009d10 <ChainTask+0xec>
    p_ccb->service_id            = service_id;
80009ce0:	82 4f       	mov %d15,4
80009ce2:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009ce6:	82 0f       	mov %d15,0
80009ce8:	e9 ff 23 00 	st.b [%a15]35,%d15
80009cec:	00 90       	ret 
80009cee:	40 9f       	mov.aa %a15,%a9
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
80009cf0:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
80009cf2:	c8 0f       	ld.a %a15,[%a15]0
80009cf4:	c8 14       	ld.a %a4,[%a15]4
80009cf6:	a0 05       	mov.a %a5,0
80009cf8:	1d 00 d3 0d 	j 8000b89e <osEE_hal_terminate_ctx>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009cfc:	4d c0 e2 3f 	mfcr %d3,$icr
80009d00:	02 3f       	mov %d15,%d3
80009d02:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009d06:	8f f8 0f 81 	and %d8,%d8,255
80009d0a:	5f 83 e2 ff 	jne %d3,%d8,80009cce <ChainTask+0xaa>
80009d0e:	3c e6       	j 80009cda <ChainTask+0xb6>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);

  return ev;
}
80009d10:	00 90       	ret 

80009d12 <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
80009d12:	40 ae       	mov.aa %a14,%sp
80009d14:	40 9f       	mov.aa %a15,%a9
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
80009d16:	c8 3f       	ld.a %a15,[%a15]12
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009d18:	c8 02       	ld.a %a2,[%a15]0
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009d1a:	82 3f       	mov %d15,3
80009d1c:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009d20:	82 1f       	mov %d15,1
80009d22:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009d26:	39 ff 20 00 	ld.bu %d15,[%a15]32
80009d2a:	6e 09       	jz %d15,80009d3c <TerminateTask+0x2a>
        p_ccb->s_isr_all_cnt = 0U;
80009d2c:	82 0f       	mov %d15,0
80009d2e:	e9 ff 20 00 	st.b [%a15]32,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009d32:	4c f6       	ld.w %d15,[%a15]24
80009d34:	cd cf e2 0f 	mtcr $icr,%d15
80009d38:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009d3c:	39 ff 22 00 	ld.bu %d15,[%a15]34
80009d40:	6e 06       	jz %d15,80009d4c <TerminateTask+0x3a>
        p_ccb->d_isr_all_cnt = 0U;
80009d42:	82 0f       	mov %d15,0
80009d44:	e9 ff 22 00 	st.b [%a15]34,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009d48:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009d4c:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009d50:	8f ff 0f 21 	and %d2,%d15,255
80009d54:	8b 32 a1 22 	ge.u %d2,%d2,19
80009d58:	f6 29       	jnz %d2,80009d6a <TerminateTask+0x58>
80009d5a:	3b 30 01 20 	mov %d2,19
80009d5e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009d62:	cd cf e2 0f 	mtcr $icr,%d15
80009d66:	0d 00 c0 04 	isync 
80009d6a:	99 24 04 00 	ld.a %a4,[%a2]4
80009d6e:	a0 05       	mov.a %a5,0
80009d70:	1d 00 97 0d 	j 8000b89e <osEE_hal_terminate_ctx>

80009d74 <Schedule>:
FUNC(StatusType, OS_CODE)
  Schedule
(
  void
)
{
80009d74:	40 ae       	mov.aa %a14,%sp
80009d76:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb  = p_cdb->p_ccb;
80009d78:	c8 3f       	ld.a %a15,[%a15]12
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_curr = p_ccb->p_curr;
80009d7a:	c8 0c       	ld.a %a12,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb  = p_curr->p_tcb;
80009d7c:	99 cd 0c 00 	ld.a %a13,[%a12]12 <0 <NULL>>
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009d80:	82 7f       	mov %d15,7
80009d82:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009d86:	82 1f       	mov %d15,1
80009d88:	e9 ff 23 00 	st.b [%a15]35,%d15
    ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
  } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
  if (p_tcb->current_prio == p_curr->dispatch_prio)
80009d8c:	39 d2 01 00 	ld.bu %d2,[%a13]1
80009d90:	39 cf 1d 00 	ld.bu %d15,[%a12]29
80009d94:	5f f2 30 80 	jne %d2,%d15,80009df4 <Schedule+0x80>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009d98:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009d9c:	8f f8 0f f1 	and %d15,%d8,255
80009da0:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009da4:	ee 0a       	jnz %d15,80009db8 <Schedule+0x44>
    OsEE_icr icr_temp = icr;
80009da6:	02 8f       	mov %d15,%d8
80009da8:	3b 30 01 20 	mov %d2,19
80009dac:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009db0:	cd cf e2 0f 	mtcr $icr,%d15
80009db4:	0d 00 c0 04 	isync 
  {
    /* Begin primitive */
    CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

    /* Release internal resources */
    p_tcb->current_prio = p_curr->ready_prio;
80009db8:	39 cf 1c 00 	ld.bu %d15,[%a12]28
80009dbc:	2c d1       	st.b [%a13]1,%d15
    /* Try preemption */
    (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
80009dbe:	91 00 00 48 	movh.a %a4,32768
80009dc2:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
80009dc6:	6d 00 ad 09 	call 8000b120 <osEE_scheduler_task_preemption_point>
    /* Restore internal resources */
    p_tcb->current_prio = p_curr->dispatch_prio;
80009dca:	39 cf 1d 00 	ld.bu %d15,[%a12]29
80009dce:	2c d1       	st.b [%a13]1,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009dd0:	4d c0 e2 3f 	mfcr %d3,$icr
80009dd4:	02 3f       	mov %d15,%d3
80009dd6:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009dda:	8f f8 0f 21 	and %d2,%d8,255
80009dde:	5f 23 08 00 	jeq %d3,%d2,80009dee <Schedule+0x7a>
80009de2:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009de6:	cd cf e2 0f 	mtcr $icr,%d15
80009dea:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009dee:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009df2:	5e 17       	jne %d15,1,80009e00 <Schedule+0x8c>
    p_ccb->service_id            = service_id;
80009df4:	82 6f       	mov %d15,6
80009df6:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009dfa:	82 0f       	mov %d15,0
80009dfc:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_Schedule);

  return ev;
}
80009e00:	82 02       	mov %d2,0
80009e02:	00 90       	ret 

80009e04 <ShutdownOS>:
FUNC(StatusType, OS_CODE)
  ShutdownOS
(
  VAR(StatusType, AUTOMATIC) Error
)
{
80009e04:	40 ae       	mov.aa %a14,%sp
80009e06:	40 94       	mov.aa %a4,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009e08:	cc 43       	ld.a %a15,[%a4]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e0a:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009e0e:	8f f2 0f f1 	and %d15,%d2,255
80009e12:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009e16:	ee 0a       	jnz %d15,80009e2a <ShutdownOS+0x26>
    OsEE_icr icr_temp = icr;
80009e18:	02 2f       	mov %d15,%d2
80009e1a:	3b 30 01 30 	mov %d3,19
80009e1e:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e22:	cd cf e2 0f 	mtcr $icr,%d15
80009e26:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009e2a:	39 ff 10 00 	ld.bu %d15,[%a15]16
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009e2e:	3b 90 04 30 	mov %d3,73
80009e32:	e9 f3 13 00 	st.b [%a15]19,%d3
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009e36:	82 13       	mov %d3,1
80009e38:	e9 f3 23 00 	st.b [%a15]35,%d3
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  {
    if ((os_status == OSEE_KERNEL_STARTED) ||
80009e3c:	c2 ff       	add %d15,-1
80009e3e:	16 ff       	and %d15,255
80009e40:	ff 2f 04 80 	jge.u %d15,2,80009e48 <ShutdownOS+0x44>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
80009e44:	1d ff 30 fc 	j 800096a4 <osEE_shutdown_os>
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
    p_ccb->service_id            = service_id;
80009e48:	da 48       	mov %d15,72
80009e4a:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009e4e:	82 0f       	mov %d15,0
80009e50:	e9 ff 23 00 	st.b [%a15]35,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e54:	4d c0 e2 3f 	mfcr %d3,$icr
80009e58:	02 3f       	mov %d15,%d3
80009e5a:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009e5e:	8f f2 0f 21 	and %d2,%d2,255
80009e62:	5f 23 08 00 	jeq %d3,%d2,80009e72 <ShutdownOS+0x6e>
80009e66:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e6a:	cd cf e2 0f 	mtcr $icr,%d15
80009e6e:	0d 00 c0 04 	isync 

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ShutdownOS);
  osEE_end_primitive(flags);

  return ev;
}
80009e72:	82 72       	mov %d2,7
80009e74:	00 90       	ret 

80009e76 <GetTaskID>:
FUNC(StatusType, OS_CODE)
  GetTaskID
(
  VAR(TaskRefType, AUTOMATIC) TaskID
)
{
80009e76:	40 ae       	mov.aa %a14,%sp
80009e78:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009e7a:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009e7c:	da 09       	mov %d15,9
80009e7e:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009e82:	82 1f       	mov %d15,1
80009e84:	e9 ff 23 00 	st.b [%a15]35,%d15
  /* [OS566]: The Operating System API shall check in extended mode all pointer
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
80009e88:	bd 04 2a 00 	jz.a %a4,80009edc <GetTaskID+0x66>
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_tdb = p_ccb->p_curr;
80009e8c:	c8 02       	ld.a %a2,[%a15]0
       value to return. If it its ISR2 we have to follow the chain and
       find the first task in the list (which is the running task
       which was preempted by the ISR, which could be the idle task),
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009e8e:	39 2f 14 00 	ld.bu %d15,[%a2]20 <0 <NULL>>
80009e92:	ff 2f 05 80 	jge.u %d15,2,80009e9c <GetTaskID+0x26>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
80009e96:	19 22 10 00 	ld.w %d2,[%a2]16
80009e9a:	3c 1b       	j 80009ed0 <GetTaskID+0x5a>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009e9c:	82 f2       	mov %d2,-1
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
    } else if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009e9e:	de 29       	jne %d15,2,80009ed0 <GetTaskID+0x5a>
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;
80009ea0:	c8 32       	ld.a %a2,[%a15]12
80009ea2:	d4 22       	ld.a %a2,[%a2]

      while (p_sn != NULL) {
80009ea4:	bd 02 16 00 	jz.a %a2,80009ed0 <GetTaskID+0x5a>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009ea8:	99 23 04 00 	ld.a %a3,[%a2]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009eac:	39 3f 14 00 	ld.bu %d15,[%a3]20
80009eb0:	ff 2f 0c 80 	jge.u %d15,2,80009ec8 <GetTaskID+0x52>
80009eb4:	3c 07       	j 80009ec2 <GetTaskID+0x4c>
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009eb6:	99 23 04 00 	ld.a %a3,[%a2]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009eba:	39 3f 14 00 	ld.bu %d15,[%a3]20
80009ebe:	ff 2f 05 80 	jge.u %d15,2,80009ec8 <GetTaskID+0x52>
          tid = p_searched_tdb->tid;
80009ec2:	19 32 10 00 	ld.w %d2,[%a3]16
          break;
80009ec6:	3c 05       	j 80009ed0 <GetTaskID+0x5a>
        } else {
          p_sn = p_sn->p_next;
80009ec8:	d4 22       	ld.a %a2,[%a2]
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
80009eca:	bd 02 f6 ff 	jnz.a %a2,80009eb6 <GetTaskID+0x40>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009ece:	82 f2       	mov %d2,-1
    } else {
      /* This is the case of the IDLE task. we do nothing because tid
         is already initialized */
    }
    /* XXX: This SHALL be atomic. */
    (*TaskID) = tid;
80009ed0:	74 42       	st.w [%a4],%d2
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009ed2:	39 ff 23 00 	ld.bu %d15,[%a15]35
    ev = E_OK;
80009ed6:	82 02       	mov %d2,0
80009ed8:	5e 1a       	jne %d15,1,80009eec <GetTaskID+0x76>
80009eda:	3c 03       	j 80009ee0 <GetTaskID+0x6a>
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
80009edc:	3b e0 00 20 	mov %d2,14
    p_ccb->service_id            = service_id;
80009ee0:	da 08       	mov %d15,8
80009ee2:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009ee6:	82 0f       	mov %d15,0
80009ee8:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskID);

  return ev;
}
80009eec:	00 90       	ret 

80009eee <GetTaskState>:
  GetTaskState
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(TaskStateRefType, AUTOMATIC)  State
)
{
80009eee:	40 ae       	mov.aa %a14,%sp
80009ef0:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009ef2:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009ef4:	da 0b       	mov %d15,11
80009ef6:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009efa:	82 1f       	mov %d15,1
80009efc:	e9 ff 23 00 	st.b [%a15]35,%d15
  /* [SWS_Os_00566]: The Operating System API shall check in extended mode all
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
80009f00:	bd 04 40 00 	jz.a %a4,80009f80 <GetTaskState+0x92>
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009f04:	91 00 00 28 	movh.a %a2,32768
80009f08:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009f0c:	4c 24       	ld.w %d15,[%a2]16
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009f0e:	82 32       	mov %d2,3
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009f10:	7f f4 31 80 	jge.u %d4,%d15,80009f72 <GetTaskState+0x84>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009f14:	91 00 00 28 	movh.a %a2,32768
80009f18:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009f1c:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009f20:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
80009f24:	d4 22       	ld.a %a2,[%a2]
80009f26:	99 22 0c 00 	ld.a %a2,[%a2]12
    switch (local_state) {
80009f2a:	0c 22       	ld.bu %d15,[%a2]2
80009f2c:	ff 6f 1f 80 	jge.u %d15,6,80009f6a <GetTaskState+0x7c>
80009f30:	91 10 00 28 	movh.a %a2,32769
80009f34:	d9 22 fc c9 	lea %a2,[%a2]-24772 <80009f3c <GetTaskState+0x4e>>
80009f38:	90 22       	addsc.a %a2,%a2,%d15,2
80009f3a:	dc 02       	ji %a2
80009f3c:	1d 00 0c 00 	j 80009f54 <GetTaskState+0x66>
80009f40:	1d 00 0d 00 	j 80009f5a <GetTaskState+0x6c>
80009f44:	1d 00 0b 00 	j 80009f5a <GetTaskState+0x6c>
80009f48:	1d 00 0c 00 	j 80009f60 <GetTaskState+0x72>
80009f4c:	1d 00 0d 00 	j 80009f66 <GetTaskState+0x78>
80009f50:	1d 00 0b 00 	j 80009f66 <GetTaskState+0x78>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
80009f54:	82 0f       	mov %d15,0
80009f56:	2c 40       	st.b [%a4]0,%d15
        break;
80009f58:	3c 09       	j 80009f6a <GetTaskState+0x7c>
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
80009f5a:	82 1f       	mov %d15,1
80009f5c:	2c 40       	st.b [%a4]0,%d15
        break;
80009f5e:	3c 06       	j 80009f6a <GetTaskState+0x7c>
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
80009f60:	82 3f       	mov %d15,3
80009f62:	2c 40       	st.b [%a4]0,%d15
        break;
80009f64:	3c 03       	j 80009f6a <GetTaskState+0x7c>
      case OSEE_TASK_RUNNING:
      case OSEE_TASK_CHAINED:
        (*State) = RUNNING;
80009f66:	82 4f       	mov %d15,4
80009f68:	2c 40       	st.b [%a4]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009f6a:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009f6e:	82 02       	mov %d2,0
80009f70:	5e 1b       	jne %d15,1,80009f86 <GetTaskState+0x98>
    p_ccb->service_id            = service_id;
80009f72:	da 0a       	mov %d15,10
80009f74:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009f78:	82 0f       	mov %d15,0
80009f7a:	e9 ff 23 00 	st.b [%a15]35,%d15
80009f7e:	00 90       	ret 
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
80009f80:	3b e0 00 20 	mov %d2,14
80009f84:	3c f7       	j 80009f72 <GetTaskState+0x84>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskState);

  return ev;
}
80009f86:	00 90       	ret 

80009f88 <SetRelAlarm>:
(
  VAR(AlarmType,  AUTOMATIC)  AlarmID,
  VAR(TickType,   AUTOMATIC)  increment,
  VAR(TickType,   AUTOMATIC)  cycle
)
{
80009f88:	40 ae       	mov.aa %a14,%sp
80009f8a:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009f8c:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009f8e:	da 29       	mov %d15,41
80009f90:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009f94:	82 1f       	mov %d15,1
80009f96:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (alarm_id < p_kdb->p_kcb->free_alarm_index);
#else
  return (alarm_id < p_kdb->alarm_array_size);
80009f9a:	91 00 00 28 	movh.a %a2,32768
80009f9e:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009fa2:	4c 28       	ld.w %d15,[%a2]32
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
80009fa4:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
80009fa6:	7f f4 33 80 	jge.u %d4,%d15,8000a00c <SetRelAlarm+0x84>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)
      p_alarm_db = (*p_kdb->p_alarm_ptr_array)[AlarmID];
80009faa:	91 00 00 28 	movh.a %a2,32768
80009fae:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009fb2:	99 22 1c 00 	ld.a %a2,[%a2]28 <8000001c <BootModeHeader0+0x1c>>
80009fb6:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009fba:	d4 25       	ld.a %a5,[%a2]
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
      p_counter_db = osEE_alarm_get_trigger_db(p_alarm_db)->p_counter_db;
80009fbc:	99 54 04 00 	ld.a %a4,[%a5]4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009fc0:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009fc4:	8f f8 0f f1 	and %d15,%d8,255
80009fc8:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009fcc:	ee 0a       	jnz %d15,80009fe0 <SetRelAlarm+0x58>
    OsEE_icr icr_temp = icr;
80009fce:	02 8f       	mov %d15,%d8
80009fd0:	3b 30 01 20 	mov %d2,19
80009fd4:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009fd8:	cd cf e2 0f 	mtcr $icr,%d15
80009fdc:	0d 00 c0 04 	isync 
80009fe0:	02 54       	mov %d4,%d5
#endif /* OSEE_HAS_CHECKS */
    {
      CONST(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      ev = osEE_alarm_set_rel(p_counter_db, p_alarm_db, increment, cycle);
80009fe2:	02 65       	mov %d5,%d6
80009fe4:	6d 00 ee 09 	call 8000b3c0 <osEE_alarm_set_rel>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009fe8:	4d c0 e2 4f 	mfcr %d4,$icr
80009fec:	02 4f       	mov %d15,%d4
80009fee:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009ff2:	8f f8 0f 31 	and %d3,%d8,255
80009ff6:	5f 34 08 00 	jeq %d4,%d3,8000a006 <SetRelAlarm+0x7e>
80009ffa:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ffe:	cd cf e2 0f 	mtcr $icr,%d15
8000a002:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a006:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a00a:	5e 17       	jne %d15,1,8000a018 <SetRelAlarm+0x90>
    p_ccb->service_id            = service_id;
8000a00c:	da 28       	mov %d15,40
8000a00e:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a012:	82 0f       	mov %d15,0
8000a014:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetRelAlarm);

  return ev;
}
8000a018:	00 90       	ret 

8000a01a <SetAbsAlarm>:
(
  VAR(AlarmType,  AUTOMATIC)  AlarmID,
  VAR(TickType,   AUTOMATIC)  start,
  VAR(TickType,   AUTOMATIC)  cycle
)
{
8000a01a:	40 ae       	mov.aa %a14,%sp
8000a01c:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a01e:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a020:	da 2b       	mov %d15,43
8000a022:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a026:	82 1f       	mov %d15,1
8000a028:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (alarm_id < p_kdb->p_kcb->free_alarm_index);
#else
  return (alarm_id < p_kdb->alarm_array_size);
8000a02c:	91 00 00 28 	movh.a %a2,32768
8000a030:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a034:	4c 28       	ld.w %d15,[%a2]32
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
8000a036:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
8000a038:	7f f4 33 80 	jge.u %d4,%d15,8000a09e <SetAbsAlarm+0x84>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)
      p_alarm_db = (*p_kdb->p_alarm_ptr_array)[AlarmID];
8000a03c:	91 00 00 28 	movh.a %a2,32768
8000a040:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a044:	99 22 1c 00 	ld.a %a2,[%a2]28 <8000001c <BootModeHeader0+0x1c>>
8000a048:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a04c:	d4 25       	ld.a %a5,[%a2]
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
      p_counter_db = osEE_alarm_get_trigger_db(p_alarm_db)->p_counter_db;
8000a04e:	99 54 04 00 	ld.a %a4,[%a5]4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a052:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a056:	8f f8 0f f1 	and %d15,%d8,255
8000a05a:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a05e:	ee 0a       	jnz %d15,8000a072 <SetAbsAlarm+0x58>
    OsEE_icr icr_temp = icr;
8000a060:	02 8f       	mov %d15,%d8
8000a062:	3b 30 01 20 	mov %d2,19
8000a066:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a06a:	cd cf e2 0f 	mtcr $icr,%d15
8000a06e:	0d 00 c0 04 	isync 
8000a072:	02 54       	mov %d4,%d5
#endif /* OSEE_HAS_CHECKS */
    {
      CONST(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      ev = osEE_alarm_set_abs(p_counter_db, p_alarm_db, start, cycle);
8000a074:	02 65       	mov %d5,%d6
8000a076:	6d 00 e7 09 	call 8000b444 <osEE_alarm_set_abs>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a07a:	4d c0 e2 4f 	mfcr %d4,$icr
8000a07e:	02 4f       	mov %d15,%d4
8000a080:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a084:	8f f8 0f 31 	and %d3,%d8,255
8000a088:	5f 34 08 00 	jeq %d4,%d3,8000a098 <SetAbsAlarm+0x7e>
8000a08c:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a090:	cd cf e2 0f 	mtcr $icr,%d15
8000a094:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a098:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a09c:	5e 17       	jne %d15,1,8000a0aa <SetAbsAlarm+0x90>
    p_ccb->service_id            = service_id;
8000a09e:	da 2a       	mov %d15,42
8000a0a0:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a0a4:	82 0f       	mov %d15,0
8000a0a6:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetAbsAlarm);

  return ev;
}
8000a0aa:	00 90       	ret 

8000a0ac <CancelAlarm>:
FUNC(StatusType, OS_CODE)
  CancelAlarm
(
  VAR(AlarmType, AUTOMATIC) AlarmID
)
{
8000a0ac:	40 ae       	mov.aa %a14,%sp
8000a0ae:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a0b0:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a0b2:	da 2d       	mov %d15,45
8000a0b4:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a0b8:	82 1f       	mov %d15,1
8000a0ba:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (alarm_id < p_kdb->p_kcb->free_alarm_index);
#else
  return (alarm_id < p_kdb->alarm_array_size);
8000a0be:	91 00 00 28 	movh.a %a2,32768
8000a0c2:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a0c6:	4c 28       	ld.w %d15,[%a2]32
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
8000a0c8:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
8000a0ca:	7f f4 2f 80 	jge.u %d4,%d15,8000a128 <CancelAlarm+0x7c>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)
      p_alarm_db  = (*p_kdb->p_alarm_ptr_array)[AlarmID];
8000a0ce:	91 00 00 28 	movh.a %a2,32768
8000a0d2:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a0d6:	99 22 1c 00 	ld.a %a2,[%a2]28 <8000001c <BootModeHeader0+0x1c>>
8000a0da:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a0de:	d4 24       	ld.a %a4,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a0e0:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a0e4:	8f f8 0f f1 	and %d15,%d8,255
8000a0e8:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a0ec:	ee 0a       	jnz %d15,8000a100 <CancelAlarm+0x54>
    OsEE_icr icr_temp = icr;
8000a0ee:	02 8f       	mov %d15,%d8
8000a0f0:	3b 30 01 20 	mov %d2,19
8000a0f4:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a0f8:	cd cf e2 0f 	mtcr $icr,%d15
8000a0fc:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    ev = osEE_alarm_cancel(p_alarm_db);
8000a100:	6d 00 d7 09 	call 8000b4ae <osEE_alarm_cancel>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a104:	4d c0 e2 4f 	mfcr %d4,$icr
8000a108:	02 4f       	mov %d15,%d4
8000a10a:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a10e:	8f f8 0f 31 	and %d3,%d8,255
8000a112:	5f 34 08 00 	jeq %d4,%d3,8000a122 <CancelAlarm+0x76>
8000a116:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a11a:	cd cf e2 0f 	mtcr $icr,%d15
8000a11e:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a122:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a126:	5e 17       	jne %d15,1,8000a134 <CancelAlarm+0x88>
    p_ccb->service_id            = service_id;
8000a128:	da 2c       	mov %d15,44
8000a12a:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a12e:	82 0f       	mov %d15,0
8000a130:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_CancelAlarm);

  return ev;
}
8000a134:	00 90       	ret 

8000a136 <GetAlarm>:
  GetAlarm
(
  VAR(AlarmType, AUTOMATIC)   AlarmID,
  VAR(TickRefType, AUTOMATIC) Tick
)
{
8000a136:	40 ae       	mov.aa %a14,%sp
8000a138:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a13a:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a13c:	da 27       	mov %d15,39
8000a13e:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a142:	82 1f       	mov %d15,1
8000a144:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (alarm_id < p_kdb->p_kcb->free_alarm_index);
#else
  return (alarm_id < p_kdb->alarm_array_size);
8000a148:	91 00 00 28 	movh.a %a2,32768
8000a14c:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a150:	4c 28       	ld.w %d15,[%a2]32
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
8000a152:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_POSTTASKHOOK_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
8000a154:	7f f4 33 80 	jge.u %d4,%d15,8000a1ba <GetAlarm+0x84>
    ev = E_OS_ID;
  } else
  if (Tick == NULL) {
8000a158:	bd 04 38 00 	jz.a %a4,8000a1c8 <GetAlarm+0x92>
    ev = E_OS_PARAM_POINTER;
  } else
  {
    CONSTP2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)
      p_alarm_db = (*p_kdb->p_alarm_ptr_array)[AlarmID];
8000a15c:	91 00 00 28 	movh.a %a2,32768
8000a160:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a164:	99 22 1c 00 	ld.a %a2,[%a2]28 <8000001c <BootModeHeader0+0x1c>>
8000a168:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a16c:	d4 22       	ld.a %a2,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a16e:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a172:	8f f8 0f f1 	and %d15,%d8,255
8000a176:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a17a:	ee 0a       	jnz %d15,8000a18e <GetAlarm+0x58>
    OsEE_icr icr_temp = icr;
8000a17c:	02 8f       	mov %d15,%d8
8000a17e:	3b 30 01 20 	mov %d2,19
8000a182:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a186:	cd cf e2 0f 	mtcr $icr,%d15
8000a18a:	0d 00 c0 04 	isync 
8000a18e:	40 45       	mov.aa %a5,%a4
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    ev = osEE_alarm_get(p_alarm_db, Tick);
8000a190:	40 24       	mov.aa %a4,%a2
8000a192:	6d 00 bd 09 	call 8000b50c <osEE_alarm_get>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a196:	4d c0 e2 4f 	mfcr %d4,$icr
8000a19a:	02 4f       	mov %d15,%d4
8000a19c:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a1a0:	8f f8 0f 31 	and %d3,%d8,255
8000a1a4:	5f 34 08 00 	jeq %d4,%d3,8000a1b4 <GetAlarm+0x7e>
8000a1a8:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a1ac:	cd cf e2 0f 	mtcr $icr,%d15
8000a1b0:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a1b4:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a1b8:	5e 1b       	jne %d15,1,8000a1ce <GetAlarm+0x98>
    p_ccb->service_id            = service_id;
8000a1ba:	da 26       	mov %d15,38
8000a1bc:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a1c0:	82 0f       	mov %d15,0
8000a1c2:	e9 ff 23 00 	st.b [%a15]35,%d15
8000a1c6:	00 90       	ret 
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
  } else
  if (Tick == NULL) {
    ev = E_OS_PARAM_POINTER;
8000a1c8:	3b e0 00 20 	mov %d2,14
8000a1cc:	3c f7       	j 8000a1ba <GetAlarm+0x84>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetAlarm);

  return ev;
}
8000a1ce:	00 90       	ret 

8000a1d0 <GetAlarmBase>:
  GetAlarmBase
(
  VAR(AlarmType, AUTOMATIC)         AlarmID,
  VAR(AlarmBaseRefType, AUTOMATIC)  Info
)
{
8000a1d0:	40 ae       	mov.aa %a14,%sp
8000a1d2:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a1d4:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a1d6:	da 25       	mov %d15,37
8000a1d8:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a1dc:	82 1f       	mov %d15,1
8000a1de:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (alarm_id < p_kdb->p_kcb->free_alarm_index);
#else
  return (alarm_id < p_kdb->alarm_array_size);
8000a1e2:	91 00 00 28 	movh.a %a2,32768
8000a1e6:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a1ea:	4c 28       	ld.w %d15,[%a2]32
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
8000a1ec:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_POSTTASKHOOK_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
8000a1ee:	7f f4 17 80 	jge.u %d4,%d15,8000a21c <GetAlarmBase+0x4c>
    ev = E_OS_ID;
  } else
  if (Info == NULL) {
8000a1f2:	bd 04 1c 00 	jz.a %a4,8000a22a <GetAlarmBase+0x5a>
    ev = E_OS_PARAM_POINTER;
  } else
  {
    CONSTP2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)
      p_alarm_db = (*p_kdb->p_alarm_ptr_array)[AlarmID];
8000a1f6:	91 00 00 28 	movh.a %a2,32768
8000a1fa:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a1fe:	99 22 1c 00 	ld.a %a2,[%a2]28 <8000001c <BootModeHeader0+0x1c>>
8000a202:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
      p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
      p_counter_db = p_trigger_db->p_counter_db;
8000a206:	d4 22       	ld.a %a2,[%a2]
8000a208:	99 22 04 00 	ld.a %a2,[%a2]4

    *Info = p_counter_db->info;
8000a20c:	09 22 44 09 	ld.d %e2,[%a2]4
8000a210:	89 42 40 09 	st.d [%a4],%e2
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a214:	39 ff 23 00 	ld.bu %d15,[%a15]35

    ev = E_OK;
8000a218:	82 02       	mov %d2,0
8000a21a:	5e 1b       	jne %d15,1,8000a230 <GetAlarmBase+0x60>
    p_ccb->service_id            = service_id;
8000a21c:	da 24       	mov %d15,36
8000a21e:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a222:	82 0f       	mov %d15,0
8000a224:	e9 ff 23 00 	st.b [%a15]35,%d15
8000a228:	00 90       	ret 
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
  } else
  if (Info == NULL) {
    ev = E_OS_PARAM_POINTER;
8000a22a:	3b e0 00 20 	mov %d2,14
8000a22e:	3c f7       	j 8000a21c <GetAlarmBase+0x4c>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetAlarmBase);

  return ev;
}
8000a230:	00 90       	ret 

8000a232 <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000a232:	40 ae       	mov.aa %a14,%sp
8000a234:	40 9d       	mov.aa %a13,%a9
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
8000a236:	99 dc 0c 00 	ld.a %a12,[%a13]12 <f003000c <_SMALL_DATA4_+0x4002800c>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
8000a23a:	54 ca       	ld.w %d10,[%a12]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
8000a23c:	60 a3       	mov.a %a3,%d10
8000a23e:	19 38 0c 00 	ld.w %d8,[%a3]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a242:	da 23       	mov %d15,35
8000a244:	e9 cf 13 00 	st.b [%a12]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a248:	82 1f       	mov %d15,1
8000a24a:	e9 cf 23 00 	st.b [%a12]35,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a24e:	4d c0 e2 9f 	mfcr %d9,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a252:	8f f9 0f f1 	and %d15,%d9,255
8000a256:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a25a:	ee 0a       	jnz %d15,8000a26e <WaitEvent+0x3c>
    OsEE_icr icr_temp = icr;
8000a25c:	02 9f       	mov %d15,%d9
8000a25e:	3b 30 01 50 	mov %d5,19
8000a262:	37 5f 08 f0 	insert %d15,%d15,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a266:	cd cf e2 0f 	mtcr $icr,%d15
8000a26a:	0d 00 c0 04 	isync 
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000a26e:	cc d4       	ld.a %a15,[%a13]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a270:	82 12       	mov %d2,1
8000a272:	82 03       	mov %d3,0
8000a274:	0b 23 10 68 	mov %e6,%d3,%d2
8000a278:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a27c:	df 06 fa ff 	jne %d6,0,8000a270 <WaitEvent+0x3e>
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);

    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
8000a280:	60 83       	mov.a %a3,%d8
8000a282:	4c 33       	ld.w %d15,[%a3]12
8000a284:	26 4f       	and %d15,%d4
8000a286:	ee 1b       	jnz %d15,8000a2bc <WaitEvent+0x8a>
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;
8000a288:	59 34 08 00 	st.w [%a3]8,%d4

      p_curr_tcb->p_own_sn =
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
8000a28c:	40 d4       	mov.aa %a4,%a13
8000a28e:	d9 c5 04 00 	lea %a5,[%a12]4
8000a292:	6d 00 63 05 	call 8000ad58 <osEE_scheduler_core_pop_running>
    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;

      p_curr_tcb->p_own_sn =
8000a296:	60 83       	mov.a %a3,%d8
8000a298:	b5 32 10 00 	st.a [%a3]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
8000a29c:	82 3f       	mov %d15,3
8000a29e:	2c 32       	st.b [%a3]2,%d15
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000a2a0:	cc d4       	ld.a %a15,[%a13]16
8000a2a2:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000a2a6:	82 0f       	mov %d15,0
8000a2a8:	68 0f       	st.w [%a15]0,%d15

      osEE_unlock_core(p_cdb);

      osEE_change_context_from_running(p_curr, p_ccb->p_curr);
8000a2aa:	60 a4       	mov.a %a4,%d10
8000a2ac:	d4 c5       	ld.a %a5,[%a12]
8000a2ae:	6d 00 62 09 	call 8000b572 <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
8000a2b2:	82 02       	mov %d2,0
8000a2b4:	60 83       	mov.a %a3,%d8
8000a2b6:	59 32 08 00 	st.w [%a3]8,%d2
8000a2ba:	3c 06       	j 8000a2c6 <WaitEvent+0x94>
8000a2bc:	cc d4       	ld.a %a15,[%a13]16
8000a2be:	0d 00 80 04 	dsync 
8000a2c2:	82 0f       	mov %d15,0
8000a2c4:	68 0f       	st.w [%a15]0,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a2c6:	4d c0 e2 3f 	mfcr %d3,$icr
8000a2ca:	02 3f       	mov %d15,%d3
8000a2cc:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a2d0:	8f f9 0f 21 	and %d2,%d9,255
8000a2d4:	5f 23 08 00 	jeq %d3,%d2,8000a2e4 <WaitEvent+0xb2>
8000a2d8:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a2dc:	cd cf e2 0f 	mtcr $icr,%d15
8000a2e0:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a2e4:	39 cf 23 00 	ld.bu %d15,[%a12]35
8000a2e8:	5e 17       	jne %d15,1,8000a2f6 <WaitEvent+0xc4>
    p_ccb->service_id            = service_id;
8000a2ea:	da 22       	mov %d15,34
8000a2ec:	e9 cf 13 00 	st.b [%a12]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a2f0:	82 0f       	mov %d15,0
8000a2f2:	e9 cf 23 00 	st.b [%a12]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
8000a2f6:	82 02       	mov %d2,0
8000a2f8:	00 90       	ret 

8000a2fa <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000a2fa:	40 ae       	mov.aa %a14,%sp
8000a2fc:	20 08       	sub.a %sp,8
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000a2fe:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb  = p_cdb->p_ccb;
8000a300:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a302:	da 1d       	mov %d15,29
8000a304:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a308:	82 1f       	mov %d15,1
8000a30a:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
8000a30e:	91 00 00 28 	movh.a %a2,32768
8000a312:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a316:	4c 24       	ld.w %d15,[%a2]16
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000a318:	3f f4 06 80 	jlt.u %d4,%d15,8000a324 <SetEvent+0x2a>
    ev = E_OS_ID;
8000a31c:	82 3f       	mov %d15,3
8000a31e:	e9 ef ff ff 	st.b [%a14]-1,%d15
8000a322:	3c 3d       	j 8000a39c <SetEvent+0xa2>
  } else {
    P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_sn;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000a324:	91 00 00 28 	movh.a %a2,32768
8000a328:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a32c:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
8000a330:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a334:	d4 24       	ld.a %a4,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a336:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a33a:	8f f8 0f f1 	and %d15,%d8,255
8000a33e:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a342:	ee 0a       	jnz %d15,8000a356 <SetEvent+0x5c>
    OsEE_icr icr_temp = icr;
8000a344:	02 8f       	mov %d15,%d8
8000a346:	3b 30 01 20 	mov %d2,19
8000a34a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a34e:	cd cf e2 0f 	mtcr $icr,%d15
8000a352:	0d 00 c0 04 	isync 
8000a356:	02 54       	mov %d4,%d5
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    p_sn = osEE_task_event_set_mask(p_tdb_waking_up, Mask, &ev);
8000a358:	d9 e5 ff ff 	lea %a5,[%a14]-1
8000a35c:	6d 00 41 05 	call 8000adde <osEE_task_event_set_mask>

    if (p_sn != NULL) {
8000a360:	bc 2f       	jz.a %a2,8000a37e <SetEvent+0x84>
      /* Release the TASK (and the SN) */
      if (osEE_scheduler_task_unblocked(p_kdb, p_sn))
8000a362:	91 00 00 48 	movh.a %a4,32768
8000a366:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000a36a:	40 25       	mov.aa %a5,%a2
8000a36c:	6d 00 37 06 	call 8000afda <osEE_scheduler_task_unblocked>
8000a370:	76 27       	jz %d2,8000a37e <SetEvent+0x84>
      {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
8000a372:	91 00 00 48 	movh.a %a4,32768
8000a376:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000a37a:	6d 00 d3 06 	call 8000b120 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a37e:	4d c0 e2 3f 	mfcr %d3,$icr
8000a382:	02 3f       	mov %d15,%d3
8000a384:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a388:	8f f8 0f 21 	and %d2,%d8,255
8000a38c:	5f 23 08 00 	jeq %d3,%d2,8000a39c <SetEvent+0xa2>
8000a390:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a394:	cd cf e2 0f 	mtcr $icr,%d15
8000a398:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a39c:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a3a0:	5e 17       	jne %d15,1,8000a3ae <SetEvent+0xb4>
    p_ccb->service_id            = service_id;
8000a3a2:	da 1c       	mov %d15,28
8000a3a4:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a3a8:	82 0f       	mov %d15,0
8000a3aa:	e9 ff 23 00 	st.b [%a15]35,%d15
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
8000a3ae:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
8000a3b2:	00 90       	ret 

8000a3b4 <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
8000a3b4:	40 ae       	mov.aa %a14,%sp
8000a3b6:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
8000a3b8:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a3ba:	da 21       	mov %d15,33
8000a3bc:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a3c0:	82 1f       	mov %d15,1
8000a3c2:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
8000a3c6:	91 00 00 28 	movh.a %a2,32768
8000a3ca:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a3ce:	4c 24       	ld.w %d15,[%a2]16
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
8000a3d0:	82 32       	mov %d2,3
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000a3d2:	7f f4 14 80 	jge.u %d4,%d15,8000a3fa <GetEvent+0x46>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000a3d6:	91 00 00 28 	movh.a %a2,32768
8000a3da:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a3de:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
8000a3e2:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
8000a3e6:	d4 22       	ld.a %a2,[%a2]
8000a3e8:	99 22 0c 00 	ld.a %a2,[%a2]12
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
8000a3ec:	bc 4e       	jz.a %a4,8000a408 <GetEvent+0x54>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      /* N.B. XXX This MUST Be ATOMIC! */
      (*Event) = p_tcb_event->event_mask;
8000a3ee:	4c 23       	ld.w %d15,[%a2]12
8000a3f0:	6c 40       	st.w [%a4]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a3f2:	39 ff 23 00 	ld.bu %d15,[%a15]35

      ev = E_OK;
8000a3f6:	82 02       	mov %d2,0
8000a3f8:	5e 1b       	jne %d15,1,8000a40e <GetEvent+0x5a>
    p_ccb->service_id            = service_id;
8000a3fa:	da 20       	mov %d15,32
8000a3fc:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a400:	82 0f       	mov %d15,0
8000a402:	e9 ff 23 00 	st.b [%a15]35,%d15
8000a406:	00 90       	ret 
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
8000a408:	3b e0 00 20 	mov %d2,14
8000a40c:	3c f7       	j 8000a3fa <GetEvent+0x46>
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
8000a40e:	00 90       	ret 

8000a410 <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000a410:	40 ae       	mov.aa %a14,%sp
8000a412:	40 93       	mov.aa %a3,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
8000a414:	99 32 0c 00 	ld.a %a2,[%a3]12 <f003000c <_SMALL_DATA4_+0x4002800c>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
8000a418:	cc 20       	ld.a %a15,[%a2]0
8000a41a:	c8 34       	ld.a %a4,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a41c:	da 1f       	mov %d15,31
8000a41e:	e9 2f 13 00 	st.b [%a2]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a422:	82 1f       	mov %d15,1
8000a424:	e9 2f 23 00 	st.b [%a2]35,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a428:	4d c0 e2 5f 	mfcr %d5,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a42c:	8f f5 0f f1 	and %d15,%d5,255
8000a430:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a434:	ee 0a       	jnz %d15,8000a448 <ClearEvent+0x38>
    OsEE_icr icr_temp = icr;
8000a436:	02 5f       	mov %d15,%d5
8000a438:	3b 30 01 60 	mov %d6,19
8000a43c:	37 6f 08 f0 	insert %d15,%d15,%d6,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a440:	cd cf e2 0f 	mtcr $icr,%d15
8000a444:	0d 00 c0 04 	isync 
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000a448:	cc 34       	ld.a %a15,[%a3]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a44a:	82 12       	mov %d2,1
8000a44c:	82 03       	mov %d3,0
8000a44e:	0b 23 10 68 	mov %e6,%d3,%d2
8000a452:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a456:	df 06 fa ff 	jne %d6,0,8000a44a <ClearEvent+0x3a>
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);
    /* XXX: Maybe we need to introduce an HAL for atomic Load-Modify-Store
            Operations */
    p_curr_tcb->event_mask &= ~Mask;
8000a45a:	4c 43       	ld.w %d15,[%a4]12
8000a45c:	0f 4f e0 40 	andn %d4,%d15,%d4
8000a460:	59 44 0c 00 	st.w [%a4]12,%d4
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000a464:	cc 34       	ld.a %a15,[%a3]16
8000a466:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000a46a:	82 0f       	mov %d15,0
8000a46c:	68 0f       	st.w [%a15]0,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a46e:	4d c0 e2 3f 	mfcr %d3,$icr
8000a472:	02 3f       	mov %d15,%d3
8000a474:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a478:	8f f5 0f 21 	and %d2,%d5,255
8000a47c:	5f 23 08 00 	jeq %d3,%d2,8000a48c <ClearEvent+0x7c>
8000a480:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a484:	cd cf e2 0f 	mtcr $icr,%d15
8000a488:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a48c:	39 2f 23 00 	ld.bu %d15,[%a2]35
8000a490:	5e 17       	jne %d15,1,8000a49e <ClearEvent+0x8e>
    p_ccb->service_id            = service_id;
8000a492:	da 1e       	mov %d15,30
8000a494:	e9 2f 13 00 	st.b [%a2]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a498:	82 0f       	mov %d15,0
8000a49a:	e9 2f 23 00 	st.b [%a2]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
8000a49e:	82 02       	mov %d2,0
8000a4a0:	00 90       	ret 

8000a4a2 <GetCounterValue>:
  GetCounterValue
(
  VAR(CounterType, AUTOMATIC) CounterID,
  VAR(TickRefType, AUTOMATIC) Value
)
{
8000a4a2:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000a4a4:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a4a6:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a4a8:	da 31       	mov %d15,49
8000a4aa:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a4ae:	82 1f       	mov %d15,1
8000a4b0:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (counter_id < p_kdb->p_kcb->free_counter_index);
#else
  return (counter_id < p_kdb->counter_array_size);
8000a4b4:	91 00 00 28 	movh.a %a2,32768
8000a4b8:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a4bc:	4c 26       	ld.w %d15,[%a2]24
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00376] If the input parameter <CounterID> in a call of
    GetCounterValue() is not valid, GetCounterValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
    ev = E_OS_ID;
8000a4be:	82 32       	mov %d2,3
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00376] If the input parameter <CounterID> in a call of
    GetCounterValue() is not valid, GetCounterValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
8000a4c0:	7f f4 1e 80 	jge.u %d4,%d15,8000a4fc <GetCounterValue+0x5a>
    ev = E_OS_ID;
  } else
  if (Value == NULL) {
8000a4c4:	bd 04 23 00 	jz.a %a4,8000a50a <GetCounterValue+0x68>
    ev = E_OS_PARAM_POINTER;
  } else
  {
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_CONST)
      p_counter_db = (*p_kdb->p_counter_ptr_array)[CounterID];
8000a4c8:	91 00 00 28 	movh.a %a2,32768
8000a4cc:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a4d0:	99 22 14 00 	ld.a %a2,[%a2]20 <80000014 <BootModeHeader0+0x14>>
8000a4d4:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a4d8:	d4 22       	ld.a %a2,[%a2]
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000a4da:	4d c0 e1 ff 	mfcr %d15,$core_id
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) curr_core_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != curr_core_id) {
8000a4de:	79 23 0c 00 	ld.b %d3,[%a2]12
8000a4e2:	37 0f 48 f0 	extr %d15,%d15,0,8
      ev = E_OS_CORE;
8000a4e6:	3b 70 01 20 	mov %d2,23
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) curr_core_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != curr_core_id) {
8000a4ea:	5f f3 06 80 	jne %d3,%d15,8000a4f6 <GetCounterValue+0x54>
    of hardware timers (which drive counters) in such that the lowest value is
    zero and consecutive reads return an increasing count value until the timer
    wraps at its modulus. (SRS_Frt_00030, SRS_Frt_00031) */
/* EG  TODO: Add support for HARDWARE counters */

      (*Value) = p_counter_db->p_counter_cb->value;
8000a4ee:	d4 22       	ld.a %a2,[%a2]
8000a4f0:	4c 21       	ld.w %d15,[%a2]4
8000a4f2:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
8000a4f4:	82 02       	mov %d2,0
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a4f6:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a4fa:	5e 1b       	jne %d15,1,8000a510 <GetCounterValue+0x6e>
    p_ccb->service_id            = service_id;
8000a4fc:	da 30       	mov %d15,48
8000a4fe:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a502:	82 0f       	mov %d15,0
8000a504:	e9 ff 23 00 	st.b [%a15]35,%d15
8000a508:	00 90       	ret 
    GetCounterValue() is not valid, GetCounterValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
    ev = E_OS_ID;
  } else
  if (Value == NULL) {
    ev = E_OS_PARAM_POINTER;
8000a50a:	3b e0 00 20 	mov %d2,14
8000a50e:	3c f7       	j 8000a4fc <GetCounterValue+0x5a>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetCounterValue);

  return ev;
}
8000a510:	00 90       	ret 

8000a512 <GetElapsedValue>:
(
  VAR(CounterType, AUTOMATIC) CounterID,
  VAR(TickRefType, AUTOMATIC) Value,
  VAR(TickRefType, AUTOMATIC) ElapsedValue
)
{
8000a512:	40 ae       	mov.aa %a14,%sp
8000a514:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a516:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a518:	da 33       	mov %d15,51
8000a51a:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a51e:	82 1f       	mov %d15,1
8000a520:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (counter_id < p_kdb->p_kcb->free_counter_index);
#else
  return (counter_id < p_kdb->counter_array_size);
8000a524:	91 00 00 28 	movh.a %a2,32768
8000a528:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a52c:	4c 26       	ld.w %d15,[%a2]24
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
 /* [SWS_Os_00381] If the input parameter <CounterID> in a call of
    GetElapsedValue() is not valid GetElapsedValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
    ev = E_OS_ID;
8000a52e:	82 32       	mov %d2,3
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
 /* [SWS_Os_00381] If the input parameter <CounterID> in a call of
    GetElapsedValue() is not valid GetElapsedValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
8000a530:	7f f4 30 80 	jge.u %d4,%d15,8000a590 <GetElapsedValue+0x7e>
    ev = E_OS_ID;
  } else
  if ((Value == NULL) || (ElapsedValue == NULL)) {
8000a534:	80 42       	mov.d %d2,%a4
8000a536:	80 53       	mov.d %d3,%a5
8000a538:	ba 02       	eq %d15,%d2,0
8000a53a:	8b 03 e0 f4 	or.eq %d15,%d3,0
    ev = E_OS_PARAM_POINTER;
8000a53e:	3b e0 00 20 	mov %d2,14
 /* [SWS_Os_00381] If the input parameter <CounterID> in a call of
    GetElapsedValue() is not valid GetElapsedValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
    ev = E_OS_ID;
  } else
  if ((Value == NULL) || (ElapsedValue == NULL)) {
8000a542:	ee 27       	jnz %d15,8000a590 <GetElapsedValue+0x7e>
    ev = E_OS_PARAM_POINTER;
  } else
  {
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
      p_counter_db = (*p_kdb->p_counter_ptr_array)[CounterID];
8000a544:	91 00 00 28 	movh.a %a2,32768
8000a548:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a54c:	99 22 14 00 	ld.a %a2,[%a2]20 <80000014 <BootModeHeader0+0x14>>
8000a550:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a554:	d4 22       	ld.a %a2,[%a2]
    CONST(TickType, AUTOMATIC)
      local_value = (*Value);
8000a556:	54 44       	ld.w %d4,[%a4]
8000a558:	4d c0 e1 ff 	mfcr %d15,$core_id
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) curr_core_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != curr_core_id) {
8000a55c:	79 23 0c 00 	ld.b %d3,[%a2]12
8000a560:	37 0f 48 f0 	extr %d15,%d15,0,8
      ev = E_OS_CORE;
8000a564:	3b 70 01 20 	mov %d2,23
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) curr_core_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != curr_core_id) {
8000a568:	5f f3 11 80 	jne %d3,%d15,8000a58a <GetElapsedValue+0x78>
/* [SWS_Os_00382] If the input parameters in a call of GetElapsedValue()
     are valid, GetElapsedValue() shall return the number of elapsed ticks
     since the given <Value> value via <ElapsedValue> and shall return
     E_OK. (SRS_Frt_00034) */
      CONST(TickType, AUTOMATIC)
        local_curr_value = p_counter_db->p_counter_cb->value;
8000a56c:	d4 23       	ld.a %a3,[%a2]
8000a56e:	4c 31       	ld.w %d15,[%a3]4
    <Value> value a second (or multiple) time, the result returned is wrong.
    The reason is that the service can not detect such a relative overflow. */
/* EG  TODO: Add support for HARDWARE counters */
      (*ElapsedValue) = (local_curr_value >= local_value)?
        /* Timer did not pass the <value> yet */
        (local_curr_value - local_value):
8000a570:	3f 4f 04 80 	jlt.u %d15,%d4,8000a578 <GetElapsedValue+0x66>
8000a574:	52 44       	sub %d4,%d15,%d4
8000a576:	3c 07       	j 8000a584 <GetElapsedValue+0x72>
8000a578:	19 22 04 00 	ld.w %d2,[%a2]4
8000a57c:	42 f2       	add %d2,%d15
8000a57e:	c2 12       	add %d2,1
8000a580:	0b 42 80 40 	sub %d4,%d2,%d4

/* [SWS_Os_00533] Caveats of GetElapsedValue(): If the timer already passed the
    <Value> value a second (or multiple) time, the result returned is wrong.
    The reason is that the service can not detect such a relative overflow. */
/* EG  TODO: Add support for HARDWARE counters */
      (*ElapsedValue) = (local_curr_value >= local_value)?
8000a584:	74 54       	st.w [%a5],%d4
        ((p_counter_db->info.maxallowedvalue -
          (local_value - local_curr_value)) + 1U);

/* [SWS_Os_00460] GetElapsedValue() shall return the current tick value of the
    counter in the <Value> parameter. */
      (*Value) = local_curr_value;
8000a586:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
8000a588:	82 02       	mov %d2,0
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a58a:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a58e:	5e 17       	jne %d15,1,8000a59c <GetElapsedValue+0x8a>
    p_ccb->service_id            = service_id;
8000a590:	da 32       	mov %d15,50
8000a592:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a596:	82 0f       	mov %d15,0
8000a598:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetElapsedValue);

  return ev;
}
8000a59c:	00 90       	ret 

8000a59e <IncrementCounter>:
FUNC(StatusType, OS_CODE)
  IncrementCounter
(
  VAR(CounterType, AUTOMATIC) CounterID
)
{
8000a59e:	40 ae       	mov.aa %a14,%sp
8000a5a0:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a5a2:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a5a4:	da 2f       	mov %d15,47
8000a5a6:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a5aa:	82 1f       	mov %d15,1
8000a5ac:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (counter_id < p_kdb->p_kcb->free_counter_index);
#else
  return (counter_id < p_kdb->counter_array_size);
8000a5b0:	91 00 00 28 	movh.a %a2,32768
8000a5b4:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a5b8:	4c 26       	ld.w %d15,[%a2]24
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00285] If the input parameter <CounterID> in a call of
    IncrementCounter() is not valid OR the counter is a hardware counter,
    IncrementCounter() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
    ev = E_OS_ID;
8000a5ba:	82 32       	mov %d2,3
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00285] If the input parameter <CounterID> in a call of
    IncrementCounter() is not valid OR the counter is a hardware counter,
    IncrementCounter() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
8000a5bc:	7f f4 48 80 	jge.u %d4,%d15,8000a64c <IncrementCounter+0xae>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
      p_counter_db = (*p_kdb->p_counter_ptr_array)[CounterID];
8000a5c0:	91 00 00 28 	movh.a %a2,32768
8000a5c4:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a5c8:	99 22 14 00 	ld.a %a2,[%a2]20 <80000014 <BootModeHeader0+0x14>>
8000a5cc:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a5d0:	d4 24       	ld.a %a4,[%a2]
8000a5d2:	4d c0 e1 ff 	mfcr %d15,$core_id
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) current_cpu_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != current_cpu_id) {
8000a5d6:	79 43 0c 00 	ld.b %d3,[%a4]12
8000a5da:	37 0f 48 f0 	extr %d15,%d15,0,8
      ev = E_OS_CORE;
8000a5de:	3b 70 01 20 	mov %d2,23
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) current_cpu_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != current_cpu_id) {
8000a5e2:	5f f3 32 80 	jne %d3,%d15,8000a646 <IncrementCounter+0xa8>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a5e6:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a5ea:	8f f8 0f f1 	and %d15,%d8,255
8000a5ee:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a5f2:	ee 0a       	jnz %d15,8000a606 <IncrementCounter+0x68>
    OsEE_icr icr_temp = icr;
8000a5f4:	02 8f       	mov %d15,%d8
8000a5f6:	3b 30 01 20 	mov %d2,19
8000a5fa:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a5fe:	cd cf e2 0f 	mtcr $icr,%d15
8000a602:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();

/* N.B. Multi-core critical sections are handled inside
   TODO: Pass flags to osEE_counter_increment so it could re-enable
         interrupts/lower IPL outside critical sections. */
      osEE_counter_increment(p_counter_db);
8000a606:	6d 00 33 06 	call 8000b26c <osEE_counter_increment>
8000a60a:	40 92       	mov.aa %a2,%a9
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
8000a60c:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>

/* [SWS_Os_00529] Caveats of IncrementCounter(): If called from a task,
    rescheduling may take place. */
      if (osEE_get_curr_task()->task_type <= OSEE_TASK_TYPE_EXTENDED) {
8000a610:	d4 22       	ld.a %a2,[%a2]
8000a612:	39 2f 14 00 	ld.bu %d15,[%a2]20 <8000000c <BootModeHeader0+0xc>>
8000a616:	ff 2f 08 80 	jge.u %d15,2,8000a626 <IncrementCounter+0x88>
        (void)osEE_scheduler_task_preemption_point(p_kdb);
8000a61a:	91 00 00 48 	movh.a %a4,32768
8000a61e:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000a622:	6d 00 7f 05 	call 8000b120 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a626:	4d c0 e2 3f 	mfcr %d3,$icr
8000a62a:	02 3f       	mov %d15,%d3
8000a62c:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a630:	8f f8 0f 21 	and %d2,%d8,255
8000a634:	5f 23 08 00 	jeq %d3,%d2,8000a644 <IncrementCounter+0xa6>
8000a638:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a63c:	cd cf e2 0f 	mtcr $icr,%d15
8000a640:	0d 00 c0 04 	isync 
      }

      osEE_end_primitive(flags);

      ev = E_OK;
8000a644:	82 02       	mov %d2,0
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a646:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a64a:	5e 17       	jne %d15,1,8000a658 <IncrementCounter+0xba>
    p_ccb->service_id            = service_id;
8000a64c:	da 2e       	mov %d15,46
8000a64e:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a652:	82 0f       	mov %d15,0
8000a654:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_IncrementCounter);

  return ev;
}
8000a658:	00 90       	ret 

8000a65a <GetISRID>:
FUNC(ISRType, OS_CODE)
  GetISRID
(
  void
)
{
8000a65a:	40 ae       	mov.aa %a14,%sp
8000a65c:	40 9f       	mov.aa %a15,%a9
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
8000a65e:	c8 3f       	ld.a %a15,[%a15]12
8000a660:	c8 0f       	ld.a %a15,[%a15]0
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a662:	39 ff 14 00 	ld.bu %d15,[%a15]20 <0 <NULL>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
8000a666:	82 f2       	mov %d2,-1
{
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a668:	5e 22       	jne %d15,2,8000a66c <GetISRID+0x12>
    isr_id = p_tdb->tid;
8000a66a:	48 42       	ld.w %d2,[%a15]16
  } else {
    isr_id = INVALID_ISR;
  }

  return isr_id;
}
8000a66c:	00 90       	ret 

8000a66e <GetNumberOfActivatedCores>:
FUNC(CoreNumType, OS_CODE)
  GetNumberOfActivatedCores
(
  void
)
{
8000a66e:	40 ae       	mov.aa %a14,%sp
  /* [SWS_Os_00673] The return value of GetNumberOfActivatedCores shall be less
      or equal to the configured value of "OsNumberOfCores". (SRS_Os_80001) */
  return osEE_get_kernel()->p_kcb->ar_num_core_started;
8000a670:	91 00 00 f8 	movh.a %a15,32768
8000a674:	99 ff 00 40 	ld.a %a15,[%a15]256 <80000100 <osEE_kdb_var>>
}
8000a678:	08 c2       	ld.bu %d2,[%a15]12
8000a67a:	00 90       	ret 

8000a67c <StartCore>:
  StartCore
(
  VAR(CoreIdType, AUTOMATIC)                  CoreID,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  Status
)
{
8000a67c:	40 ae       	mov.aa %a14,%sp
8000a67e:	40 4c       	mov.aa %a12,%a4
    osEE_unlock_kernel();

    osEE_end_primitive(flags);
  } else {
    /* CoreID >= OS_CORE_ID_ARR_SIZE */
    ev = E_OS_ID;
8000a680:	82 35       	mov %d5,3
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  Status
)
{
  /* Error Value */
  VAR(StatusType, AUTOMATIC) ev = E_OK;
  if (CoreID < OS_CORE_ID_ARR_SIZE) {
8000a682:	ff 34 56 00 	jge %d4,3,8000a72e <StartCore+0xb2>
8000a686:	40 9f       	mov.aa %a15,%a9
    CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
      p_cdb       = osEE_get_curr_core();
    CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
      p_ccb       = p_cdb->p_ccb;
8000a688:	c8 33       	ld.a %a3,[%a15]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a68a:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a68e:	8f f8 0f f1 	and %d15,%d8,255
8000a692:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a696:	ee 0a       	jnz %d15,8000a6aa <StartCore+0x2e>
    OsEE_icr icr_temp = icr;
8000a698:	02 8f       	mov %d15,%d8
8000a69a:	3b 30 01 50 	mov %d5,19
8000a69e:	37 5f 08 f0 	insert %d15,%d15,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a6a2:	cd cf e2 0f 	mtcr $icr,%d15
8000a6a6:	0d 00 c0 04 	isync 
 *  \brief Locks the kernel.
 *  
 *  Locks the kernel using the KDB p_lock spinlock.
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_lock_kernel(void) {
  osEE_hal_spin_lock(osEE_kdb_var.p_lock);
8000a6aa:	91 00 00 f8 	movh.a %a15,32768
8000a6ae:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
8000a6b2:	c8 1f       	ld.a %a15,[%a15]4
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a6b4:	82 12       	mov %d2,1
8000a6b6:	82 03       	mov %d3,0
8000a6b8:	0b 23 10 68 	mov %e6,%d3,%d2
8000a6bc:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a6c0:	df 06 fa ff 	jne %d6,0,8000a6b4 <StartCore+0x38>
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)
      p_kdb = osEE_lock_and_get_kernel();
    CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)
      p_kcb = p_kdb->p_kcb;
8000a6c4:	91 00 00 28 	movh.a %a2,32768
8000a6c8:	99 22 00 40 	ld.a %a2,[%a2]256 <80000100 <osEE_kdb_var>>
    /* Variable introduced to meet MISRA 12.1 in the next else if statement */
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      ar_core_mask = p_kcb->ar_core_mask;
8000a6cc:	54 23       	ld.w %d3,[%a2]
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      core_id_mask =  ((CoreMaskType)1U << (OsEE_reg)CoreID);
8000a6ce:	82 1f       	mov %d15,1
8000a6d0:	0f 4f 00 f0 	sh %d15,%d15,%d4

    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
8000a6d4:	8f 7f 00 21 	and %d2,%d15,7
      ev = E_OS_ID;
8000a6d8:	82 35       	mov %d5,3
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      ar_core_mask = p_kcb->ar_core_mask;
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      core_id_mask =  ((CoreMaskType)1U << (OsEE_reg)CoreID);

    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
8000a6da:	df 02 17 00 	jeq %d2,0,8000a708 <StartCore+0x8c>
      ev = E_OS_ID;
    } else if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
8000a6de:	39 32 10 00 	ld.bu %d2,[%a3]16
         If StartCore is called after StartOS it shall return with E_OS_ACCESS
         in extended status. (SRS_Os_80001) */
      /* [SWS_Os_00678] Calls to the StartCore function after StartOS()
         shall return with E_OS_ACCESS and the core shall not be started.
         (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ACCESS;
8000a6e2:	82 15       	mov %d5,1
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      core_id_mask =  ((CoreMaskType)1U << (OsEE_reg)CoreID);

    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
      ev = E_OS_ID;
    } else if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
8000a6e4:	df 02 12 80 	jne %d2,0,8000a708 <StartCore+0x8c>
         in extended status. (SRS_Os_80001) */
      /* [SWS_Os_00678] Calls to the StartCore function after StartOS()
         shall return with E_OS_ACCESS and the core shall not be started.
         (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ACCESS;
    } else if (((ar_core_mask | p_kcb->not_ar_core_mask) & core_id_mask) != 0U)
8000a6e8:	19 22 04 00 	ld.w %d2,[%a2]4
8000a6ec:	a6 32       	or %d2,%d3
8000a6ee:	26 f2       	and %d2,%d15
          (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      /* [SWS_Os_00680] If the parameter CoreID refers to a core that was
         already started by the function StartNonAutosarCore the related core
         is ignored and E_OS_STATE shall be returned.
         (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_STATE;
8000a6f0:	82 75       	mov %d5,7
         in extended status. (SRS_Os_80001) */
      /* [SWS_Os_00678] Calls to the StartCore function after StartOS()
         shall return with E_OS_ACCESS and the core shall not be started.
         (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ACCESS;
    } else if (((ar_core_mask | p_kcb->not_ar_core_mask) & core_id_mask) != 0U)
8000a6f2:	f6 2b       	jnz %d2,8000a708 <StartCore+0x8c>
        ++p_kcb->ar_num_core_started;

        osEE_hal_start_core(CoreID);
      }

      ev = E_OK;
8000a6f4:	82 05       	mov %d5,0
         is ignored and E_OS_STATE shall be returned.
         (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_STATE;
    } else {
      /* Really start the core if we are not in MASTER core */
      if (CoreID != OS_CORE_ID_MASTER) {
8000a6f6:	76 49       	jz %d4,8000a708 <StartCore+0x8c>
        /* [SWS_Os_00677] The function StartCore shall start one core that
           shall run under the control of the AUTOSAR OS.
           (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
        /* Flag that core is started as Autosar core */
        p_kcb->ar_core_mask |= core_id_mask;
8000a6f8:	a6 3f       	or %d15,%d3
8000a6fa:	6c 20       	st.w [%a2]0,%d15
        /* Increment the Autosar Cores counter */
        ++p_kcb->ar_num_core_started;
8000a6fc:	0c 2c       	ld.bu %d15,[%a2]12
8000a6fe:	c2 1f       	add %d15,1
8000a700:	2c 2c       	st.b [%a2]12,%d15

        osEE_hal_start_core(CoreID);
8000a702:	6d 00 40 08 	call 8000b782 <osEE_hal_start_core>
      }

      ev = E_OK;
8000a706:	82 05       	mov %d5,0
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
8000a708:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000a70c:	82 0f       	mov %d15,0
8000a70e:	68 0f       	st.w [%a15]0,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a710:	4d c0 e2 3f 	mfcr %d3,$icr
8000a714:	02 3f       	mov %d15,%d3
8000a716:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a71a:	8f f8 0f 21 	and %d2,%d8,255
8000a71e:	5f 23 08 00 	jeq %d3,%d2,8000a72e <StartCore+0xb2>
8000a722:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a726:	cd cf e2 0f 	mtcr $icr,%d15
8000a72a:	0d 00 c0 04 	isync 
    /* CoreID >= OS_CORE_ID_ARR_SIZE */
    ev = E_OS_ID;
  }
  /* [SWS_Os_00681] There is no call to the ErrorHook() if an error occurs
       during StartCore(); (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
  if (Status != NULL) {
8000a72e:	bc c2       	jz.a %a12,8000a732 <StartCore+0xb6>
    *Status = ev;
8000a730:	34 c5       	st.b [%a12],%d5
8000a732:	00 90       	ret 

8000a734 <StartNonAutosarCore>:
  StartNonAutosarCore
(
  VAR(CoreIdType, AUTOMATIC)                  CoreID,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  Status
)
{
8000a734:	40 ae       	mov.aa %a14,%sp
8000a736:	40 4c       	mov.aa %a12,%a4
    osEE_end_primitive(flags);
  } else {
    /* [SWS_Os_00685] If the parameter CoreID refers to an unknown core the
        function StartNonAutosarCore has no effect and sets "Status" to
        E_OS_ID. (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
    ev = E_OS_ID;
8000a738:	82 35       	mov %d5,3
)
{
  /* Error Value */
  VAR(StatusType, AUTOMATIC) ev;

  if (CoreID < OS_CORE_ID_ARR_SIZE) {
8000a73a:	ff 34 4c 00 	jge %d4,3,8000a7d2 <StartNonAutosarCore+0x9e>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a73e:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a742:	8f f8 0f f1 	and %d15,%d8,255
8000a746:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a74a:	ee 0a       	jnz %d15,8000a75e <StartNonAutosarCore+0x2a>
    OsEE_icr icr_temp = icr;
8000a74c:	02 8f       	mov %d15,%d8
8000a74e:	3b 30 01 50 	mov %d5,19
8000a752:	37 5f 08 f0 	insert %d15,%d15,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a756:	cd cf e2 0f 	mtcr $icr,%d15
8000a75a:	0d 00 c0 04 	isync 
8000a75e:	91 00 00 f8 	movh.a %a15,32768
8000a762:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
8000a766:	c8 1f       	ld.a %a15,[%a15]4
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a768:	82 12       	mov %d2,1
8000a76a:	82 03       	mov %d3,0
8000a76c:	0b 23 10 68 	mov %e6,%d3,%d2
8000a770:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a774:	df 06 fa ff 	jne %d6,0,8000a768 <StartNonAutosarCore+0x34>
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)
      p_kdb = osEE_lock_and_get_kernel();
    CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)
      p_kcb = p_kdb->p_kcb;
8000a778:	91 00 00 28 	movh.a %a2,32768
8000a77c:	99 22 00 40 	ld.a %a2,[%a2]256 <80000100 <osEE_kdb_var>>
    /* Variable introduced to meet MISRA 12.1 in the next else if statement */
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      ar_core_mask = p_kcb->ar_core_mask;
8000a780:	54 23       	ld.w %d3,[%a2]
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      core_id_mask =  ((CoreMaskType)1U << (OsEE_reg)CoreID);
8000a782:	82 1f       	mov %d15,1
8000a784:	0f 4f 00 f0 	sh %d15,%d15,%d4

    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
8000a788:	8f 7f 00 21 	and %d2,%d15,7
      /* [SWS_Os_00685] If the parameter CoreID refers to an unknown core the
          function StartNonAutosarCore has no effect and sets "Status" to
          E_OS_ID. (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ID;
8000a78c:	82 35       	mov %d5,3
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      ar_core_mask = p_kcb->ar_core_mask;
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      core_id_mask =  ((CoreMaskType)1U << (OsEE_reg)CoreID);

    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
8000a78e:	76 2f       	jz %d2,8000a7ac <StartNonAutosarCore+0x78>
      /* [SWS_Os_00685] If the parameter CoreID refers to an unknown core the
          function StartNonAutosarCore has no effect and sets "Status" to
          E_OS_ID. (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ID;
    } else if (((ar_core_mask | p_kcb->not_ar_core_mask) & core_id_mask) != 0U)
8000a790:	19 26 04 00 	ld.w %d6,[%a2]4
8000a794:	0f 36 a0 20 	or %d2,%d6,%d3
8000a798:	26 f2       	and %d2,%d15
    {
      /* [SWS_Os_00680] If the parameter CoreID refers to a core that was
          already started by the function StartNonAutosarCore the related core
          is ignored and E_OS_STATE shall be returned.
          (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_STATE;
8000a79a:	82 75       	mov %d5,7
    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
      /* [SWS_Os_00685] If the parameter CoreID refers to an unknown core the
          function StartNonAutosarCore has no effect and sets "Status" to
          E_OS_ID. (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ID;
    } else if (((ar_core_mask | p_kcb->not_ar_core_mask) & core_id_mask) != 0U)
8000a79c:	f6 28       	jnz %d2,8000a7ac <StartNonAutosarCore+0x78>
        /* Flag that core is started as non Autosar core */
        p_kcb->not_ar_core_mask |= core_id_mask;
        osEE_hal_start_core(CoreID);
      }

      ev = E_OK;
8000a79e:	82 05       	mov %d5,0
          is ignored and E_OS_STATE shall be returned.
          (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_STATE;
    } else {
      /* Really start the core if we are not in MASTER core */
      if (CoreID != OS_CORE_ID_MASTER) {
8000a7a0:	76 46       	jz %d4,8000a7ac <StartNonAutosarCore+0x78>
        /* [SWS_Os_00683] The function StartNonAutosarCore shall start a core
            that is not controlled by the AUTOSAR OS.
            (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
        /* Flag that core is started as non Autosar core */
        p_kcb->not_ar_core_mask |= core_id_mask;
8000a7a2:	a6 6f       	or %d15,%d6
8000a7a4:	6c 21       	st.w [%a2]4,%d15
        osEE_hal_start_core(CoreID);
8000a7a6:	6d 00 ee 07 	call 8000b782 <osEE_hal_start_core>
      }

      ev = E_OK;
8000a7aa:	82 05       	mov %d5,0
8000a7ac:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000a7b0:	82 0f       	mov %d15,0
8000a7b2:	68 0f       	st.w [%a15]0,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a7b4:	4d c0 e2 3f 	mfcr %d3,$icr
8000a7b8:	02 3f       	mov %d15,%d3
8000a7ba:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a7be:	8f f8 0f 21 	and %d2,%d8,255
8000a7c2:	5f 23 08 00 	jeq %d3,%d2,8000a7d2 <StartNonAutosarCore+0x9e>
8000a7c6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a7ca:	cd cf e2 0f 	mtcr $icr,%d15
8000a7ce:	0d 00 c0 04 	isync 
        function StartNonAutosarCore has no effect and sets "Status" to
        E_OS_ID. (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
    ev = E_OS_ID;
  }

  if (Status != NULL) {
8000a7d2:	bc c2       	jz.a %a12,8000a7d6 <StartNonAutosarCore+0xa2>
    *Status = ev;
8000a7d4:	34 c5       	st.b [%a12],%d5
8000a7d6:	00 90       	ret 

8000a7d8 <ShutdownAllCores>:
FUNC(void, OS_CODE) 
  ShutdownAllCores
(
  VAR(StatusType, AUTOMATIC)  Error
)
{
8000a7d8:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000a7da:	40 94       	mov.aa %a4,%a9
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
8000a7dc:	cc 43       	ld.a %a15,[%a4]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a7de:	4d c0 e2 5f 	mfcr %d5,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a7e2:	8f f5 0f f1 	and %d15,%d5,255
8000a7e6:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a7ea:	ee 0a       	jnz %d15,8000a7fe <ShutdownAllCores+0x26>
    OsEE_icr icr_temp = icr;
8000a7ec:	02 5f       	mov %d15,%d5
8000a7ee:	3b 30 01 60 	mov %d6,19
8000a7f2:	37 6f 08 f0 	insert %d15,%d15,%d6,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a7f6:	cd cf e2 0f 	mtcr $icr,%d15
8000a7fa:	0d 00 c0 04 	isync 
 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
8000a7fe:	39 ff 10 00 	ld.bu %d15,[%a15]16
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a802:	3b d0 04 60 	mov %d6,77
8000a806:	e9 f6 13 00 	st.b [%a15]19,%d6
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a80a:	82 16       	mov %d6,1
8000a80c:	e9 f6 23 00 	st.b [%a15]35,%d6
#endif /* OSEE_HAS_SERVICE_PROTECTION */
#ifdef OSEE_HAS_OSAPPLICATIONS
  /* [Os_SWS_00716]: If ShutdownAllCores is called from non trusted code the call
      shall be ignored. (SRS_Os_80007) */
#endif /* EE_HAS_OSAPPLICATIONS__ */
  if ((os_status == OSEE_KERNEL_STARTED) || (os_status == OSEE_KERNEL_STARTING))
8000a810:	c2 ff       	add %d15,-1
8000a812:	16 ff       	and %d15,255
8000a814:	ff 2f 4c 80 	jge.u %d15,2,8000a8ac <ShutdownAllCores+0xd4>
 *  \brief Locks the kernel.
 *  
 *  Locks the kernel using the KDB p_lock spinlock.
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_lock_kernel(void) {
  osEE_hal_spin_lock(osEE_kdb_var.p_lock);
8000a818:	91 00 00 f8 	movh.a %a15,32768
8000a81c:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
8000a820:	c8 1f       	ld.a %a15,[%a15]4
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a822:	82 12       	mov %d2,1
8000a824:	82 03       	mov %d3,0
8000a826:	0b 23 10 68 	mov %e6,%d3,%d2
8000a82a:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a82e:	df 06 fa ff 	jne %d6,0,8000a822 <ShutdownAllCores+0x4a>
  {
    VAR(CoreNumType, AUTOMATIC) i;
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)
      p_kdb = osEE_lock_and_get_kernel();
    CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)
      p_kcb = p_kdb->p_kcb;
8000a832:	91 00 00 28 	movh.a %a2,32768
8000a836:	99 22 00 40 	ld.a %a2,[%a2]256 <80000100 <osEE_kdb_var>>
    /* If the procedure have been already started (by another core), just shut
       this core down, after have released all spinlocks */
    if (p_kcb->ar_shutdown_all_cores_flag) {
8000a83a:	0c 2e       	ld.bu %d15,[%a2]14
8000a83c:	6e 09       	jz %d15,8000a84e <ShutdownAllCores+0x76>
8000a83e:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000a842:	82 0f       	mov %d15,0
8000a844:	68 0f       	st.w [%a15]0,%d15
      /* Release the kernel spinlock */
      osEE_unlock_kernel();
      /* This won't never return */
      osEE_shutdown_os(p_cdb, p_kcb->ar_shutdown_all_cores_error);
8000a846:	39 24 0d 00 	ld.bu %d4,[%a2]13
8000a84a:	1d ff 2d f7 	j 800096a4 <osEE_shutdown_os>
    } else {
      /* Save the Error parameter to be used in all other cores */
      p_kcb->ar_shutdown_all_cores_error = Error;
8000a84e:	e9 24 0d 00 	st.b [%a2]13,%d4
      /* Set ShutdownAllCores global flag */
      p_kcb->ar_shutdown_all_cores_flag = OSEE_TRUE;
8000a852:	82 1f       	mov %d15,1
8000a854:	2c 2e       	st.b [%a2]14,%d15
8000a856:	7b 40 00 5f 	movh %d5,61444
8000a85a:	1b 05 00 59 	addi %d5,%d5,-28672
8000a85e:	82 0f       	mov %d15,0
/* Signal the core "cpu" (0/1/2/3/4/6) by sending an IIRQ. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_signal_core(CoreIdType core_id)
{

  OSEE_TC_SRC_REG(OSEE_TC_GPSR_SRC_OFFSET(OSEE_TC_GPSR_G, core_id)) |=
8000a860:	02 56       	mov %d6,%d5
8000a862:	8f ff 0f 21 	and %d2,%d15,255
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000a866:	4d c0 e1 3f 	mfcr %d3,$core_id

      for (i = 0U; i <= OSEE_CORE_ID_MAX; ++i) {
        if (i != (CoreNumType)osEE_get_curr_core_id()) {
8000a86a:	8f f3 0f 31 	and %d3,%d3,255
8000a86e:	5f 23 0f 00 	jeq %d3,%d2,8000a88c <ShutdownAllCores+0xb4>
          if ((p_kcb->ar_core_mask & ((CoreMaskType)1U << i)) != 0U) {
8000a872:	54 23       	ld.w %d3,[%a2]
8000a874:	57 03 61 3f 	extr.u %d3,%d3,%d15,1
8000a878:	76 3a       	jz %d3,8000a88c <ShutdownAllCores+0xb4>
8000a87a:	8b 42 60 22 	lt.u %d2,%d2,4
8000a87e:	2b 65 40 22 	sel %d2,%d2,%d5,%d6
8000a882:	60 2f       	mov.a %a15,%d2
8000a884:	48 02       	ld.w %d2,[%a15]0
8000a886:	b7 f2 01 2d 	insert %d2,%d2,15,26,1
8000a88a:	68 02       	st.w [%a15]0,%d2
8000a88c:	c2 1f       	add %d15,1
8000a88e:	c2 45       	add %d5,4
      /* Save the Error parameter to be used in all other cores */
      p_kcb->ar_shutdown_all_cores_error = Error;
      /* Set ShutdownAllCores global flag */
      p_kcb->ar_shutdown_all_cores_flag = OSEE_TRUE;

      for (i = 0U; i <= OSEE_CORE_ID_MAX; ++i) {
8000a890:	df 3f e9 ff 	jne %d15,3,8000a862 <ShutdownAllCores+0x8a>
 *  \brief Unlocks the kernel.
 *  
 *  Unlock the kernel by releasing the KDB p_lock spinlock.
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_unlock_kernel(void) {
  osEE_hal_spin_unlock(osEE_kdb_var.p_lock);
8000a894:	91 00 00 f8 	movh.a %a15,32768
8000a898:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
8000a89c:	c8 1f       	ld.a %a15,[%a15]4
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
8000a89e:	0d 00 80 04 	dsync 
8000a8a2:	82 0f       	mov %d15,0
8000a8a4:	68 0f       	st.w [%a15]0,%d15

      /* Release the kernel spinlock */
      osEE_unlock_kernel();
      /* After signaling the shutdown all cores status: shut this core down:
         This won't never return */
      osEE_shutdown_os(osEE_get_curr_core(), Error);
8000a8a6:	40 94       	mov.aa %a4,%a9
8000a8a8:	1d ff fe f6 	j 800096a4 <osEE_shutdown_os>
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
    p_ccb->service_id            = service_id;
8000a8ac:	da 4c       	mov %d15,76
8000a8ae:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a8b2:	82 0f       	mov %d15,0
8000a8b4:	e9 ff 23 00 	st.b [%a15]35,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a8b8:	4d c0 e2 2f 	mfcr %d2,$icr
8000a8bc:	02 2f       	mov %d15,%d2
8000a8be:	8f f2 0f 21 	and %d2,%d2,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a8c2:	8f f5 0f 51 	and %d5,%d5,255
8000a8c6:	5f 52 08 00 	jeq %d2,%d5,8000a8d6 <ShutdownAllCores+0xfe>
8000a8ca:	37 5f 08 f0 	insert %d15,%d15,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a8ce:	cd cf e2 0f 	mtcr $icr,%d15
8000a8d2:	0d 00 c0 04 	isync 
8000a8d6:	00 90       	ret 

8000a8d8 <GetSpinlock>:
FUNC(StatusType, OS_CODE)
  GetSpinlock
(
  VAR(SpinlockIdType, AUTOMATIC) SpinlockID
)
{
8000a8d8:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000a8da:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)
    p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000a8dc:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a8de:	da 41       	mov %d15,65
8000a8e0:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a8e4:	82 1f       	mov %d15,1
8000a8e6:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (spinlock_id < p_kdb->p_kcb->free_spinlock_index);
#else
  return (spinlock_id < p_kdb->spinlock_array_size);
8000a8ea:	91 00 00 28 	movh.a %a2,32768
8000a8ee:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a8f2:	4c 2a       	ld.w %d15,[%a2]40
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00689]: The function GetSpinlock shall return E_OS_ID if the parameter
      SpinlockID refers to a spinlock that does not exist. (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
    ev = E_OS_ID;
8000a8f4:	82 32       	mov %d2,3
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00689]: The function GetSpinlock shall return E_OS_ID if the parameter
      SpinlockID refers to a spinlock that does not exist. (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
8000a8f6:	7f f4 4a 80 	jge.u %d4,%d15,8000a98a <GetSpinlock+0xb2>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_spinlock_db = &(*p_kdb->p_spinlock_array)[SpinlockID];
8000a8fa:	91 00 00 28 	movh.a %a2,32768
8000a8fe:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a902:	19 22 24 00 	ld.w %d2,[%a2]36 <80000024 <_start+0x4>>
8000a906:	13 c4 20 82 	madd %d8,%d2,%d4,12
8000a90a:	60 83       	mov.a %a3,%d8
    CONSTP2VAR(OsEE_SpinlockCB, AUTOMATIC, OS_APPL_DATA)
      p_spinlock_cb = p_spinlock_db->p_cb;
8000a90c:	d4 34       	ld.a %a4,[%a3]
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_curr = p_ccb->p_curr;
8000a90e:	c8 06       	ld.a %a6,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_CONST)
      p_curr_tcb = p_curr->p_tcb;
8000a910:	99 65 0c 00 	ld.a %a5,[%a6]12
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_core_last_spinlock_db = p_ccb->p_last_spinlock;
8000a914:	48 50       	ld.w %d0,[%a15]20
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_last_m = p_curr_tcb->p_last_m;
8000a916:	19 55 04 00 	ld.w %d5,[%a5]4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a91a:	4d c0 e2 3f 	mfcr %d3,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a91e:	8f f3 0f f1 	and %d15,%d3,255
8000a922:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a926:	ee 0a       	jnz %d15,8000a93a <GetSpinlock+0x62>
    OsEE_icr icr_temp = icr;
8000a928:	02 3f       	mov %d15,%d3
8000a92a:	3b 30 01 10 	mov %d1,19
8000a92e:	37 1f 08 f0 	insert %d15,%d15,%d1,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a932:	cd cf e2 0f 	mtcr $icr,%d15
8000a936:	0d 00 c0 04 	isync 
          already occupied, GetSpinlock shall keep on trying to occupy the
          spinlock until it succeeds. (SRS_Os_80018, SRS_Os_80021)
          Same of [SWS_Os_00687] */

      /* Spin until get the lock */
      osEE_hal_spin_lock(p_spinlock_db->p_spinlock_arch);
8000a93a:	13 c4 20 92 	madd %d9,%d2,%d4,12
8000a93e:	60 92       	mov.a %a2,%d9
8000a940:	99 22 04 00 	ld.a %a2,[%a2]4
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a944:	82 16       	mov %d6,1
8000a946:	82 07       	mov %d7,0
8000a948:	0b 67 10 88 	mov %e8,%d7,%d6
8000a94c:	49 28 c0 08 	cmpswap.w [%a2]0,%e8
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a950:	df 08 fa ff 	jne %d8,0,8000a944 <GetSpinlock+0x6c>

      /* Populate M Stack for Current TASK and Spinlock Stack for CCB */
      p_spinlock_cb->p_next = (p_last_m != NULL)?
        p_last_m: p_core_last_spinlock_db;
8000a954:	2b 05 40 55 	sel %d5,%d5,%d5,%d0

      /* Spin until get the lock */
      osEE_hal_spin_lock(p_spinlock_db->p_spinlock_arch);

      /* Populate M Stack for Current TASK and Spinlock Stack for CCB */
      p_spinlock_cb->p_next = (p_last_m != NULL)?
8000a958:	74 45       	st.w [%a4],%d5
        p_last_m: p_core_last_spinlock_db;

      /* Update Heads pointers: Current TASK and CCB */
      p_curr_tcb->p_last_m = p_spinlock_db;
8000a95a:	b5 53 04 00 	st.a [%a5]4,%a3
      p_ccb->p_last_spinlock = p_spinlock_db;
8000a95e:	e8 53       	st.a [%a15]20,%a3

      /* Set Current TASK/ISR2 as spinlock locker */
      p_spinlock_cb->p_owner = p_curr;
8000a960:	b5 46 08 00 	st.a [%a4]8,%a6
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a964:	4d c0 e2 4f 	mfcr %d4,$icr
8000a968:	02 4f       	mov %d15,%d4
8000a96a:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a96e:	8f f3 0f 21 	and %d2,%d3,255
8000a972:	5f 24 08 00 	jeq %d4,%d2,8000a982 <GetSpinlock+0xaa>
8000a976:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a97a:	cd cf e2 0f 	mtcr $icr,%d15
8000a97e:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a982:	39 ff 23 00 	ld.bu %d15,[%a15]35
#endif /* OSEE_SPINLOCKS_HAS_LOCK_METHOD */

    /* [SWS_Os_00688]: The function GetSpinlock shall return E_OK if no error
        was detected. The spinlock is now occupied by the calling TASK/ISR2 on
        the calling core. */
      ev = E_OK;
8000a986:	82 02       	mov %d2,0
8000a988:	5e 17       	jne %d15,1,8000a996 <GetSpinlock+0xbe>
    p_ccb->service_id            = service_id;
8000a98a:	da 40       	mov %d15,64
8000a98c:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a990:	82 0f       	mov %d15,0
8000a992:	e9 ff 23 00 	st.b [%a15]35,%d15
  }
#endif /* OSEE_HAS_ERRORHOOK */
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetSpinlock);

  return ev;
}
8000a996:	00 90       	ret 

8000a998 <ReleaseSpinlock>:
FUNC(StatusType, OS_CODE)
  ReleaseSpinlock
(
  VAR(SpinlockIdType, AUTOMATIC) SpinlockID
)
{
8000a998:	40 ae       	mov.aa %a14,%sp
8000a99a:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)
    p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000a99c:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a99e:	da 43       	mov %d15,67
8000a9a0:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a9a4:	82 1f       	mov %d15,1
8000a9a6:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (spinlock_id < p_kdb->p_kcb->free_spinlock_index);
#else
  return (spinlock_id < p_kdb->spinlock_array_size);
8000a9aa:	91 00 00 28 	movh.a %a2,32768
8000a9ae:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a9b2:	4c 2a       	ld.w %d15,[%a2]40
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00698] The function ReleaseSpinlock shall return E_OS_ID if the
    parameter SpinlockID refers to a spinlock that does not exist.
    (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
    ev = E_OS_ID;
8000a9b4:	82 32       	mov %d2,3
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00698] The function ReleaseSpinlock shall return E_OS_ID if the
    parameter SpinlockID refers to a spinlock that does not exist.
    (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
8000a9b6:	7f f4 40 80 	jge.u %d4,%d15,8000aa36 <ReleaseSpinlock+0x9e>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_spinlock_db = &(*p_kdb->p_spinlock_array)[SpinlockID];
8000a9ba:	91 00 00 28 	movh.a %a2,32768
8000a9be:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a9c2:	19 22 24 00 	ld.w %d2,[%a2]36 <80000024 <_start+0x4>>
    CONSTP2VAR(OsEE_SpinlockCB, AUTOMATIC, OS_APPL_DATA)
      p_spinlock_cb = p_spinlock_db->p_cb;
8000a9c6:	13 c4 20 f2 	madd %d15,%d2,%d4,12
8000a9ca:	60 f2       	mov.a %a2,%d15
8000a9cc:	d4 22       	ld.a %a2,[%a2]
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_curr = p_ccb->p_curr;
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_CONST)
      p_curr_tcb = p_curr->p_tcb;
8000a9ce:	c8 03       	ld.a %a3,[%a15]0
8000a9d0:	99 33 0c 00 	ld.a %a3,[%a3]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a9d4:	4d c0 e2 3f 	mfcr %d3,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a9d8:	8f f3 0f f1 	and %d15,%d3,255
8000a9dc:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a9e0:	ee 0a       	jnz %d15,8000a9f4 <ReleaseSpinlock+0x5c>
    OsEE_icr icr_temp = icr;
8000a9e2:	02 3f       	mov %d15,%d3
8000a9e4:	3b 30 01 50 	mov %d5,19
8000a9e8:	37 5f 08 f0 	insert %d15,%d15,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a9ec:	cd cf e2 0f 	mtcr $icr,%d15
8000a9f0:	0d 00 c0 04 	isync 
/*  [SWS_Os_00697] The function ReleaseSpinlock shall return E_OK if no error
     was detected. The spinlock is now free and can be occupied by the same or
     other TASKs. (SRS_Os_80021) */

      /* Release the spinlock from its owner */
      p_spinlock_cb->p_owner = NULL;
8000a9f4:	82 05       	mov %d5,0
8000a9f6:	59 25 08 00 	st.w [%a2]8,%d5

      /* Pop M Stack for Current TASK */
      p_curr_tcb->p_last_m = p_spinlock_cb->p_next;
8000a9fa:	4c 20       	ld.w %d15,[%a2]0
8000a9fc:	6c 31       	st.w [%a3]4,%d15

      /* Look for the new last spinlock */
      p_ccb->p_last_spinlock = osEE_task_get_last_spinlock_db(p_curr_tcb);
8000a9fe:	68 5f       	st.w [%a15]20,%d15

      /* Release the spinlock */
      osEE_hal_spin_unlock(p_spinlock_db->p_spinlock_arch);
8000aa00:	13 c4 20 f2 	madd %d15,%d2,%d4,12
8000aa04:	60 f2       	mov.a %a2,%d15
8000aa06:	99 22 04 00 	ld.a %a2,[%a2]4
8000aa0a:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000aa0e:	74 25       	st.w [%a2],%d5
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000aa10:	4d c0 e2 4f 	mfcr %d4,$icr
8000aa14:	02 4f       	mov %d15,%d4
8000aa16:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000aa1a:	8f f3 0f 21 	and %d2,%d3,255
8000aa1e:	5f 24 08 00 	jeq %d4,%d2,8000aa2e <ReleaseSpinlock+0x96>
8000aa22:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000aa26:	cd cf e2 0f 	mtcr $icr,%d15
8000aa2a:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000aa2e:	39 ff 23 00 	ld.bu %d15,[%a15]35
#endif
       /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
#endif /* OSEE_SPINLOCKS_HAS_LOCK_METHOD */

      ev = E_OK;
8000aa32:	82 02       	mov %d2,0
8000aa34:	5e 17       	jne %d15,1,8000aa42 <ReleaseSpinlock+0xaa>
    p_ccb->service_id            = service_id;
8000aa36:	da 42       	mov %d15,66
8000aa38:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000aa3c:	82 0f       	mov %d15,0
8000aa3e:	e9 ff 23 00 	st.b [%a15]35,%d15
  }
#endif /* OSEE_HAS_ERRORHOOK */
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ReleaseSpinlock);

  return ev;
}
8000aa42:	00 90       	ret 

8000aa44 <TryToGetSpinlock>:
  TryToGetSpinlock
(
  VAR(SpinlockIdType, AUTOMATIC)                        SpinlockID,
  P2VAR(TryToGetSpinlockType, AUTOMATIC, OS_APPL_DATA)  Success
)
{
8000aa44:	40 ae       	mov.aa %a14,%sp
8000aa46:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)
    p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000aa48:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000aa4a:	da 45       	mov %d15,69
8000aa4c:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000aa50:	82 1f       	mov %d15,1
8000aa52:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (spinlock_id < p_kdb->p_kcb->free_spinlock_index);
#else
  return (spinlock_id < p_kdb->spinlock_array_size);
8000aa56:	91 00 00 28 	movh.a %a2,32768
8000aa5a:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000aa5e:	4c 2a       	ld.w %d15,[%a2]40
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00707] The function TryToGetSpinlock shall return E_OS_ID if the
    parameter SpinlockID refers to a spinlock that does not exist.
   (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
    ev = E_OS_ID;
8000aa60:	82 32       	mov %d2,3
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00707] The function TryToGetSpinlock shall return E_OS_ID if the
    parameter SpinlockID refers to a spinlock that does not exist.
   (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
8000aa62:	7f f4 50 80 	jge.u %d4,%d15,8000ab02 <TryToGetSpinlock+0xbe>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_spinlock_db = &(*p_kdb->p_spinlock_array)[SpinlockID];
8000aa66:	91 00 00 28 	movh.a %a2,32768
8000aa6a:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000aa6e:	4c 29       	ld.w %d15,[%a2]36
    CONSTP2VAR(OsEE_SpinlockCB, AUTOMATIC, OS_APPL_DATA)
      p_spinlock_cb = p_spinlock_db->p_cb;
8000aa70:	13 c4 20 2f 	madd %d2,%d15,%d4,12
8000aa74:	60 22       	mov.a %a2,%d2
8000aa76:	d4 26       	ld.a %a6,[%a2]
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_curr = p_ccb->p_curr;
8000aa78:	c8 05       	ld.a %a5,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_CONST)
      p_curr_tcb = p_curr->p_tcb;
8000aa7a:	99 52 0c 00 	ld.a %a2,[%a5]12
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_core_last_spinlock_db = p_ccb->p_last_spinlock;
8000aa7e:	48 57       	ld.w %d7,[%a15]20
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_last_m = p_curr_tcb->p_last_m;
8000aa80:	19 26 04 00 	ld.w %d6,[%a2]4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000aa84:	4d c0 e2 5f 	mfcr %d5,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000aa88:	8f f5 0f 21 	and %d2,%d5,255
8000aa8c:	8b 32 a1 22 	ge.u %d2,%d2,19
8000aa90:	f6 2a       	jnz %d2,8000aaa4 <TryToGetSpinlock+0x60>
    OsEE_icr icr_temp = icr;
8000aa92:	02 52       	mov %d2,%d5
8000aa94:	3b 30 01 30 	mov %d3,19
8000aa98:	37 32 08 20 	insert %d2,%d2,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000aa9c:	cd c2 e2 0f 	mtcr $icr,%d2
8000aaa0:	0d 00 c0 04 	isync 
      if such argument is NULL. +
      MISRA dictate NULL check for pointers always. */
  /* [SWS_Os_706]: If the function TryToGetSpinlock does not return E_OK, the
      OUT parameter "Success" shall be undefined. (SRS_Os_80021) */
    if (Success == NULL) {
      ev = E_OS_PARAM_POINTER;
8000aaa4:	3b e0 00 20 	mov %d2,14
      pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER 
      if such argument is NULL. +
      MISRA dictate NULL check for pointers always. */
  /* [SWS_Os_706]: If the function TryToGetSpinlock does not return E_OK, the
      OUT parameter "Success" shall be undefined. (SRS_Os_80021) */
    if (Success == NULL) {
8000aaa8:	bd 04 1b 00 	jz.a %a4,8000aade <TryToGetSpinlock+0x9a>
      while a RESOURCE is occupied. (SRS_Os_80021) */
/* [SWS_Os_00704] The function TryToGetSpinlock shall atomically test the
    availability of the spinlock and if available occupy it. The result of
    success is returned. (SRS_Os_80021) */
      /* Try to get the lock */
      if (osEE_hal_try_spin_lock(p_spinlock_db->p_spinlock_arch)) {
8000aaac:	13 c4 20 2f 	madd %d2,%d15,%d4,12
8000aab0:	60 23       	mov.a %a3,%d2
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000aab2:	99 33 04 00 	ld.a %a3,[%a3]4
8000aab6:	d2 12       	mov %e2,1
8000aab8:	49 32 c0 08 	cmpswap.w [%a3]0,%e2
8000aabc:	f6 2e       	jnz %d2,8000aad8 <TryToGetSpinlock+0x94>
        /* Populate M Stack for Current TASK and Spinlock Stack for CCB */
        p_spinlock_cb->p_next = (p_last_m != NULL)?
          p_last_m: p_core_last_spinlock_db;
8000aabe:	2b 76 40 66 	sel %d6,%d6,%d6,%d7
   (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_spinlock_db = &(*p_kdb->p_spinlock_array)[SpinlockID];
8000aac2:	13 c4 20 4f 	madd %d4,%d15,%d4,12
    availability of the spinlock and if available occupy it. The result of
    success is returned. (SRS_Os_80021) */
      /* Try to get the lock */
      if (osEE_hal_try_spin_lock(p_spinlock_db->p_spinlock_arch)) {
        /* Populate M Stack for Current TASK and Spinlock Stack for CCB */
        p_spinlock_cb->p_next = (p_last_m != NULL)?
8000aac6:	74 66       	st.w [%a6],%d6
          p_last_m: p_core_last_spinlock_db;

        /* Update Heads pointers: Current TASK and CCB */
        p_curr_tcb->p_last_m = p_spinlock_db;
8000aac8:	59 24 04 00 	st.w [%a2]4,%d4
        p_ccb->p_last_spinlock = p_spinlock_db;
8000aacc:	68 54       	st.w [%a15]20,%d4

        /* Set Current TASK/ISR2 as spinlock locker */
        p_spinlock_cb->p_owner = p_curr;
8000aace:	b5 65 08 00 	st.a [%a6]8,%a5

      /* [SWS_Os_00705] The function TryToGetSpinlock shall set the OUT
           parameter "Success" to TRYTOGETSPINLOCK_SUCCESS if the spinlock was
           successfully occupied, and TRYTOGETSPINLOCK_NOSUCCESS if not.
           In both cases E_OK shall be returned. (SRS_Os_80021) */
        *Success = TRYTOGETSPINLOCK_SUCCESS;
8000aad2:	82 1f       	mov %d15,1
8000aad4:	2c 40       	st.b [%a4]0,%d15
8000aad6:	3c 04       	j 8000aade <TryToGetSpinlock+0x9a>
      } else {
        *Success = TRYTOGETSPINLOCK_NOSUCCESS;
8000aad8:	82 0f       	mov %d15,0
8000aada:	2c 40       	st.b [%a4]0,%d15
      }

      ev = E_OK;
8000aadc:	82 02       	mov %d2,0
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000aade:	4d c0 e2 4f 	mfcr %d4,$icr
8000aae2:	02 4f       	mov %d15,%d4
8000aae4:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000aae8:	8f f5 0f 31 	and %d3,%d5,255
8000aaec:	5f 34 08 00 	jeq %d4,%d3,8000aafc <TryToGetSpinlock+0xb8>
8000aaf0:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000aaf4:	cd cf e2 0f 	mtcr $icr,%d15
8000aaf8:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000aafc:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000ab00:	5e 17       	jne %d15,1,8000ab0e <TryToGetSpinlock+0xca>
    p_ccb->service_id            = service_id;
8000ab02:	da 44       	mov %d15,68
8000ab04:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000ab08:	82 0f       	mov %d15,0
8000ab0a:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_TryToGetSpinlock);

  return ev;

}
8000ab0e:	00 90       	ret 

8000ab10 <osEE_release_all_m>:
static FUNC_P2VAR(OsEE_MDB, OS_APPL_CONST, OS_CODE)
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
8000ab10:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000ab12:	99 43 0c 00 	ld.a %a3,[%a4]12

  while ((p_tcb->p_last_m != NULL)
8000ab16:	cc 31       	ld.a %a15,[%a3]4
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
8000ab18:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000ab1a:	bd 0f 1a 00 	jz.a %a15,8000ab4e <osEE_release_all_m+0x3e>
#if (defined(OSEE_HAS_SPINLOCKS))
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
8000ab1e:	c8 0f       	ld.a %a15,[%a15]0
8000ab20:	4c f2       	ld.w %d15,[%a15]8
8000ab22:	80 42       	mov.d %d2,%a4
8000ab24:	fe 25       	jne %d15,%d2,8000ab4e <osEE_release_all_m+0x3e>
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
8000ab26:	82 02       	mov %d2,0
8000ab28:	68 22       	st.w [%a15]8,%d2
    /* Save the first M not realesed */
    if (p_mdb == NULL) {
8000ab2a:	7c 23       	jnz.a %a2,8000ab30 <osEE_release_all_m+0x20>
      p_mdb = p_tcb->p_last_m;
8000ab2c:	99 32 04 00 	ld.a %a2,[%a3]4
    }
#if (defined(OSEE_HAS_SPINLOCKS))
    /* Release arch dependent spinlock */
    if (p_tcb->p_last_m->p_spinlock_arch != NULL) {
8000ab30:	99 34 04 00 	ld.a %a4,[%a3]4
8000ab34:	99 44 04 00 	ld.a %a4,[%a4]4
8000ab38:	bc 44       	jz.a %a4,8000ab40 <osEE_release_all_m+0x30>
8000ab3a:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000ab3e:	74 42       	st.w [%a4],%d2
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
8000ab40:	c8 0f       	ld.a %a15,[%a15]0
8000ab42:	ec 31       	st.a [%a3]4,%a15
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000ab44:	bc f5       	jz.a %a15,8000ab4e <osEE_release_all_m+0x3e>
#if (defined(OSEE_HAS_SPINLOCKS))
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
8000ab46:	c8 0f       	ld.a %a15,[%a15]0
8000ab48:	48 23       	ld.w %d3,[%a15]8
8000ab4a:	5f f3 ef 7f 	jeq %d3,%d15,8000ab28 <osEE_release_all_m+0x18>
8000ab4e:	40 9f       	mov.aa %a15,%a9
          I set it to NULL in any case) */
  {
    CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
      p_cdb = osEE_get_curr_core();

    p_cdb->p_ccb->p_last_spinlock = p_tcb->p_last_m;
8000ab50:	c8 3f       	ld.a %a15,[%a15]12
8000ab52:	4c 31       	ld.w %d15,[%a3]4
8000ab54:	68 5f       	st.w [%a15]20,%d15
    p_tcb->p_last_m = NULL;
8000ab56:	82 0f       	mov %d15,0
8000ab58:	6c 31       	st.w [%a3]4,%d15
  }
#endif /* OSEE_HAS_SPINLOCKS */

  return p_mdb;
}
8000ab5a:	00 90       	ret 

8000ab5c <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
8000ab5c:	40 ae       	mov.aa %a14,%sp
8000ab5e:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
#endif /* OSEE_HAS_PRETASKHOOK || OSEE_SCHEDULER_GLOBAL || OSEE_HAS_CONTEXT ||
          OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */
#if (defined(OSEE_HAS_PRETASKHOOK)) || (defined(OSEE_SCHEDULER_GLOBAL)) ||\
    (defined(OSEE_HAS_CONTEXT)) || (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000ab60:	c8 3f       	ld.a %a15,[%a15]12
          OSEE_HAS_ORTI */
#if (defined(OSEE_HAS_STACK_MONITORING))
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_STACK_MONITORING */
#if (defined(OSEE_HAS_ORTI))
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000ab62:	39 ff 23 00 	ld.bu %d15,[%a15]35 <3 <_.+0x2>>
8000ab66:	5e 1a       	jne %d15,1,8000ab7a <osEE_scheduler_task_wrapper_restore+0x1e>
/* Reset last bit of service_id to mark OS service exit */
    p_ccb->service_id = (OSServiceIdType)
8000ab68:	39 ff 13 00 	ld.bu %d15,[%a15]19
8000ab6c:	8f 1f c0 f1 	andn %d15,%d15,1
8000ab70:	e9 ff 13 00 	st.b [%a15]19,%d15
      (((OsEE_reg)p_ccb->service_id) & (~((OsEE_reg)0x1U)));

    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000ab74:	82 0f       	mov %d15,0
8000ab76:	e9 ff 23 00 	st.b [%a15]35,%d15
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
8000ab7a:	cc 43       	ld.a %a15,[%a4]12
8000ab7c:	82 4f       	mov %d15,4
8000ab7e:	28 2f       	st.b [%a15]2,%d15
8000ab80:	00 90       	ret 

8000ab82 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
8000ab82:	40 ae       	mov.aa %a14,%sp
8000ab84:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
8000ab86:	99 42 0c 00 	ld.a %a2,[%a4]12
8000ab8a:	39 28 01 00 	ld.bu %d8,[%a2]1
  osEE_scheduler_task_wrapper_restore(p_tdb_to);
8000ab8e:	6d ff e7 ff 	call 8000ab5c <osEE_scheduler_task_wrapper_restore>

  if (task_priority < OSEE_ISR_ALL_PRIO) {
8000ab92:	8b f8 0f f2 	eq %d15,%d8,255
8000ab96:	ee 13       	jnz %d15,8000abbc <osEE_scheduler_task_wrapper_run+0x3a>
8000ab98:	4d c0 e2 ff 	mfcr %d15,$icr

/* We always use virtual priorities */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_set_ipl(TaskPrio virt_prio)
{
  OsEE_icr icr  = osEE_tc_get_icr();
  icr.bits.ccpn = (virt_prio < OSEE_ISR2_PRIO_BIT)?
8000ab9c:	37 08 48 30 	extr %d3,%d8,0,8
8000aba0:	82 02       	mov %d2,0
8000aba2:	ce 35       	jgez %d3,8000abac <osEE_scheduler_task_wrapper_run+0x2a>
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000aba4:	8f f8 07 81 	and %d8,%d8,127
8000aba8:	1b 18 00 20 	addi %d2,%d8,1
8000abac:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000abb0:	cd cf e2 0f 	mtcr $icr,%d15
8000abb4:	0d 00 c0 04 	isync 
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000abb8:	0d 00 00 03 	enable 
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
8000abbc:	c8 62       	ld.a %a2,[%a15]24
8000abbe:	2d 02 00 00 	calli %a2
8000abc2:	40 92       	mov.aa %a2,%a9
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000abc4:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
8000abc8:	82 0f       	mov %d15,0
8000abca:	e9 2f 21 00 	st.b [%a2]33,%d15
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
8000abce:	39 2f 20 00 	ld.bu %d15,[%a2]32
8000abd2:	6e 09       	jz %d15,8000abe4 <osEE_scheduler_task_wrapper_run+0x62>
    p_ccb->s_isr_all_cnt = 0U;
8000abd4:	82 0f       	mov %d15,0
8000abd6:	e9 2f 20 00 	st.b [%a2]32,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000abda:	4c 26       	ld.w %d15,[%a2]24
8000abdc:	cd cf e2 0f 	mtcr $icr,%d15
8000abe0:	0d 00 c0 04 	isync 
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
8000abe4:	39 2f 22 00 	ld.bu %d15,[%a2]34
8000abe8:	6e 06       	jz %d15,8000abf4 <osEE_scheduler_task_wrapper_run+0x72>
    p_ccb->d_isr_all_cnt = 0U;
8000abea:	82 0f       	mov %d15,0
8000abec:	e9 2f 22 00 	st.b [%a2]34,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000abf0:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000abf4:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000abf8:	8f ff 0f 21 	and %d2,%d15,255
8000abfc:	8b 32 a1 22 	ge.u %d2,%d2,19
8000ac00:	f6 29       	jnz %d2,8000ac12 <osEE_scheduler_task_wrapper_run+0x90>
8000ac02:	3b 30 01 20 	mov %d2,19
8000ac06:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000ac0a:	cd cf e2 0f 	mtcr $icr,%d15
8000ac0e:	0d 00 c0 04 	isync 

  (void)osEE_begin_primitive();

  osEE_stack_monitoring(p_cdb);

  if (p_to_term->task_type == OSEE_TASK_TYPE_ISR2) {
8000ac12:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000ac16:	5e 25       	jne %d15,2,8000ac20 <osEE_scheduler_task_wrapper_run+0x9e>
  /* [SWS_Os_00369]: If a Category 2 ISR calls GetResource() and ends (returns)
      without calling the corresponding ReleaseResource(), the Operating System
      module shall perform the ReleaseResource() call and shall call the
      ErrorHook() E_OS_RESOURCE */
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_mdb = osEE_release_all_m(p_to_term);
8000ac18:	40 f4       	mov.aa %a4,%a15
8000ac1a:	6d ff 7b ff 	call 8000ab10 <osEE_release_all_m>
8000ac1e:	3c 04       	j 8000ac26 <osEE_scheduler_task_wrapper_run+0xa4>
    osEE_call_error_hook(p_ccb, E_OS_MISSINGEND);
#if (defined(OSEE_HAS_RESOURCES)) || (defined(OSEE_HAS_SPINLOCKS))
/* [SWS_Os_0070]: If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and still holds OSEK Resources,
    the Operating System shall release them. */
    (void)osEE_release_all_m(p_to_term);
8000ac20:	40 f4       	mov.aa %a4,%a15
8000ac22:	6d ff 77 ff 	call 8000ab10 <osEE_release_all_m>
8000ac26:	c8 14       	ld.a %a4,[%a15]4
8000ac28:	a0 05       	mov.a %a5,0
8000ac2a:	1d 00 3a 06 	j 8000b89e <osEE_hal_terminate_ctx>

8000ac2e <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
8000ac2e:	40 ae       	mov.aa %a14,%sp
8000ac30:	40 9c       	mov.aa %a12,%a9
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000ac32:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000ac36:	8f f8 0f f1 	and %d15,%d8,255
8000ac3a:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000ac3e:	ee 0a       	jnz %d15,8000ac52 <osEE_idle_hook_wrapper+0x24>
    OsEE_icr icr_temp = icr;
8000ac40:	02 8f       	mov %d15,%d8
8000ac42:	3b 30 01 20 	mov %d2,19
8000ac46:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000ac4a:	cd cf e2 0f 	mtcr $icr,%d15
8000ac4e:	0d 00 c0 04 	isync 
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
8000ac52:	91 00 00 48 	movh.a %a4,32768
8000ac56:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000ac5a:	6d 00 63 02 	call 8000b120 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000ac5e:	4d c0 e2 3f 	mfcr %d3,$icr
8000ac62:	02 3f       	mov %d15,%d3
8000ac64:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000ac68:	8f f8 0f 21 	and %d2,%d8,255
8000ac6c:	5f 23 08 00 	jeq %d3,%d2,8000ac7c <osEE_idle_hook_wrapper+0x4e>
8000ac70:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000ac74:	cd cf e2 0f 	mtcr $icr,%d15
8000ac78:	0d 00 c0 04 	isync 
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
8000ac7c:	cc c3       	ld.a %a15,[%a12]12
8000ac7e:	39 ff 10 00 	ld.bu %d15,[%a15]16 <f0030003 <_SMALL_DATA4_+0x40028003>>
8000ac82:	df 2f fe 7f 	jeq %d15,2,8000ac7e <osEE_idle_hook_wrapper+0x50>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
8000ac86:	99 c4 14 00 	ld.a %a4,[%a12]20 <f0030014 <_SMALL_DATA4_+0x40028014>>
8000ac8a:	6d 00 98 04 	call 8000b5ba <osEE_idle_task_terminate>
8000ac8e:	00 90       	ret 

8000ac90 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000ac90:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000ac92:	99 43 0c 00 	ld.a %a3,[%a4]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
8000ac96:	cc 50       	ld.a %a15,[%a5]0
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
8000ac98:	99 32 0c 00 	ld.a %a2,[%a3]12

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
8000ac9c:	bd 02 13 00 	jz.a %a2,8000acc2 <osEE_scheduler_core_rq_preempt_stk+0x32>
    p_ret_tdb = p_ret_sn->p_tdb;
8000aca0:	99 22 04 00 	ld.a %a2,[%a2]4
    if (p_rq_sn != NULL) {
8000aca4:	bd 0f 1b 00 	jz.a %a15,8000acda <osEE_scheduler_core_rq_preempt_stk+0x4a>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
8000aca8:	99 24 0c 00 	ld.a %a4,[%a2]12
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
8000acac:	c8 16       	ld.a %a6,[%a15]4
8000acae:	99 66 0c 00 	ld.a %a6,[%a6]12
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
8000acb2:	39 42 01 00 	ld.bu %d2,[%a4]1
8000acb6:	0c 61       	ld.bu %d15,[%a6]1
8000acb8:	7f f2 13 80 	jge.u %d2,%d15,8000acde <osEE_scheduler_core_rq_preempt_stk+0x4e>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
8000acbc:	82 2f       	mov %d15,2
8000acbe:	2c 42       	st.b [%a4]2,%d15
8000acc0:	3c 11       	j 8000ace2 <osEE_scheduler_core_rq_preempt_stk+0x52>
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000acc2:	a0 02       	mov.a %a2,0

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
8000acc4:	bd 0f 1e 00 	jz.a %a15,8000ad00 <osEE_scheduler_core_rq_preempt_stk+0x70>
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
8000acc8:	99 42 14 00 	ld.a %a2,[%a4]20
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000accc:	99 24 0c 00 	ld.a %a4,[%a2]12
8000acd0:	82 2f       	mov %d15,2
8000acd2:	2c 42       	st.b [%a4]2,%d15
8000acd4:	3c 07       	j 8000ace2 <osEE_scheduler_core_rq_preempt_stk+0x52>
  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    if (p_tcb->current_prio < dispatch_prio) {
      p_tcb->current_prio = dispatch_prio;
8000acd6:	2c 51       	st.b [%a5]1,%d15
8000acd8:	00 90       	ret 
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000acda:	a0 02       	mov.a %a2,0
8000acdc:	00 90       	ret 
8000acde:	a0 02       	mov.a %a2,0
8000ace0:	00 90       	ret 
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
8000ace2:	4c f0       	ld.w %d15,[%a15]0
8000ace4:	6c 50       	st.w [%a5]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
8000ace6:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000ace8:	99 45 0c 00 	ld.a %a5,[%a4]12
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
8000acec:	4c 33       	ld.w %d15,[%a3]12
8000acee:	68 0f       	st.w [%a15]0,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
8000acf0:	ec 33       	st.a [%a3]12,%a15
  p_ccb->p_curr                 = p_tdb;
8000acf2:	f4 34       	st.a [%a3],%a4

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
8000acf4:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
8000acf8:	39 52 01 00 	ld.bu %d2,[%a5]1
8000acfc:	3f f2 ed ff 	jlt.u %d2,%d15,8000acd6 <osEE_scheduler_core_rq_preempt_stk+0x46>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
8000ad00:	00 90       	ret 

8000ad02 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
8000ad02:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
8000ad04:	cc 51       	ld.a %a15,[%a5]4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
8000ad06:	c8 32       	ld.a %a2,[%a15]12
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
8000ad08:	76 44       	jz %d4,8000ad10 <osEE_sn_priority_insert+0xe>
8000ad0a:	39 f2 1c 00 	ld.bu %d2,[%a15]28
8000ad0e:	3c 03       	j 8000ad14 <osEE_sn_priority_insert+0x12>
8000ad10:	39 22 01 00 	ld.bu %d2,[%a2]1
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
8000ad14:	cc 40       	ld.a %a15,[%a4]0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000ad16:	a0 06       	mov.a %a6,0
8000ad18:	7c f3       	jnz.a %a15,8000ad1e <osEE_sn_priority_insert+0x1c>
8000ad1a:	3c 14       	j 8000ad42 <osEE_sn_priority_insert+0x40>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000ad1c:	60 ff       	mov.a %a15,%d15
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
8000ad1e:	c8 12       	ld.a %a2,[%a15]4
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
8000ad20:	99 23 0c 00 	ld.a %a3,[%a2]12

    if (as_ready) {
8000ad24:	76 44       	jz %d4,8000ad2c <osEE_sn_priority_insert+0x2a>
      prio_to_check = p_cur_tdb->ready_prio;
8000ad26:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000ad2a:	3c 02       	j 8000ad2e <osEE_sn_priority_insert+0x2c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
8000ad2c:	0c 31       	ld.bu %d15,[%a3]1
    }

    if (new_task_prio <= prio_to_check)
8000ad2e:	3f 2f 06 80 	jlt.u %d15,%d2,8000ad3a <osEE_sn_priority_insert+0x38>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000ad32:	4c f0       	ld.w %d15,[%a15]0
8000ad34:	40 f6       	mov.aa %a6,%a15
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000ad36:	ee f3       	jnz %d15,8000ad1c <osEE_sn_priority_insert+0x1a>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000ad38:	60 ff       	mov.a %a15,%d15
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
8000ad3a:	bc 64       	jz.a %a6,8000ad42 <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
8000ad3c:	f4 65       	st.a [%a6],%a5
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
8000ad3e:	82 02       	mov %d2,0
8000ad40:	3c 03       	j 8000ad46 <osEE_sn_priority_insert+0x44>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
8000ad42:	f4 45       	st.a [%a4],%a5
    head_changed  = OSEE_TRUE;
8000ad44:	82 12       	mov %d2,1
  }

  p_sn_new->p_next = p_curr;
8000ad46:	ec 50       	st.a [%a5]0,%a15

  return head_changed;
}
8000ad48:	00 90       	ret 

8000ad4a <osEE_scheduler_rq_insert>:
(
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
8000ad4a:	40 ae       	mov.aa %a14,%sp
  p_sn_new->p_tdb = p_tdb_new;
8000ad4c:	b5 56 04 00 	st.a [%a5]4,%a6

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
8000ad50:	82 14       	mov %d4,1
8000ad52:	6d ff d8 ff 	call 8000ad02 <osEE_sn_priority_insert>
#else
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_FALSE);
#endif /* !OSEE_SCHEDULER_GLOBAL */
}
8000ad56:	00 90       	ret 

8000ad58 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000ad58:	40 ae       	mov.aa %a14,%sp
8000ad5a:	40 4d       	mov.aa %a13,%a4
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
8000ad5c:	cc 43       	ld.a %a15,[%a4]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
8000ad5e:	c8 3c       	ld.a %a12,[%a15]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
8000ad60:	54 c3       	ld.w %d3,[%a12]
8000ad62:	68 33       	st.w [%a15]12,%d3
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
8000ad64:	6d ff 96 ff 	call 8000ac90 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
8000ad68:	4c f3       	ld.w %d15,[%a15]12

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
8000ad6a:	7c 29       	jnz.a %a2,8000ad7c <osEE_scheduler_core_pop_running+0x24>
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
8000ad6c:	80 d3       	mov.d %d3,%a13
8000ad6e:	1b 43 01 20 	addi %d2,%d3,20
8000ad72:	92 43       	add %d3,%d15,4
8000ad74:	6a 23       	cmovn %d3,%d15,%d2
8000ad76:	60 3d       	mov.a %a13,%d3
8000ad78:	4c d0       	ld.w %d15,[%a13]0
8000ad7a:	68 0f       	st.w [%a15]0,%d15
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
8000ad7c:	40 c2       	mov.aa %a2,%a12
8000ad7e:	00 90       	ret 

8000ad80 <osEE_task_activated>:

FUNC(StatusType, OS_CODE) osEE_task_activated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000ad80:	40 ae       	mov.aa %a14,%sp
8000ad82:	40 4c       	mov.aa %a12,%a4
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
8000ad84:	99 4d 0c 00 	ld.a %a13,[%a4]12
 *  \return The function returns a pointer to the CDB pointer
 */
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE
  osEE_lock_and_get_core(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000ad88:	79 44 1f 00 	ld.b %d4,[%a4]31
8000ad8c:	6d 00 e6 04 	call 8000b758 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000ad90:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000ad92:	82 18       	mov %d8,1
8000ad94:	82 09       	mov %d9,0
8000ad96:	0b 89 10 28 	mov %e2,%d9,%d8
8000ad9a:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000ad9e:	df 02 fa ff 	jne %d2,0,8000ad92 <osEE_task_activated+0x12>
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000ada2:	0c d0       	ld.bu %d15,[%a13]0
8000ada4:	39 c3 1e 00 	ld.bu %d3,[%a12]30
    ++p_tcb_act->current_num_of_act;
    ev = E_OK;
  } else {
    ev = E_OS_LIMIT;
8000ada8:	82 42       	mov %d2,4
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000adaa:	7f 3f 05 80 	jge.u %d15,%d3,8000adb4 <osEE_task_activated+0x34>
    ++p_tcb_act->current_num_of_act;
8000adae:	c2 1f       	add %d15,1
8000adb0:	2c d0       	st.b [%a13]0,%d15
    ev = E_OK;
8000adb2:	82 02       	mov %d2,0
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000adb4:	cc 24       	ld.a %a15,[%a2]16
8000adb6:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000adba:	82 0f       	mov %d15,0
8000adbc:	68 0f       	st.w [%a15]0,%d15
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return ev;
}
8000adbe:	00 90       	ret 

8000adc0 <osEE_task_end>:
FUNC(void, OS_CODE)
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
8000adc0:	40 ae       	mov.aa %a14,%sp
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000adc2:	cc 43       	ld.a %a15,[%a4]12

  p_tcb->current_prio = p_tdb->ready_prio;
8000adc4:	39 4f 1c 00 	ld.bu %d15,[%a4]28
8000adc8:	28 1f       	st.b [%a15]1,%d15

  --p_tcb->current_num_of_act;
8000adca:	0c f0       	ld.bu %d15,[%a15]0
8000adcc:	c2 ff       	add %d15,-1
8000adce:	16 ff       	and %d15,255
8000add0:	28 0f       	st.b [%a15]0,%d15

  if (p_tcb->current_num_of_act == 0U) {
8000add2:	ee 03       	jnz %d15,8000add8 <osEE_task_end+0x18>
    p_tcb->status = OSEE_TASK_SUSPENDED;
8000add4:	28 2f       	st.b [%a15]2,%d15
8000add6:	00 90       	ret 
  } else {
    p_tcb->status = OSEE_TASK_READY;
8000add8:	82 1f       	mov %d15,1
8000adda:	28 2f       	st.b [%a15]2,%d15
8000addc:	00 90       	ret 

8000adde <osEE_task_event_set_mask>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)    p_tdb_waking_up,
  VAR(EventMaskType, AUTOMATIC)               Mask,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
8000adde:	40 ae       	mov.aa %a14,%sp
8000ade0:	02 4a       	mov %d10,%d4
8000ade2:	40 5d       	mov.aa %a13,%a5
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_waking_up = p_tdb_waking_up->p_tcb;
8000ade4:	99 4c 0c 00 	ld.a %a12,[%a4]12
 *  \return The function returns a pointer to the CDB pointer
 */
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE
  osEE_lock_and_get_core(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000ade8:	79 44 1f 00 	ld.b %d4,[%a4]31
8000adec:	6d 00 b6 04 	call 8000b758 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000adf0:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000adf2:	82 18       	mov %d8,1
8000adf4:	82 09       	mov %d9,0
8000adf6:	0b 89 10 28 	mov %e2,%d9,%d8
8000adfa:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000adfe:	df 02 fa ff 	jne %d2,0,8000adf2 <osEE_task_event_set_mask+0x14>
    *p_ev = E_OS_STATE;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;
8000ae02:	02 ac       	mov %d12,%d10
8000ae04:	02 ad       	mov %d13,%d10
8000ae06:	49 cc 4c 08 	ldmst [%a12]12,%e12

    *p_ev = E_OK;
8000ae0a:	34 d2       	st.b [%a13],%d2

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000ae0c:	4c c2       	ld.w %d15,[%a12]8
8000ae0e:	26 fa       	and %d10,%d15
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
8000ae10:	a0 0f       	mov.a %a15,0
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;

    *p_ev = E_OK;

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000ae12:	76 a5       	jz %d10,8000ae1c <osEE_task_event_set_mask+0x3e>
      p_own_sn = p_tcb_waking_up->p_own_sn;
8000ae14:	cc c4       	ld.a %a15,[%a12]16

      /* Set p_own_sn of waking up task to NULL so it won't be inserted in
         RQ more than once. */
      if (p_own_sn != NULL) {
8000ae16:	bc f3       	jz.a %a15,8000ae1c <osEE_task_event_set_mask+0x3e>
        p_tcb_waking_up->p_own_sn = NULL;
8000ae18:	82 0f       	mov %d15,0
8000ae1a:	6c c4       	st.w [%a12]16,%d15
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000ae1c:	99 22 10 00 	ld.a %a2,[%a2]16
8000ae20:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000ae24:	82 0f       	mov %d15,0
8000ae26:	6c 20       	st.w [%a2]0,%d15
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
8000ae28:	40 f2       	mov.aa %a2,%a15
8000ae2a:	00 90       	ret 

8000ae2c <osEE_activate_isr2>:
FUNC(void, OS_CODE)
  osEE_activate_isr2
(
  VAR(TaskType, AUTOMATIC) isr2_id
)
{
8000ae2c:	40 ae       	mov.aa %a14,%sp
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
8000ae2e:	91 00 00 48 	movh.a %a4,32768
8000ae32:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000ae36:	cc 43       	ld.a %a15,[%a4]12
8000ae38:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000ae3c:	c8 05       	ld.a %a5,[%a15]0

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
8000ae3e:	cc 53       	ld.a %a15,[%a5]12
8000ae40:	0c f0       	ld.bu %d15,[%a15]0
8000ae42:	c2 1f       	add %d15,1
8000ae44:	28 0f       	st.b [%a15]0,%d15

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
8000ae46:	a0 06       	mov.a %a6,0
8000ae48:	6d 00 8b 01 	call 8000b15e <osEE_scheduler_task_set_running>
8000ae4c:	00 90       	ret 

8000ae4e <osEE_scheduler_task_insert_rq>:
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act,
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb_act
)
{
8000ae4e:	40 ae       	mov.aa %a14,%sp
8000ae50:	40 5f       	mov.aa %a15,%a5
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
8000ae52:	0c 62       	ld.bu %d15,[%a6]2
8000ae54:	ee 05       	jnz %d15,8000ae5e <osEE_scheduler_task_insert_rq+0x10>
    p_tcb_act->status = OSEE_TASK_READY;
8000ae56:	82 1f       	mov %d15,1
8000ae58:	2c 62       	st.b [%a6]2,%d15
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
8000ae5a:	82 0f       	mov %d15,0
8000ae5c:	6c 63       	st.w [%a6]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000ae5e:	99 45 08 00 	ld.a %a5,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
8000ae62:	4c 50       	ld.w %d15,[%a5]0
8000ae64:	6c 42       	st.w [%a4]8,%d15
  p_sn_allocated->p_next  = NULL;
8000ae66:	82 0f       	mov %d15,0
8000ae68:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000ae6a:	b0 44       	add.a %a4,4
8000ae6c:	40 f6       	mov.aa %a6,%a15
8000ae6e:	6d ff 6e ff 	call 8000ad4a <osEE_scheduler_rq_insert>
    osEE_sn_alloc(&p_ccb->p_free_sn), p_tdb_act);

  return rq_head_changed;
}
8000ae72:	00 90       	ret 

8000ae74 <osEE_scheduler_task_activated>:
  osEE_scheduler_task_activated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000ae74:	40 ae       	mov.aa %a14,%sp
8000ae76:	40 5c       	mov.aa %a12,%a5
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
8000ae78:	19 5a 0c 00 	ld.w %d10,[%a5]12
#if (defined(OSEE_SINGLECORE))
  /* Touch unused parameter */
  (void)p_tdb;
  return osEE_get_curr_core();
#else
  return osEE_get_core(p_tdb->orig_core_id);
8000ae7c:	79 54 1f 00 	ld.b %d4,[%a5]31
8000ae80:	6d 00 6c 04 	call 8000b758 <osEE_get_core>
8000ae84:	40 2d       	mov.aa %a13,%a2
{
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
8000ae86:	99 24 0c 00 	ld.a %a4,[%a2]12
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
8000ae8a:	d4 42       	ld.a %a2,[%a4]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
8000ae8c:	99 23 0c 00 	ld.a %a3,[%a2]12
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000ae90:	4d c0 e1 2f 	mfcr %d2,$core_id
8000ae94:	37 02 48 20 	extr %d2,%d2,0,8
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000ae98:	cc d4       	ld.a %a15,[%a13]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000ae9a:	82 18       	mov %d8,1
8000ae9c:	82 09       	mov %d9,0
8000ae9e:	0b 89 10 48 	mov %e4,%d9,%d8
8000aea2:	49 f4 c0 08 	cmpswap.w [%a15]0,%e4
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000aea6:	df 04 fa ff 	jne %d4,0,8000ae9a <osEE_scheduler_task_activated+0x26>
  (void)p_kdb;
  osEE_lock_core(p_cdb);

#if (!defined(OSEE_SINGLECORE))
  /* Check if this is a remote activation */
  if (p_tdb_act->orig_core_id != curr_core_id) {
8000aeaa:	79 cf 1f 00 	ld.b %d15,[%a12]31
8000aeae:	5f 2f 23 00 	jeq %d15,%d2,8000aef4 <osEE_scheduler_task_activated+0x80>
    CONST(OsEE_bool, AUTOMATIC) rq_head_changed =
8000aeb2:	40 c5       	mov.aa %a5,%a12
8000aeb4:	60 a6       	mov.a %a6,%d10
8000aeb6:	5c cc       	call 8000ae4e <osEE_scheduler_task_insert_rq>
8000aeb8:	02 2f       	mov %d15,%d2
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000aeba:	cc d4       	ld.a %a15,[%a13]16
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
8000aebc:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000aec0:	82 02       	mov %d2,0
8000aec2:	68 02       	st.w [%a15]0,%d2
      osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);

    osEE_unlock_core(p_cdb);

    if (rq_head_changed) {
8000aec4:	6e 42       	jz %d15,8000af48 <osEE_scheduler_task_activated+0xd4>
      /* if RQ Head is changed, signal the remote core, it needs to
         reschedule */
      osEE_hal_signal_core(p_tdb_act->orig_core_id);
8000aec6:	79 c2 1f 00 	ld.b %d2,[%a12]31
8000aeca:	8f f2 0f f1 	and %d15,%d2,255
8000aece:	91 40 00 ff 	movh.a %a15,61444
8000aed2:	d9 ff 00 09 	lea %a15,[%a15]-28672 <f0039000 <_SMALL_DATA4_+0x40031000>>
8000aed6:	ff 4f 09 80 	jge.u %d15,4,8000aee8 <osEE_scheduler_task_activated+0x74>
8000aeda:	60 22       	mov.a %a2,%d2
8000aedc:	d9 2f 40 0e 	lea %a15,[%a2]-7168
8000aee0:	11 1f c0 f3 	addih.a %a15,%a15,15361
8000aee4:	30 ff       	add.a %a15,%a15
8000aee6:	30 ff       	add.a %a15,%a15
8000aee8:	4c f0       	ld.w %d15,[%a15]0
8000aeea:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
8000aeee:	68 0f       	st.w [%a15]0,%d15
    }
    is_preemption = OSEE_FALSE;
8000aef0:	82 02       	mov %d2,0
8000aef2:	00 90       	ret 
  } else
#endif /* !OSEE_SINGLECORE */
  /* Preemption Check */
  if (p_curr_tcb->current_prio < p_tcb_act->current_prio) {
8000aef4:	39 32 01 00 	ld.bu %d2,[%a3]1
8000aef8:	60 af       	mov.a %a15,%d10
8000aefa:	0c f1       	ld.bu %d15,[%a15]1
8000aefc:	7f f2 1d 80 	jge.u %d2,%d15,8000af36 <osEE_scheduler_task_activated+0xc2>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000af00:	cc 42       	ld.a %a15,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
8000af02:	48 02       	ld.w %d2,[%a15]0
8000af04:	59 42 08 00 	st.w [%a4]8,%d2
  p_sn_allocated->p_next  = NULL;
8000af08:	82 0f       	mov %d15,0
8000af0a:	68 0f       	st.w [%a15]0,%d15
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

    /* Set Previous TASK status as Ready but stacked */
    p_curr_tcb->status = OSEE_TASK_READY_STACKED;
8000af0c:	82 22       	mov %d2,2
8000af0e:	e9 32 02 00 	st.b [%a3]2,%d2

    /* Set the activated TASK as current */
    p_new_stk->p_tdb            = p_tdb_act;
8000af12:	e8 1c       	st.a [%a15]4,%a12
    p_new_stk->p_next           = p_ccb->p_stk_sn;
8000af14:	19 44 0c 00 	ld.w %d4,[%a4]12
8000af18:	68 04       	st.w [%a15]0,%d4
    p_ccb->p_stk_sn             = p_new_stk;
8000af1a:	ec 43       	st.a [%a4]12,%a15
    p_ccb->p_curr               = p_tdb_act;
8000af1c:	f4 4c       	st.a [%a4],%a12
    osEE_task_event_reset_mask(p_tdb_act->p_tcb);
8000af1e:	cc c3       	ld.a %a15,[%a12]12
8000af20:	68 3f       	st.w [%a15]12,%d15
8000af22:	cc d4       	ld.a %a15,[%a13]16
8000af24:	0d 00 80 04 	dsync 
8000af28:	68 0f       	st.w [%a15]0,%d15

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_tdb_act);
8000af2a:	40 24       	mov.aa %a4,%a2
8000af2c:	40 c5       	mov.aa %a5,%a12
8000af2e:	6d 00 22 03 	call 8000b572 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000af32:	82 12       	mov %d2,1
8000af34:	00 90       	ret 
  } else {
    /* Actually Insert the activated in READY Queue */
    (void)osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);
8000af36:	40 c5       	mov.aa %a5,%a12
8000af38:	60 a6       	mov.a %a6,%d10
8000af3a:	5c 8a       	call 8000ae4e <osEE_scheduler_task_insert_rq>
8000af3c:	cc d4       	ld.a %a15,[%a13]16
8000af3e:	0d 00 80 04 	dsync 
8000af42:	82 0f       	mov %d15,0
8000af44:	68 0f       	st.w [%a15]0,%d15

    osEE_unlock_core(p_cdb);

    is_preemption = OSEE_FALSE;
8000af46:	82 02       	mov %d2,0
  }

  return is_preemption;
}
8000af48:	00 90       	ret 

8000af4a <osEE_scheduler_task_insert>:
  osEE_scheduler_task_insert
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000af4a:	40 ae       	mov.aa %a14,%sp
8000af4c:	40 5c       	mov.aa %a12,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
8000af4e:	19 5a 0c 00 	ld.w %d10,[%a5]12
#if (defined(OSEE_SINGLECORE))
  /* Touch unused parameter */
  (void)p_tdb;
  return osEE_get_curr_core();
#else
  return osEE_get_core(p_tdb->orig_core_id);
8000af52:	79 54 1f 00 	ld.b %d4,[%a5]31
8000af56:	6d 00 01 04 	call 8000b758 <osEE_get_core>
8000af5a:	40 2d       	mov.aa %a13,%a2
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb         = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb         = p_cdb->p_ccb;
8000af5c:	99 24 0c 00 	ld.a %a4,[%a2]12
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000af60:	4d c0 e1 2f 	mfcr %d2,$core_id
8000af64:	37 02 48 20 	extr %d2,%d2,0,8
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000af68:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000af6a:	82 18       	mov %d8,1
8000af6c:	82 09       	mov %d9,0
8000af6e:	0b 89 10 48 	mov %e4,%d9,%d8
8000af72:	49 f4 c0 08 	cmpswap.w [%a15]0,%e4
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000af76:	df 04 fa ff 	jne %d4,0,8000af6a <osEE_scheduler_task_insert+0x20>
  (void)p_kdb;
  osEE_lock_core(p_cdb);

#if (!defined(OSEE_SINGLECORE))
  /* Check if this is a remote activation */
  if (p_tdb_act->orig_core_id != curr_core_id) {
8000af7a:	79 cf 1f 00 	ld.b %d15,[%a12]31
8000af7e:	5f 2f 24 00 	jeq %d15,%d2,8000afc6 <osEE_scheduler_task_insert+0x7c>
    head_changed = osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);
8000af82:	40 c5       	mov.aa %a5,%a12
8000af84:	60 a6       	mov.a %a6,%d10
8000af86:	6d ff 64 ff 	call 8000ae4e <osEE_scheduler_task_insert_rq>
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000af8a:	cc d4       	ld.a %a15,[%a13]16
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
8000af8c:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000af90:	82 0f       	mov %d15,0
8000af92:	68 0f       	st.w [%a15]0,%d15

    osEE_unlock_core(p_cdb);

    if (head_changed) {
8000af94:	df 02 22 00 	jeq %d2,0,8000afd8 <osEE_scheduler_task_insert+0x8e>
      /* if RQ Head is changed, signal the remote core, it needs to
         reschedule */
      osEE_hal_signal_core(p_tdb_act->orig_core_id);
8000af98:	79 c2 1f 00 	ld.b %d2,[%a12]31
8000af9c:	8f f2 0f f1 	and %d15,%d2,255
8000afa0:	91 40 00 ff 	movh.a %a15,61444
8000afa4:	d9 ff 00 09 	lea %a15,[%a15]-28672 <f0039000 <_SMALL_DATA4_+0x40031000>>
8000afa8:	ff 4f 09 80 	jge.u %d15,4,8000afba <osEE_scheduler_task_insert+0x70>
8000afac:	60 22       	mov.a %a2,%d2
8000afae:	d9 2f 40 0e 	lea %a15,[%a2]-7168
8000afb2:	11 1f c0 f3 	addih.a %a15,%a15,15361
8000afb6:	30 ff       	add.a %a15,%a15
8000afb8:	30 ff       	add.a %a15,%a15
8000afba:	4c f0       	ld.w %d15,[%a15]0
8000afbc:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
8000afc0:	68 0f       	st.w [%a15]0,%d15
      head_changed = OSEE_FALSE;
8000afc2:	82 02       	mov %d2,0
8000afc4:	00 90       	ret 
    }
  } else
#endif /* !OSEE_SINGLECORE */
  {
    /* Actually Insert the activated in READY Queue */
    head_changed  = osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);
8000afc6:	40 c5       	mov.aa %a5,%a12
8000afc8:	60 a6       	mov.a %a6,%d10
8000afca:	6d ff 42 ff 	call 8000ae4e <osEE_scheduler_task_insert_rq>
8000afce:	cc d4       	ld.a %a15,[%a13]16
8000afd0:	0d 00 80 04 	dsync 
8000afd4:	82 0f       	mov %d15,0
8000afd6:	68 0f       	st.w [%a15]0,%d15

    osEE_unlock_core(p_cdb);
  }

  return head_changed;
}
8000afd8:	00 90       	ret 

8000afda <osEE_scheduler_task_unblocked>:
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
8000afda:	40 ae       	mov.aa %a14,%sp
8000afdc:	80 5b       	mov.d %d11,%a5
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
8000afde:	99 5c 04 00 	ld.a %a12,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
8000afe2:	19 ca 0c 00 	ld.w %d10,[%a12]12
#if (defined(OSEE_SINGLECORE))
  /* Touch unused parameter */
  (void)p_tdb;
  return osEE_get_curr_core();
#else
  return osEE_get_core(p_tdb->orig_core_id);
8000afe6:	79 c4 1f 00 	ld.b %d4,[%a12]31
8000afea:	6d 00 b7 03 	call 8000b758 <osEE_get_core>
8000afee:	40 2d       	mov.aa %a13,%a2
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000aff0:	19 2c 0c 00 	ld.w %d12,[%a2]12

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
8000aff4:	82 2f       	mov %d15,2
8000aff6:	60 a2       	mov.a %a2,%d10
8000aff8:	2c 22       	st.b [%a2]2,%d15
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
8000affa:	39 cf 1c 00 	ld.bu %d15,[%a12]28
8000affe:	2c 21       	st.b [%a2]1,%d15
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000b000:	cc d4       	ld.a %a15,[%a13]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b002:	82 18       	mov %d8,1
8000b004:	82 09       	mov %d9,0
8000b006:	0b 89 10 28 	mov %e2,%d9,%d8
8000b00a:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b00e:	df 02 fa ff 	jne %d2,0,8000b002 <osEE_scheduler_task_unblocked+0x28>
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000b012:	60 c4       	mov.a %a4,%d12
8000b014:	b0 44       	add.a %a4,4
8000b016:	60 b5       	mov.a %a5,%d11
8000b018:	40 c6       	mov.aa %a6,%a12
8000b01a:	6d ff 98 fe 	call 8000ad4a <osEE_scheduler_rq_insert>
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
8000b01e:	82 03       	mov %d3,0
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
8000b020:	df 12 0a 80 	jne %d2,1,8000b034 <osEE_scheduler_task_unblocked+0x5a>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
8000b024:	60 c2       	mov.a %a2,%d12
8000b026:	cc 20       	ld.a %a15,[%a2]0
8000b028:	c8 3f       	ld.a %a15,[%a15]12

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
8000b02a:	60 a2       	mov.a %a2,%d10
8000b02c:	0c 21       	ld.bu %d15,[%a2]1
8000b02e:	08 13       	ld.bu %d3,[%a15]1
8000b030:	0b f3 30 31 	lt.u %d3,%d3,%d15
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b034:	cc d4       	ld.a %a15,[%a13]16
8000b036:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b03a:	82 0f       	mov %d15,0
8000b03c:	68 0f       	st.w [%a15]0,%d15

  osEE_unlock_core(p_cdb);

#if (!defined(OSEE_SINGLECORE))
  {
    CONST(CoreIdType, AUTOMATIC) tdb_core_id = p_tdb_released->orig_core_id;
8000b03e:	79 cf 1f 00 	ld.b %d15,[%a12]31
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000b042:	4d c0 e1 2f 	mfcr %d2,$core_id
    /* Check if this is a remote release */
    if (tdb_core_id != osEE_get_curr_core_id()) {
8000b046:	37 02 48 20 	extr %d2,%d2,0,8
      if (is_preemption) {
8000b04a:	0b 2f 10 21 	ne %d2,%d15,%d2
8000b04e:	26 32       	and %d2,%d3
8000b050:	df 02 15 00 	jeq %d2,0,8000b07a <osEE_scheduler_task_unblocked+0xa0>
8000b054:	8f ff 0f 21 	and %d2,%d15,255
8000b058:	91 40 00 ff 	movh.a %a15,61444
8000b05c:	d9 ff 00 09 	lea %a15,[%a15]-28672 <f0039000 <_SMALL_DATA4_+0x40031000>>
8000b060:	ff 42 08 80 	jge.u %d2,4,8000b070 <osEE_scheduler_task_unblocked+0x96>
8000b064:	1b 0f 40 fe 	addi %d15,%d15,-7168
8000b068:	9b 1f c0 f3 	addih %d15,%d15,15361
8000b06c:	06 2f       	sh %d15,2
8000b06e:	60 ff       	mov.a %a15,%d15
8000b070:	4c f0       	ld.w %d15,[%a15]0
8000b072:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
8000b076:	68 0f       	st.w [%a15]0,%d15
        osEE_hal_signal_core(tdb_core_id);
        /* If this is a remote release, it is not a preemption for this core */
        is_preemption = OSEE_FALSE;
8000b078:	82 03       	mov %d3,0
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
8000b07a:	02 32       	mov %d2,%d3
8000b07c:	00 90       	ret 

8000b07e <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
8000b07e:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b080:	40 9d       	mov.aa %a13,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000b082:	99 dc 0c 00 	ld.a %a12,[%a13]12 <f003000c <_SMALL_DATA4_+0x4002800c>>
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000b086:	cc d4       	ld.a %a15,[%a13]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b088:	82 12       	mov %d2,1
8000b08a:	82 03       	mov %d3,0
8000b08c:	0b 23 10 48 	mov %e4,%d3,%d2
8000b090:	49 f4 c0 08 	cmpswap.w [%a15]0,%e4
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b094:	df 04 fa ff 	jne %d4,0,8000b088 <osEE_scheduler_task_terminated+0xa>
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
8000b098:	4c c0       	ld.w %d15,[%a12]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
8000b09a:	60 f2       	mov.a %a2,%d15
8000b09c:	cc 23       	ld.a %a15,[%a2]12

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
8000b09e:	6c 50       	st.w [%a5]0,%d15

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
8000b0a0:	08 22       	ld.bu %d2,[%a15]2
8000b0a2:	df 42 18 80 	jne %d2,4,8000b0d2 <osEE_scheduler_task_terminated+0x54>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
8000b0a6:	40 d4       	mov.aa %a4,%a13
8000b0a8:	d9 c5 04 00 	lea %a5,[%a12]4
8000b0ac:	6d ff 56 fe 	call 8000ad58 <osEE_scheduler_core_pop_running>
8000b0b0:	80 29       	mov.d %d9,%a2

      p_tdb_to = p_ccb->p_curr;
8000b0b2:	54 c8       	ld.w %d8,[%a12]

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
8000b0b4:	3e 85       	jeq %d15,%d8,8000b0be <osEE_scheduler_task_terminated+0x40>
        osEE_task_end(p_tdb_term);
8000b0b6:	60 f4       	mov.a %a4,%d15
8000b0b8:	6d ff 84 fe 	call 8000adc0 <osEE_task_end>
8000b0bc:	3c 04       	j 8000b0c4 <osEE_scheduler_task_terminated+0x46>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
8000b0be:	0c f0       	ld.bu %d15,[%a15]0
8000b0c0:	c2 ff       	add %d15,-1
8000b0c2:	28 0f       	st.b [%a15]0,%d15
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
8000b0c4:	19 c2 08 00 	ld.w %d2,[%a12]8
8000b0c8:	60 92       	mov.a %a2,%d9
8000b0ca:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
8000b0cc:	59 c9 08 00 	st.w [%a12]8,%d9
8000b0d0:	3c 21       	j 8000b112 <osEE_scheduler_task_terminated+0x94>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
8000b0d2:	99 c5 0c 00 	ld.a %a5,[%a12]12

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
8000b0d6:	54 52       	ld.w %d2,[%a5]
8000b0d8:	59 c2 0c 00 	st.w [%a12]12,%d2
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
8000b0dc:	60 f2       	mov.a %a2,%d15
8000b0de:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000b0e2:	28 12       	st.b [%a15]1,%d2
      p_tcb_term->status = OSEE_TASK_READY;
8000b0e4:	82 12       	mov %d2,1
8000b0e6:	28 22       	st.b [%a15]2,%d2
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
8000b0e8:	08 02       	ld.bu %d2,[%a15]0
8000b0ea:	df 12 04 80 	jne %d2,1,8000b0f2 <osEE_scheduler_task_terminated+0x74>
8000b0ee:	82 02       	mov %d2,0
8000b0f0:	68 32       	st.w [%a15]12,%d2
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
8000b0f2:	d9 cf 04 00 	lea %a15,[%a12]4
8000b0f6:	40 f4       	mov.aa %a4,%a15
8000b0f8:	60 f6       	mov.a %a6,%d15
8000b0fa:	6d ff 28 fe 	call 8000ad4a <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000b0fe:	40 d4       	mov.aa %a4,%a13
8000b100:	40 f5       	mov.aa %a5,%a15
8000b102:	6d ff c7 fd 	call 8000ac90 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
8000b106:	7c 25       	jnz.a %a2,8000b110 <osEE_scheduler_task_terminated+0x92>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
8000b108:	cc c3       	ld.a %a15,[%a12]12
8000b10a:	48 18       	ld.w %d8,[%a15]4
          p_ccb->p_curr           = p_tdb_to;
8000b10c:	74 c8       	st.w [%a12],%d8
8000b10e:	3c 02       	j 8000b112 <osEE_scheduler_task_terminated+0x94>
        } else {
          p_tdb_to = p_ccb->p_curr;
8000b110:	54 c8       	ld.w %d8,[%a12]
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b112:	cc d4       	ld.a %a15,[%a13]16
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
8000b114:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b118:	82 0f       	mov %d15,0
8000b11a:	68 0f       	st.w [%a15]0,%d15
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
8000b11c:	60 82       	mov.a %a2,%d8
8000b11e:	00 90       	ret 

8000b120 <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
8000b120:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b122:	40 9c       	mov.aa %a12,%a9
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000b124:	99 cd 0c 00 	ld.a %a13,[%a12]12 <f003000c <_SMALL_DATA4_+0x4002800c>>
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000b128:	cc c4       	ld.a %a15,[%a12]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b12a:	82 12       	mov %d2,1
8000b12c:	82 03       	mov %d3,0
8000b12e:	0b 23 10 48 	mov %e4,%d3,%d2
8000b132:	49 f4 c0 08 	cmpswap.w [%a15]0,%e4
8000b136:	02 4f       	mov %d15,%d4
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b138:	df 04 f9 ff 	jne %d4,0,8000b12a <osEE_scheduler_task_preemption_point+0xa>
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000b13c:	40 c4       	mov.aa %a4,%a12
8000b13e:	d9 d5 04 00 	lea %a5,[%a13]4
8000b142:	6d ff a7 fd 	call 8000ac90 <osEE_scheduler_core_rq_preempt_stk>
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b146:	cc c4       	ld.a %a15,[%a12]16
8000b148:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b14c:	68 0f       	st.w [%a15]0,%d15

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
8000b14e:	82 02       	mov %d2,0
  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
8000b150:	bc 26       	jz.a %a2,8000b15c <osEE_scheduler_task_preemption_point+0x3c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
8000b152:	40 24       	mov.aa %a4,%a2
8000b154:	d4 d5       	ld.a %a5,[%a13]
8000b156:	6d 00 0e 02 	call 8000b572 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000b15a:	82 12       	mov %d2,1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
8000b15c:	00 90       	ret 

8000b15e <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
8000b15e:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b160:	40 92       	mov.aa %a2,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000b162:	cc 23       	ld.a %a15,[%a2]12
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
8000b164:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
8000b166:	48 34       	ld.w %d4,[%a15]12

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
8000b168:	99 43 0c 00 	ld.a %a3,[%a4]12 <80000003 <BootModeHeader0+0x3>>
8000b16c:	0c 32       	ld.bu %d15,[%a3]2
8000b16e:	5e 43       	jne %d15,4,8000b174 <osEE_scheduler_task_set_running+0x16>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000b170:	82 2f       	mov %d15,2
8000b172:	2c 32       	st.b [%a3]2,%d15
  }
  p_ccb->p_curr                 = p_tdb;
8000b174:	e8 05       	st.a [%a15]0,%a5

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
8000b176:	bd 06 17 80 	jnz.a %a6,8000b1a4 <osEE_scheduler_task_set_running+0x46>
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000b17a:	99 23 10 00 	ld.a %a3,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b17e:	82 12       	mov %d2,1
8000b180:	82 03       	mov %d3,0
8000b182:	0b 23 10 68 	mov %e6,%d3,%d2
8000b186:	49 36 c0 08 	cmpswap.w [%a3]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b18a:	df 06 fa ff 	jne %d6,0,8000b17e <osEE_scheduler_task_set_running+0x20>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000b18e:	c8 23       	ld.a %a3,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000b190:	54 37       	ld.w %d7,[%a3]
8000b192:	68 27       	st.w [%a15]8,%d7
  p_sn_allocated->p_next  = NULL;
8000b194:	74 36       	st.w [%a3],%d6
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
8000b196:	e8 33       	st.a [%a15]12,%a3
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b198:	99 22 10 00 	ld.a %a2,[%a2]16
8000b19c:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b1a0:	74 26       	st.w [%a2],%d6
8000b1a2:	3c 02       	j 8000b1a6 <osEE_scheduler_task_set_running+0x48>
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
8000b1a4:	e8 36       	st.a [%a15]12,%a6
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
8000b1a6:	c8 32       	ld.a %a2,[%a15]12
8000b1a8:	b5 25 04 00 	st.a [%a2]4,%a5
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
8000b1ac:	c8 3f       	ld.a %a15,[%a15]12
8000b1ae:	68 04       	st.w [%a15]0,%d4

  osEE_change_context_from_running(p_preempted, p_tdb);
8000b1b0:	6d 00 e1 01 	call 8000b572 <osEE_change_context_from_running>
8000b1b4:	00 90       	ret 
	...

8000b1b8 <osEE_counter_insert_abs_trigger>:
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db,
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA) p_trigger_db,
  VAR(TickType, AUTOMATIC)                       when
)
{
8000b1b8:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb  = p_counter_db->p_counter_cb;
8000b1ba:	d4 42       	ld.a %a2,[%a4]
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_previous    = NULL;
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_current     = p_counter_cb->trigger_queue;
8000b1bc:	4c 20       	ld.w %d15,[%a2]0
  CONST(TickType, AUTOMATIC)
    counter_value = p_counter_cb->value;
8000b1be:	19 25 04 00 	ld.w %d5,[%a2]4
  VAR(OsEE_bool, AUTOMATIC)
    work_not_done = OSEE_TRUE;

  /* Update Trigger Status */
  p_trigger_db->p_trigger_cb->when   = when;
8000b1c2:	cc 50       	ld.a %a15,[%a5]0
8000b1c4:	68 14       	st.w [%a15]4,%d4
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_current     = p_counter_cb->trigger_queue;
  CONST(TickType, AUTOMATIC)
    counter_value = p_counter_cb->value;
  VAR(OsEE_bool, AUTOMATIC)
    work_not_done = OSEE_TRUE;
8000b1c6:	82 13       	mov %d3,1
)
{
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb  = p_counter_db->p_counter_cb;
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_previous    = NULL;
8000b1c8:	a0 03       	mov.a %a3,0
      } else {
        work_not_done = OSEE_FALSE;
      }
    } else {
      /* "Current" belong to next counter-loop */
      if ((when <= counter_value) && (when >= current_when)) {
8000b1ca:	0b 45 50 61 	ge.u %d6,%d5,%d4
         * &&
         * (when >= current_when) => "New" after "current" */
        p_previous  = p_current;
        p_current   = p_current->p_trigger_cb->p_next;
      } else {
        work_not_done = OSEE_FALSE;
8000b1ce:	82 07       	mov %d7,0
    work_not_done = OSEE_TRUE;

  /* Update Trigger Status */
  p_trigger_db->p_trigger_cb->when   = when;

  while ((p_current != NULL) && work_not_done) {
8000b1d0:	3c 17       	j 8000b1fe <osEE_counter_insert_abs_trigger+0x46>
    CONST(TickType, AUTOMATIC) current_when = p_current->p_trigger_cb->when;
8000b1d2:	60 f4       	mov.a %a4,%d15
8000b1d4:	cc 40       	ld.a %a15,[%a4]0
8000b1d6:	48 12       	ld.w %d2,[%a15]4

    if (current_when > counter_value) {
8000b1d8:	7f 25 09 80 	jge.u %d5,%d2,8000b1ea <osEE_counter_insert_abs_trigger+0x32>
      /* "Current" belong to this counter-loop */
      if ((when >= current_when) || (when <= counter_value)) {
8000b1dc:	02 60       	mov %d0,%d6
8000b1de:	0b 24 c0 02 	or.ge.u %d0,%d4,%d2
8000b1e2:	76 0b       	jz %d0,8000b1f8 <osEE_counter_insert_abs_trigger+0x40>
8000b1e4:	60 f3       	mov.a %a3,%d15
        /* (when >= current_when) => "New" after "current", still in this loop.
           (when <= counter_value) => "New" in next loop. */
        p_previous  = p_current;
        p_current   = p_current->p_trigger_cb->p_next;
8000b1e6:	4c f0       	ld.w %d15,[%a15]0
8000b1e8:	3c 0b       	j 8000b1fe <osEE_counter_insert_abs_trigger+0x46>
      } else {
        work_not_done = OSEE_FALSE;
      }
    } else {
      /* "Current" belong to next counter-loop */
      if ((when <= counter_value) && (when >= current_when)) {
8000b1ea:	0b 24 50 21 	ge.u %d2,%d4,%d2
8000b1ee:	26 62       	and %d2,%d6
8000b1f0:	76 26       	jz %d2,8000b1fc <osEE_counter_insert_abs_trigger+0x44>
8000b1f2:	60 f3       	mov.a %a3,%d15
        /* (when <= counter_value) => "New" in the next counter-loop.
         * &&
         * (when >= current_when) => "New" after "current" */
        p_previous  = p_current;
        p_current   = p_current->p_trigger_cb->p_next;
8000b1f4:	4c f0       	ld.w %d15,[%a15]0
8000b1f6:	3c 04       	j 8000b1fe <osEE_counter_insert_abs_trigger+0x46>
        /* (when >= current_when) => "New" after "current", still in this loop.
           (when <= counter_value) => "New" in next loop. */
        p_previous  = p_current;
        p_current   = p_current->p_trigger_cb->p_next;
      } else {
        work_not_done = OSEE_FALSE;
8000b1f8:	02 73       	mov %d3,%d7
8000b1fa:	3c 02       	j 8000b1fe <osEE_counter_insert_abs_trigger+0x46>
         * &&
         * (when >= current_when) => "New" after "current" */
        p_previous  = p_current;
        p_current   = p_current->p_trigger_cb->p_next;
      } else {
        work_not_done = OSEE_FALSE;
8000b1fc:	02 73       	mov %d3,%d7
    work_not_done = OSEE_TRUE;

  /* Update Trigger Status */
  p_trigger_db->p_trigger_cb->when   = when;

  while ((p_current != NULL) && work_not_done) {
8000b1fe:	8b 0f 20 22 	ne %d2,%d15,0
8000b202:	8b 03 20 24 	and.ne %d2,%d3,0
8000b206:	df 02 e6 ff 	jne %d2,0,8000b1d2 <osEE_counter_insert_abs_trigger+0x1a>
        work_not_done = OSEE_FALSE;
      }
    }
  }

  if (p_previous != NULL) {
8000b20a:	bc 34       	jz.a %a3,8000b212 <osEE_counter_insert_abs_trigger+0x5a>
    p_previous->p_trigger_cb->p_next  = p_trigger_db;
8000b20c:	cc 30       	ld.a %a15,[%a3]0
8000b20e:	e8 05       	st.a [%a15]0,%a5
8000b210:	3c 02       	j 8000b214 <osEE_counter_insert_abs_trigger+0x5c>
  } else {
    p_counter_cb->trigger_queue       = p_trigger_db;
8000b212:	f4 25       	st.a [%a2],%a5
  }

  p_trigger_db->p_trigger_cb->p_next = p_current;
8000b214:	cc 50       	ld.a %a15,[%a5]0
8000b216:	68 0f       	st.w [%a15]0,%d15
8000b218:	00 90       	ret 

8000b21a <osEE_counter_insert_rel_trigger>:
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db,
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA) p_trigger_db,
  VAR(TickType, AUTOMATIC)                       delta
)
{
8000b21a:	40 ae       	mov.aa %a14,%sp
{
  VAR(TickType, AUTOMATIC) when;
  CONSTP2CONST(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb    = p_counter_db->p_counter_cb;
  CONST(TickType, AUTOMATIC)
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
8000b21c:	19 42 04 00 	ld.w %d2,[%a4]4
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;
8000b220:	cc 40       	ld.a %a15,[%a4]0
8000b222:	4c f1       	ld.w %d15,[%a15]4

  if ((maxallowedvalue - delta) >= value) {
8000b224:	0b 42 80 50 	sub %d5,%d2,%d4
8000b228:	46 02       	not %d2
    when = value + delta;
  } else {
    when = delta - (maxallowedvalue - value) - 1U;
8000b22a:	42 f2       	add %d2,%d15
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;

  if ((maxallowedvalue - delta) >= value) {
    when = value + delta;
8000b22c:	12 43       	add %d3,%d15,%d4
8000b22e:	42 24       	add %d4,%d2
8000b230:	0b f5 30 f1 	lt.u %d15,%d5,%d15
  osEE_counter_insert_abs_trigger(p_counter_db, p_trigger_db,
8000b234:	6a 34       	cmovn %d4,%d15,%d3
8000b236:	6d ff c1 ff 	call 8000b1b8 <osEE_counter_insert_abs_trigger>
8000b23a:	00 90       	ret 

8000b23c <osEE_counter_cancel_trigger>:
  osEE_counter_cancel_trigger
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db,
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA) p_trigger_db
)
{
8000b23c:	40 ae       	mov.aa %a14,%sp
8000b23e:	80 53       	mov.d %d3,%a5
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb  = p_counter_db->p_counter_cb;
8000b240:	cc 40       	ld.a %a15,[%a4]0
  CONSTP2CONST(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb  = p_trigger_db->p_trigger_cb;
8000b242:	d4 52       	ld.a %a2,[%a5]
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_current     = p_counter_cb->trigger_queue;
8000b244:	4c f0       	ld.w %d15,[%a15]0

  if (p_current == p_trigger_db) {
8000b246:	7e 34       	jne %d15,%d3,8000b24e <osEE_counter_cancel_trigger+0x12>
    /* The trigger to be removed is the first one in the queue */
    p_counter_cb->trigger_queue = p_trigger_cb->p_next;
8000b248:	4c 20       	ld.w %d15,[%a2]0
8000b24a:	68 0f       	st.w [%a15]0,%d15
8000b24c:	00 90       	ret 
  } else {
    P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA) p_previous;
    do {
      p_previous = p_current;
      p_current  = p_current->p_trigger_cb->p_next;
8000b24e:	60 f3       	mov.a %a3,%d15
8000b250:	cc 30       	ld.a %a15,[%a3]0
8000b252:	4c f0       	ld.w %d15,[%a15]0
    } while ((p_current != NULL) && (p_current != p_trigger_db));
8000b254:	8b 0f 20 42 	ne %d4,%d15,0
8000b258:	0b 3f 10 21 	ne %d2,%d15,%d3
8000b25c:	8b 0f 20 24 	and.ne %d2,%d15,0
8000b260:	df 02 f7 ff 	jne %d2,0,8000b24e <osEE_counter_cancel_trigger+0x12>

    if (p_current != NULL) {
8000b264:	76 43       	jz %d4,8000b26a <osEE_counter_cancel_trigger+0x2e>
      /* Remove p_trigger_db from the list */
      p_previous->p_trigger_cb->p_next = p_trigger_cb->p_next;
8000b266:	4c 20       	ld.w %d15,[%a2]0
8000b268:	68 0f       	st.w [%a15]0,%d15
8000b26a:	00 90       	ret 

8000b26c <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
8000b26c:	40 ae       	mov.aa %a14,%sp
8000b26e:	20 10       	sub.a %sp,16
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
8000b270:	d4 43       	ld.a %a3,[%a4]
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b272:	40 95       	mov.aa %a5,%a9
    CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
      p_cdb = osEE_get_curr_core();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
8000b274:	19 34 04 00 	ld.w %d4,[%a3]4
8000b278:	4c 41       	ld.w %d15,[%a4]4
8000b27a:	3f f4 06 80 	jlt.u %d4,%d15,8000b286 <osEE_counter_increment+0x1a>
      counter_value       = 0U;
      p_counter_cb->value = 0U;
8000b27e:	82 0f       	mov %d15,0
8000b280:	6c 31       	st.w [%a3]4,%d15
      p_cdb = osEE_get_curr_core();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value       = 0U;
8000b282:	82 04       	mov %d4,0
8000b284:	3c 04       	j 8000b28c <osEE_counter_increment+0x20>
      p_counter_cb->value = 0U;
    } else {
      ++p_counter_cb->value;
8000b286:	c2 14       	add %d4,1
8000b288:	59 34 04 00 	st.w [%a3]4,%d4
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000b28c:	cc 54       	ld.a %a15,[%a5]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b28e:	82 12       	mov %d2,1
8000b290:	82 03       	mov %d3,0
8000b292:	0b 23 10 68 	mov %e6,%d3,%d2
8000b296:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b29a:	df 06 fa ff 	jne %d6,0,8000b28e <osEE_counter_increment+0x22>
            to not have nested critical sections.
            To handle possible races due to cycling triggers a state
            protocol have been implemented. */
    osEE_lock_core(p_cdb);

    p_triggered_db = p_counter_cb->trigger_queue;
8000b29e:	d4 3c       	ld.a %a12,[%a3]

    if (p_triggered_db != NULL) {
8000b2a0:	bd 0c 89 00 	jz.a %a12,8000b3b2 <osEE_counter_increment+0x146>
      P2CONST(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
8000b2a4:	cc c0       	ld.a %a15,[%a12]0
8000b2a6:	4c f1       	ld.w %d15,[%a15]4
8000b2a8:	40 c2       	mov.aa %a2,%a12
          /* Now I will use previous to hold the previous checked alarm */
          CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
            p_current_cb = p_current->p_trigger_cb;
          p_previous = p_current;
          /* Set this Trigger as Expired */
          p_current_cb->status = OSEE_TRIGGER_EXPIRED;
8000b2aa:	82 33       	mov %d3,3

    if (p_triggered_db != NULL) {
      P2CONST(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
8000b2ac:	3e 43       	jeq %d15,%d4,8000b2b2 <osEE_counter_increment+0x46>
8000b2ae:	3c 7c       	j 8000b3a6 <osEE_counter_increment+0x13a>
          CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
            p_current_cb = p_current->p_trigger_cb;
          p_previous = p_current;
          /* Set this Trigger as Expired */
          p_current_cb->status = OSEE_TRIGGER_EXPIRED;
          p_current = p_current_cb->p_next;
8000b2b0:	40 f2       	mov.aa %a2,%a15
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
            p_current_cb = p_current->p_trigger_cb;
8000b2b2:	cc 20       	ld.a %a15,[%a2]0
          p_previous = p_current;
          /* Set this Trigger as Expired */
          p_current_cb->status = OSEE_TRIGGER_EXPIRED;
8000b2b4:	28 83       	st.b [%a15]8,%d3
          p_current = p_current_cb->p_next;
8000b2b6:	c8 0f       	ld.a %a15,[%a15]0
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
8000b2b8:	bc f6       	jz.a %a15,8000b2c4 <osEE_counter_increment+0x58>
8000b2ba:	c8 06       	ld.a %a6,[%a15]0
8000b2bc:	19 62 04 00 	ld.w %d2,[%a6]4
            p_current_cb = p_current->p_trigger_cb;
          p_previous = p_current;
          /* Set this Trigger as Expired */
          p_current_cb->status = OSEE_TRIGGER_EXPIRED;
          p_current = p_current_cb->p_next;
        } while ((p_current != NULL) &&
8000b2c0:	5f 2f f8 7f 	jeq %d15,%d2,8000b2b0 <osEE_counter_increment+0x44>
8000b2c4:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
8000b2c8:	d4 22       	ld.a %a2,[%a2]
8000b2ca:	82 0f       	mov %d15,0
8000b2cc:	6c 20       	st.w [%a2]0,%d15
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
8000b2ce:	ec 30       	st.a [%a3]0,%a15
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b2d0:	cc 54       	ld.a %a15,[%a5]16
8000b2d2:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b2d6:	68 0f       	st.w [%a15]0,%d15
  osEE_handle_action
(
  P2VAR(OsEE_action, AUTOMATIC, OS_APPL_CONST) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev = E_OK;
8000b2d8:	82 0a       	mov %d10,0
  switch (p_action->type) {
8000b2da:	7b 10 00 b8 	movh %d11,32769
8000b2de:	1b 4b 30 bb 	addi %d11,%d11,-19708

      p_sn = osEE_task_event_set_mask(p_tdb, mask, &ev);

      if (p_sn != NULL) {
        /* Release the TASK (and the SN) */
        (void)osEE_scheduler_task_unblocked(osEE_get_kernel(), p_sn);
8000b2e2:	91 00 00 f8 	movh.a %a15,32768
8000b2e6:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
        osEE_trigger_get_alarm_db(p_trigger_to_be_handled_db)
      )->cycle;
    if (cycle > 0U) {
      /* Reinsert the trigger in timer wheel as relative with delta equal to
         cycle */
      p_trigger_to_be_handled_cb->status = OSEE_TRIGGER_ACTIVE;
8000b2ea:	82 2e       	mov %d14,2
8000b2ec:	82 0c       	mov %d12,0
#endif /* OSEE_HAS_ALARMS || OSEE_HAS_SCHEDULE_TABLES */

          /* Prepare next trigger to be handled here, before actually handle
           * the current one, otherwise cycling triggers will mess with the
           * list of triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
8000b2ee:	d4 c2       	ld.a %a2,[%a12]
8000b2f0:	54 2d       	ld.w %d13,[%a2]
  osEE_handle_action
(
  P2VAR(OsEE_action, AUTOMATIC, OS_APPL_CONST) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev = E_OK;
8000b2f2:	e9 ea ff ff 	st.b [%a14]-1,%d10
  switch (p_action->type) {
8000b2f6:	39 cf 18 00 	ld.bu %d15,[%a12]24
8000b2fa:	ff 4f 32 80 	jge.u %d15,4,8000b35e <osEE_counter_increment+0xf2>
8000b2fe:	60 b3       	mov.a %a3,%d11
8000b300:	90 32       	addsc.a %a2,%a3,%d15,2
8000b302:	dc 02       	ji %a2
8000b304:	1d 00 08 00 	j 8000b314 <osEE_counter_increment+0xa8>
8000b308:	1d 00 14 00 	j 8000b330 <osEE_counter_increment+0xc4>
8000b30c:	1d 00 20 00 	j 8000b34c <osEE_counter_increment+0xe0>
8000b310:	1d 00 23 00 	j 8000b356 <osEE_counter_increment+0xea>
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb     = p_action->param.p_tdb;
8000b314:	99 cd 0c 00 	ld.a %a13,[%a12]12

      ev = osEE_task_activated(p_tdb);
8000b318:	40 d4       	mov.aa %a4,%a13
8000b31a:	6d ff 33 fd 	call 8000ad80 <osEE_task_activated>
8000b31e:	e9 e2 ff ff 	st.b [%a14]-1,%d2
      if (ev == E_OK) {
8000b322:	df 02 1e 80 	jne %d2,0,8000b35e <osEE_counter_increment+0xf2>
        (void)osEE_scheduler_task_insert(osEE_get_kernel(), p_tdb);
8000b326:	40 f4       	mov.aa %a4,%a15
8000b328:	40 d5       	mov.aa %a5,%a13
8000b32a:	6d ff 10 fe 	call 8000af4a <osEE_scheduler_task_insert>
8000b32e:	3c 18       	j 8000b35e <osEE_counter_increment+0xf2>
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
      CONST(EventMaskType, AUTOMATIC)
        mask = p_action->param.mask;

      p_sn = osEE_task_event_set_mask(p_tdb, mask, &ev);
8000b330:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000b334:	19 c4 14 00 	ld.w %d4,[%a12]20
8000b338:	d9 e5 ff ff 	lea %a5,[%a14]-1
8000b33c:	6d ff 51 fd 	call 8000adde <osEE_task_event_set_mask>

      if (p_sn != NULL) {
8000b340:	bc 2f       	jz.a %a2,8000b35e <osEE_counter_increment+0xf2>
        /* Release the TASK (and the SN) */
        (void)osEE_scheduler_task_unblocked(osEE_get_kernel(), p_sn);
8000b342:	40 f4       	mov.aa %a4,%a15
8000b344:	40 25       	mov.aa %a5,%a2
8000b346:	6d ff 4a fe 	call 8000afda <osEE_scheduler_task_unblocked>
8000b34a:	3c 0a       	j 8000b35e <osEE_counter_increment+0xf2>
      }
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      osEE_counter_increment(p_action->param.p_counter_db);
8000b34c:	99 c4 10 00 	ld.a %a4,[%a12]16
8000b350:	6d ff 8e ff 	call 8000b26c <osEE_counter_increment>
8000b354:	3c 05       	j 8000b35e <osEE_counter_increment+0xf2>
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
8000b356:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b35a:	2d 02 00 00 	calli %a2
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b35e:	40 9d       	mov.aa %a13,%a9
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE
  osEE_lock_and_get_curr_core(void)
{
  OsEE_CDB * const p_cdb = osEE_get_curr_core();

  osEE_hal_spin_lock(p_cdb->p_lock);
8000b360:	99 d2 10 00 	ld.a %a2,[%a13]16 <f0030010 <_SMALL_DATA4_+0x40028010>>
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b364:	82 18       	mov %d8,1
8000b366:	82 09       	mov %d9,0
8000b368:	0b 89 10 28 	mov %e2,%d9,%d8
8000b36c:	49 22 c0 08 	cmpswap.w [%a2]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b370:	df 02 fa ff 	jne %d2,0,8000b364 <osEE_counter_increment+0xf8>
  );

  /* Re-enter in critical section to reinsert alarm-trigger if needed */
  p_cdb = osEE_lock_and_get_curr_core();

  p_trigger_to_be_handled_cb = p_trigger_to_be_handled_db->p_trigger_cb;
8000b374:	d4 c2       	ld.a %a2,[%a12]

  if (p_trigger_to_be_handled_cb->status == OSEE_TRIGGER_EXPIRED) {
8000b376:	0c 28       	ld.bu %d15,[%a2]8
8000b378:	5e 3e       	jne %d15,3,8000b394 <osEE_counter_increment+0x128>
    CONST(TickType, AUTOMATIC) cycle = osEE_alarm_get_cb(
8000b37a:	19 24 0c 00 	ld.w %d4,[%a2]12
        osEE_trigger_get_alarm_db(p_trigger_to_be_handled_db)
      )->cycle;
    if (cycle > 0U) {
8000b37e:	76 49       	jz %d4,8000b390 <osEE_counter_increment+0x124>
      /* Reinsert the trigger in timer wheel as relative with delta equal to
         cycle */
      p_trigger_to_be_handled_cb->status = OSEE_TRIGGER_ACTIVE;
8000b380:	e9 2e 08 00 	st.b [%a2]8,%d14
      osEE_counter_insert_rel_trigger(p_counter_db,
8000b384:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
8000b388:	40 c5       	mov.aa %a5,%a12
8000b38a:	6d ff 48 ff 	call 8000b21a <osEE_counter_insert_rel_trigger>
8000b38e:	3c 03       	j 8000b394 <osEE_counter_increment+0x128>
        p_trigger_to_be_handled_db, cycle);
    } else {
      p_trigger_to_be_handled_cb->status = OSEE_TRIGGER_INACTIVE;
8000b390:	e9 2a 08 00 	st.b [%a2]8,%d10
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b394:	99 d2 10 00 	ld.a %a2,[%a13]16 <f0030010 <_SMALL_DATA4_+0x40028010>>
8000b398:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b39c:	74 2c       	st.w [%a2],%d12
#endif /* OSEE_HAS_ALARMS || OSEE_HAS_SCHEDULE_TABLES */

          /* Prepare next trigger to be handled here, before actually handle
           * the current one, otherwise cycling triggers will mess with the
           * list of triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
8000b39e:	60 dc       	mov.a %a12,%d13
#elif (defined(OSEE_HAS_SCHEDULE_TABLES))
          osEE_counter_handle_st_expiry_point(p_counter_db,
            p_trigger_to_be_handled_db);
#endif /* OSEE_COUNTER_TRIGGER_TYPES elif OSEE_HAS_ALARMS elif
          OSEE_HAS_SCHEDULE_TABLES */
        } while (p_triggered_db != NULL);
8000b3a0:	bd 0c a7 ff 	jnz.a %a12,8000b2ee <osEE_counter_increment+0x82>
8000b3a4:	00 90       	ret 
8000b3a6:	cc 54       	ld.a %a15,[%a5]16
8000b3a8:	0d 00 80 04 	dsync 
8000b3ac:	82 0f       	mov %d15,0
8000b3ae:	68 0f       	st.w [%a15]0,%d15
8000b3b0:	00 90       	ret 
8000b3b2:	cc 54       	ld.a %a15,[%a5]16
8000b3b4:	0d 00 80 04 	dsync 
8000b3b8:	82 0f       	mov %d15,0
8000b3ba:	68 0f       	st.w [%a15]0,%d15
8000b3bc:	00 90       	ret 
	...

8000b3c0 <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
8000b3c0:	40 ae       	mov.aa %a14,%sp
8000b3c2:	40 4d       	mov.aa %a13,%a4
8000b3c4:	80 5b       	mov.d %d11,%a5
8000b3c6:	02 4c       	mov %d12,%d4
8000b3c8:	02 5d       	mov %d13,%d5
)
{
#if (defined(OSEE_COUNTER_TRIGGER_TYPES))
  return p_alarm_db->p_alarm_cb;
#else
  return p_alarm_db->p_trigger_cb;
8000b3ca:	d4 5c       	ld.a %a12,[%a5]
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
#if (!defined(OSEE_SINGLECORE))
  CONST(CoreIdType, AUTOMATIC)
    counter_core_id = p_counter_db->core_id;
8000b3cc:	79 4a 0c 00 	ld.b %d10,[%a4]12
 *  \param [in] core_id The core to lock	
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b3d0:	02 a4       	mov %d4,%d10
8000b3d2:	6d 00 c3 01 	call 8000b758 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000b3d6:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b3d8:	82 18       	mov %d8,1
8000b3da:	82 09       	mov %d9,0
8000b3dc:	0b 89 10 28 	mov %e2,%d9,%d8
8000b3e0:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b3e4:	df 02 fa ff 	jne %d2,0,8000b3d8 <osEE_alarm_set_rel+0x18>
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status > OSEE_TRIGGER_CANCELED) {
8000b3e8:	0c c8       	ld.bu %d15,[%a12]8
    ev = E_OS_STATE;
8000b3ea:	82 78       	mov %d8,7
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status > OSEE_TRIGGER_CANCELED) {
8000b3ec:	ff 2f 22 80 	jge.u %d15,2,8000b430 <osEE_alarm_set_rel+0x70>
    ev = E_OS_STATE;
  } else if (p_trigger_cb->status == OSEE_TRIGGER_CANCELED) {
8000b3f0:	de 16       	jne %d15,1,8000b41c <osEE_alarm_set_rel+0x5c>
    p_alarm_cb->cycle = cycle;
8000b3f2:	59 cd 0c 00 	st.w [%a12]12,%d13
{
  VAR(TickType, AUTOMATIC) when;
  CONSTP2CONST(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb    = p_counter_db->p_counter_cb;
  CONST(TickType, AUTOMATIC)
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
8000b3f6:	19 d2 04 00 	ld.w %d2,[%a13]4
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;
8000b3fa:	cc d0       	ld.a %a15,[%a13]0
8000b3fc:	4c f1       	ld.w %d15,[%a15]4

  if ((maxallowedvalue - delta) >= value) {
8000b3fe:	0b c2 80 40 	sub %d4,%d2,%d12
8000b402:	46 02       	not %d2
    when = value + delta;
  } else {
    when = delta - (maxallowedvalue - value) - 1U;
8000b404:	42 f2       	add %d2,%d15
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;

  if ((maxallowedvalue - delta) >= value) {
    when = value + delta;
8000b406:	12 c3       	add %d3,%d15,%d12
8000b408:	42 2c       	add %d12,%d2
8000b40a:	0b f4 30 f1 	lt.u %d15,%d4,%d15
8000b40e:	2b 3c 40 ff 	sel %d15,%d15,%d12,%d3
    /* Re-turn on the trigger, that is in handling, since is handling I'll set
       'here' when based on increment */
    p_trigger_cb->when   = osEE_counter_eval_when(p_counter_db, increment);
8000b412:	6c c1       	st.w [%a12]4,%d15
    p_trigger_cb->status = OSEE_TRIGGER_REENABLED;
8000b414:	82 4f       	mov %d15,4
8000b416:	2c c8       	st.b [%a12]8,%d15

    ev = E_OK;
8000b418:	82 08       	mov %d8,0
8000b41a:	3c 0b       	j 8000b430 <osEE_alarm_set_rel+0x70>
  } else {
    p_alarm_cb->cycle = cycle;
8000b41c:	59 cd 0c 00 	st.w [%a12]12,%d13
    /* Turn On the Trigger */
    p_trigger_cb->status = OSEE_TRIGGER_ACTIVE;
8000b420:	82 2f       	mov %d15,2
8000b422:	2c c8       	st.b [%a12]8,%d15
 
    osEE_counter_insert_rel_trigger(
8000b424:	40 d4       	mov.aa %a4,%a13
8000b426:	60 b5       	mov.a %a5,%d11
8000b428:	02 c4       	mov %d4,%d12
8000b42a:	6d ff f8 fe 	call 8000b21a <osEE_counter_insert_rel_trigger>
      p_counter_db, p_trigger_db, increment
    );
 
    ev = E_OK;
8000b42e:	82 08       	mov %d8,0
 *  \param [in] core_id The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b430:	02 a4       	mov %d4,%d10
8000b432:	6d 00 93 01 	call 8000b758 <osEE_get_core>

  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b436:	cc 24       	ld.a %a15,[%a2]16
8000b438:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b43c:	82 0f       	mov %d15,0
8000b43e:	68 0f       	st.w [%a15]0,%d15
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
8000b440:	02 82       	mov %d2,%d8
8000b442:	00 90       	ret 

8000b444 <osEE_alarm_set_abs>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      start,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
8000b444:	40 ae       	mov.aa %a14,%sp
8000b446:	80 4b       	mov.d %d11,%a4
8000b448:	40 5d       	mov.aa %a13,%a5
8000b44a:	02 4c       	mov %d12,%d4
8000b44c:	02 5d       	mov %d13,%d5
)
{
#if (defined(OSEE_COUNTER_TRIGGER_TYPES))
  return p_alarm_db->p_alarm_cb;
#else
  return p_alarm_db->p_trigger_cb;
8000b44e:	d4 5c       	ld.a %a12,[%a5]
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
#if (!defined(OSEE_SINGLECORE))
  CONST(CoreIdType, AUTOMATIC)
    counter_core_id = p_counter_db->core_id;
8000b450:	79 4a 0c 00 	ld.b %d10,[%a4]12
 *  \param [in] core_id The core to lock	
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b454:	02 a4       	mov %d4,%d10
8000b456:	6d 00 81 01 	call 8000b758 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000b45a:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b45c:	82 18       	mov %d8,1
8000b45e:	82 09       	mov %d9,0
8000b460:	0b 89 10 28 	mov %e2,%d9,%d8
8000b464:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b468:	df 02 fa ff 	jne %d2,0,8000b45c <osEE_alarm_set_abs+0x18>
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status > OSEE_TRIGGER_CANCELED) {
8000b46c:	0c c8       	ld.bu %d15,[%a12]8
    ev = E_OS_STATE;
8000b46e:	82 78       	mov %d8,7
    counter_core_id = p_counter_db->core_id;
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status > OSEE_TRIGGER_CANCELED) {
8000b470:	ff 2f 15 80 	jge.u %d15,2,8000b49a <osEE_alarm_set_abs+0x56>
    ev = E_OS_STATE;
  } else if (p_trigger_cb->status == OSEE_TRIGGER_CANCELED) {
8000b474:	5e 19       	jne %d15,1,8000b486 <osEE_alarm_set_abs+0x42>
    p_alarm_cb->cycle = cycle;
8000b476:	59 cd 0c 00 	st.w [%a12]12,%d13
    /* Re-turn on the trigger, that is in handling, since is handling I'll set
       here 'when' based on start */
    p_trigger_cb->when   = start;
8000b47a:	59 cc 04 00 	st.w [%a12]4,%d12
    p_trigger_cb->status = OSEE_TRIGGER_REENABLED;
8000b47e:	82 4f       	mov %d15,4
8000b480:	2c c8       	st.b [%a12]8,%d15

    ev = E_OK;
8000b482:	82 08       	mov %d8,0
8000b484:	3c 0b       	j 8000b49a <osEE_alarm_set_abs+0x56>
  } else {
    p_alarm_cb->cycle = cycle;
8000b486:	59 cd 0c 00 	st.w [%a12]12,%d13
    /* Turn On the Trigger */
    p_trigger_cb->status = OSEE_TRIGGER_ACTIVE;
8000b48a:	82 2f       	mov %d15,2
8000b48c:	2c c8       	st.b [%a12]8,%d15

    osEE_counter_insert_abs_trigger(
8000b48e:	60 b4       	mov.a %a4,%d11
8000b490:	40 d5       	mov.aa %a5,%a13
8000b492:	02 c4       	mov %d4,%d12
8000b494:	6d ff 92 fe 	call 8000b1b8 <osEE_counter_insert_abs_trigger>
      p_counter_db, p_trigger_db, start
    );

    ev = E_OK;
8000b498:	82 08       	mov %d8,0
 *  \param [in] core_id The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b49a:	02 a4       	mov %d4,%d10
8000b49c:	6d 00 5e 01 	call 8000b758 <osEE_get_core>

  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b4a0:	cc 24       	ld.a %a15,[%a2]16
8000b4a2:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b4a6:	82 0f       	mov %d15,0
8000b4a8:	68 0f       	st.w [%a15]0,%d15
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
8000b4aa:	02 82       	mov %d2,%d8
8000b4ac:	00 90       	ret 

8000b4ae <osEE_alarm_cancel>:
FUNC(StatusType, OS_CODE)
  osEE_alarm_cancel
(
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db
)
{
8000b4ae:	40 ae       	mov.aa %a14,%sp
8000b4b0:	40 4c       	mov.aa %a12,%a4
  VAR(StatusType, AUTOMATIC) ev;
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
8000b4b2:	d4 4d       	ld.a %a13,[%a4]
  CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
    p_counter_db = p_trigger_db->p_counter_db;
8000b4b4:	19 4b 04 00 	ld.w %d11,[%a4]4
#if (!defined(OSEE_SINGLECORE))
  CONST(CoreIdType, AUTOMATIC)
    counter_core_id = p_counter_db->core_id;
8000b4b8:	60 bf       	mov.a %a15,%d11
8000b4ba:	79 fa 0c 00 	ld.b %d10,[%a15]12
 *  \param [in] core_id The core to lock	
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b4be:	02 a4       	mov %d4,%d10
8000b4c0:	6d 00 4c 01 	call 8000b758 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000b4c4:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b4c6:	82 18       	mov %d8,1
8000b4c8:	82 09       	mov %d9,0
8000b4ca:	0b 89 10 28 	mov %e2,%d9,%d8
8000b4ce:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b4d2:	df 02 fa ff 	jne %d2,0,8000b4c6 <osEE_alarm_cancel+0x18>
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status <= OSEE_TRIGGER_CANCELED) {
8000b4d6:	0c d8       	ld.bu %d15,[%a13]8
    ev = E_OS_NOFUNC;
8000b4d8:	82 58       	mov %d8,5
    counter_core_id = p_counter_db->core_id;
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status <= OSEE_TRIGGER_CANCELED) {
8000b4da:	bf 2f 0f 80 	jlt.u %d15,2,8000b4f8 <osEE_alarm_cancel+0x4a>
    ev = E_OS_NOFUNC;
  } else if (p_trigger_cb->status >= OSEE_TRIGGER_EXPIRED) {
8000b4de:	bf 3f 06 80 	jlt.u %d15,3,8000b4ea <osEE_alarm_cancel+0x3c>
    p_trigger_cb->status = OSEE_TRIGGER_CANCELED;
8000b4e2:	82 1f       	mov %d15,1
8000b4e4:	2c d8       	st.b [%a13]8,%d15
    ev = E_OK;
8000b4e6:	82 08       	mov %d8,0
8000b4e8:	3c 08       	j 8000b4f8 <osEE_alarm_cancel+0x4a>
  } else {
    p_trigger_cb->status = OSEE_TRIGGER_INACTIVE;
8000b4ea:	82 0f       	mov %d15,0
8000b4ec:	2c d8       	st.b [%a13]8,%d15
    osEE_counter_cancel_trigger(p_counter_db, p_trigger_db);
8000b4ee:	60 b4       	mov.a %a4,%d11
8000b4f0:	40 c5       	mov.aa %a5,%a12
8000b4f2:	6d ff a5 fe 	call 8000b23c <osEE_counter_cancel_trigger>
    ev = E_OK;
8000b4f6:	82 08       	mov %d8,0
 *  \param [in] core_id The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b4f8:	02 a4       	mov %d4,%d10
8000b4fa:	6d 00 2f 01 	call 8000b758 <osEE_get_core>

  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b4fe:	cc 24       	ld.a %a15,[%a2]16
8000b500:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b504:	82 0f       	mov %d15,0
8000b506:	68 0f       	st.w [%a15]0,%d15
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
8000b508:	02 82       	mov %d2,%d8
8000b50a:	00 90       	ret 

8000b50c <osEE_alarm_get>:
  osEE_alarm_get
(
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  P2VAR(TickType, AUTOMATIC, OS_APPL_DATA)        p_tick
)
{
8000b50c:	40 ae       	mov.aa %a14,%sp
8000b50e:	80 5b       	mov.d %d11,%a5
  VAR(StatusType, AUTOMATIC) ev;
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2CONST(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
8000b510:	d4 4d       	ld.a %a13,[%a4]
  CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
    p_counter_db = p_trigger_db->p_counter_db;
8000b512:	99 4c 04 00 	ld.a %a12,[%a4]4
#if (!defined(OSEE_SINGLECORE))
  CONST(CoreIdType, AUTOMATIC)
    counter_core_id = p_counter_db->core_id;
8000b516:	79 ca 0c 00 	ld.b %d10,[%a12]12
 *  \param [in] core_id The core to lock	
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b51a:	02 a4       	mov %d4,%d10
8000b51c:	6d 00 1e 01 	call 8000b758 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000b520:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b522:	82 18       	mov %d8,1
8000b524:	82 09       	mov %d9,0
8000b526:	0b 89 10 28 	mov %e2,%d9,%d8
8000b52a:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b52e:	df 02 fa ff 	jne %d2,0,8000b522 <osEE_alarm_get+0x16>
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status <= OSEE_TRIGGER_CANCELED) {
8000b532:	0c d8       	ld.bu %d15,[%a13]8
    ev = E_OS_NOFUNC;
8000b534:	82 58       	mov %d8,5
    counter_core_id = p_counter_db->core_id;
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status <= OSEE_TRIGGER_CANCELED) {
8000b536:	bf 2f 14 80 	jlt.u %d15,2,8000b55e <osEE_alarm_get+0x52>
    ev = E_OS_NOFUNC;
  } else {
    *p_tick = osEE_counter_eval_delta(p_counter_db, p_trigger_cb->when);
8000b53a:	19 d2 04 00 	ld.w %d2,[%a13]4
{
  VAR(TickType, AUTOMATIC) delta;
  CONSTP2CONST(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb    = p_counter_db->p_counter_cb;
  CONST(TickType, AUTOMATIC)
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
8000b53e:	19 c3 04 00 	ld.w %d3,[%a12]4
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;
8000b542:	cc c0       	ld.a %a15,[%a12]0
8000b544:	4c f1       	ld.w %d15,[%a15]4
8000b546:	42 23       	add %d3,%d2

  if (when > value) {
    delta = when - value;
  } else {
    delta = (maxallowedvalue - value) + when + 1U;
8000b548:	c2 13       	add %d3,1
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;

  if (when > value) {
    delta = when - value;
8000b54a:	0b f2 80 40 	sub %d4,%d2,%d15
8000b54e:	a2 f3       	sub %d3,%d15
8000b550:	0b 2f 50 f1 	ge.u %d15,%d15,%d2
8000b554:	2b 43 40 ff 	sel %d15,%d15,%d3,%d4
8000b558:	60 bf       	mov.a %a15,%d11
8000b55a:	68 0f       	st.w [%a15]0,%d15
    ev = E_OK;
8000b55c:	82 08       	mov %d8,0
 *  \param [in] core_id The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b55e:	02 a4       	mov %d4,%d10
8000b560:	6d 00 fc 00 	call 8000b758 <osEE_get_core>

  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b564:	cc 24       	ld.a %a15,[%a2]16
8000b566:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b56a:	82 0f       	mov %d15,0
8000b56c:	68 0f       	st.w [%a15]0,%d15
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
8000b56e:	02 82       	mov %d2,%d8
8000b570:	00 90       	ret 

8000b572 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000b572:	40 ae       	mov.aa %a14,%sp
8000b574:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000b576:	99 52 0c 00 	ld.a %a2,[%a5]12
8000b57a:	0c 22       	ld.bu %d15,[%a2]2
8000b57c:	5e 28       	jne %d15,2,8000b58c <osEE_change_context_from_running+0x1a>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
8000b57e:	40 54       	mov.aa %a4,%a5
8000b580:	99 55 04 00 	ld.a %a5,[%a5]4
8000b584:	c8 16       	ld.a %a6,[%a15]4
8000b586:	6d 00 36 01 	call 8000b7f2 <osEE_hal_save_ctx_and_restore_ctx>
8000b58a:	00 90       	ret 
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
8000b58c:	40 54       	mov.aa %a4,%a5
8000b58e:	99 55 04 00 	ld.a %a5,[%a5]4
8000b592:	c8 16       	ld.a %a6,[%a15]4
8000b594:	6d 00 4e 01 	call 8000b830 <osEE_hal_save_ctx_and_ready2stacked>
8000b598:	00 90       	ret 

8000b59a <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000b59a:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000b59c:	cc 53       	ld.a %a15,[%a5]12
8000b59e:	0c f2       	ld.bu %d15,[%a15]2
8000b5a0:	5e 27       	jne %d15,2,8000b5ae <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
8000b5a2:	40 54       	mov.aa %a4,%a5
8000b5a4:	99 55 04 00 	ld.a %a5,[%a5]4
8000b5a8:	6d 00 37 01 	call 8000b816 <osEE_hal_restore_ctx>
8000b5ac:	00 90       	ret 
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
8000b5ae:	40 54       	mov.aa %a4,%a5
8000b5b0:	99 55 04 00 	ld.a %a5,[%a5]4
8000b5b4:	6d 00 50 01 	call 8000b854 <osEE_hal_ready2stacked>
8000b5b8:	00 90       	ret 

8000b5ba <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
8000b5ba:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
8000b5bc:	99 45 04 00 	ld.a %a5,[%a4]4
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
8000b5c0:	cc 40       	ld.a %a15,[%a4]0
8000b5c2:	48 03       	ld.w %d3,[%a15]0
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
8000b5c4:	cc 50       	ld.a %a15,[%a5]0
8000b5c6:	3c 02       	j 8000b5ca <osEE_idle_task_terminate+0x10>

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
8000b5c8:	60 ff       	mov.a %a15,%d15
8000b5ca:	4c f0       	ld.w %d15,[%a15]0
  } while ((p_tos != NULL) && (p_tos != p_bos));
8000b5cc:	8b 0f 20 22 	ne %d2,%d15,0
8000b5d0:	0b 3f 10 22 	and.ne %d2,%d15,%d3
8000b5d4:	df 02 fa ff 	jne %d2,0,8000b5c8 <osEE_idle_task_terminate+0xe>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
8000b5d8:	ec 50       	st.a [%a5]0,%a15

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
8000b5da:	6d 00 1e 01 	call 8000b816 <osEE_hal_restore_ctx>
8000b5de:	00 90       	ret 

8000b5e0 <osEE_cpu_startos>:
}
#endif /* OSEE_SINGLECORE */
#endif /* OSEE_TC_HAS_ISR1_TO_CONF */

OsEE_bool osEE_cpu_startos(void)
{
8000b5e0:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000b5e2:	4d c0 e1 ff 	mfcr %d15,$core_id
8000b5e6:	37 0f 48 30 	extr %d3,%d15,0,8
  MemSize tdb_size;
  OsEE_KDB * const p_kdb = osEE_get_kernel();
  CoreIdType const curr_core_id = osEE_get_curr_core_id();

#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_0) {
8000b5ea:	df 03 17 80 	jne %d3,0,8000b618 <osEE_cpu_startos+0x38>
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000b5ee:	3b 10 40 20 	mov %d2,1025
8000b5f2:	91 40 00 ff 	movh.a %a15,61444
8000b5f6:	d9 ff 00 09 	lea %a15,[%a15]-28672 <f0039000 <_SMALL_DATA4_+0x40031000>>
8000b5fa:	68 02       	st.w [%a15]0,%d2
8000b5fc:	3b 10 c0 20 	mov %d2,3073
8000b600:	91 40 00 ff 	movh.a %a15,61444
8000b604:	d9 ff 04 09 	lea %a15,[%a15]-28668 <f0039004 <_SMALL_DATA4_+0x40031004>>
8000b608:	68 02       	st.w [%a15]0,%d2
8000b60a:	3b 10 40 21 	mov %d2,5121
8000b60e:	91 40 00 ff 	movh.a %a15,61444
8000b612:	d9 ff 08 09 	lea %a15,[%a15]-28664 <f0039008 <_SMALL_DATA4_+0x40031008>>
8000b616:	68 02       	st.w [%a15]0,%d2
#if (!defined(OSEE_SINGLECORE))
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
8000b618:	91 00 00 f8 	movh.a %a15,32768
8000b61c:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
8000b620:	c8 4f       	ld.a %a15,[%a15]16
8000b622:	b0 ff       	add.a %a15,-1
  for (i = 0U; i < tdb_size; ++i) {
8000b624:	bd 0f 2d 00 	jz.a %a15,8000b67e <osEE_cpu_startos+0x9e>
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000b628:	91 00 00 28 	movh.a %a2,32768
8000b62c:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000b630:	19 24 0c 00 	ld.w %d4,[%a2]12 <8000000c <BootModeHeader0+0xc>>
8000b634:	16 03       	and %d15,3
8000b636:	8f bf 00 50 	sh %d5,%d15,11
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000b63a:	bb f0 ff 6f 	mov.u %d6,65535
8000b63e:	82 0f       	mov %d15,0
8000b640:	b0 ff       	add.a %a15,-1
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000b642:	60 43       	mov.a %a3,%d4
8000b644:	90 32       	addsc.a %a2,%a3,%d15,2
8000b646:	d4 22       	ld.a %a2,[%a2]
#if (!defined(OSEE_SINGLECORE))
    if (p_tdb->orig_core_id == curr_core_id) {
8000b648:	79 22 1f 00 	ld.b %d2,[%a2]31
8000b64c:	5f 32 16 80 	jne %d2,%d3,8000b678 <osEE_cpu_startos+0x98>
#endif /* !OSEE_SINGLECORE */
      if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000b650:	39 22 14 00 	ld.bu %d2,[%a2]20
8000b654:	df 22 12 80 	jne %d2,2,8000b678 <osEE_cpu_startos+0x98>
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000b658:	b9 22 08 00 	ld.hu %d2,[%a2]8
8000b65c:	5f 62 0e 00 	jeq %d2,%d6,8000b678 <osEE_cpu_startos+0x98>
8000b660:	60 24       	mov.a %a4,%d2
8000b662:	d9 43 00 08 	lea %a3,[%a4]-32768
8000b666:	11 43 00 3f 	addih.a %a3,%a3,61444
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000b66a:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000b66e:	c2 12       	add %d2,1
8000b670:	b7 82 99 23 	insert %d2,%d2,8,7,25
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
8000b674:	a6 52       	or %d2,%d5
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000b676:	74 32       	st.w [%a3],%d2
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
8000b678:	c2 1f       	add %d15,1
8000b67a:	fd f0 e4 7f 	loop %a15,8000b642 <osEE_cpu_startos+0x62>
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b67e:	40 94       	mov.aa %a4,%a9
8000b680:	40 43       	mov.aa %a3,%a4
  {
    OsEE_stack * p_stack;
    OsEE_CDB   * const p_cdb = osEE_get_curr_core();

    /* number of stacks excluded the system stack which is the last one */
    MemSize const stack_number = p_cdb->chdb.stack_num - 1U;
8000b682:	99 42 08 00 	ld.a %a2,[%a4]8 <80000008 <BootModeHeader0+0x8>>
8000b686:	b0 f2       	add.a %a2,-1
    /* Initialize all TASK stacks */
    for (i = 0U; i < stack_number; ++i) {
8000b688:	bd 02 16 00 	jz.a %a2,8000b6b4 <osEE_cpu_startos+0xd4>
      /* number of words to write with the fillpattern */
      MemSize const stack_words =
        (*p_cdb->chdb.p_sdb_array)[i].stack_size / sizeof(OsEE_stack);

      p_stack = (OsEE_stack *)(*p_cdb->chdb.p_sdb_array)[i].p_bos;
      for (j = 0U; j <= stack_words; ++j)
8000b68c:	82 05       	mov %d5,0
      {
        (*p_stack) = OSEE_FILL_PATTERN;
8000b68e:	7b 60 5a 3a 	movh %d3,42406
8000b692:	1b 53 5a 3a 	addi %d3,%d3,-23131
8000b696:	82 04       	mov %d4,0
8000b698:	b0 f2       	add.a %a2,-1
    /* Initialize all TASK stacks */
    for (i = 0U; i < stack_number; ++i) {
      MemSize j;
      /* number of words to write with the fillpattern */
      MemSize const stack_words =
        (*p_cdb->chdb.p_sdb_array)[i].stack_size / sizeof(OsEE_stack);
8000b69a:	cc 30       	ld.a %a15,[%a3]0
8000b69c:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
    MemSize const stack_number = p_cdb->chdb.stack_num - 1U;
    /* Initialize all TASK stacks */
    for (i = 0U; i < stack_number; ++i) {
      MemSize j;
      /* number of words to write with the fillpattern */
      MemSize const stack_words =
8000b6a0:	48 12       	ld.w %d2,[%a15]4
8000b6a2:	06 e2       	sh %d2,-2
        (*p_cdb->chdb.p_sdb_array)[i].stack_size / sizeof(OsEE_stack);

      p_stack = (OsEE_stack *)(*p_cdb->chdb.p_sdb_array)[i].p_bos;
8000b6a4:	c8 0f       	ld.a %a15,[%a15]0
      for (j = 0U; j <= stack_words; ++j)
8000b6a6:	02 5f       	mov %d15,%d5
      {
        (*p_stack) = OSEE_FILL_PATTERN;
8000b6a8:	64 f3       	st.w [%a15+],%d3
      /* number of words to write with the fillpattern */
      MemSize const stack_words =
        (*p_cdb->chdb.p_sdb_array)[i].stack_size / sizeof(OsEE_stack);

      p_stack = (OsEE_stack *)(*p_cdb->chdb.p_sdb_array)[i].p_bos;
      for (j = 0U; j <= stack_words; ++j)
8000b6aa:	c2 1f       	add %d15,1
8000b6ac:	7f f2 fe ff 	jge.u %d2,%d15,8000b6a8 <osEE_cpu_startos+0xc8>
    OsEE_CDB   * const p_cdb = osEE_get_curr_core();

    /* number of stacks excluded the system stack which is the last one */
    MemSize const stack_number = p_cdb->chdb.stack_num - 1U;
    /* Initialize all TASK stacks */
    for (i = 0U; i < stack_number; ++i) {
8000b6b0:	c2 14       	add %d4,1
8000b6b2:	fc 24       	loop %a2,8000b69a <osEE_cpu_startos+0xba>
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000b6b4:	40 af       	mov.aa %a15,%sp
8000b6b6:	80 ff       	mov.d %d15,%a15
      }
    }
    /* Initialize System Stack */
    {
      OsEE_stack const * const p_curr_sp = osEE_get_SP();
      p_stack = (OsEE_stack *)
8000b6b8:	54 42       	ld.w %d2,[%a4]
8000b6ba:	19 43 08 00 	ld.w %d3,[%a4]8 <80000008 <BootModeHeader0+0x8>>
8000b6be:	60 22       	mov.a %a2,%d2
8000b6c0:	01 23 03 f6 	addsc.a %a15,%a2,%d3,3
8000b6c4:	99 ff f8 ff 	ld.a %a15,[%a15]-8
        (*p_cdb->chdb.p_sdb_array)[(p_cdb->chdb.stack_num - 1U)].p_bos;

      while (p_stack < p_curr_sp) {
8000b6c8:	80 f2       	mov.d %d2,%a15
8000b6ca:	7f f2 0a 80 	jge.u %d2,%d15,8000b6de <osEE_cpu_startos+0xfe>
        (*p_stack) = OSEE_FILL_PATTERN;
8000b6ce:	7b 60 5a 2a 	movh %d2,42406
8000b6d2:	1b 52 5a 2a 	addi %d2,%d2,-23131
8000b6d6:	64 f2       	st.w [%a15+],%d2
    {
      OsEE_stack const * const p_curr_sp = osEE_get_SP();
      p_stack = (OsEE_stack *)
        (*p_cdb->chdb.p_sdb_array)[(p_cdb->chdb.stack_num - 1U)].p_bos;

      while (p_stack < p_curr_sp) {
8000b6d8:	80 f3       	mov.d %d3,%a15
8000b6da:	3f f3 fe ff 	jlt.u %d3,%d15,8000b6d6 <osEE_cpu_startos+0xf6>
    }
  }
#endif /* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */

  return osEE_std_cpu_startos();
}
8000b6de:	82 12       	mov %d2,1
8000b6e0:	00 90       	ret 

8000b6e2 <osEE_hal_sync_barrier>:
#include "ee_internal.h"

#if (!defined(OSEE_SINGLECORE))
void osEE_hal_sync_barrier(OsEE_barrier * p_bar,
  OsEE_reg const volatile * p_wait_mask, OsEE_kernel_cb p_synch_cb)
{
8000b6e2:	40 ae       	mov.aa %a14,%sp
8000b6e4:	40 4f       	mov.aa %a15,%a4
8000b6e6:	40 5d       	mov.aa %a13,%a5
8000b6e8:	40 6c       	mov.aa %a12,%a6
  CoreMaskType const exit_mask  = (0xFFFFFFFFU ^
    (((CoreMaskType)0x1U << OS_CORE_ID_ARR_SIZE) - 1U));

  OsEE_reg wait_mask, all_exited;

  if ((p_bar != NULL) && (p_wait_mask != NULL)) {
8000b6ea:	80 52       	mov.d %d2,%a5
8000b6ec:	80 43       	mov.d %d3,%a4
8000b6ee:	8b 02 20 f2 	ne %d15,%d2,0
8000b6f2:	8b 03 20 f4 	and.ne %d15,%d3,0
8000b6f6:	ee 05       	jnz %d15,8000b700 <osEE_hal_sync_barrier+0x1e>
8000b6f8:	00 90       	ret 
    /* If not all cores have left the previous use of this barrier
       wait for it. */
    while ((p_bar->value & exit_mask) != 0U) {
      if (p_synch_cb != NULL) {
8000b6fa:	bc c3       	jz.a %a12,8000b700 <osEE_hal_sync_barrier+0x1e>
        p_synch_cb();
8000b6fc:	2d 0c 00 00 	calli %a12
  OsEE_reg wait_mask, all_exited;

  if ((p_bar != NULL) && (p_wait_mask != NULL)) {
    /* If not all cores have left the previous use of this barrier
       wait for it. */
    while ((p_bar->value & exit_mask) != 0U) {
8000b700:	4c f0       	ld.w %d15,[%a15]0
8000b702:	8f 7f c0 f1 	andn %d15,%d15,7
8000b706:	ee fa       	jnz %d15,8000b6fa <osEE_hal_sync_barrier+0x18>
        p_synch_cb();
      }
    }

    /* Set current CPU as entered */
    osEE_tc_imask_ldmst(&p_bar->value, 0x1U,
8000b708:	80 f8       	mov.d %d8,%a15
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000b70a:	4d c0 e1 2f 	mfcr %d2,$core_id
8000b70e:	37 02 48 20 	extr %d2,%d2,0,8
/** Insert LDMST instruction. Note that all operands must be word-aligned. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_imask_ldmst(OsEE_reg volatile * const p_var, OsEE_reg value,
    OsEE_reg offset, OsEE_reg width)
{
  __builtin_tricore_ldmst((volatile void *)p_var, value, offset, width);
8000b712:	d7 10 21 22 	imask %e2,1,%d2,1
8000b716:	49 f2 40 08 	ldmst [%a15]0,%e2
      (OsEE_reg)osEE_get_curr_core_id(), 1U);

    /* Snapshot of the wait mask */
    wait_mask = (*p_wait_mask);
8000b71a:	54 d2       	ld.w %d2,[%a13]
    while ((p_bar->value & wait_mask) != wait_mask) {
8000b71c:	4c f0       	ld.w %d15,[%a15]0
8000b71e:	26 2f       	and %d15,%d2
8000b720:	5f f2 0a 00 	jeq %d2,%d15,8000b734 <osEE_hal_sync_barrier+0x52>
      /* Wait for all other cores/CPUs */
      if (p_synch_cb != NULL) {
8000b724:	bc c3       	jz.a %a12,8000b72a <osEE_hal_sync_barrier+0x48>
        p_synch_cb();
8000b726:	2d 0c 00 00 	calli %a12
      }
      /* Refresh the snapshot of the wait mask */
      wait_mask = (*p_wait_mask);
8000b72a:	4c d0       	ld.w %d15,[%a13]0
    osEE_tc_imask_ldmst(&p_bar->value, 0x1U,
      (OsEE_reg)osEE_get_curr_core_id(), 1U);

    /* Snapshot of the wait mask */
    wait_mask = (*p_wait_mask);
    while ((p_bar->value & wait_mask) != wait_mask) {
8000b72c:	48 02       	ld.w %d2,[%a15]0
8000b72e:	26 f2       	and %d2,%d15
8000b730:	5f f2 fa ff 	jne %d2,%d15,8000b724 <osEE_hal_sync_barrier+0x42>
8000b734:	4d c0 e1 2f 	mfcr %d2,$core_id

    all_exited = (wait_mask << OS_CORE_ID_ARR_SIZE) | wait_mask;

    /* Set current CPU as exited */
    osEE_tc_imask_ldmst(&p_bar->value, 0x1U,
      ((OsEE_reg)osEE_get_curr_core_id() + (OsEE_reg)OS_CORE_ID_ARR_SIZE), 1U);
8000b738:	37 02 48 20 	extr %d2,%d2,0,8
    } 

    all_exited = (wait_mask << OS_CORE_ID_ARR_SIZE) | wait_mask;

    /* Set current CPU as exited */
    osEE_tc_imask_ldmst(&p_bar->value, 0x1U,
8000b73c:	c2 32       	add %d2,3
8000b73e:	d7 10 21 22 	imask %e2,1,%d2,1
8000b742:	60 8f       	mov.a %a15,%d8
8000b744:	49 f2 40 08 	ldmst [%a15]0,%e2
      }
      /* Refresh the snapshot of the wait mask */
      wait_mask = (*p_wait_mask);
    } 

    all_exited = (wait_mask << OS_CORE_ID_ARR_SIZE) | wait_mask;
8000b748:	8f 3f 00 40 	sh %d4,%d15,3
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b74c:	d2 02       	mov %e2,0
8000b74e:	0f f4 a0 30 	or %d3,%d4,%d15
8000b752:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
8000b756:	00 90       	ret 

8000b758 <osEE_get_core>:
    /* Try to reset the barrier */
    (void)osEE_tc_cmpswapw(&p_bar->value, 0U, all_exited);
  }
}

OsEE_CDB * osEE_get_core(CoreIdType core_id) {
8000b758:	40 ae       	mov.aa %a14,%sp
    case OS_CORE_ID_0:
      p_cdb = &osEE_cdb_var_core0;
    break;
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x02U)
    case OS_CORE_ID_1:
      p_cdb = &osEE_cdb_var_core1;
8000b75a:	91 00 00 28 	movh.a %a2,32768
8000b75e:	d9 22 18 50 	lea %a2,[%a2]344 <80000158 <osEE_cdb_var_core1>>
  }
}

OsEE_CDB * osEE_get_core(CoreIdType core_id) {
  OsEE_CDB * p_cdb;
  switch (core_id) {
8000b762:	df 14 0f 00 	jeq %d4,1,8000b780 <osEE_get_core+0x28>
      p_cdb = &osEE_cdb_var_core1;
    break;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x02U */
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x04U)
    case OS_CORE_ID_2:
      p_cdb = &osEE_cdb_var_core2;
8000b766:	91 00 00 28 	movh.a %a2,32768
8000b76a:	d9 22 2c 40 	lea %a2,[%a2]300 <8000012c <osEE_cdb_var_core2>>
  }
}

OsEE_CDB * osEE_get_core(CoreIdType core_id) {
  OsEE_CDB * p_cdb;
  switch (core_id) {
8000b76e:	df 24 09 00 	jeq %d4,2,8000b780 <osEE_get_core+0x28>
    case OS_CORE_ID_0:
      p_cdb = &osEE_cdb_var_core0;
8000b772:	7b 00 00 f8 	movh %d15,32768
      p_cdb = &osEE_cdb_var_core6;
    break;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
    default:
      /* This can happen when we cycle on cores */
      p_cdb = NULL;
8000b776:	1b 4f 18 f0 	addi %d15,%d15,388
8000b77a:	ab 0f a0 f4 	seln %d15,%d4,%d15,0
8000b77e:	60 f2       	mov.a %a2,%d15
    break;
  }

  return p_cdb;
}
8000b780:	00 90       	ret 

8000b782 <osEE_hal_start_core>:

void osEE_hal_start_core(CoreIdType core_id) {
8000b782:	40 ae       	mov.aa %a14,%sp
  switch (core_id) {
8000b784:	df 14 05 00 	jeq %d4,1,8000b78e <osEE_hal_start_core+0xc>
8000b788:	df 24 0d 00 	jeq %d4,2,8000b7a2 <osEE_hal_start_core+0x20>
8000b78c:	3c 15       	j 8000b7b6 <osEE_hal_start_core+0x34>
    case OS_CORE_ID_0:
    /* Nothing to do in this case */
    break;
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x02U)
    case OS_CORE_ID_1:
      OSEE_TC_CORE_PC(OS_CORE_ID_1).reg = (uint32_t)OSEE_CORE1_START_ADDR;
8000b78e:	91 40 88 ff 	movh.a %a15,63620
8000b792:	d9 ff c8 8f 	lea %a15,[%a15]-504 <f883fe08 <_SMALL_DATA4_+0x48837e08>>
8000b796:	7b 10 00 f8 	movh %d15,32769
8000b79a:	1b ef aa f8 	addi %d15,%d15,-30034
8000b79e:	68 0f       	st.w [%a15]0,%d15
    break;
8000b7a0:	3c 0c       	j 8000b7b8 <osEE_hal_start_core+0x36>
#endif /* OSEE_CORE_ID_VALID_MASK & 0x02U */
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x04U)
    case OS_CORE_ID_2:
      OSEE_TC_CORE_PC(OS_CORE_ID_2).reg = (uint32_t)OSEE_CORE2_START_ADDR;
8000b7a2:	91 60 88 ff 	movh.a %a15,63622
8000b7a6:	d9 ff c8 8f 	lea %a15,[%a15]-504 <f885fe08 <_SMALL_DATA4_+0x48857e08>>
8000b7aa:	7b 10 00 f8 	movh %d15,32769
8000b7ae:	1b ef dd f8 	addi %d15,%d15,-29218
8000b7b2:	68 0f       	st.w [%a15]0,%d15
    break;
8000b7b4:	3c 02       	j 8000b7b8 <osEE_hal_start_core+0x36>
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
    default:
      /* All possible masks have been handled above */
    break;
  }
  if (core_id != OS_CORE_ID_0) {
8000b7b6:	76 4c       	jz %d4,8000b7ce <osEE_hal_start_core+0x4c>
#if (!defined(OSEE_TC_2G))
    OSEE_TC_CORE_DBGSR(core_id).bits.halt = OSEE_TC_DBGSR_RESET_HALT;
8000b7b8:	8f 14 01 40 	sh %d4,%d4,17
8000b7bc:	60 42       	mov.a %a2,%d4
8000b7be:	d9 2f c0 4f 	lea %a15,[%a2]-768
8000b7c2:	11 2f 88 ff 	addih.a %a15,%a15,63618
8000b7c6:	4c f0       	ld.w %d15,[%a15]0
8000b7c8:	b7 2f 82 f0 	insert %d15,%d15,2,1,2
8000b7cc:	68 0f       	st.w [%a15]0,%d15
8000b7ce:	00 90       	ret 

8000b7d0 <osEE_tc_change_context_from_task_end>:
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000b7d0:	99 42 0c 00 	ld.a %a2,[%a4]12
static FUNC(void, OS_CODE) OSEE_NEVER_INLINE
  osEE_tc_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000b7d4:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000b7d6:	0c 22       	ld.bu %d15,[%a2]2
8000b7d8:	1e 27       	jeq %d15,2,8000b7e6 <osEE_tc_change_context_from_task_end+0x16>
    osEE_tc_setareg(a4, p_to);
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
    osEE_tc_jump(osEE_hal_restore_ctx);
  } else {
    osEE_tc_setareg(a4, p_to);
8000b7da:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000b7dc:	c8 1f       	ld.a %a15,[%a15]4
8000b7de:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_ready2stacked);
8000b7e0:	1d 00 3a 00 	j 8000b854 <osEE_hal_ready2stacked>
8000b7e4:	00 90       	ret 
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    osEE_tc_setareg(a4, p_to);
8000b7e6:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000b7e8:	c8 1f       	ld.a %a15,[%a15]4
8000b7ea:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_restore_ctx);
8000b7ec:	1d 00 15 00 	j 8000b816 <osEE_hal_restore_ctx>
8000b7f0:	00 90       	ret 

8000b7f2 <osEE_hal_save_ctx_and_restore_ctx>:
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000b7f2:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000b7f4:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000b7f8:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000b7fa:	4c 60       	ld.w %d15,[%a6]0
8000b7fc:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000b800:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000b804:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000b808:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000b80a:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000b80e:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the restore CTX */
  osEE_tc_jump(osEE_hal_restore_ctx);
8000b810:	1d 00 03 00 	j 8000b816 <osEE_hal_restore_ctx>
8000b814:	00 90       	ret 

8000b816 <osEE_hal_restore_ctx>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_tdb,
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_to_scb
)
{
  OsEE_CTX  const * const p_ctx = p_to_scb->p_tos;
8000b816:	cc 50       	ld.a %a15,[%a5]0
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000b818:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
8000b81a:	4c f2       	ld.w %d15,[%a15]8
8000b81c:	40 2b       	mov.aa %a11,%a2

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000b81e:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000b822:	0d 00 c0 04 	isync 
/* Set the return address back */
  osEE_tc_set_RA(p_ctx->ra);
/* Set the PCXI back */
  osEE_tc_csa_set_pcxi(pcxi);
/* Restore the previous Top of Stack */
  p_to_scb->p_tos = p_ctx->p_ctx;
8000b826:	4c f0       	ld.w %d15,[%a15]0
8000b828:	6c 50       	st.w [%a5]0,%d15
/* Jump to Kernel Wrapper: it will be the "ret" inside
   osEE_scheduler_task_wrapper_restore at:
   1) Restore the CSA so the SP,
   2) Return at RA address, that is the address after change context calling
      site */
  osEE_tc_jump(osEE_scheduler_task_wrapper_restore);
8000b82a:	1d ff 99 f9 	j 8000ab5c <osEE_scheduler_task_wrapper_restore>
8000b82e:	00 90       	ret 

8000b830 <osEE_hal_save_ctx_and_ready2stacked>:
8000b830:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000b832:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000b836:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000b838:	4c 60       	ld.w %d15,[%a6]0
8000b83a:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000b83e:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000b842:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000b846:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000b848:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000b84c:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the ready to stacked */
  osEE_tc_jump(osEE_hal_ready2stacked);
8000b84e:	1d 00 03 00 	j 8000b854 <osEE_hal_ready2stacked>
8000b852:	00 90       	ret 

8000b854 <osEE_hal_ready2stacked>:
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000b854:	cc 50       	ld.a %a15,[%a5]0
8000b856:	40 fa       	mov.aa %sp,%a15
  __asm__ volatile ("isync" : : : "memory");
}

/** The svlcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_svlcx(void) {
  __asm__ volatile ("svlcx" : : : "memory");
8000b858:	0d 00 00 02 	svlcx 
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000b85c:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000b85e:	d9 f2 f0 ff 	lea %a2,[%a15]-16
8000b862:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000b864:	4c 50       	ld.w %d15,[%a5]0
8000b866:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000b86a:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000b86e:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000b872:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000b874:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000b878:	f4 52       	st.a [%a5],%a2
   N.B. The RA saved in this context is not useful, but I prefer to use one
        save ctx code for all the cases for code readability, instead using an
        optimized one for this case */
  osEE_tc_save_ctx(p_to_scb);
/* Jump to Kernel Wrapper */
  osEE_tc_jump(osEE_scheduler_task_wrapper_run);
8000b87a:	1d ff 84 f9 	j 8000ab82 <osEE_scheduler_task_wrapper_run>
8000b87e:	00 90       	ret 

8000b880 <osEE_tc_change_context_from_isr2_end>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
/* Reset PSW Call Depth Counter, so I can force a RFE */
  osEE_tc_set_csfr(OSEE_CSFR_PSW,
8000b880:	4d 40 e0 ff 	mfcr %d15,$psw
8000b884:	8f ff c7 f1 	andn %d15,%d15,127
8000b888:	cd 4f e0 0f 	mtcr $psw,%d15
8000b88c:	0d 00 c0 04 	isync 
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000b890:	91 10 00 f8 	movh.a %a15,32769
8000b894:	d9 ff 50 fb 	lea %a15,[%a15]-18480 <8000b7d0 <osEE_tc_change_context_from_task_end>>
8000b898:	40 fb       	mov.aa %a11,%a15
  __asm__ volatile ("rslcx" : : : "memory");
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
8000b89a:	00 80       	rfe 
8000b89c:	00 90       	ret 

8000b89e <osEE_hal_terminate_ctx>:
  osEE_hal_terminate_ctx
(
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_term_scb,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
8000b89e:	20 08       	sub.a %sp,8

/* Returns the first CSA in the Free Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_fcx(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_FCX);
8000b8a0:	4d 80 e3 2f 	mfcr %d2,$fcx

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000b8a4:	4d 00 e0 ff 	mfcr %d15,$pcxi
    OsEE_csa_link fcx                 = osEE_tc_csa_get_fcx();
/* Obtain Previous CSA list head, That is the head of the to_free_queue
   (will be new FCX) */
    OsEE_csa_link to_free_queue_head  = osEE_tc_csa_get_pcxi();
/* Get the the of the CSA list to be freed */
    OsEE_csa_link to_free_queue_tail  = p_term_scb->p_tos->pcxi;
8000b8a8:	cc 40       	ld.a %a15,[%a4]0
8000b8aa:	48 23       	ld.w %d3,[%a15]8
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000b8ac:	b9 f4 08 00 	ld.hu %d4,[%a15]8
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000b8b0:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000b8b4:	06 64       	sh %d4,6
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000b8b6:	8f c3 01 30 	sh %d3,%d3,28
8000b8ba:	a6 43       	or %d3,%d4
8000b8bc:	60 3f       	mov.a %a15,%d3
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    l_next = p_csa->l_next;
  } else {
    l_next.reg = 0U;
8000b8be:	82 03       	mov %d3,0
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE
  osEE_tc_csa_get_next(OsEE_csa_link l_csa_at)
{
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
8000b8c0:	bc f3       	jz.a %a15,8000b8c6 <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
8000b8c2:	48 03       	ld.w %d3,[%a15]0
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_next(OsEE_csa_link l_csa_at, OsEE_csa_link l_next)
{
  OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    p_csa->l_next = l_next;
8000b8c4:	68 02       	st.w [%a15]0,%d2

/* Set the first CSA in the Free Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_fcx(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_FCX, l_csa.reg);
8000b8c6:	cd 8f e3 0f 	mtcr $fcx,%d15
8000b8ca:	0d 00 c0 04 	isync 

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000b8ce:	cd 03 e0 0f 	mtcr $pcxi,%d3
8000b8d2:	0d 00 c0 04 	isync 
   since a TASK, not yet started with higher priority of the stacked ones,
   could have been activated. */
   osEE_tc_set_RA(p_term_scb->p_tos->ra);
#endif /* 0 */
/* Pop ERIKA's context */
   p_term_scb->p_tos = p_term_scb->p_tos->p_ctx;
8000b8d6:	cc 40       	ld.a %a15,[%a4]0
8000b8d8:	4c f0       	ld.w %d15,[%a15]0
8000b8da:	6c 40       	st.w [%a4]0,%d15
   "osEE_hal_ready2stacked" PCXI. */
  {
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
8000b8dc:	91 00 00 48 	movh.a %a4,32768
8000b8e0:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000b8e4:	d9 a5 04 00 	lea %a5,[%sp]4 <80000100 <osEE_kdb_var>>
8000b8e8:	6d ff cb fb 	call 8000b07e <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
8000b8ec:	d8 01       	ld.a %a15,[%sp]4
8000b8ee:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000b8f2:	1e 25       	jeq %d15,2,8000b8fc <osEE_hal_terminate_ctx+0x5e>
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
    } else {
/* Prepare to jump to osEE_tc_change_context_from_task_end */
      osEE_tc_setareg(a4, p_to);
8000b8f4:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
8000b8f6:	1d ff 6d ff 	j 8000b7d0 <osEE_tc_change_context_from_task_end>
    }
  }
/* Fake infinite loop: to turn off 'noreturn' function does return warning */
  for(;;) {
    ;
  }
8000b8fa:	3c 00       	j 8000b8fa <osEE_hal_terminate_ctx+0x5c>

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
8000b8fc:	40 24       	mov.aa %a4,%a2
8000b8fe:	6d ff c1 ff 	call 8000b880 <osEE_tc_change_context_from_isr2_end>
8000b902:	3c fc       	j 8000b8fa <osEE_hal_terminate_ctx+0x5c>

8000b904 <__lshrdi3>:
8000b904:	6f 56 0c 80 	jnz.t %d6,5,8000b91c <__lshrdi3+0x18>
8000b908:	8b 06 02 71 	rsub %d7,%d6,32
8000b90c:	32 56       	rsub %d6
8000b90e:	17 45 80 27 	dextr %d2,%d5,%d4,%d7
8000b912:	0f 65 00 30 	sh %d3,%d5,%d6
8000b916:	2b 42 40 26 	sel %d2,%d6,%d2,%d4
8000b91a:	00 90       	ret 
8000b91c:	8b 06 02 60 	add %d6,%d6,32
8000b920:	32 56       	rsub %d6
8000b922:	0f 65 00 20 	sh %d2,%d5,%d6
8000b926:	82 03       	mov %d3,0
8000b928:	00 90       	ret 

8000b92a <__floatundisf>:
8000b92a:	7b 00 02 20 	movh %d2,32
8000b92e:	0b 25 30 f1 	lt.u %d15,%d5,%d2
8000b932:	02 4a       	mov %d10,%d4
8000b934:	02 54       	mov %d4,%d5
8000b936:	ee 08       	jnz %d15,8000b946 <__floatundisf+0x1c>
8000b938:	b7 0a 95 f5 	insert %d15,%d10,0,11,21
8000b93c:	6e 05       	jz %d15,8000b946 <__floatundisf+0x1c>
8000b93e:	b7 0a 0b a0 	insert %d10,%d10,0,0,11
8000b942:	b7 fa 81 a5 	insert %d10,%d10,15,11,1
8000b946:	6d 00 ea 02 	call 8000bf1a <__floatunsidf>
8000b94a:	0b 23 10 48 	mov %e4,%d3,%d2
8000b94e:	82 06       	mov %d6,0
8000b950:	7b 00 1f 74 	movh %d7,16880
8000b954:	6d 00 34 01 	call 8000bbbc <__muldf3>
8000b958:	02 a4       	mov %d4,%d10
8000b95a:	0b 23 10 88 	mov %e8,%d3,%d2
8000b95e:	6d 00 de 02 	call 8000bf1a <__floatunsidf>
8000b962:	0b 89 10 48 	mov %e4,%d9,%d8
8000b966:	0b 23 10 68 	mov %e6,%d3,%d2
8000b96a:	6d 00 ed 00 	call 8000bb44 <__adddf3>
8000b96e:	0b 23 10 48 	mov %e4,%d3,%d2
8000b972:	1d 00 b6 02 	j 8000bede <__truncdfsf2>

8000b976 <__extendsfdf2>:
8000b976:	20 20       	sub.a %sp,32
8000b978:	d9 a4 20 00 	lea %a4,[%sp]32
8000b97c:	89 44 2c f5 	st.w [+%a4]-20,%d4
8000b980:	d9 a5 10 00 	lea %a5,[%sp]16
8000b984:	6d 00 f1 02 	call 8000bf66 <__unpack_f>
8000b988:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000b98c:	39 a4 10 00 	ld.bu %d4,[%sp]16
8000b990:	8f e2 1f f0 	sh %d15,%d2,-2
8000b994:	8f e2 01 20 	sh %d2,%d2,30
8000b998:	74 a2       	st.w [%sp],%d2
8000b99a:	78 01       	st.w [%sp]4,%d15
8000b99c:	19 a5 14 00 	ld.w %d5,[%sp]20
8000b9a0:	19 a6 18 00 	ld.w %d6,[%sp]24
8000b9a4:	1d 00 8e 02 	j 8000bec0 <__make_dp>

8000b9a8 <_fpadd_parts>:
8000b9a8:	0c 40       	ld.bu %d15,[%a4]0
8000b9aa:	40 42       	mov.aa %a2,%a4
8000b9ac:	bf 2f cb 80 	jlt.u %d15,2,8000bb42 <_fpadd_parts+0x19a>
8000b9b0:	14 52       	ld.bu %d2,[%a5]
8000b9b2:	40 52       	mov.aa %a2,%a5
8000b9b4:	bf 22 c7 80 	jlt.u %d2,2,8000bb42 <_fpadd_parts+0x19a>
8000b9b8:	5e 4e       	jne %d15,4,8000b9d4 <_fpadd_parts+0x2c>
8000b9ba:	40 42       	mov.aa %a2,%a4
8000b9bc:	df 42 c3 80 	jne %d2,4,8000bb42 <_fpadd_parts+0x19a>
8000b9c0:	19 42 04 00 	ld.w %d2,[%a4]4
8000b9c4:	4c 51       	ld.w %d15,[%a5]4
8000b9c6:	5f f2 be 00 	jeq %d2,%d15,8000bb42 <_fpadd_parts+0x19a>
8000b9ca:	91 00 00 f8 	movh.a %a15,32768
8000b9ce:	d9 f2 f8 b0 	lea %a2,[%a15]3832 <80000ef8 <__thenan_df>>
8000b9d2:	00 90       	ret 
8000b9d4:	40 52       	mov.aa %a2,%a5
8000b9d6:	df 42 b6 00 	jeq %d2,4,8000bb42 <_fpadd_parts+0x19a>
8000b9da:	df 22 11 80 	jne %d2,2,8000b9fc <_fpadd_parts+0x54>
8000b9de:	40 42       	mov.aa %a2,%a4
8000b9e0:	df 2f b1 80 	jne %d15,2,8000bb42 <_fpadd_parts+0x19a>
8000b9e4:	40 63       	mov.aa %a3,%a6
8000b9e6:	a0 4f       	mov.a %a15,4
8000b9e8:	44 4f       	ld.w %d15,[%a4+]
8000b9ea:	64 3f       	st.w [%a3+],%d15
8000b9ec:	fc fe       	loop %a15,8000b9e8 <_fpadd_parts+0x40>
8000b9ee:	4c 21       	ld.w %d15,[%a2]4
8000b9f0:	19 52 04 00 	ld.w %d2,[%a5]4
8000b9f4:	40 62       	mov.aa %a2,%a6
8000b9f6:	26 2f       	and %d15,%d2
8000b9f8:	6c 61       	st.w [%a6]4,%d15
8000b9fa:	00 90       	ret 
8000b9fc:	40 52       	mov.aa %a2,%a5
8000b9fe:	df 2f a2 00 	jeq %d15,2,8000bb42 <_fpadd_parts+0x19a>
8000ba02:	4c 42       	ld.w %d15,[%a4]8
8000ba04:	19 52 08 00 	ld.w %d2,[%a5]8
8000ba08:	40 6f       	mov.aa %a15,%a6
8000ba0a:	52 23       	sub %d3,%d15,%d2
8000ba0c:	0b 30 c0 c1 	abs %d12,%d3
8000ba10:	8b 0c 84 42 	ge %d4,%d12,64
8000ba14:	40 5c       	mov.aa %a12,%a5
8000ba16:	40 4d       	mov.aa %a13,%a4
8000ba18:	09 4a 4c 09 	ld.d %e10,[%a4]12
8000ba1c:	09 58 4c 09 	ld.d %e8,[%a5]12
8000ba20:	df 04 35 80 	jne %d4,0,8000ba8a <_fpadd_parts+0xe2>
8000ba24:	bf 13 19 00 	jlt %d3,1,8000ba56 <_fpadd_parts+0xae>
8000ba28:	0b 89 10 48 	mov %e4,%d9,%d8
8000ba2c:	02 c6       	mov %d6,%d12
8000ba2e:	6d ff 6b ff 	call 8000b904 <__lshrdi3>
8000ba32:	d2 14       	mov %e4,1
8000ba34:	02 c6       	mov %d6,%d12
8000ba36:	02 2e       	mov %d14,%d2
8000ba38:	02 3d       	mov %d13,%d3
8000ba3a:	6d 00 89 02 	call 8000bf4c <__ashldi3>
8000ba3e:	8b f2 9f 20 	addx %d2,%d2,-1
8000ba42:	8b f3 bf 30 	addc %d3,%d3,-1
8000ba46:	26 82       	and %d2,%d8
8000ba48:	26 93       	and %d3,%d9
8000ba4a:	a6 23       	or %d3,%d2
8000ba4c:	02 e8       	mov %d8,%d14
8000ba4e:	8b 03 00 85 	or.ne %d8,%d3,0
8000ba52:	02 d9       	mov %d9,%d13
8000ba54:	3c 21       	j 8000ba96 <_fpadd_parts+0xee>
8000ba56:	df 03 20 00 	jeq %d3,0,8000ba96 <_fpadd_parts+0xee>
8000ba5a:	0b ab 10 48 	mov %e4,%d11,%d10
8000ba5e:	02 c6       	mov %d6,%d12
8000ba60:	6d ff 52 ff 	call 8000b904 <__lshrdi3>
8000ba64:	d2 14       	mov %e4,1
8000ba66:	02 c6       	mov %d6,%d12
8000ba68:	02 2e       	mov %d14,%d2
8000ba6a:	02 3d       	mov %d13,%d3
8000ba6c:	6d 00 70 02 	call 8000bf4c <__ashldi3>
8000ba70:	8b f2 9f 20 	addx %d2,%d2,-1
8000ba74:	8b f3 bf 30 	addc %d3,%d3,-1
8000ba78:	26 a2       	and %d2,%d10
8000ba7a:	26 b3       	and %d3,%d11
8000ba7c:	a6 23       	or %d3,%d2
8000ba7e:	02 ea       	mov %d10,%d14
8000ba80:	42 cf       	add %d15,%d12
8000ba82:	8b 03 00 a5 	or.ne %d10,%d3,0
8000ba86:	02 db       	mov %d11,%d13
8000ba88:	3c 07       	j 8000ba96 <_fpadd_parts+0xee>
8000ba8a:	3f f2 05 00 	jlt %d2,%d15,8000ba94 <_fpadd_parts+0xec>
8000ba8e:	02 2f       	mov %d15,%d2
8000ba90:	d2 0a       	mov %e10,0
8000ba92:	3c 02       	j 8000ba96 <_fpadd_parts+0xee>
8000ba94:	d2 08       	mov %e8,0
8000ba96:	19 d4 04 00 	ld.w %d4,[%a13]4
8000ba9a:	19 c2 04 00 	ld.w %d2,[%a12]4
8000ba9e:	5f 24 34 00 	jeq %d4,%d2,8000bb06 <_fpadd_parts+0x15e>
8000baa2:	0b 8a c0 20 	subx %d2,%d10,%d8
8000baa6:	0b 9b d0 30 	subc %d3,%d11,%d9
8000baaa:	76 45       	jz %d4,8000bab4 <_fpadd_parts+0x10c>
8000baac:	0b a8 c0 20 	subx %d2,%d8,%d10
8000bab0:	0b b9 d0 30 	subc %d3,%d9,%d11
8000bab4:	0e 37       	jltz %d3,8000bac2 <_fpadd_parts+0x11a>
8000bab6:	82 04       	mov %d4,0
8000bab8:	68 14       	st.w [%a15]4,%d4
8000baba:	68 2f       	st.w [%a15]8,%d15
8000babc:	89 f2 4c 09 	st.d [%a15]12,%e2
8000bac0:	3c 0c       	j 8000bad8 <_fpadd_parts+0x130>
8000bac2:	68 2f       	st.w [%a15]8,%d15
8000bac4:	8b 03 00 f1 	rsub %d15,%d3,0
8000bac8:	82 14       	mov %d4,1
8000baca:	8b 02 00 31 	rsub %d3,%d2,0
8000bace:	ab ff 1f f2 	cadd %d15,%d2,%d15,-1
8000bad2:	68 14       	st.w [%a15]4,%d4
8000bad4:	68 33       	st.w [%a15]12,%d3
8000bad6:	68 4f       	st.w [%a15]16,%d15
8000bad8:	82 f5       	mov %d5,-1
8000bada:	06 c5       	sh %d5,-4
8000badc:	48 32       	ld.w %d2,[%a15]12
8000bade:	48 43       	ld.w %d3,[%a15]16
8000bae0:	8b f2 9f 60 	addx %d6,%d2,-1
8000bae4:	8b f3 bf 40 	addc %d4,%d3,-1
8000bae8:	3a 54       	eq %d15,%d4,%d5
8000baea:	8b f6 3f f4 	and.ne %d15,%d6,-1
8000baee:	0b 54 a0 f2 	or.lt.u %d15,%d4,%d5
8000baf2:	6e 12       	jz %d15,8000bb16 <_fpadd_parts+0x16e>
8000baf4:	4c f2       	ld.w %d15,[%a15]8
8000baf6:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000bafa:	c2 ff       	add %d15,-1
8000bafc:	06 12       	sh %d2,1
8000bafe:	68 32       	st.w [%a15]12,%d2
8000bb00:	68 43       	st.w [%a15]16,%d3
8000bb02:	68 2f       	st.w [%a15]8,%d15
8000bb04:	3c ec       	j 8000badc <_fpadd_parts+0x134>
8000bb06:	0b a8 40 20 	addx %d2,%d8,%d10
8000bb0a:	68 2f       	st.w [%a15]8,%d15
8000bb0c:	0b b9 50 f0 	addc %d15,%d9,%d11
8000bb10:	68 14       	st.w [%a15]4,%d4
8000bb12:	68 32       	st.w [%a15]12,%d2
8000bb14:	68 4f       	st.w [%a15]16,%d15
8000bb16:	82 3f       	mov %d15,3
8000bb18:	28 0f       	st.b [%a15]0,%d15
8000bb1a:	4c f4       	ld.w %d15,[%a15]16
8000bb1c:	7b 00 00 42 	movh %d4,8192
8000bb20:	0b 4f 30 31 	lt.u %d3,%d15,%d4
8000bb24:	48 32       	ld.w %d2,[%a15]12
8000bb26:	40 f2       	mov.aa %a2,%a15
8000bb28:	f6 3d       	jnz %d3,8000bb42 <_fpadd_parts+0x19a>
8000bb2a:	8f 12 00 31 	and %d3,%d2,1
8000bb2e:	77 2f 80 2f 	dextr %d2,%d15,%d2,31
8000bb32:	06 ff       	sh %d15,-1
8000bb34:	96 00       	or %d15,0
8000bb36:	68 4f       	st.w [%a15]16,%d15
8000bb38:	4c f2       	ld.w %d15,[%a15]8
8000bb3a:	a6 32       	or %d2,%d3
8000bb3c:	c2 1f       	add %d15,1
8000bb3e:	68 32       	st.w [%a15]12,%d2
8000bb40:	68 2f       	st.w [%a15]8,%d15
8000bb42:	00 90       	ret 

8000bb44 <__adddf3>:
8000bb44:	20 50       	sub.a %sp,80
8000bb46:	d9 a4 04 00 	lea %a4,[%sp]4
8000bb4a:	d9 a5 14 00 	lea %a5,[%sp]20
8000bb4e:	89 a4 44 09 	st.d [%sp]4,%e4
8000bb52:	89 a6 4c 09 	st.d [%sp]12,%e6
8000bb56:	6d 00 d9 02 	call 8000c108 <__unpack_d>
8000bb5a:	d9 a4 0c 00 	lea %a4,[%sp]12
8000bb5e:	d9 a5 28 00 	lea %a5,[%sp]40
8000bb62:	6d 00 d3 02 	call 8000c108 <__unpack_d>
8000bb66:	d9 a4 14 00 	lea %a4,[%sp]20
8000bb6a:	d9 a5 28 00 	lea %a5,[%sp]40
8000bb6e:	d9 a6 3c 00 	lea %a6,[%sp]60
8000bb72:	6d ff 1b ff 	call 8000b9a8 <_fpadd_parts>
8000bb76:	40 24       	mov.aa %a4,%a2
8000bb78:	1d 00 3f 02 	j 8000bff6 <__pack_d>

8000bb7c <__subdf3>:
8000bb7c:	20 50       	sub.a %sp,80
8000bb7e:	d9 a4 04 00 	lea %a4,[%sp]4
8000bb82:	d9 a5 14 00 	lea %a5,[%sp]20
8000bb86:	89 a4 44 09 	st.d [%sp]4,%e4
8000bb8a:	89 a6 4c 09 	st.d [%sp]12,%e6
8000bb8e:	6d 00 bd 02 	call 8000c108 <__unpack_d>
8000bb92:	d9 a4 0c 00 	lea %a4,[%sp]12
8000bb96:	d9 a5 28 00 	lea %a5,[%sp]40
8000bb9a:	6d 00 b7 02 	call 8000c108 <__unpack_d>
8000bb9e:	58 0b       	ld.w %d15,[%sp]44
8000bba0:	d9 a4 14 00 	lea %a4,[%sp]20
8000bba4:	8f 1f 80 f1 	xor %d15,%d15,1
8000bba8:	d9 a5 28 00 	lea %a5,[%sp]40
8000bbac:	d9 a6 3c 00 	lea %a6,[%sp]60
8000bbb0:	78 0b       	st.w [%sp]44,%d15
8000bbb2:	6d ff fb fe 	call 8000b9a8 <_fpadd_parts>
8000bbb6:	40 24       	mov.aa %a4,%a2
8000bbb8:	1d 00 1f 02 	j 8000bff6 <__pack_d>

8000bbbc <__muldf3>:
8000bbbc:	20 50       	sub.a %sp,80
8000bbbe:	d9 a4 04 00 	lea %a4,[%sp]4
8000bbc2:	d9 a5 14 00 	lea %a5,[%sp]20
8000bbc6:	89 a4 44 09 	st.d [%sp]4,%e4
8000bbca:	89 a6 4c 09 	st.d [%sp]12,%e6
8000bbce:	6d 00 9d 02 	call 8000c108 <__unpack_d>
8000bbd2:	d9 a4 0c 00 	lea %a4,[%sp]12
8000bbd6:	d9 a5 28 00 	lea %a5,[%sp]40
8000bbda:	6d 00 97 02 	call 8000c108 <__unpack_d>
8000bbde:	39 a3 14 00 	ld.bu %d3,[%sp]20
8000bbe2:	ff 23 0c 80 	jge.u %d3,2,8000bbfa <__muldf3+0x3e>
8000bbe6:	19 a2 18 00 	ld.w %d2,[%sp]24
8000bbea:	58 0b       	ld.w %d15,[%sp]44
8000bbec:	d9 a4 14 00 	lea %a4,[%sp]20
8000bbf0:	0b f2 10 f1 	ne %d15,%d2,%d15
8000bbf4:	78 06       	st.w [%sp]24,%d15
8000bbf6:	1d 00 b3 00 	j 8000bd5c <__muldf3+0x1a0>
8000bbfa:	39 af 28 00 	ld.bu %d15,[%sp]40
8000bbfe:	ff 2f 0c 80 	jge.u %d15,2,8000bc16 <__muldf3+0x5a>
8000bc02:	58 0b       	ld.w %d15,[%sp]44
8000bc04:	19 a2 18 00 	ld.w %d2,[%sp]24
8000bc08:	d9 a4 28 00 	lea %a4,[%sp]40
8000bc0c:	0b f2 10 f1 	ne %d15,%d2,%d15
8000bc10:	78 0b       	st.w [%sp]44,%d15
8000bc12:	1d 00 a5 00 	j 8000bd5c <__muldf3+0x1a0>
8000bc16:	df 43 09 80 	jne %d3,4,8000bc28 <__muldf3+0x6c>
8000bc1a:	91 00 00 48 	movh.a %a4,32768
8000bc1e:	d9 44 f8 b0 	lea %a4,[%a4]3832 <80000ef8 <__thenan_df>>
8000bc22:	df 2f 9d 00 	jeq %d15,2,8000bd5c <__muldf3+0x1a0>
8000bc26:	3c e0       	j 8000bbe6 <__muldf3+0x2a>
8000bc28:	5e 48       	jne %d15,4,8000bc38 <__muldf3+0x7c>
8000bc2a:	91 00 00 48 	movh.a %a4,32768
8000bc2e:	d9 44 f8 b0 	lea %a4,[%a4]3832 <80000ef8 <__thenan_df>>
8000bc32:	df 23 95 00 	jeq %d3,2,8000bd5c <__muldf3+0x1a0>
8000bc36:	3c e6       	j 8000bc02 <__muldf3+0x46>
8000bc38:	df 23 d7 7f 	jeq %d3,2,8000bbe6 <__muldf3+0x2a>
8000bc3c:	df 2f e3 7f 	jeq %d15,2,8000bc02 <__muldf3+0x46>
8000bc40:	58 08       	ld.w %d15,[%sp]32
8000bc42:	19 ab 38 00 	ld.w %d11,[%sp]56 <80000008 <BootModeHeader0+0x8>>
8000bc46:	d2 00       	mov %e0,0
8000bc48:	19 a0 34 00 	ld.w %d0,[%sp]52
8000bc4c:	73 bf 68 60 	mul.u %e6,%d15,%d11
8000bc50:	82 0c       	mov %d12,0
8000bc52:	73 0f 68 40 	mul.u %e4,%d15,%d0
8000bc56:	19 aa 24 00 	ld.w %d10,[%sp]36
8000bc5a:	82 02       	mov %d2,0
8000bc5c:	03 cf 0a 77 	madd %d7,%d7,%d15,%d12
8000bc60:	03 b2 0a 77 	madd %d7,%d7,%d2,%d11
8000bc64:	03 1f 0a 55 	madd %d5,%d5,%d15,%d1
8000bc68:	03 02 0a 55 	madd %d5,%d5,%d2,%d0
8000bc6c:	82 0d       	mov %d13,0
8000bc6e:	03 a0 68 26 	madd.u %e2,%e6,%d0,%d10
8000bc72:	03 d0 0a 33 	madd %d3,%d3,%d0,%d13
8000bc76:	03 a1 0a 33 	madd %d3,%d3,%d1,%d10
8000bc7a:	0b 54 10 08 	mov %e0,%d4,%d5
8000bc7e:	42 20       	add %d0,%d2
8000bc80:	3a 73       	eq %d15,%d3,%d7
8000bc82:	0b 62 50 f2 	and.ge.u %d15,%d2,%d6
8000bc86:	0b 37 a0 f2 	or.lt.u %d15,%d7,%d3
8000bc8a:	8b 0f 00 62 	eq %d6,%d15,0
8000bc8e:	3a 50       	eq %d15,%d0,%d5
8000bc90:	0b 41 50 f2 	and.ge.u %d15,%d1,%d4
8000bc94:	0b 05 a0 f2 	or.lt.u %d15,%d5,%d0
8000bc98:	ba 0f       	eq %d15,%d15,0
8000bc9a:	53 1f 40 40 	mul.u %e4,%d15,1
8000bc9e:	02 38       	mov %d8,%d3
8000bca0:	82 09       	mov %d9,0
8000bca2:	03 ab 68 28 	madd.u %e2,%e8,%d11,%d10
8000bca6:	02 5f       	mov %d15,%d5
8000bca8:	03 db 0a 33 	madd %d3,%d3,%d11,%d13
8000bcac:	42 6f       	add %d15,%d6
8000bcae:	03 ac 0a 33 	madd %d3,%d3,%d12,%d10
8000bcb2:	0b 4f 10 68 	mov %e6,%d15,%d4
8000bcb6:	0b 62 40 40 	addx %d4,%d2,%d6
8000bcba:	0b 73 50 20 	addc %d2,%d3,%d7
8000bcbe:	58 07       	ld.w %d15,[%sp]28
8000bcc0:	19 a3 30 00 	ld.w %d3,[%sp]48
8000bcc4:	19 a5 18 00 	ld.w %d5,[%sp]24
8000bcc8:	42 3f       	add %d15,%d3
8000bcca:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000bcce:	c2 4f       	add %d15,4
8000bcd0:	0b 35 10 31 	ne %d3,%d5,%d3
8000bcd4:	59 a3 00 10 	st.w [%sp]64,%d3
8000bcd8:	7b 00 00 52 	movh %d5,8192
8000bcdc:	0b 52 50 31 	ge.u %d3,%d2,%d5
8000bce0:	df 03 1b 00 	jeq %d3,0,8000bd16 <__muldf3+0x15a>
8000bce4:	8f 14 00 31 	and %d3,%d4,1
8000bce8:	76 37       	jz %d3,8000bcf6 <__muldf3+0x13a>
8000bcea:	8f f0 1f 30 	sh %d3,%d0,-1
8000bcee:	77 10 80 1f 	dextr %d1,%d0,%d1,31
8000bcf2:	b7 f3 81 0f 	insert %d0,%d3,15,31,1
8000bcf6:	77 42 80 4f 	dextr %d4,%d2,%d4,31
8000bcfa:	c2 1f       	add %d15,1
8000bcfc:	06 f2       	sh %d2,-1
8000bcfe:	3c ed       	j 8000bcd8 <__muldf3+0x11c>
8000bd00:	77 42 80 20 	dextr %d2,%d2,%d4,1
8000bd04:	06 14       	sh %d4,1
8000bd06:	ce 04       	jgez %d0,8000bd0e <__muldf3+0x152>
8000bd08:	8f 14 40 51 	or %d5,%d4,1
8000bd0c:	02 54       	mov %d4,%d5
8000bd0e:	77 10 80 00 	dextr %d0,%d0,%d1,1
8000bd12:	c2 ff       	add %d15,-1
8000bd14:	06 11       	sh %d1,1
8000bd16:	7b 00 00 51 	movh %d5,4096
8000bd1a:	0b 52 30 31 	lt.u %d3,%d2,%d5
8000bd1e:	df 03 f1 ff 	jne %d3,0,8000bd00 <__muldf3+0x144>
8000bd22:	78 11       	st.w [%sp]68,%d15
8000bd24:	02 4f       	mov %d15,%d4
8000bd26:	16 ff       	and %d15,255
8000bd28:	8b 0f 28 f2 	ne %d15,%d15,128
8000bd2c:	ee 0f       	jnz %d15,8000bd4a <__muldf3+0x18e>
8000bd2e:	a6 10       	or %d0,%d1
8000bd30:	77 42 00 fc 	dextr %d15,%d2,%d4,24
8000bd34:	8b 00 20 02 	ne %d0,%d0,0
8000bd38:	0f f0 e0 00 	andn %d0,%d0,%d15
8000bd3c:	76 07       	jz %d0,8000bd4a <__muldf3+0x18e>
8000bd3e:	8b 04 88 40 	addx %d4,%d4,128
8000bd42:	8b 02 a0 20 	addc %d2,%d2,0
8000bd46:	8f f4 cf 41 	andn %d4,%d4,255
8000bd4a:	d9 a4 10 10 	lea %a4,[%sp]80
8000bd4e:	82 3f       	mov %d15,3
8000bd50:	59 a4 08 10 	st.w [%sp]72,%d4
8000bd54:	59 a2 0c 10 	st.w [%sp]76,%d2
8000bd58:	89 4f 2c f4 	st.b [+%a4]-20 <800003ec <IfxVadc_cfg_srcAddresses+0x9c>>,%d15
8000bd5c:	1d 00 4d 01 	j 8000bff6 <__pack_d>

8000bd60 <__divdf3>:
8000bd60:	20 38       	sub.a %sp,56
8000bd62:	40 a4       	mov.aa %a4,%sp
8000bd64:	d9 a5 10 00 	lea %a5,[%sp]16
8000bd68:	89 a4 40 09 	st.d [%sp],%e4
8000bd6c:	89 a6 48 09 	st.d [%sp]8,%e6
8000bd70:	6d 00 cc 01 	call 8000c108 <__unpack_d>
8000bd74:	d9 a4 08 00 	lea %a4,[%sp]8
8000bd78:	d9 a5 24 00 	lea %a5,[%sp]36
8000bd7c:	6d 00 c6 01 	call 8000c108 <__unpack_d>
8000bd80:	39 a2 10 00 	ld.bu %d2,[%sp]16
8000bd84:	bf 22 76 80 	jlt.u %d2,2,8000be70 <__divdf3+0x110>
8000bd88:	39 af 24 00 	ld.bu %d15,[%sp]36
8000bd8c:	d9 a4 24 00 	lea %a4,[%sp]36
8000bd90:	bf 2f 72 80 	jlt.u %d15,2,8000be74 <__divdf3+0x114>
8000bd94:	19 a4 14 00 	ld.w %d4,[%sp]20
8000bd98:	19 a3 28 00 	ld.w %d3,[%sp]40
8000bd9c:	c6 43       	xor %d3,%d4
8000bd9e:	59 a3 14 00 	st.w [%sp]20,%d3
8000bda2:	1b e2 ff 3f 	addi %d3,%d2,-2
8000bda6:	8f d3 0f 31 	and %d3,%d3,253
8000bdaa:	f6 38       	jnz %d3,8000bdba <__divdf3+0x5a>
8000bdac:	91 00 00 48 	movh.a %a4,32768
8000bdb0:	d9 44 f8 b0 	lea %a4,[%a4]3832 <80000ef8 <__thenan_df>>
8000bdb4:	5f f2 5e 80 	jne %d2,%d15,8000be70 <__divdf3+0x110>
8000bdb8:	3c 5e       	j 8000be74 <__divdf3+0x114>
8000bdba:	5e 47       	jne %d15,4,8000bdc8 <__divdf3+0x68>
8000bdbc:	d2 02       	mov %e2,0
8000bdbe:	82 0f       	mov %d15,0
8000bdc0:	89 a2 5c 09 	st.d [%sp]28,%e2
8000bdc4:	78 06       	st.w [%sp]24,%d15
8000bdc6:	3c 55       	j 8000be70 <__divdf3+0x110>
8000bdc8:	5e 25       	jne %d15,2,8000bdd2 <__divdf3+0x72>
8000bdca:	82 4f       	mov %d15,4
8000bdcc:	e9 af 10 00 	st.b [%sp]16,%d15
8000bdd0:	3c 50       	j 8000be70 <__divdf3+0x110>
8000bdd2:	58 06       	ld.w %d15,[%sp]24
8000bdd4:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000bdd8:	09 a4 70 09 	ld.d %e4,[%sp]48
8000bddc:	19 a6 2c 00 	ld.w %d6,[%sp]44
8000bde0:	52 66       	sub %d6,%d15,%d6
8000bde2:	3a 53       	eq %d15,%d3,%d5
8000bde4:	0b 42 50 f2 	and.ge.u %d15,%d2,%d4
8000bde8:	59 a6 18 00 	st.w [%sp]24,%d6
8000bdec:	0b 35 a0 f2 	or.lt.u %d15,%d5,%d3
8000bdf0:	ee 07       	jnz %d15,8000bdfe <__divdf3+0x9e>
8000bdf2:	c2 f6       	add %d6,-1
8000bdf4:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000bdf8:	59 a6 18 00 	st.w [%sp]24,%d6
8000bdfc:	06 12       	sh %d2,1
8000bdfe:	82 01       	mov %d1,0
8000be00:	7b 00 00 f1 	movh %d15,4096
8000be04:	82 00       	mov %d0,0
8000be06:	82 07       	mov %d7,0
8000be08:	c5 0f 3c 00 	lea %a15,3c <_.+0x3b>
8000be0c:	0b 53 00 61 	eq %d6,%d3,%d5
8000be10:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000be14:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000be18:	f6 6b       	jnz %d6,8000be2e <__divdf3+0xce>
8000be1a:	0f 10 a0 80 	or %d8,%d0,%d1
8000be1e:	0f f7 a0 60 	or %d6,%d7,%d15
8000be22:	0b 42 c0 20 	subx %d2,%d2,%d4
8000be26:	02 80       	mov %d0,%d8
8000be28:	02 67       	mov %d7,%d6
8000be2a:	0b 53 d0 30 	subc %d3,%d3,%d5
8000be2e:	77 1f 80 1f 	dextr %d1,%d15,%d1,31
8000be32:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000be36:	06 ff       	sh %d15,-1
8000be38:	06 12       	sh %d2,1
8000be3a:	fd f0 e9 7f 	loop %a15,8000be0c <__divdf3+0xac>
8000be3e:	02 0f       	mov %d15,%d0
8000be40:	16 ff       	and %d15,255
8000be42:	8b 0f 28 f2 	ne %d15,%d15,128
8000be46:	0b 70 10 48 	mov %e4,%d0,%d7
8000be4a:	ee 0f       	jnz %d15,8000be68 <__divdf3+0x108>
8000be4c:	a6 32       	or %d2,%d3
8000be4e:	77 07 00 fc 	dextr %d15,%d7,%d0,24
8000be52:	8b 02 20 22 	ne %d2,%d2,0
8000be56:	0f f2 e0 20 	andn %d2,%d2,%d15
8000be5a:	76 27       	jz %d2,8000be68 <__divdf3+0x108>
8000be5c:	8b 00 88 00 	addx %d0,%d0,128
8000be60:	8b 07 a0 40 	addc %d4,%d7,0
8000be64:	8f f0 cf 51 	andn %d5,%d0,255
8000be68:	59 a5 1c 00 	st.w [%sp]28,%d5
8000be6c:	59 a4 20 00 	st.w [%sp]32,%d4
8000be70:	d9 a4 10 00 	lea %a4,[%sp]16
8000be74:	1d 00 c1 00 	j 8000bff6 <__pack_d>

8000be78 <__floatsidf>:
8000be78:	20 18       	sub.a %sp,24
8000be7a:	82 3f       	mov %d15,3
8000be7c:	2c a4       	st.b [%sp]4,%d15
8000be7e:	8f 14 1e f0 	sh %d15,%d4,-31
8000be82:	78 02       	st.w [%sp]8,%d15
8000be84:	f6 44       	jnz %d4,8000be8c <__floatsidf+0x14>
8000be86:	82 2f       	mov %d15,2
8000be88:	2c a4       	st.b [%sp]4,%d15
8000be8a:	3c 16       	j 8000beb6 <__floatsidf+0x3e>
8000be8c:	6e 09       	jz %d15,8000be9e <__floatsidf+0x26>
8000be8e:	7b 00 00 f8 	movh %d15,32768
8000be92:	82 02       	mov %d2,0
8000be94:	7b 00 1e 3c 	movh %d3,49632
8000be98:	5f f4 13 00 	jeq %d4,%d15,8000bebe <__floatsidf+0x46>
8000be9c:	32 54       	rsub %d4
8000be9e:	0f 04 b0 f1 	clz %d15,%d4
8000bea2:	1b df 01 60 	addi %d6,%d15,29
8000bea6:	82 05       	mov %d5,0
8000bea8:	6d 00 52 00 	call 8000bf4c <__ashldi3>
8000beac:	8b ff 01 f1 	rsub %d15,%d15,31
8000beb0:	89 a2 50 09 	st.d [%sp]16,%e2
8000beb4:	78 03       	st.w [%sp]12,%d15
8000beb6:	d9 a4 04 00 	lea %a4,[%sp]4
8000beba:	6d 00 9e 00 	call 8000bff6 <__pack_d>
8000bebe:	00 90       	ret 

8000bec0 <__make_dp>:
8000bec0:	20 18       	sub.a %sp,24
8000bec2:	09 a2 58 09 	ld.d %e2,[%sp]24
8000bec6:	d9 a4 04 00 	lea %a4,[%sp]4
8000beca:	e9 a4 04 00 	st.b [%sp]4,%d4
8000bece:	59 a5 08 00 	st.w [%sp]8,%d5
8000bed2:	59 a6 0c 00 	st.w [%sp]12,%d6
8000bed6:	89 a2 50 09 	st.d [%sp]16,%e2
8000beda:	1d 00 8e 00 	j 8000bff6 <__pack_d>

8000bede <__truncdfsf2>:
8000bede:	20 20       	sub.a %sp,32
8000bee0:	d9 a4 20 00 	lea %a4,[%sp]32
8000bee4:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000bee8:	d9 a5 0c 00 	lea %a5,[%sp]12
8000beec:	6d 00 0e 01 	call 8000c108 <__unpack_d>
8000bef0:	19 a7 18 00 	ld.w %d7,[%sp]24
8000bef4:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000bef8:	39 a4 0c 00 	ld.bu %d4,[%sp]12
8000befc:	77 72 00 21 	dextr %d2,%d2,%d7,2
8000bf00:	b7 07 02 7f 	insert %d7,%d7,0,30,2
8000bf04:	02 23       	mov %d3,%d2
8000bf06:	8f 12 40 21 	or %d2,%d2,1
8000bf0a:	19 a5 10 00 	ld.w %d5,[%sp]16
8000bf0e:	19 a6 14 00 	ld.w %d6,[%sp]20
8000bf12:	2b 32 40 77 	sel %d7,%d7,%d2,%d3
8000bf16:	1d 00 65 00 	j 8000bfe0 <__make_fp>

8000bf1a <__floatunsidf>:
8000bf1a:	20 18       	sub.a %sp,24
8000bf1c:	82 0f       	mov %d15,0
8000bf1e:	78 02       	st.w [%sp]8,%d15
8000bf20:	f6 44       	jnz %d4,8000bf28 <__floatunsidf+0xe>
8000bf22:	82 2f       	mov %d15,2
8000bf24:	2c a4       	st.b [%sp]4,%d15
8000bf26:	3c 0f       	j 8000bf44 <__floatunsidf+0x2a>
8000bf28:	82 3f       	mov %d15,3
8000bf2a:	2c a4       	st.b [%sp]4,%d15
8000bf2c:	0f 04 b0 f1 	clz %d15,%d4
8000bf30:	1b df 01 60 	addi %d6,%d15,29
8000bf34:	82 05       	mov %d5,0
8000bf36:	6d 00 0b 00 	call 8000bf4c <__ashldi3>
8000bf3a:	8b ff 01 f1 	rsub %d15,%d15,31
8000bf3e:	89 a2 50 09 	st.d [%sp]16,%e2
8000bf42:	78 03       	st.w [%sp]12,%d15
8000bf44:	d9 a4 04 00 	lea %a4,[%sp]4
8000bf48:	1d 00 57 00 	j 8000bff6 <__pack_d>

8000bf4c <__ashldi3>:
8000bf4c:	6f 56 07 80 	jnz.t %d6,5,8000bf5a <__ashldi3+0xe>
8000bf50:	0f 64 00 20 	sh %d2,%d4,%d6
8000bf54:	17 45 80 36 	dextr %d3,%d5,%d4,%d6
8000bf58:	00 90       	ret 
8000bf5a:	8b 06 1e 60 	add %d6,%d6,-32
8000bf5e:	82 02       	mov %d2,0
8000bf60:	0f 64 00 30 	sh %d3,%d4,%d6
8000bf64:	00 90       	ret 

8000bf66 <__unpack_f>:
8000bf66:	54 43       	ld.w %d3,[%a4]
8000bf68:	37 03 77 f0 	extr.u %d15,%d3,0,23
8000bf6c:	37 03 e8 2b 	extr.u %d2,%d3,23,8
8000bf70:	8f 13 1e 30 	sh %d3,%d3,-31
8000bf74:	59 53 04 00 	st.w [%a5]4,%d3
8000bf78:	df 02 18 80 	jne %d2,0,8000bfa8 <__unpack_f+0x42>
8000bf7c:	ee 03       	jnz %d15,8000bf82 <__unpack_f+0x1c>
8000bf7e:	82 2f       	mov %d15,2
8000bf80:	3c 19       	j 8000bfb2 <__unpack_f+0x4c>
8000bf82:	3b 20 f8 2f 	mov %d2,-126
8000bf86:	59 52 08 00 	st.w [%a5]8,%d2
8000bf8a:	82 32       	mov %d2,3
8000bf8c:	34 52       	st.b [%a5],%d2
8000bf8e:	06 7f       	sh %d15,7
8000bf90:	3b 10 f8 2f 	mov %d2,-127
8000bf94:	7b 00 00 44 	movh %d4,16384
8000bf98:	06 1f       	sh %d15,1
8000bf9a:	02 23       	mov %d3,%d2
8000bf9c:	c2 f2       	add %d2,-1
8000bf9e:	3f 4f fd ff 	jlt.u %d15,%d4,8000bf98 <__unpack_f+0x32>
8000bfa2:	59 53 08 00 	st.w [%a5]8,%d3
8000bfa6:	3c 1b       	j 8000bfdc <__unpack_f+0x76>
8000bfa8:	8b f2 2f 32 	ne %d3,%d2,255
8000bfac:	f6 3f       	jnz %d3,8000bfca <__unpack_f+0x64>
8000bfae:	ee 04       	jnz %d15,8000bfb6 <__unpack_f+0x50>
8000bfb0:	82 4f       	mov %d15,4
8000bfb2:	2c 50       	st.b [%a5]0,%d15
8000bfb4:	00 90       	ret 
8000bfb6:	7b 00 04 20 	movh %d2,64
8000bfba:	26 f2       	and %d2,%d15
8000bfbc:	76 22       	jz %d2,8000bfc0 <__unpack_f+0x5a>
8000bfbe:	82 12       	mov %d2,1
8000bfc0:	b7 0f 01 fb 	insert %d15,%d15,0,22,1
8000bfc4:	34 52       	st.b [%a5],%d2
8000bfc6:	06 7f       	sh %d15,7
8000bfc8:	3c 0a       	j 8000bfdc <__unpack_f+0x76>
8000bfca:	1b 12 f8 2f 	addi %d2,%d2,-127
8000bfce:	06 7f       	sh %d15,7
8000bfd0:	59 52 08 00 	st.w [%a5]8,%d2
8000bfd4:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000bfd8:	82 32       	mov %d2,3
8000bfda:	34 52       	st.b [%a5],%d2
8000bfdc:	6c 53       	st.w [%a5]12,%d15
8000bfde:	00 90       	ret 

8000bfe0 <__make_fp>:
8000bfe0:	20 10       	sub.a %sp,16
8000bfe2:	40 a4       	mov.aa %a4,%sp
8000bfe4:	34 a4       	st.b [%sp],%d4
8000bfe6:	59 a5 04 00 	st.w [%sp]4,%d5
8000bfea:	59 a6 08 00 	st.w [%sp]8,%d6
8000bfee:	59 a7 0c 00 	st.w [%sp]12,%d7
8000bff2:	1d 00 e1 00 	j 8000c1b4 <__pack_f>

8000bff6 <__pack_d>:
8000bff6:	14 42       	ld.bu %d2,[%a4]
8000bff8:	19 49 0c 00 	ld.w %d9,[%a4]12
8000bffc:	19 48 10 00 	ld.w %d8,[%a4]16
8000c000:	19 4c 04 00 	ld.w %d12,[%a4]4
8000c004:	ff 22 0b 80 	jge.u %d2,2,8000c01a <__pack_d+0x24>
8000c008:	77 98 00 9c 	dextr %d9,%d8,%d9,24
8000c00c:	06 88       	sh %d8,-8
8000c00e:	02 95       	mov %d5,%d9
8000c010:	b7 18 8d 49 	insert %d4,%d8,1,19,13
8000c014:	3b f0 7f f0 	mov %d15,2047
8000c018:	3c 6f       	j 8000c0f6 <__pack_d+0x100>
8000c01a:	3b f0 7f f0 	mov %d15,2047
8000c01e:	d2 04       	mov %e4,0
8000c020:	df 42 6b 00 	jeq %d2,4,8000c0f6 <__pack_d+0x100>
8000c024:	0f 89 a0 f0 	or %d15,%d9,%d8
8000c028:	8b 22 00 32 	eq %d3,%d2,2
8000c02c:	8b 0f e0 34 	or.eq %d3,%d15,0
8000c030:	82 0f       	mov %d15,0
8000c032:	df 03 62 80 	jne %d3,0,8000c0f6 <__pack_d+0x100>
8000c036:	19 42 08 00 	ld.w %d2,[%a4]8
8000c03a:	3b 20 c0 ff 	mov %d15,-1022
8000c03e:	7f f2 36 00 	jge %d2,%d15,8000c0aa <__pack_d+0xb4>
8000c042:	a2 2f       	sub %d15,%d2
8000c044:	8b 9f 83 42 	ge %d4,%d15,57
8000c048:	82 02       	mov %d2,0
8000c04a:	df 04 18 80 	jne %d4,0,8000c07a <__pack_d+0x84>
8000c04e:	0b 98 10 48 	mov %e4,%d8,%d9
8000c052:	02 f6       	mov %d6,%d15
8000c054:	6d ff 58 fc 	call 8000b904 <__lshrdi3>
8000c058:	d2 14       	mov %e4,1
8000c05a:	02 f6       	mov %d6,%d15
8000c05c:	0b 32 10 a8 	mov %e10,%d2,%d3
8000c060:	6d ff 76 ff 	call 8000bf4c <__ashldi3>
8000c064:	8b f2 9f 20 	addx %d2,%d2,-1
8000c068:	8b f3 bf 30 	addc %d3,%d3,-1
8000c06c:	26 29       	and %d9,%d2
8000c06e:	26 38       	and %d8,%d3
8000c070:	a6 98       	or %d8,%d9
8000c072:	02 b2       	mov %d2,%d11
8000c074:	8b 08 00 25 	or.ne %d2,%d8,0
8000c078:	02 a3       	mov %d3,%d10
8000c07a:	02 2f       	mov %d15,%d2
8000c07c:	16 ff       	and %d15,255
8000c07e:	8b 0f 28 f2 	ne %d15,%d15,128
8000c082:	ee 07       	jnz %d15,8000c090 <__pack_d+0x9a>
8000c084:	8f 02 10 f1 	and %d15,%d2,256
8000c088:	6e 08       	jz %d15,8000c098 <__pack_d+0xa2>
8000c08a:	8b 02 88 20 	addx %d2,%d2,128
8000c08e:	3c 03       	j 8000c094 <__pack_d+0x9e>
8000c090:	8b f2 87 20 	addx %d2,%d2,127
8000c094:	8b 03 a0 30 	addc %d3,%d3,0
8000c098:	7b 00 00 41 	movh %d4,4096
8000c09c:	0b 43 50 f1 	ge.u %d15,%d3,%d4
8000c0a0:	77 23 00 5c 	dextr %d5,%d3,%d2,24
8000c0a4:	8f 83 1f 40 	sh %d4,%d3,-8
8000c0a8:	3c 27       	j 8000c0f6 <__pack_d+0x100>
8000c0aa:	3b 00 40 30 	mov %d3,1024
8000c0ae:	3b f0 7f f0 	mov %d15,2047
8000c0b2:	7f 32 22 00 	jge %d2,%d3,8000c0f6 <__pack_d+0x100>
8000c0b6:	02 9f       	mov %d15,%d9
8000c0b8:	16 ff       	and %d15,255
8000c0ba:	8b 0f 28 f2 	ne %d15,%d15,128
8000c0be:	ee 07       	jnz %d15,8000c0cc <__pack_d+0xd6>
8000c0c0:	8f 09 10 f1 	and %d15,%d9,256
8000c0c4:	6e 08       	jz %d15,8000c0d4 <__pack_d+0xde>
8000c0c6:	8b 09 88 90 	addx %d9,%d9,128
8000c0ca:	3c 03       	j 8000c0d0 <__pack_d+0xda>
8000c0cc:	8b f9 87 90 	addx %d9,%d9,127
8000c0d0:	8b 08 a0 80 	addc %d8,%d8,0
8000c0d4:	7b 00 00 32 	movh %d3,8192
8000c0d8:	0b 38 50 f1 	ge.u %d15,%d8,%d3
8000c0dc:	ee 04       	jnz %d15,8000c0e4 <__pack_d+0xee>
8000c0de:	1b f2 3f f0 	addi %d15,%d2,1023
8000c0e2:	3c 06       	j 8000c0ee <__pack_d+0xf8>
8000c0e4:	77 98 80 9f 	dextr %d9,%d8,%d9,31
8000c0e8:	1b 02 40 f0 	addi %d15,%d2,1024
8000c0ec:	06 f8       	sh %d8,-1
8000c0ee:	77 98 00 5c 	dextr %d5,%d8,%d9,24
8000c0f2:	8f 88 1f 40 	sh %d4,%d8,-8
8000c0f6:	d2 02       	mov %e2,0
8000c0f8:	37 43 14 40 	insert %d4,%d3,%d4,0,20
8000c0fc:	37 f4 0b fa 	insert %d15,%d4,%d15,20,11
8000c100:	02 52       	mov %d2,%d5
8000c102:	37 cf 81 3f 	insert %d3,%d15,%d12,31,1
8000c106:	00 90       	ret 

8000c108 <__unpack_d>:
8000c108:	19 44 04 00 	ld.w %d4,[%a4]4
8000c10c:	54 42       	ld.w %d2,[%a4]
8000c10e:	37 04 74 50 	extr.u %d5,%d4,0,20
8000c112:	37 04 6b fa 	extr.u %d15,%d4,20,11
8000c116:	8f 14 1e 40 	sh %d4,%d4,-31
8000c11a:	59 54 04 00 	st.w [%a5]4,%d4
8000c11e:	02 53       	mov %d3,%d5
8000c120:	ee 21       	jnz %d15,8000c162 <__unpack_d+0x5a>
8000c122:	0f 25 a0 f0 	or %d15,%d5,%d2
8000c126:	ee 03       	jnz %d15,8000c12c <__unpack_d+0x24>
8000c128:	82 2f       	mov %d15,2
8000c12a:	3c 23       	j 8000c170 <__unpack_d+0x68>
8000c12c:	3b 20 c0 ff 	mov %d15,-1022
8000c130:	6c 52       	st.w [%a5]8,%d15
8000c132:	82 3f       	mov %d15,3
8000c134:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000c138:	2c 50       	st.b [%a5]0,%d15
8000c13a:	8f 82 00 20 	sh %d2,%d2,8
8000c13e:	3b 10 c0 ff 	mov %d15,-1023
8000c142:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000c146:	7b 00 00 61 	movh %d6,4096
8000c14a:	0b 63 30 51 	lt.u %d5,%d3,%d6
8000c14e:	02 f4       	mov %d4,%d15
8000c150:	06 12       	sh %d2,1
8000c152:	c2 ff       	add %d15,-1
8000c154:	df 05 f7 ff 	jne %d5,0,8000c142 <__unpack_d+0x3a>
8000c158:	59 54 08 00 	st.w [%a5]8,%d4
8000c15c:	59 52 0c 00 	st.w [%a5]12,%d2
8000c160:	3c 27       	j 8000c1ae <__unpack_d+0xa6>
8000c162:	3b f0 7f 40 	mov %d4,2047
8000c166:	fe 47       	jne %d15,%d4,8000c194 <__unpack_d+0x8c>
8000c168:	0f 25 a0 f0 	or %d15,%d5,%d2
8000c16c:	ee 04       	jnz %d15,8000c174 <__unpack_d+0x6c>
8000c16e:	82 4f       	mov %d15,4
8000c170:	2c 50       	st.b [%a5]0,%d15
8000c172:	00 90       	ret 
8000c174:	7b 80 00 f0 	movh %d15,8
8000c178:	26 5f       	and %d15,%d5
8000c17a:	6e 02       	jz %d15,8000c17e <__unpack_d+0x76>
8000c17c:	82 1f       	mov %d15,1
8000c17e:	2c 50       	st.b [%a5]0,%d15
8000c180:	b7 03 81 f9 	insert %d15,%d3,0,19,1
8000c184:	77 2f 00 f4 	dextr %d15,%d15,%d2,8
8000c188:	8f 82 00 40 	sh %d4,%d2,8
8000c18c:	59 54 0c 00 	st.w [%a5]12,%d4
8000c190:	6c 54       	st.w [%a5]16,%d15
8000c192:	00 90       	ret 
8000c194:	1b 1f c0 ff 	addi %d15,%d15,-1023
8000c198:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000c19c:	6c 52       	st.w [%a5]8,%d15
8000c19e:	8f 82 00 20 	sh %d2,%d2,8
8000c1a2:	82 3f       	mov %d15,3
8000c1a4:	b7 f3 01 3e 	insert %d3,%d3,15,28,1
8000c1a8:	2c 50       	st.b [%a5]0,%d15
8000c1aa:	59 52 0c 00 	st.w [%a5]12,%d2
8000c1ae:	59 53 10 00 	st.w [%a5]16,%d3
8000c1b2:	00 90       	ret 

8000c1b4 <__pack_f>:
8000c1b4:	14 45       	ld.bu %d5,[%a4]
8000c1b6:	4c 43       	ld.w %d15,[%a4]12
8000c1b8:	19 47 04 00 	ld.w %d7,[%a4]4
8000c1bc:	ff 25 09 80 	jge.u %d5,2,8000c1ce <__pack_f+0x1a>
8000c1c0:	37 0f f6 33 	extr.u %d3,%d15,7,22
8000c1c4:	b7 f3 01 3b 	insert %d3,%d3,15,22,1
8000c1c8:	3b f0 0f 40 	mov %d4,255
8000c1cc:	3c 4f       	j 8000c26a <__pack_f+0xb6>
8000c1ce:	3b f0 0f 40 	mov %d4,255
8000c1d2:	82 03       	mov %d3,0
8000c1d4:	df 45 4b 00 	jeq %d5,4,8000c26a <__pack_f+0xb6>
8000c1d8:	8b 25 00 62 	eq %d6,%d5,2
8000c1dc:	8b 0f e0 64 	or.eq %d6,%d15,0
8000c1e0:	82 04       	mov %d4,0
8000c1e2:	df 06 44 80 	jne %d6,0,8000c26a <__pack_f+0xb6>
8000c1e6:	19 45 08 00 	ld.w %d5,[%a4]8
8000c1ea:	8b 25 98 42 	ge %d4,%d5,-126
8000c1ee:	df 04 24 80 	jne %d4,0,8000c236 <__pack_f+0x82>
8000c1f2:	8b 25 18 51 	rsub %d5,%d5,-126
8000c1f6:	8b a5 81 42 	ge %d4,%d5,26
8000c1fa:	f6 4c       	jnz %d4,8000c212 <__pack_f+0x5e>
8000c1fc:	82 12       	mov %d2,1
8000c1fe:	0f 52 00 20 	sh %d2,%d2,%d5
8000c202:	8b 05 00 31 	rsub %d3,%d5,0
8000c206:	c2 f2       	add %d2,-1
8000c208:	0f 3f 00 30 	sh %d3,%d15,%d3
8000c20c:	26 2f       	and %d15,%d2
8000c20e:	8b 0f 00 35 	or.ne %d3,%d15,0
8000c212:	8f f3 07 f1 	and %d15,%d3,127
8000c216:	8b 0f 24 f2 	ne %d15,%d15,64
8000c21a:	ee 06       	jnz %d15,8000c226 <__pack_f+0x72>
8000c21c:	8f 03 08 f1 	and %d15,%d3,128
8000c220:	ab 03 04 3f 	cadd %d3,%d15,%d3,64
8000c224:	3c 03       	j 8000c22a <__pack_f+0x76>
8000c226:	1b f3 03 30 	addi %d3,%d3,63
8000c22a:	7b 00 00 f4 	movh %d15,16384
8000c22e:	0b f3 50 41 	ge.u %d4,%d3,%d15
8000c232:	06 93       	sh %d3,-7
8000c234:	3c 1b       	j 8000c26a <__pack_f+0xb6>
8000c236:	8b 05 88 62 	ge %d6,%d5,128
8000c23a:	3b f0 0f 40 	mov %d4,255
8000c23e:	df 06 16 80 	jne %d6,0,8000c26a <__pack_f+0xb6>
8000c242:	8f ff 07 31 	and %d3,%d15,127
8000c246:	8b 03 24 32 	ne %d3,%d3,64
8000c24a:	f6 36       	jnz %d3,8000c256 <__pack_f+0xa2>
8000c24c:	8f 0f 08 31 	and %d3,%d15,128
8000c250:	ab 0f 04 f3 	cadd %d15,%d3,%d15,64
8000c254:	3c 03       	j 8000c25a <__pack_f+0xa6>
8000c256:	1b ff 03 f0 	addi %d15,%d15,63
8000c25a:	1b f5 07 40 	addi %d4,%d5,127
8000c25e:	ce f4       	jgez %d15,8000c266 <__pack_f+0xb2>
8000c260:	06 ff       	sh %d15,-1
8000c262:	1b 05 08 40 	addi %d4,%d5,128
8000c266:	8f 9f 1f 30 	sh %d3,%d15,-7
8000c26a:	82 02       	mov %d2,0
8000c26c:	37 32 17 20 	insert %d2,%d2,%d3,0,23
8000c270:	37 42 88 2b 	insert %d2,%d2,%d4,23,8
8000c274:	37 72 81 2f 	insert %d2,%d2,%d7,31,1
8000c278:	00 90       	ret 

8000c27a <malloc>:
8000c27a:	91 00 00 f7 	movh.a %a15,28672
8000c27e:	99 f4 70 00 	ld.a %a4,[%a15]1072 <70000430 <_impure_ptr>>
8000c282:	1d 00 09 00 	j 8000c294 <_malloc_r>

8000c286 <free>:
8000c286:	91 00 00 f7 	movh.a %a15,28672
8000c28a:	40 45       	mov.aa %a5,%a4
8000c28c:	99 f4 70 00 	ld.a %a4,[%a15]1072 <70000430 <_impure_ptr>>
8000c290:	1d 00 f7 02 	j 8000c87e <_free_r>

8000c294 <_malloc_r>:
8000c294:	1b b4 00 f0 	addi %d15,%d4,11
8000c298:	8b 7f 61 82 	lt.u %d8,%d15,23
8000c29c:	8f 7f c0 f1 	andn %d15,%d15,7
8000c2a0:	ab 0f a1 88 	seln %d8,%d8,%d15,16
8000c2a4:	0b 48 30 41 	lt.u %d4,%d8,%d4
8000c2a8:	8b 08 20 45 	or.lt %d4,%d8,0
8000c2ac:	40 4d       	mov.aa %a13,%a4
8000c2ae:	76 45       	jz %d4,8000c2b8 <_malloc_r+0x24>
8000c2b0:	da 0c       	mov %d15,12
8000c2b2:	6c 40       	st.w [%a4]0,%d15
8000c2b4:	1d 00 2a 02 	j 8000c708 <_malloc_r+0x474>
8000c2b8:	91 00 00 f7 	movh.a %a15,28672
8000c2bc:	8b 88 bf f2 	ge.u %d15,%d8,504
8000c2c0:	6d 00 37 02 	call 8000c72e <__malloc_lock>
8000c2c4:	d9 ff 28 00 	lea %a15,[%a15]40 <70000028 <__malloc_av_>>
8000c2c8:	ee 19       	jnz %d15,8000c2fa <_malloc_r+0x66>
8000c2ca:	8f d8 1f 20 	sh %d2,%d8,-3
8000c2ce:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000c2d2:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000c2d6:	7d 2c 09 80 	jne.a %a12,%a2,8000c2e8 <_malloc_r+0x54>
8000c2da:	d9 c2 08 00 	lea %a2,[%a12]8
8000c2de:	99 cc 14 00 	ld.a %a12,[%a12]20
8000c2e2:	c2 22       	add %d2,2
8000c2e4:	7d 2c 58 00 	jeq.a %a12,%a2,8000c394 <_malloc_r+0x100>
8000c2e8:	cc c3       	ld.a %a15,[%a12]12
8000c2ea:	99 c2 08 00 	ld.a %a2,[%a12]8
8000c2ee:	4c c1       	ld.w %d15,[%a12]4
8000c2f0:	ec 23       	st.a [%a2]12,%a15
8000c2f2:	8f 3f c0 f1 	andn %d15,%d15,3
8000c2f6:	e8 22       	st.a [%a15]8,%a2
8000c2f8:	3c 74       	j 8000c3e0 <_malloc_r+0x14c>
8000c2fa:	8f 78 1f f0 	sh %d15,%d8,-9
8000c2fe:	3b f0 03 20 	mov %d2,63
8000c302:	6e 27       	jz %d15,8000c350 <_malloc_r+0xbc>
8000c304:	8f a8 1f 20 	sh %d2,%d8,-6
8000c308:	1b 82 03 20 	addi %d2,%d2,56
8000c30c:	bf 5f 22 80 	jlt.u %d15,5,8000c350 <_malloc_r+0xbc>
8000c310:	8b 5f a1 22 	ge.u %d2,%d15,21
8000c314:	f6 24       	jnz %d2,8000c31c <_malloc_r+0x88>
8000c316:	1b bf 05 20 	addi %d2,%d15,91
8000c31a:	3c 1b       	j 8000c350 <_malloc_r+0xbc>
8000c31c:	8b 5f a5 22 	ge.u %d2,%d15,85
8000c320:	f6 26       	jnz %d2,8000c32c <_malloc_r+0x98>
8000c322:	8f 48 1f 20 	sh %d2,%d8,-12
8000c326:	1b e2 06 20 	addi %d2,%d2,110
8000c32a:	3c 13       	j 8000c350 <_malloc_r+0xbc>
8000c32c:	8b 5f b5 22 	ge.u %d2,%d15,341
8000c330:	f6 26       	jnz %d2,8000c33c <_malloc_r+0xa8>
8000c332:	8f 18 1f 20 	sh %d2,%d8,-15
8000c336:	1b 72 07 20 	addi %d2,%d2,119
8000c33a:	3c 0b       	j 8000c350 <_malloc_r+0xbc>
8000c33c:	3b 50 55 30 	mov %d3,1365
8000c340:	3b e0 07 20 	mov %d2,126
8000c344:	7f 3f 06 80 	jge.u %d15,%d3,8000c350 <_malloc_r+0xbc>
8000c348:	8f e8 1e 20 	sh %d2,%d8,-18
8000c34c:	1b c2 07 20 	addi %d2,%d2,124
8000c350:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000c354:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000c358:	7d 2c 1d 00 	jeq.a %a12,%a2,8000c392 <_malloc_r+0xfe>
8000c35c:	19 c4 04 00 	ld.w %d4,[%a12]4
8000c360:	8f 34 c0 41 	andn %d4,%d4,3
8000c364:	5a 84       	sub %d15,%d4,%d8
8000c366:	8b 0f 41 32 	lt %d3,%d15,16
8000c36a:	f6 33       	jnz %d3,8000c370 <_malloc_r+0xdc>
8000c36c:	c2 f2       	add %d2,-1
8000c36e:	3c 12       	j 8000c392 <_malloc_r+0xfe>
8000c370:	0e fe       	jltz %d15,8000c38c <_malloc_r+0xf8>
8000c372:	cc c3       	ld.a %a15,[%a12]12
8000c374:	99 c2 08 00 	ld.a %a2,[%a12]8
8000c378:	ec 23       	st.a [%a2]12,%a15
8000c37a:	e8 22       	st.a [%a15]8,%a2
8000c37c:	01 c4 00 f6 	addsc.a %a15,%a12,%d4,0
8000c380:	b7 10 21 20 	imask %e2,1,0,1
8000c384:	49 f2 44 08 	ldmst [%a15]4,%e2
8000c388:	1d 00 cc 01 	j 8000c720 <_malloc_r+0x48c>
8000c38c:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000c390:	3c e4       	j 8000c358 <_malloc_r+0xc4>
8000c392:	c2 12       	add %d2,1
8000c394:	c8 4c       	ld.a %a12,[%a15]16
8000c396:	91 00 00 37 	movh.a %a3,28672
8000c39a:	d9 33 30 00 	lea %a3,[%a3]48 <70000030 <__malloc_av_+0x8>>
8000c39e:	7d 3c 83 00 	jeq.a %a12,%a3,8000c4a4 <_malloc_r+0x210>
8000c3a2:	4c c1       	ld.w %d15,[%a12]4
8000c3a4:	8f 3f c0 f1 	andn %d15,%d15,3
8000c3a8:	52 83       	sub %d3,%d15,%d8
8000c3aa:	8b 03 41 42 	lt %d4,%d3,16
8000c3ae:	df 04 16 80 	jne %d4,0,8000c3da <_malloc_r+0x146>
8000c3b2:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000c3b6:	8f 18 40 81 	or %d8,%d8,1
8000c3ba:	59 c8 04 00 	st.w [%a12]4,%d8
8000c3be:	e8 52       	st.a [%a15]20,%a2
8000c3c0:	e8 42       	st.a [%a15]16,%a2
8000c3c2:	8f 13 40 f1 	or %d15,%d3,1
8000c3c6:	b5 23 0c 00 	st.a [%a2]12,%a3
8000c3ca:	b5 23 08 00 	st.a [%a2]8,%a3
8000c3ce:	6c 21       	st.w [%a2]4,%d15
8000c3d0:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000c3d4:	74 23       	st.w [%a2],%d3
8000c3d6:	1d 00 a5 01 	j 8000c720 <_malloc_r+0x48c>
8000c3da:	e8 53       	st.a [%a15]20,%a3
8000c3dc:	e8 43       	st.a [%a15]16,%a3
8000c3de:	0e 33       	jltz %d3,8000c3e4 <_malloc_r+0x150>
8000c3e0:	10 cf       	addsc.a %a15,%a12,%d15,0
8000c3e2:	3c cf       	j 8000c380 <_malloc_r+0xec>
8000c3e4:	3b 00 20 30 	mov %d3,512
8000c3e8:	7f 3f 15 80 	jge.u %d15,%d3,8000c412 <_malloc_r+0x17e>
8000c3ec:	06 df       	sh %d15,-3
8000c3ee:	d0 f2       	addsc.a %a2,%a15,%d15,3
8000c3f0:	48 14       	ld.w %d4,[%a15]4
8000c3f2:	99 24 08 00 	ld.a %a4,[%a2]8
8000c3f6:	8f ef 3f 30 	sha %d3,%d15,-2
8000c3fa:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000c3fe:	b5 c4 08 00 	st.a [%a12]8,%a4
8000c402:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
8000c406:	b5 2c 08 00 	st.a [%a2]8,%a12
8000c40a:	68 13       	st.w [%a15]4,%d3
8000c40c:	b5 4c 0c 00 	st.a [%a4]12,%a12
8000c410:	3c 4a       	j 8000c4a4 <_malloc_r+0x210>
8000c412:	8f af 1f 40 	sh %d4,%d15,-6
8000c416:	8f 7f 1f 30 	sh %d3,%d15,-9
8000c41a:	1b 84 03 40 	addi %d4,%d4,56
8000c41e:	bf 53 22 80 	jlt.u %d3,5,8000c462 <_malloc_r+0x1ce>
8000c422:	8b 53 a1 42 	ge.u %d4,%d3,21
8000c426:	f6 44       	jnz %d4,8000c42e <_malloc_r+0x19a>
8000c428:	1b b3 05 40 	addi %d4,%d3,91
8000c42c:	3c 1b       	j 8000c462 <_malloc_r+0x1ce>
8000c42e:	8b 53 a5 42 	ge.u %d4,%d3,85
8000c432:	f6 46       	jnz %d4,8000c43e <_malloc_r+0x1aa>
8000c434:	8f 4f 1f 40 	sh %d4,%d15,-12
8000c438:	1b e4 06 40 	addi %d4,%d4,110
8000c43c:	3c 13       	j 8000c462 <_malloc_r+0x1ce>
8000c43e:	8b 53 b5 42 	ge.u %d4,%d3,341
8000c442:	f6 46       	jnz %d4,8000c44e <_malloc_r+0x1ba>
8000c444:	8f 1f 1f 40 	sh %d4,%d15,-15
8000c448:	1b 74 07 40 	addi %d4,%d4,119
8000c44c:	3c 0b       	j 8000c462 <_malloc_r+0x1ce>
8000c44e:	3b 50 55 50 	mov %d5,1365
8000c452:	3b e0 07 40 	mov %d4,126
8000c456:	7f 53 06 80 	jge.u %d3,%d5,8000c462 <_malloc_r+0x1ce>
8000c45a:	8f ef 1e 40 	sh %d4,%d15,-18
8000c45e:	1b c4 07 40 	addi %d4,%d4,124
8000c462:	01 f4 03 46 	addsc.a %a4,%a15,%d4,3
8000c466:	99 42 08 00 	ld.a %a2,[%a4]8
8000c46a:	7d 42 0d 80 	jne.a %a2,%a4,8000c484 <_malloc_r+0x1f0>
8000c46e:	4c f1       	ld.w %d15,[%a15]4
8000c470:	86 e4       	sha %d4,-2
8000c472:	d7 1f 01 44 	insert %d4,%d15,1,%d4,1
8000c476:	40 24       	mov.aa %a4,%a2
8000c478:	68 14       	st.w [%a15]4,%d4
8000c47a:	3c 0d       	j 8000c494 <_malloc_r+0x200>
8000c47c:	99 22 08 00 	ld.a %a2,[%a2]8
8000c480:	7d 42 08 00 	jeq.a %a2,%a4,8000c490 <_malloc_r+0x1fc>
8000c484:	19 23 04 00 	ld.w %d3,[%a2]4
8000c488:	8f 33 c0 31 	andn %d3,%d3,3
8000c48c:	3f 3f f8 ff 	jlt.u %d15,%d3,8000c47c <_malloc_r+0x1e8>
8000c490:	99 24 0c 00 	ld.a %a4,[%a2]12
8000c494:	b5 c4 0c 00 	st.a [%a12]12,%a4
8000c498:	b5 c2 08 00 	st.a [%a12]8,%a2
8000c49c:	b5 4c 08 00 	st.a [%a4]8,%a12
8000c4a0:	b5 2c 0c 00 	st.a [%a2]12,%a12
8000c4a4:	8f e2 3f 30 	sha %d3,%d2,-2
8000c4a8:	82 1f       	mov %d15,1
8000c4aa:	0f 3f 00 f0 	sh %d15,%d15,%d3
8000c4ae:	48 13       	ld.w %d3,[%a15]4
8000c4b0:	3f f3 73 80 	jlt.u %d3,%d15,8000c596 <_malloc_r+0x302>
8000c4b4:	0f 3f 80 40 	and %d4,%d15,%d3
8000c4b8:	f6 49       	jnz %d4,8000c4ca <_malloc_r+0x236>
8000c4ba:	8f 32 c0 21 	andn %d2,%d2,3
8000c4be:	06 1f       	sh %d15,1
8000c4c0:	0f 3f 80 40 	and %d4,%d15,%d3
8000c4c4:	c2 42       	add %d2,4
8000c4c6:	df 04 fc 7f 	jeq %d4,0,8000c4be <_malloc_r+0x22a>
8000c4ca:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000c4ce:	02 24       	mov %d4,%d2
8000c4d0:	40 24       	mov.aa %a4,%a2
8000c4d2:	99 4c 0c 00 	ld.a %a12,[%a4]12
8000c4d6:	7d 4c 3c 00 	jeq.a %a12,%a4,8000c54e <_malloc_r+0x2ba>
8000c4da:	19 c6 04 00 	ld.w %d6,[%a12]4
8000c4de:	8f 36 c0 61 	andn %d6,%d6,3
8000c4e2:	0b 86 80 30 	sub %d3,%d6,%d8
8000c4e6:	8b 03 41 52 	lt %d5,%d3,16
8000c4ea:	df 05 1d 80 	jne %d5,0,8000c524 <_malloc_r+0x290>
8000c4ee:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000c4f2:	8f 18 40 81 	or %d8,%d8,1
8000c4f6:	59 c8 04 00 	st.w [%a12]4,%d8
8000c4fa:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000c4fe:	09 c5 88 05 	ld.a %a5,[+%a12]8
8000c502:	8f 13 40 f1 	or %d15,%d3,1
8000c506:	b5 54 0c 00 	st.a [%a5]12,%a4
8000c50a:	b5 45 08 00 	st.a [%a4]8,%a5
8000c50e:	e8 52       	st.a [%a15]20,%a2
8000c510:	e8 42       	st.a [%a15]16,%a2
8000c512:	b5 23 0c 00 	st.a [%a2]12,%a3
8000c516:	b5 23 08 00 	st.a [%a2]8,%a3
8000c51a:	6c 21       	st.w [%a2]4,%d15
8000c51c:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000c520:	74 23       	st.w [%a2],%d3
8000c522:	3c 0e       	j 8000c53e <_malloc_r+0x2aa>
8000c524:	bf 03 12 00 	jlt %d3,0,8000c548 <_malloc_r+0x2b4>
8000c528:	01 c6 00 f6 	addsc.a %a15,%a12,%d6,0
8000c52c:	b7 10 21 20 	imask %e2,1,0,1
8000c530:	49 f2 44 08 	ldmst [%a15]4,%e2
8000c534:	cc c3       	ld.a %a15,[%a12]12
8000c536:	09 c2 88 05 	ld.a %a2,[+%a12]8
8000c53a:	ec 23       	st.a [%a2]12,%a15
8000c53c:	e8 22       	st.a [%a15]8,%a2
8000c53e:	40 d4       	mov.aa %a4,%a13
8000c540:	6d 00 f8 00 	call 8000c730 <__malloc_unlock>
8000c544:	1d 00 f3 00 	j 8000c72a <_malloc_r+0x496>
8000c548:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000c54c:	3c c5       	j 8000c4d6 <_malloc_r+0x242>
8000c54e:	c2 14       	add %d4,1
8000c550:	8f 34 00 31 	and %d3,%d4,3
8000c554:	d9 44 08 00 	lea %a4,[%a4]8
8000c558:	df 03 bd ff 	jne %d3,0,8000c4d2 <_malloc_r+0x23e>
8000c55c:	8f 32 00 31 	and %d3,%d2,3
8000c560:	f6 36       	jnz %d3,8000c56c <_malloc_r+0x2d8>
8000c562:	48 12       	ld.w %d2,[%a15]4
8000c564:	0f f2 e0 20 	andn %d2,%d2,%d15
8000c568:	68 12       	st.w [%a15]4,%d2
8000c56a:	3c 07       	j 8000c578 <_malloc_r+0x2e4>
8000c56c:	d9 24 f8 ff 	lea %a4,[%a2]-8
8000c570:	d4 22       	ld.a %a2,[%a2]
8000c572:	c2 f2       	add %d2,-1
8000c574:	7d 42 f4 7f 	jeq.a %a2,%a4,8000c55c <_malloc_r+0x2c8>
8000c578:	06 1f       	sh %d15,1
8000c57a:	48 12       	ld.w %d2,[%a15]4
8000c57c:	8b 0f 20 32 	ne %d3,%d15,0
8000c580:	0b f2 50 32 	and.ge.u %d3,%d2,%d15
8000c584:	76 39       	jz %d3,8000c596 <_malloc_r+0x302>
8000c586:	0f 2f 80 30 	and %d3,%d15,%d2
8000c58a:	f6 34       	jnz %d3,8000c592 <_malloc_r+0x2fe>
8000c58c:	c2 44       	add %d4,4
8000c58e:	06 1f       	sh %d15,1
8000c590:	3c fb       	j 8000c586 <_malloc_r+0x2f2>
8000c592:	02 42       	mov %d2,%d4
8000c594:	3c 9b       	j 8000c4ca <_malloc_r+0x236>
8000c596:	c8 2c       	ld.a %a12,[%a15]8
8000c598:	19 ca 04 00 	ld.w %d10,[%a12]4
8000c59c:	8f 3a c0 a1 	andn %d10,%d10,3
8000c5a0:	5a 8a       	sub %d15,%d10,%d8
8000c5a2:	8b 0f 41 22 	lt %d2,%d15,16
8000c5a6:	0b 8a a0 22 	or.lt.u %d2,%d10,%d8
8000c5aa:	df 02 b1 00 	jeq %d2,0,8000c70c <_malloc_r+0x478>
8000c5ae:	91 00 00 27 	movh.a %a2,28672
8000c5b2:	19 2b 98 d0 	ld.w %d11,[%a2]2904 <70000b58 <__malloc_top_pad>>
8000c5b6:	91 00 00 27 	movh.a %a2,28672
8000c5ba:	42 8b       	add %d11,%d8
8000c5bc:	19 23 20 00 	ld.w %d3,[%a2]32 <70000020 <__malloc_sbrk_base>>
8000c5c0:	1b fb 00 f1 	addi %d15,%d11,4111
8000c5c4:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000c5c8:	1b 0b 01 20 	addi %d2,%d11,16
8000c5cc:	8b f3 3f b2 	ne %d11,%d3,-1
8000c5d0:	2b 2f 40 bb 	sel %d11,%d11,%d15,%d2
8000c5d4:	40 d4       	mov.aa %a4,%a13
8000c5d6:	02 b4       	mov %d4,%d11
8000c5d8:	80 2c       	mov.d %d12,%a2
8000c5da:	6d 00 ac 00 	call 8000c732 <_sbrk_r>
8000c5de:	80 29       	mov.d %d9,%a2
8000c5e0:	df f9 86 00 	jeq %d9,-1,8000c6ec <_malloc_r+0x458>
8000c5e4:	80 c2       	mov.d %d2,%a12
8000c5e6:	80 c3       	mov.d %d3,%a12
8000c5e8:	42 a2       	add %d2,%d10
8000c5ea:	80 f4       	mov.d %d4,%a15
8000c5ec:	0b 29 30 f1 	lt.u %d15,%d9,%d2
8000c5f0:	0b 43 10 f2 	and.ne %d15,%d3,%d4
8000c5f4:	01 fc 10 d4 	ne.a %d13,%a12,%a15
8000c5f8:	ee 7a       	jnz %d15,8000c6ec <_malloc_r+0x458>
8000c5fa:	91 00 00 e7 	movh.a %a14,28672
8000c5fe:	19 e3 a8 c0 	ld.w %d3,[%a14]2856 <70000b28 <__malloc_current_mallinfo>>
8000c602:	42 b3       	add %d3,%d11
8000c604:	59 e3 a8 c0 	st.w [%a14]2856 <70000b28 <__malloc_current_mallinfo>>,%d3
8000c608:	5f 29 0c 80 	jne %d9,%d2,8000c620 <_malloc_r+0x38c>
8000c60c:	b7 09 14 f6 	insert %d15,%d9,0,12,20
8000c610:	ee 08       	jnz %d15,8000c620 <_malloc_r+0x38c>
8000c612:	c8 22       	ld.a %a2,[%a15]8
8000c614:	42 ba       	add %d10,%d11
8000c616:	8f 1a 40 a1 	or %d10,%d10,1
8000c61a:	59 2a 04 00 	st.w [%a2]4,%d10
8000c61e:	3c 55       	j 8000c6c8 <_malloc_r+0x434>
8000c620:	60 c2       	mov.a %a2,%d12
8000c622:	19 2f 20 00 	ld.w %d15,[%a2]32
8000c626:	5e f6       	jne %d15,-1,8000c632 <_malloc_r+0x39e>
8000c628:	91 00 00 27 	movh.a %a2,28672
8000c62c:	59 29 20 00 	st.w [%a2]32 <70000020 <__malloc_sbrk_base>>,%d9
8000c630:	3c 06       	j 8000c63c <_malloc_r+0x3a8>
8000c632:	0b 29 80 20 	sub %d2,%d9,%d2
8000c636:	42 23       	add %d3,%d2
8000c638:	59 e3 a8 c0 	st.w [%a14]2856 <70000b28 <__malloc_current_mallinfo>>,%d3
8000c63c:	8f 79 00 21 	and %d2,%d9,7
8000c640:	82 0f       	mov %d15,0
8000c642:	76 24       	jz %d2,8000c64a <_malloc_r+0x3b6>
8000c644:	8b 82 00 f1 	rsub %d15,%d2,8
8000c648:	42 f9       	add %d9,%d15
8000c64a:	42 9b       	add %d11,%d9
8000c64c:	b7 0b 14 b6 	insert %d11,%d11,0,12,20
8000c650:	1b 0f 00 21 	addi %d2,%d15,4096
8000c654:	5a b2       	sub %d15,%d2,%d11
8000c656:	40 d4       	mov.aa %a4,%a13
8000c658:	02 f4       	mov %d4,%d15
8000c65a:	6d 00 6c 00 	call 8000c732 <_sbrk_r>
8000c65e:	80 22       	mov.d %d2,%a2
8000c660:	df f2 04 80 	jne %d2,-1,8000c668 <_malloc_r+0x3d4>
8000c664:	60 92       	mov.a %a2,%d9
8000c666:	82 0f       	mov %d15,0
8000c668:	80 2b       	mov.d %d11,%a2
8000c66a:	19 e2 a8 c0 	ld.w %d2,[%a14]2856 <70000b28 <__malloc_current_mallinfo>>
8000c66e:	a2 9b       	sub %d11,%d9
8000c670:	42 f2       	add %d2,%d15
8000c672:	60 92       	mov.a %a2,%d9
8000c674:	42 bf       	add %d15,%d11
8000c676:	68 29       	st.w [%a15]8,%d9
8000c678:	8f 1f 40 31 	or %d3,%d15,1
8000c67c:	59 e2 a8 c0 	st.w [%a14]2856 <70000b28 <__malloc_current_mallinfo>>,%d2
8000c680:	59 23 04 00 	st.w [%a2]4 <70000b28 <__malloc_current_mallinfo>>,%d3
8000c684:	df 0d 22 00 	jeq %d13,0,8000c6c8 <_malloc_r+0x434>
8000c688:	8b 0a a1 f2 	ge.u %d15,%d10,16
8000c68c:	ee 05       	jnz %d15,8000c696 <_malloc_r+0x402>
8000c68e:	82 12       	mov %d2,1
8000c690:	59 22 04 00 	st.w [%a2]4,%d2
8000c694:	3c 2c       	j 8000c6ec <_malloc_r+0x458>
8000c696:	1b 4a ff af 	addi %d10,%d10,-12
8000c69a:	8f 7a c0 f1 	andn %d15,%d10,7
8000c69e:	10 c2       	addsc.a %a2,%a12,%d15,0
8000c6a0:	82 52       	mov %d2,5
8000c6a2:	59 22 04 00 	st.w [%a2]4,%d2
8000c6a6:	59 22 08 00 	st.w [%a2]8,%d2
8000c6aa:	19 c2 04 00 	ld.w %d2,[%a12]4
8000c6ae:	8f 12 00 21 	and %d2,%d2,1
8000c6b2:	a6 f2       	or %d2,%d15
8000c6b4:	59 c2 04 00 	st.w [%a12]4,%d2
8000c6b8:	8b 0f 61 f2 	lt.u %d15,%d15,16
8000c6bc:	ee 06       	jnz %d15,8000c6c8 <_malloc_r+0x434>
8000c6be:	40 d4       	mov.aa %a4,%a13
8000c6c0:	d9 c5 08 00 	lea %a5,[%a12]8
8000c6c4:	6d 00 dd 00 	call 8000c87e <_free_r>
8000c6c8:	91 00 00 27 	movh.a %a2,28672
8000c6cc:	19 ef a8 c0 	ld.w %d15,[%a14]2856 <70000b28 <__malloc_current_mallinfo>>
8000c6d0:	19 22 94 d0 	ld.w %d2,[%a2]2900 <70000b54 <__malloc_max_sbrked_mem>>
8000c6d4:	7f f2 04 80 	jge.u %d2,%d15,8000c6dc <_malloc_r+0x448>
8000c6d8:	59 2f 94 d0 	st.w [%a2]2900 <70000b54 <__malloc_max_sbrked_mem>>,%d15
8000c6dc:	91 00 00 27 	movh.a %a2,28672
8000c6e0:	19 22 90 d0 	ld.w %d2,[%a2]2896 <70000b50 <__malloc_max_total_mem>>
8000c6e4:	7f f2 04 80 	jge.u %d2,%d15,8000c6ec <_malloc_r+0x458>
8000c6e8:	59 2f 90 d0 	st.w [%a2]2896 <70000b50 <__malloc_max_total_mem>>,%d15
8000c6ec:	c8 22       	ld.a %a2,[%a15]8
8000c6ee:	19 22 04 00 	ld.w %d2,[%a2]4 <70000b50 <__malloc_max_total_mem>>
8000c6f2:	8f 32 c0 21 	andn %d2,%d2,3
8000c6f6:	5a 82       	sub %d15,%d2,%d8
8000c6f8:	8b 0f 41 32 	lt %d3,%d15,16
8000c6fc:	0b 82 a0 32 	or.lt.u %d3,%d2,%d8
8000c700:	76 36       	jz %d3,8000c70c <_malloc_r+0x478>
8000c702:	40 d4       	mov.aa %a4,%a13
8000c704:	6d 00 16 00 	call 8000c730 <__malloc_unlock>
8000c708:	a0 0c       	mov.a %a12,0
8000c70a:	3c 10       	j 8000c72a <_malloc_r+0x496>
8000c70c:	c8 2c       	ld.a %a12,[%a15]8
8000c70e:	8f 18 40 21 	or %d2,%d8,1
8000c712:	96 01       	or %d15,1
8000c714:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000c718:	59 c2 04 00 	st.w [%a12]4,%d2
8000c71c:	e8 22       	st.a [%a15]8,%a2
8000c71e:	6c 21       	st.w [%a2]4,%d15
8000c720:	40 d4       	mov.aa %a4,%a13
8000c722:	6d 00 07 00 	call 8000c730 <__malloc_unlock>
8000c726:	d9 cc 08 00 	lea %a12,[%a12]8
8000c72a:	40 c2       	mov.aa %a2,%a12
8000c72c:	00 90       	ret 

8000c72e <__malloc_lock>:
8000c72e:	00 90       	ret 

8000c730 <__malloc_unlock>:
8000c730:	00 90       	ret 

8000c732 <_sbrk_r>:
8000c732:	82 0f       	mov %d15,0
8000c734:	91 00 00 c7 	movh.a %a12,28672
8000c738:	59 cf a0 d0 	st.w [%a12]2912 <70000b60 <errno>>,%d15
8000c73c:	40 4f       	mov.aa %a15,%a4
8000c73e:	6d 00 2d 17 	call 8000f598 <sbrk>
8000c742:	80 2f       	mov.d %d15,%a2
8000c744:	5e f5       	jne %d15,-1,8000c74e <_sbrk_r+0x1c>
8000c746:	19 cf a0 d0 	ld.w %d15,[%a12]2912 <70000b60 <errno>>
8000c74a:	6e 02       	jz %d15,8000c74e <_sbrk_r+0x1c>
8000c74c:	68 0f       	st.w [%a15]0,%d15
8000c74e:	00 90       	ret 

8000c750 <strlen>:
8000c750:	80 42       	mov.d %d2,%a4
8000c752:	80 4f       	mov.d %d15,%a4
8000c754:	60 ff       	mov.a %a15,%d15
8000c756:	79 f3 00 00 	ld.b %d3,[%a15]0
8000c75a:	76 33       	jz %d3,8000c760 <strlen+0x10>
8000c75c:	c2 1f       	add %d15,1
8000c75e:	3c fb       	j 8000c754 <strlen+0x4>
8000c760:	52 22       	sub %d2,%d15,%d2
8000c762:	00 90       	ret 

8000c764 <_vsnprintf_r>:
8000c764:	20 68       	sub.a %sp,104
8000c766:	40 4f       	mov.aa %a15,%a4
8000c768:	ce 45       	jgez %d4,8000c772 <_vsnprintf_r+0xe>
8000c76a:	da 8b       	mov %d15,139
8000c76c:	6c 40       	st.w [%a4]0,%d15
8000c76e:	82 f2       	mov %d2,-1
8000c770:	00 90       	ret 
8000c772:	02 4f       	mov %d15,%d4
8000c774:	3b 80 20 20 	mov %d2,520
8000c778:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000c77c:	92 f2       	add %d2,%d15,-1
8000c77e:	ea 02       	cmovn %d2,%d15,0
8000c780:	f4 a5       	st.a [%sp],%a5
8000c782:	b5 a5 10 00 	st.a [%sp]16,%a5
8000c786:	59 a2 08 00 	st.w [%sp]8,%d2
8000c78a:	59 a2 14 00 	st.w [%sp]20,%d2
8000c78e:	40 a5       	mov.aa %a5,%sp
8000c790:	82 f2       	mov %d2,-1
8000c792:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000c796:	6d 00 4b 01 	call 8000ca2c <_svfprintf_r>
8000c79a:	ff f2 05 00 	jge %d2,-1,8000c7a4 <_vsnprintf_r+0x40>
8000c79e:	3b b0 08 30 	mov %d3,139
8000c7a2:	68 03       	st.w [%a15]0,%d3
8000c7a4:	6e 04       	jz %d15,8000c7ac <_vsnprintf_r+0x48>
8000c7a6:	d8 00       	ld.a %a15,[%sp]0
8000c7a8:	82 0f       	mov %d15,0
8000c7aa:	28 0f       	st.b [%a15]0,%d15
8000c7ac:	00 90       	ret 

8000c7ae <vsnprintf>:
8000c7ae:	91 00 00 37 	movh.a %a3,28672
8000c7b2:	40 42       	mov.aa %a2,%a4
8000c7b4:	99 34 70 00 	ld.a %a4,[%a3]1072 <70000430 <_impure_ptr>>
8000c7b8:	40 5f       	mov.aa %a15,%a5
8000c7ba:	40 67       	mov.aa %a7,%a6
8000c7bc:	40 25       	mov.aa %a5,%a2
8000c7be:	40 f6       	mov.aa %a6,%a15
8000c7c0:	1d ff d2 ff 	j 8000c764 <_vsnprintf_r>

8000c7c4 <_malloc_trim_r>:
8000c7c4:	02 4f       	mov %d15,%d4
8000c7c6:	40 4f       	mov.aa %a15,%a4
8000c7c8:	6d ff b3 ff 	call 8000c72e <__malloc_lock>
8000c7cc:	91 00 00 c7 	movh.a %a12,28672
8000c7d0:	d9 cc 28 00 	lea %a12,[%a12]40 <70000028 <__malloc_av_>>
8000c7d4:	99 c2 08 00 	ld.a %a2,[%a12]8 <70000008 <osEE_kcb_var>>
8000c7d8:	3b 00 00 21 	mov %d2,4096
8000c7dc:	19 28 04 00 	ld.w %d8,[%a2]4
8000c7e0:	8f 38 c0 81 	andn %d8,%d8,3
8000c7e4:	5a f8       	sub %d15,%d8,%d15
8000c7e6:	1b ff fe f0 	addi %d15,%d15,4079
8000c7ea:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000c7ee:	1b 0f 00 ff 	addi %d15,%d15,-4096
8000c7f2:	7f 2f 07 00 	jge %d15,%d2,8000c800 <_malloc_trim_r+0x3c>
8000c7f6:	40 f4       	mov.aa %a4,%a15
8000c7f8:	6d ff 9c ff 	call 8000c730 <__malloc_unlock>
8000c7fc:	82 02       	mov %d2,0
8000c7fe:	00 90       	ret 
8000c800:	40 f4       	mov.aa %a4,%a15
8000c802:	82 04       	mov %d4,0
8000c804:	6d ff 97 ff 	call 8000c732 <_sbrk_r>
8000c808:	99 c3 08 00 	ld.a %a3,[%a12]8
8000c80c:	60 84       	mov.a %a4,%d8
8000c80e:	30 43       	add.a %a3,%a4
8000c810:	7d 32 f3 ff 	jne.a %a2,%a3,8000c7f6 <_malloc_trim_r+0x32>
8000c814:	40 f4       	mov.aa %a4,%a15
8000c816:	8b 0f 00 41 	rsub %d4,%d15,0
8000c81a:	6d ff 8c ff 	call 8000c732 <_sbrk_r>
8000c81e:	80 22       	mov.d %d2,%a2
8000c820:	df f2 1c 80 	jne %d2,-1,8000c858 <_malloc_trim_r+0x94>
8000c824:	40 f4       	mov.aa %a4,%a15
8000c826:	82 04       	mov %d4,0
8000c828:	6d ff 85 ff 	call 8000c732 <_sbrk_r>
8000c82c:	99 c3 08 00 	ld.a %a3,[%a12]8
8000c830:	01 32 20 40 	sub.a %a4,%a2,%a3
8000c834:	80 4f       	mov.d %d15,%a4
8000c836:	8b 0f 41 22 	lt %d2,%d15,16
8000c83a:	df 02 de ff 	jne %d2,0,8000c7f6 <_malloc_trim_r+0x32>
8000c83e:	91 00 00 47 	movh.a %a4,28672
8000c842:	99 44 20 00 	ld.a %a4,[%a4]32 <70000020 <__malloc_sbrk_base>>
8000c846:	96 01       	or %d15,1
8000c848:	6c 31       	st.w [%a3]4,%d15
8000c84a:	01 42 20 20 	sub.a %a2,%a2,%a4
8000c84e:	91 00 00 47 	movh.a %a4,28672
8000c852:	b5 42 a8 c0 	st.a [%a4]2856 <70000b28 <__malloc_current_mallinfo>>,%a2
8000c856:	3c d0       	j 8000c7f6 <_malloc_trim_r+0x32>
8000c858:	99 c2 08 00 	ld.a %a2,[%a12]8
8000c85c:	a2 f8       	sub %d8,%d15
8000c85e:	8f 18 40 81 	or %d8,%d8,1
8000c862:	59 28 04 00 	st.w [%a2]4,%d8
8000c866:	91 00 00 27 	movh.a %a2,28672
8000c86a:	19 22 a8 c0 	ld.w %d2,[%a2]2856 <70000b28 <__malloc_current_mallinfo>>
8000c86e:	40 f4       	mov.aa %a4,%a15
8000c870:	5a f2       	sub %d15,%d2,%d15
8000c872:	59 2f a8 c0 	st.w [%a2]2856 <70000b28 <__malloc_current_mallinfo>>,%d15
8000c876:	6d ff 5d ff 	call 8000c730 <__malloc_unlock>
8000c87a:	82 12       	mov %d2,1
8000c87c:	00 90       	ret 

8000c87e <_free_r>:
8000c87e:	40 4d       	mov.aa %a13,%a4
8000c880:	bd 05 d4 00 	jz.a %a5,8000ca28 <_free_r+0x1aa>
8000c884:	40 5c       	mov.aa %a12,%a5
8000c886:	6d ff 54 ff 	call 8000c72e <__malloc_lock>
8000c88a:	19 c4 fc ff 	ld.w %d4,[%a12]-4
8000c88e:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000c892:	8f 14 c0 f1 	andn %d15,%d4,1
8000c896:	91 00 00 27 	movh.a %a2,28672
8000c89a:	10 f3       	addsc.a %a3,%a15,%d15,0
8000c89c:	d9 22 28 00 	lea %a2,[%a2]40 <70000028 <__malloc_av_>>
8000c8a0:	99 24 08 00 	ld.a %a4,[%a2]8 <70000008 <osEE_kcb_var>>
8000c8a4:	19 33 04 00 	ld.w %d3,[%a3]4 <70000008 <osEE_kcb_var>>
8000c8a8:	8f 14 00 41 	and %d4,%d4,1
8000c8ac:	8f 33 c0 31 	andn %d3,%d3,3
8000c8b0:	7d 43 24 80 	jne.a %a3,%a4,8000c8f8 <_free_r+0x7a>
8000c8b4:	42 3f       	add %d15,%d3
8000c8b6:	f6 4d       	jnz %d4,8000c8d0 <_free_r+0x52>
8000c8b8:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000c8bc:	60 23       	mov.a %a3,%d2
8000c8be:	42 2f       	add %d15,%d2
8000c8c0:	01 3f 20 f0 	sub.a %a15,%a15,%a3
8000c8c4:	c8 33       	ld.a %a3,[%a15]12
8000c8c6:	c8 24       	ld.a %a4,[%a15]8
8000c8c8:	b5 43 0c 00 	st.a [%a4]12,%a3
8000c8cc:	b5 34 08 00 	st.a [%a3]8,%a4
8000c8d0:	8f 1f 40 21 	or %d2,%d15,1
8000c8d4:	68 12       	st.w [%a15]4,%d2
8000c8d6:	ec 22       	st.a [%a2]8,%a15
8000c8d8:	91 00 00 f7 	movh.a %a15,28672
8000c8dc:	19 f2 24 00 	ld.w %d2,[%a15]36 <70000024 <__malloc_trim_threshold>>
8000c8e0:	3f 2f 09 80 	jlt.u %d15,%d2,8000c8f2 <_free_r+0x74>
8000c8e4:	91 00 00 f7 	movh.a %a15,28672
8000c8e8:	40 d4       	mov.aa %a4,%a13
8000c8ea:	19 f4 98 d0 	ld.w %d4,[%a15]2904 <70000b58 <__malloc_top_pad>>
8000c8ee:	6d ff 6b ff 	call 8000c7c4 <_malloc_trim_r>
8000c8f2:	40 d4       	mov.aa %a4,%a13
8000c8f4:	1d ff 1e ff 	j 8000c730 <__malloc_unlock>
8000c8f8:	59 33 04 00 	st.w [%a3]4,%d3
8000c8fc:	82 02       	mov %d2,0
8000c8fe:	df 04 16 80 	jne %d4,0,8000c92a <_free_r+0xac>
8000c902:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000c906:	60 24       	mov.a %a4,%d2
8000c908:	42 2f       	add %d15,%d2
8000c90a:	01 4f 20 f0 	sub.a %a15,%a15,%a4
8000c90e:	c8 25       	ld.a %a5,[%a15]8
8000c910:	91 00 00 47 	movh.a %a4,28672
8000c914:	d9 44 30 00 	lea %a4,[%a4]48 <70000030 <__malloc_av_+0x8>>
8000c918:	82 12       	mov %d2,1
8000c91a:	7d 45 08 00 	jeq.a %a5,%a4,8000c92a <_free_r+0xac>
8000c91e:	c8 34       	ld.a %a4,[%a15]12
8000c920:	82 02       	mov %d2,0
8000c922:	b5 54 0c 00 	st.a [%a5]12,%a4
8000c926:	b5 45 08 00 	st.a [%a4]8,%a5
8000c92a:	01 33 00 46 	addsc.a %a4,%a3,%d3,0
8000c92e:	19 44 04 00 	ld.w %d4,[%a4]4
8000c932:	6f 04 18 80 	jnz.t %d4,0,8000c962 <_free_r+0xe4>
8000c936:	42 3f       	add %d15,%d3
8000c938:	99 35 08 00 	ld.a %a5,[%a3]8
8000c93c:	f6 2d       	jnz %d2,8000c956 <_free_r+0xd8>
8000c93e:	91 00 00 47 	movh.a %a4,28672
8000c942:	d9 44 30 00 	lea %a4,[%a4]48 <70000030 <__malloc_av_+0x8>>
8000c946:	7d 45 08 80 	jne.a %a5,%a4,8000c956 <_free_r+0xd8>
8000c94a:	ec 25       	st.a [%a2]20,%a15
8000c94c:	ec 24       	st.a [%a2]16,%a15
8000c94e:	e8 35       	st.a [%a15]12,%a5
8000c950:	e8 25       	st.a [%a15]8,%a5
8000c952:	82 12       	mov %d2,1
8000c954:	3c 07       	j 8000c962 <_free_r+0xe4>
8000c956:	99 33 0c 00 	ld.a %a3,[%a3]12
8000c95a:	b5 53 0c 00 	st.a [%a5]12,%a3
8000c95e:	b5 35 08 00 	st.a [%a3]8,%a5
8000c962:	8f 1f 40 31 	or %d3,%d15,1
8000c966:	10 f3       	addsc.a %a3,%a15,%d15,0
8000c968:	68 13       	st.w [%a15]4,%d3
8000c96a:	6c 30       	st.w [%a3]0,%d15
8000c96c:	df 02 c3 ff 	jne %d2,0,8000c8f2 <_free_r+0x74>
8000c970:	3b 00 20 20 	mov %d2,512
8000c974:	7f 2f 12 80 	jge.u %d15,%d2,8000c998 <_free_r+0x11a>
8000c978:	19 23 04 00 	ld.w %d3,[%a2]4
8000c97c:	06 df       	sh %d15,-3
8000c97e:	8f ef 3f 20 	sha %d2,%d15,-2
8000c982:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000c986:	59 22 04 00 	st.w [%a2]4,%d2
8000c98a:	d0 22       	addsc.a %a2,%a2,%d15,3
8000c98c:	99 23 08 00 	ld.a %a3,[%a2]8
8000c990:	e8 32       	st.a [%a15]12,%a2
8000c992:	e8 23       	st.a [%a15]8,%a3
8000c994:	ec 22       	st.a [%a2]8,%a15
8000c996:	3c 46       	j 8000ca22 <_free_r+0x1a4>
8000c998:	8f af 1f 30 	sh %d3,%d15,-6
8000c99c:	8f 7f 1f 20 	sh %d2,%d15,-9
8000c9a0:	1b 83 03 30 	addi %d3,%d3,56
8000c9a4:	bf 52 22 80 	jlt.u %d2,5,8000c9e8 <_free_r+0x16a>
8000c9a8:	8b 52 a1 32 	ge.u %d3,%d2,21
8000c9ac:	f6 34       	jnz %d3,8000c9b4 <_free_r+0x136>
8000c9ae:	1b b2 05 30 	addi %d3,%d2,91
8000c9b2:	3c 1b       	j 8000c9e8 <_free_r+0x16a>
8000c9b4:	8b 52 a5 32 	ge.u %d3,%d2,85
8000c9b8:	f6 36       	jnz %d3,8000c9c4 <_free_r+0x146>
8000c9ba:	8f 4f 1f 30 	sh %d3,%d15,-12
8000c9be:	1b e3 06 30 	addi %d3,%d3,110
8000c9c2:	3c 13       	j 8000c9e8 <_free_r+0x16a>
8000c9c4:	8b 52 b5 32 	ge.u %d3,%d2,341
8000c9c8:	f6 36       	jnz %d3,8000c9d4 <_free_r+0x156>
8000c9ca:	8f 1f 1f 30 	sh %d3,%d15,-15
8000c9ce:	1b 73 07 30 	addi %d3,%d3,119
8000c9d2:	3c 0b       	j 8000c9e8 <_free_r+0x16a>
8000c9d4:	3b 50 55 40 	mov %d4,1365
8000c9d8:	3b e0 07 30 	mov %d3,126
8000c9dc:	7f 42 06 80 	jge.u %d2,%d4,8000c9e8 <_free_r+0x16a>
8000c9e0:	8f ef 1e 30 	sh %d3,%d15,-18
8000c9e4:	1b c3 07 30 	addi %d3,%d3,124
8000c9e8:	01 23 03 66 	addsc.a %a6,%a2,%d3,3
8000c9ec:	99 65 08 00 	ld.a %a5,[%a6]8
8000c9f0:	40 53       	mov.aa %a3,%a5
8000c9f2:	7d 65 0d 80 	jne.a %a5,%a6,8000ca0c <_free_r+0x18e>
8000c9f6:	4c 21       	ld.w %d15,[%a2]4
8000c9f8:	86 e3       	sha %d3,-2
8000c9fa:	d7 1f 01 33 	insert %d3,%d15,1,%d3,1
8000c9fe:	59 23 04 00 	st.w [%a2]4,%d3
8000ca02:	3c 0d       	j 8000ca1c <_free_r+0x19e>
8000ca04:	99 33 08 00 	ld.a %a3,[%a3]8
8000ca08:	7d 63 08 00 	jeq.a %a3,%a6,8000ca18 <_free_r+0x19a>
8000ca0c:	19 32 04 00 	ld.w %d2,[%a3]4
8000ca10:	8f 32 c0 21 	andn %d2,%d2,3
8000ca14:	3f 2f f8 ff 	jlt.u %d15,%d2,8000ca04 <_free_r+0x186>
8000ca18:	99 35 0c 00 	ld.a %a5,[%a3]12
8000ca1c:	e8 35       	st.a [%a15]12,%a5
8000ca1e:	e8 23       	st.a [%a15]8,%a3
8000ca20:	ec 52       	st.a [%a5]8,%a15
8000ca22:	ec 33       	st.a [%a3]12,%a15
8000ca24:	1d ff 67 ff 	j 8000c8f2 <_free_r+0x74>
8000ca28:	00 90       	ret 
	...

8000ca2c <_svfprintf_r>:
8000ca2c:	20 d0       	sub.a %sp,208
8000ca2e:	80 5b       	mov.d %d11,%a5
8000ca30:	80 4c       	mov.d %d12,%a4
8000ca32:	b5 a6 18 00 	st.a [%sp]24,%a6
8000ca36:	40 7f       	mov.aa %a15,%a7
8000ca38:	6d 00 c4 0f 	call 8000e9c0 <_localeconv_r>
8000ca3c:	d4 22       	ld.a %a2,[%a2]
8000ca3e:	40 24       	mov.aa %a4,%a2
8000ca40:	b5 a2 34 00 	st.a [%sp]52,%a2
8000ca44:	6d ff 86 fe 	call 8000c750 <strlen>
8000ca48:	60 b2       	mov.a %a2,%d11
8000ca4a:	59 a2 20 00 	st.w [%sp]32,%d2
8000ca4e:	8c 26       	ld.h %d15,[%a2]12
8000ca50:	6f 7f 16 00 	jz.t %d15,7,8000ca7c <_svfprintf_r+0x50>
8000ca54:	4c 24       	ld.w %d15,[%a2]16
8000ca56:	ee 13       	jnz %d15,8000ca7c <_svfprintf_r+0x50>
8000ca58:	60 c4       	mov.a %a4,%d12
8000ca5a:	3b 00 04 40 	mov %d4,64
8000ca5e:	6d ff 1b fc 	call 8000c294 <_malloc_r>
8000ca62:	60 b3       	mov.a %a3,%d11
8000ca64:	f4 32       	st.a [%a3],%a2
8000ca66:	b5 32 10 00 	st.a [%a3]16,%a2
8000ca6a:	7c 26       	jnz.a %a2,8000ca76 <_svfprintf_r+0x4a>
8000ca6c:	60 cf       	mov.a %a15,%d12
8000ca6e:	da 0c       	mov %d15,12
8000ca70:	68 0f       	st.w [%a15]0,%d15
8000ca72:	82 f2       	mov %d2,-1
8000ca74:	00 90       	ret 
8000ca76:	60 b2       	mov.a %a2,%d11
8000ca78:	da 40       	mov %d15,64
8000ca7a:	6c 25       	st.w [%a2]20,%d15
8000ca7c:	82 0f       	mov %d15,0
8000ca7e:	d9 a2 10 20 	lea %a2,[%sp]144
8000ca82:	a0 03       	mov.a %a3,0
8000ca84:	b5 a2 1c 10 	st.a [%sp]92,%a2
8000ca88:	78 19       	st.w [%sp]100,%d15
8000ca8a:	78 18       	st.w [%sp]96,%d15
8000ca8c:	78 05       	st.w [%sp]20,%d15
8000ca8e:	78 0b       	st.w [%sp]44,%d15
8000ca90:	78 0c       	st.w [%sp]48,%d15
8000ca92:	b5 a3 3c 00 	st.a [%sp]60,%a3
8000ca96:	78 0e       	st.w [%sp]56,%d15
8000ca98:	78 0a       	st.w [%sp]40,%d15
8000ca9a:	40 2e       	mov.aa %a14,%a2
8000ca9c:	99 ac 18 00 	ld.a %a12,[%sp]24
8000caa0:	79 cf 00 00 	ld.b %d15,[%a12]0
8000caa4:	8b 0f 20 32 	ne %d3,%d15,0
8000caa8:	8b 5f 22 34 	and.ne %d3,%d15,37
8000caac:	76 33       	jz %d3,8000cab2 <_svfprintf_r+0x86>
8000caae:	b0 1c       	add.a %a12,1
8000cab0:	3c f8       	j 8000caa0 <_svfprintf_r+0x74>
8000cab2:	99 a3 18 00 	ld.a %a3,[%sp]24
8000cab6:	01 3c 20 30 	sub.a %a3,%a12,%a3
8000caba:	80 3f       	mov.d %d15,%a3
8000cabc:	6e 23       	jz %d15,8000cb02 <_svfprintf_r+0xd6>
8000cabe:	19 a3 24 10 	ld.w %d3,[%sp]100
8000cac2:	99 a3 18 00 	ld.a %a3,[%sp]24
8000cac6:	42 f3       	add %d3,%d15
8000cac8:	59 a3 24 10 	st.w [%sp]100,%d3
8000cacc:	19 a3 20 10 	ld.w %d3,[%sp]96
8000cad0:	f4 e3       	st.a [%a14],%a3
8000cad2:	c2 13       	add %d3,1
8000cad4:	6c e1       	st.w [%a14]4,%d15
8000cad6:	59 a3 20 10 	st.w [%sp]96,%d3
8000cada:	8b 83 80 32 	ge %d3,%d3,8
8000cade:	d9 ee 08 00 	lea %a14,[%a14]8
8000cae2:	76 3b       	jz %d3,8000caf8 <_svfprintf_r+0xcc>
8000cae4:	60 c4       	mov.a %a4,%d12
8000cae6:	60 b5       	mov.a %a5,%d11
8000cae8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000caec:	6d 00 7d 12 	call 8000efe6 <__ssprint_r>
8000caf0:	df 02 69 88 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000caf4:	d9 ae 10 20 	lea %a14,[%sp]144
8000caf8:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cafc:	42 f2       	add %d2,%d15
8000cafe:	59 a2 28 00 	st.w [%sp]40,%d2
8000cb02:	79 cf 00 00 	ld.b %d15,[%a12]0
8000cb06:	df 0f 56 08 	jeq %d15,0,8000dbb2 <_svfprintf_r+0x1186>
8000cb0a:	82 0f       	mov %d15,0
8000cb0c:	82 02       	mov %d2,0
8000cb0e:	e9 af 01 10 	st.b [%sp]65,%d15
8000cb12:	d9 c2 01 00 	lea %a2,[%a12]1
8000cb16:	82 0f       	mov %d15,0
8000cb18:	82 fe       	mov %d14,-1
8000cb1a:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cb1e:	82 0a       	mov %d10,0
8000cb20:	79 22 00 00 	ld.b %d2,[%a2]0
8000cb24:	d9 23 01 00 	lea %a3,[%a2]1
8000cb28:	b5 a3 18 00 	st.a [%sp]24,%a3
8000cb2c:	59 a2 10 00 	st.w [%sp]16,%d2
8000cb30:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cb34:	1b 02 fe 3f 	addi %d3,%d2,-32
8000cb38:	8b 93 a5 42 	ge.u %d4,%d3,89
8000cb3c:	df 04 19 84 	jne %d4,0,8000d36e <_svfprintf_r+0x942>
8000cb40:	91 10 00 28 	movh.a %a2,32769
8000cb44:	d9 22 90 dc 	lea %a2,[%a2]-13488 <8000cb50 <_svfprintf_r+0x124>>
8000cb48:	01 23 02 76 	addsc.a %a7,%a2,%d3,2
8000cb4c:	dc 07       	ji %a7
8000cb4e:	00 00       	nop 
8000cb50:	1d 00 c3 00 	j 8000ccd6 <_svfprintf_r+0x2aa>
8000cb54:	1d 00 0d 04 	j 8000d36e <_svfprintf_r+0x942>
8000cb58:	1d 00 0b 04 	j 8000d36e <_svfprintf_r+0x942>
8000cb5c:	1d 00 c0 00 	j 8000ccdc <_svfprintf_r+0x2b0>
8000cb60:	1d 00 07 04 	j 8000d36e <_svfprintf_r+0x942>
8000cb64:	1d 00 05 04 	j 8000d36e <_svfprintf_r+0x942>
8000cb68:	1d 00 03 04 	j 8000d36e <_svfprintf_r+0x942>
8000cb6c:	1d 00 01 04 	j 8000d36e <_svfprintf_r+0x942>
8000cb70:	1d 00 ff 03 	j 8000d36e <_svfprintf_r+0x942>
8000cb74:	1d 00 fd 03 	j 8000d36e <_svfprintf_r+0x942>
8000cb78:	1d 00 b5 00 	j 8000cce2 <_svfprintf_r+0x2b6>
8000cb7c:	1d 00 9c 00 	j 8000ccb4 <_svfprintf_r+0x288>
8000cb80:	1d 00 f7 03 	j 8000d36e <_svfprintf_r+0x942>
8000cb84:	1d 00 b8 00 	j 8000ccf4 <_svfprintf_r+0x2c8>
8000cb88:	1d 00 b9 00 	j 8000ccfa <_svfprintf_r+0x2ce>
8000cb8c:	1d 00 f1 03 	j 8000d36e <_svfprintf_r+0x942>
8000cb90:	1d 00 de 00 	j 8000cd4c <_svfprintf_r+0x320>
8000cb94:	1d 00 df 00 	j 8000cd52 <_svfprintf_r+0x326>
8000cb98:	1d 00 dd 00 	j 8000cd52 <_svfprintf_r+0x326>
8000cb9c:	1d 00 db 00 	j 8000cd52 <_svfprintf_r+0x326>
8000cba0:	1d 00 d9 00 	j 8000cd52 <_svfprintf_r+0x326>
8000cba4:	1d 00 d7 00 	j 8000cd52 <_svfprintf_r+0x326>
8000cba8:	1d 00 d5 00 	j 8000cd52 <_svfprintf_r+0x326>
8000cbac:	1d 00 d3 00 	j 8000cd52 <_svfprintf_r+0x326>
8000cbb0:	1d 00 d1 00 	j 8000cd52 <_svfprintf_r+0x326>
8000cbb4:	1d 00 cf 00 	j 8000cd52 <_svfprintf_r+0x326>
8000cbb8:	1d 00 db 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbbc:	1d 00 d9 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbc0:	1d 00 d7 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbc4:	1d 00 d5 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbc8:	1d 00 d3 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbcc:	1d 00 d1 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbd0:	1d 00 cf 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbd4:	1d 00 cd 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbd8:	1d 00 cb 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbdc:	1d 00 c9 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbe0:	1d 00 f9 00 	j 8000cdd2 <_svfprintf_r+0x3a6>
8000cbe4:	1d 00 21 01 	j 8000ce26 <_svfprintf_r+0x3fa>
8000cbe8:	1d 00 c3 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbec:	1d 00 1d 01 	j 8000ce26 <_svfprintf_r+0x3fa>
8000cbf0:	1d 00 bf 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbf4:	1d 00 bd 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbf8:	1d 00 bb 03 	j 8000d36e <_svfprintf_r+0x942>
8000cbfc:	1d 00 b9 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc00:	1d 00 c6 00 	j 8000cd8c <_svfprintf_r+0x360>
8000cc04:	1d 00 b5 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc08:	1d 00 b3 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc0c:	1d 00 92 02 	j 8000d130 <_svfprintf_r+0x704>
8000cc10:	1d 00 af 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc14:	1d 00 ad 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc18:	1d 00 ab 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc1c:	1d 00 a9 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc20:	1d 00 a7 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc24:	1d 00 d0 02 	j 8000d1c4 <_svfprintf_r+0x798>
8000cc28:	1d 00 a3 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc2c:	1d 00 a1 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc30:	1d 00 4b 00 	j 8000ccc6 <_svfprintf_r+0x29a>
8000cc34:	1d 00 9d 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc38:	1d 00 9b 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc3c:	1d 00 99 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc40:	1d 00 97 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc44:	1d 00 95 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc48:	1d 00 93 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc4c:	1d 00 91 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc50:	1d 00 8f 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc54:	1d 00 8d 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc58:	1d 00 8b 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc5c:	1d 00 b0 00 	j 8000cdbc <_svfprintf_r+0x390>
8000cc60:	1d 00 2f 00 	j 8000ccbe <_svfprintf_r+0x292>
8000cc64:	1d 00 e1 00 	j 8000ce26 <_svfprintf_r+0x3fa>
8000cc68:	1d 00 df 00 	j 8000ce26 <_svfprintf_r+0x3fa>
8000cc6c:	1d 00 dd 00 	j 8000ce26 <_svfprintf_r+0x3fa>
8000cc70:	1d 00 91 00 	j 8000cd92 <_svfprintf_r+0x366>
8000cc74:	1d 00 25 00 	j 8000ccbe <_svfprintf_r+0x292>
8000cc78:	1d 00 7b 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc7c:	1d 00 79 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc80:	1d 00 8c 00 	j 8000cd98 <_svfprintf_r+0x36c>
8000cc84:	1d 00 75 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc88:	1d 00 39 02 	j 8000d0fa <_svfprintf_r+0x6ce>
8000cc8c:	1d 00 54 02 	j 8000d134 <_svfprintf_r+0x708>
8000cc90:	1d 00 66 02 	j 8000d15c <_svfprintf_r+0x730>
8000cc94:	1d 00 90 00 	j 8000cdb4 <_svfprintf_r+0x388>
8000cc98:	1d 00 6b 03 	j 8000d36e <_svfprintf_r+0x942>
8000cc9c:	1d 00 77 02 	j 8000d18a <_svfprintf_r+0x75e>
8000cca0:	1d 00 67 03 	j 8000d36e <_svfprintf_r+0x942>
8000cca4:	1d 00 92 02 	j 8000d1c8 <_svfprintf_r+0x79c>
8000cca8:	1d 00 63 03 	j 8000d36e <_svfprintf_r+0x942>
8000ccac:	1d 00 61 03 	j 8000d36e <_svfprintf_r+0x942>
8000ccb0:	1d 00 a0 02 	j 8000d1f0 <_svfprintf_r+0x7c4>
8000ccb4:	da 2b       	mov %d15,43
8000ccb6:	99 a2 18 00 	ld.a %a2,[%sp]24
8000ccba:	1d ff 33 ff 	j 8000cb20 <_svfprintf_r+0xf4>
8000ccbe:	e9 af 01 10 	st.b [%sp]65,%d15
8000ccc2:	1d 00 8c 00 	j 8000cdda <_svfprintf_r+0x3ae>
8000ccc6:	e9 af 01 10 	st.b [%sp]65,%d15
8000ccca:	7b 00 00 f8 	movh %d15,32768
8000ccce:	1b 4f f2 f0 	addi %d15,%d15,3876
8000ccd2:	1d 00 95 02 	j 8000d1fc <_svfprintf_r+0x7d0>
8000ccd6:	ab 0f 82 ff 	sel %d15,%d15,%d15,32
8000ccda:	3c ee       	j 8000ccb6 <_svfprintf_r+0x28a>
8000ccdc:	8f 1a 40 a1 	or %d10,%d10,1
8000cce0:	3c eb       	j 8000ccb6 <_svfprintf_r+0x28a>
8000cce2:	48 02       	ld.w %d2,[%a15]0
8000cce4:	b0 4f       	add.a %a15,4
8000cce6:	59 a2 1c 00 	st.w [%sp]28,%d2
8000ccea:	ff 02 e6 7f 	jge %d2,0,8000ccb6 <_svfprintf_r+0x28a>
8000ccee:	32 52       	rsub %d2
8000ccf0:	59 a2 1c 00 	st.w [%sp]28,%d2
8000ccf4:	8f 4a 40 a1 	or %d10,%d10,4
8000ccf8:	3c df       	j 8000ccb6 <_svfprintf_r+0x28a>
8000ccfa:	99 a3 18 00 	ld.a %a3,[%sp]24
8000ccfe:	99 a2 18 00 	ld.a %a2,[%sp]24
8000cd02:	79 32 00 00 	ld.b %d2,[%a3]0
8000cd06:	b0 12       	add.a %a2,1
8000cd08:	59 a2 10 00 	st.w [%sp]16,%d2
8000cd0c:	8b a2 02 32 	eq %d3,%d2,42
8000cd10:	f6 33       	jnz %d3,8000cd16 <_svfprintf_r+0x2ea>
8000cd12:	82 05       	mov %d5,0
8000cd14:	3c 08       	j 8000cd24 <_svfprintf_r+0x2f8>
8000cd16:	48 0e       	ld.w %d14,[%a15]0
8000cd18:	b5 a2 18 00 	st.a [%sp]24,%a2
8000cd1c:	b0 4f       	add.a %a15,4
8000cd1e:	8b fe 5f e3 	max %d14,%d14,-1
8000cd22:	3c ca       	j 8000ccb6 <_svfprintf_r+0x28a>
8000cd24:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cd28:	1b 02 fd 3f 	addi %d3,%d2,-48
8000cd2c:	ff a3 0a 80 	jge.u %d3,10,8000cd40 <_svfprintf_r+0x314>
8000cd30:	79 22 00 00 	ld.b %d2,[%a2]0
8000cd34:	13 a5 20 53 	madd %d5,%d3,%d5,10
8000cd38:	59 a2 10 00 	st.w [%sp]16,%d2
8000cd3c:	b0 12       	add.a %a2,1
8000cd3e:	3c f3       	j 8000cd24 <_svfprintf_r+0x2f8>
8000cd40:	8b f5 5f e3 	max %d14,%d5,-1
8000cd44:	b5 a2 18 00 	st.a [%sp]24,%a2
8000cd48:	1d ff f4 fe 	j 8000cb30 <_svfprintf_r+0x104>
8000cd4c:	8f 0a 48 a1 	or %d10,%d10,128
8000cd50:	3c b3       	j 8000ccb6 <_svfprintf_r+0x28a>
8000cd52:	82 02       	mov %d2,0
8000cd54:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cd58:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cd5c:	99 a3 18 00 	ld.a %a3,[%sp]24
8000cd60:	1b 02 fd 4f 	addi %d4,%d2,-48
8000cd64:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cd68:	99 a2 18 00 	ld.a %a2,[%sp]24
8000cd6c:	13 a2 20 24 	madd %d2,%d4,%d2,10
8000cd70:	b0 12       	add.a %a2,1
8000cd72:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cd76:	79 32 00 00 	ld.b %d2,[%a3]0
8000cd7a:	b5 a2 18 00 	st.a [%sp]24,%a2
8000cd7e:	59 a2 10 00 	st.w [%sp]16,%d2
8000cd82:	1b 02 fd 4f 	addi %d4,%d2,-48
8000cd86:	bf a4 e9 ff 	jlt.u %d4,10,8000cd58 <_svfprintf_r+0x32c>
8000cd8a:	3c dd       	j 8000cd44 <_svfprintf_r+0x318>
8000cd8c:	8f 8a 40 a1 	or %d10,%d10,8
8000cd90:	3c 93       	j 8000ccb6 <_svfprintf_r+0x28a>
8000cd92:	8f 0a 44 a1 	or %d10,%d10,64
8000cd96:	3c 90       	j 8000ccb6 <_svfprintf_r+0x28a>
8000cd98:	99 a3 18 00 	ld.a %a3,[%sp]24
8000cd9c:	79 33 00 00 	ld.b %d3,[%a3]0
8000cda0:	8b c3 26 32 	ne %d3,%d3,108
8000cda4:	f6 35       	jnz %d3,8000cdae <_svfprintf_r+0x382>
8000cda6:	b0 13       	add.a %a3,1
8000cda8:	b5 a3 18 00 	st.a [%sp]24,%a3
8000cdac:	3c 04       	j 8000cdb4 <_svfprintf_r+0x388>
8000cdae:	8f 0a 41 a1 	or %d10,%d10,16
8000cdb2:	3c 82       	j 8000ccb6 <_svfprintf_r+0x28a>
8000cdb4:	8f 0a 42 a1 	or %d10,%d10,32
8000cdb8:	1d ff 7f ff 	j 8000ccb6 <_svfprintf_r+0x28a>
8000cdbc:	48 03       	ld.w %d3,[%a15]0
8000cdbe:	d9 fc 04 00 	lea %a12,[%a15]4
8000cdc2:	e9 a3 28 10 	st.b [%sp]104,%d3
8000cdc6:	82 03       	mov %d3,0
8000cdc8:	e9 a3 01 10 	st.b [%sp]65,%d3
8000cdcc:	60 ad       	mov.a %a13,%d10
8000cdce:	1d 00 dc 02 	j 8000d386 <_svfprintf_r+0x95a>
8000cdd2:	e9 af 01 10 	st.b [%sp]65,%d15
8000cdd6:	8f 0a 41 a1 	or %d10,%d10,16
8000cdda:	60 ad       	mov.a %a13,%d10
8000cddc:	6f 5a 07 00 	jz.t %d10,5,8000cdea <_svfprintf_r+0x3be>
8000cde0:	d9 fc 08 00 	lea %a12,[%a15]8
8000cde4:	09 f8 40 09 	ld.d %e8,[%a15]
8000cde8:	3c 12       	j 8000ce0c <_svfprintf_r+0x3e0>
8000cdea:	d9 f2 04 00 	lea %a2,[%a15]4
8000cdee:	6f 4a 05 00 	jz.t %d10,4,8000cdf8 <_svfprintf_r+0x3cc>
8000cdf2:	40 2c       	mov.aa %a12,%a2
8000cdf4:	48 08       	ld.w %d8,[%a15]0
8000cdf6:	3c 09       	j 8000ce08 <_svfprintf_r+0x3dc>
8000cdf8:	48 03       	ld.w %d3,[%a15]0
8000cdfa:	40 2c       	mov.aa %a12,%a2
8000cdfc:	0b 30 00 88 	mov %e8,%d3
8000ce00:	6f 6a 06 00 	jz.t %d10,6,8000ce0c <_svfprintf_r+0x3e0>
8000ce04:	37 03 50 80 	extr %d8,%d3,0,16
8000ce08:	0b 80 00 88 	mov %e8,%d8
8000ce0c:	82 13       	mov %d3,1
8000ce0e:	ff 09 1d 02 	jge %d9,0,8000d248 <_svfprintf_r+0x81c>
8000ce12:	32 59       	rsub %d9
8000ce14:	32 58       	rsub %d8
8000ce16:	3b d0 02 70 	mov %d7,45
8000ce1a:	ab f9 1f 98 	cadd %d9,%d8,%d9,-1
8000ce1e:	e9 a7 01 10 	st.b [%sp]65,%d7
8000ce22:	1d 00 13 02 	j 8000d248 <_svfprintf_r+0x81c>
8000ce26:	e9 af 01 10 	st.b [%sp]65,%d15
8000ce2a:	4c f0       	ld.w %d15,[%a15]0
8000ce2c:	d9 fc 08 00 	lea %a12,[%a15]8
8000ce30:	78 0b       	st.w [%sp]44,%d15
8000ce32:	4c f1       	ld.w %d15,[%a15]4
8000ce34:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000ce38:	78 0c       	st.w [%sp]48,%d15
8000ce3a:	19 a5 30 00 	ld.w %d5,[%sp]48
8000ce3e:	6d 00 b3 10 	call 8000efa4 <__fpclassifyd>
8000ce42:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000ce46:	19 a5 30 00 	ld.w %d5,[%sp]48
8000ce4a:	df 12 18 80 	jne %d2,1,8000ce7a <_svfprintf_r+0x44e>
8000ce4e:	d2 06       	mov %e6,0
8000ce50:	6d 00 50 14 	call 8000f6f0 <__ltdf2>
8000ce54:	ce 25       	jgez %d2,8000ce5e <_svfprintf_r+0x432>
8000ce56:	3b d0 02 30 	mov %d3,45
8000ce5a:	e9 a3 01 10 	st.b [%sp]65,%d3
8000ce5e:	58 04       	ld.w %d15,[%sp]16
8000ce60:	7b 00 00 78 	movh %d7,32768
8000ce64:	8b 8f 84 32 	ge %d3,%d15,72
8000ce68:	1b 87 f1 d0 	addi %d13,%d7,3864
8000ce6c:	df 03 17 80 	jne %d3,0,8000ce9a <_svfprintf_r+0x46e>
8000ce70:	7b 00 00 78 	movh %d7,32768
8000ce74:	1b 47 f1 d0 	addi %d13,%d7,3860
8000ce78:	3c 11       	j 8000ce9a <_svfprintf_r+0x46e>
8000ce7a:	6d 00 95 10 	call 8000efa4 <__fpclassifyd>
8000ce7e:	58 04       	ld.w %d15,[%sp]16
8000ce80:	df 02 13 80 	jne %d2,0,8000cea6 <_svfprintf_r+0x47a>
8000ce84:	7b 00 00 78 	movh %d7,32768
8000ce88:	8b 8f 84 32 	ge %d3,%d15,72
8000ce8c:	1b 07 f2 d0 	addi %d13,%d7,3872
8000ce90:	f6 35       	jnz %d3,8000ce9a <_svfprintf_r+0x46e>
8000ce92:	7b 00 00 78 	movh %d7,32768
8000ce96:	1b c7 f1 d0 	addi %d13,%d7,3868
8000ce9a:	8f 0a c8 a1 	andn %d10,%d10,128
8000ce9e:	60 ad       	mov.a %a13,%d10
8000cea0:	82 39       	mov %d9,3
8000cea2:	1d 00 78 02 	j 8000d392 <_svfprintf_r+0x966>
8000cea6:	8f 0f c2 f1 	andn %d15,%d15,32
8000ceaa:	78 01       	st.w [%sp]4,%d15
8000ceac:	df fe 09 00 	jeq %d14,-1,8000cebe <_svfprintf_r+0x492>
8000ceb0:	8b 0e 00 72 	eq %d7,%d14,0
8000ceb4:	8b 7f 04 74 	and.eq %d7,%d15,71
8000ceb8:	ab 1e a0 e7 	seln %d14,%d7,%d14,1
8000cebc:	3c 02       	j 8000cec0 <_svfprintf_r+0x494>
8000cebe:	82 6e       	mov %d14,6
8000cec0:	19 a3 30 00 	ld.w %d3,[%sp]48
8000cec4:	8f 0a 50 21 	or %d2,%d10,256
8000cec8:	60 2d       	mov.a %a13,%d2
8000ceca:	d8 0b       	ld.a %a15,[%sp]44
8000cecc:	82 0f       	mov %d15,0
8000cece:	ce 34       	jgez %d3,8000ced6 <_svfprintf_r+0x4aa>
8000ced0:	9b 03 00 38 	addih %d3,%d3,32768
8000ced4:	da 2d       	mov %d15,45
8000ced6:	78 09       	st.w [%sp]36,%d15
8000ced8:	58 01       	ld.w %d15,[%sp]4
8000ceda:	02 e9       	mov %d9,%d14
8000cedc:	8b 6f 04 22 	eq %d2,%d15,70
8000cee0:	82 36       	mov %d6,3
8000cee2:	f6 28       	jnz %d2,8000cef2 <_svfprintf_r+0x4c6>
8000cee4:	8b 5f 24 12 	ne %d1,%d15,69
8000cee8:	1b 1e 00 50 	addi %d5,%d14,1
8000ceec:	82 26       	mov %d6,2
8000ceee:	2b e5 50 91 	seln %d9,%d1,%d5,%d14
8000cef2:	60 c4       	mov.a %a4,%d12
8000cef4:	80 f4       	mov.d %d4,%a15
8000cef6:	02 35       	mov %d5,%d3
8000cef8:	02 97       	mov %d7,%d9
8000cefa:	d9 a5 04 10 	lea %a5,[%sp]68
8000cefe:	d9 a6 08 10 	lea %a6,[%sp]72
8000cf02:	d9 a7 14 10 	lea %a7,[%sp]84
8000cf06:	59 a2 0c 00 	st.w [%sp]12,%d2
8000cf0a:	59 a3 08 00 	st.w [%sp]8,%d3
8000cf0e:	6d 00 ef 06 	call 8000dcec <_dtoa_r>
8000cf12:	58 01       	ld.w %d15,[%sp]4
8000cf14:	80 2d       	mov.d %d13,%a2
8000cf16:	8b 7f 24 12 	ne %d1,%d15,71
8000cf1a:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000cf1e:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cf22:	df 01 11 80 	jne %d1,0,8000cf44 <_svfprintf_r+0x518>
8000cf26:	6f 0a 0f 80 	jnz.t %d10,0,8000cf44 <_svfprintf_r+0x518>
8000cf2a:	19 a2 14 10 	ld.w %d2,[%sp]84
8000cf2e:	58 01       	ld.w %d15,[%sp]4
8000cf30:	a2 d2       	sub %d2,%d13
8000cf32:	59 a2 14 00 	st.w [%sp]20,%d2
8000cf36:	8b 7f 04 42 	eq %d4,%d15,71
8000cf3a:	19 a5 04 10 	ld.w %d5,[%sp]68
8000cf3e:	df 04 36 80 	jne %d4,0,8000cfaa <_svfprintf_r+0x57e>
8000cf42:	3c 3e       	j 8000cfbe <_svfprintf_r+0x592>
8000cf44:	0b 9d 00 80 	add %d8,%d13,%d9
8000cf48:	df 02 1c 00 	jeq %d2,0,8000cf80 <_svfprintf_r+0x554>
8000cf4c:	60 d2       	mov.a %a2,%d13
8000cf4e:	80 f4       	mov.d %d4,%a15
8000cf50:	79 20 00 00 	ld.b %d0,[%a2]0
8000cf54:	d2 06       	mov %e6,0
8000cf56:	02 35       	mov %d5,%d3
8000cf58:	8b 00 03 f2 	eq %d15,%d0,48
8000cf5c:	59 a3 08 00 	st.w [%sp]8,%d3
8000cf60:	6d 00 68 13 	call 8000f630 <__nedf2>
8000cf64:	8b 02 20 22 	ne %d2,%d2,0
8000cf68:	0f 2f 80 00 	and %d0,%d15,%d2
8000cf6c:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cf70:	76 05       	jz %d0,8000cf7a <_svfprintf_r+0x54e>
8000cf72:	8b 19 00 01 	rsub %d0,%d9,1
8000cf76:	59 a0 04 10 	st.w [%sp]68,%d0
8000cf7a:	19 a2 04 10 	ld.w %d2,[%sp]68
8000cf7e:	42 28       	add %d8,%d2
8000cf80:	80 f4       	mov.d %d4,%a15
8000cf82:	d2 06       	mov %e6,0
8000cf84:	02 35       	mov %d5,%d3
8000cf86:	6d 00 35 13 	call 8000f5f0 <__eqdf2>
8000cf8a:	f6 23       	jnz %d2,8000cf90 <_svfprintf_r+0x564>
8000cf8c:	59 a8 14 10 	st.w [%sp]84,%d8
8000cf90:	3b 00 03 00 	mov %d0,48
8000cf94:	19 a3 14 10 	ld.w %d3,[%sp]84
8000cf98:	7f 83 c9 ff 	jge.u %d3,%d8,8000cf2a <_svfprintf_r+0x4fe>
8000cf9c:	1b 13 00 10 	addi %d1,%d3,1
8000cfa0:	60 32       	mov.a %a2,%d3
8000cfa2:	59 a1 14 10 	st.w [%sp]84,%d1
8000cfa6:	34 20       	st.b [%a2],%d0
8000cfa8:	3c f6       	j 8000cf94 <_svfprintf_r+0x568>
8000cfaa:	0b 5e 20 31 	lt %d3,%d14,%d5
8000cfae:	8b d5 3f 35 	or.lt %d3,%d5,-3
8000cfb2:	df 03 88 00 	jeq %d3,0,8000d0c2 <_svfprintf_r+0x696>
8000cfb6:	58 04       	ld.w %d15,[%sp]16
8000cfb8:	c2 ef       	add %d15,-2
8000cfba:	78 04       	st.w [%sp]16,%d15
8000cfbc:	3c 06       	j 8000cfc8 <_svfprintf_r+0x59c>
8000cfbe:	58 04       	ld.w %d15,[%sp]16
8000cfc0:	8b 6f 86 32 	ge %d3,%d15,102
8000cfc4:	df 03 69 80 	jne %d3,0,8000d096 <_svfprintf_r+0x66a>
8000cfc8:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cfcc:	9a f5       	add %d15,%d5,-1
8000cfce:	78 11       	st.w [%sp]68,%d15
8000cfd0:	e9 a2 0d 10 	st.b [%sp]77,%d2
8000cfd4:	3b b0 02 30 	mov %d3,43
8000cfd8:	ce f4       	jgez %d15,8000cfe0 <_svfprintf_r+0x5b4>
8000cfda:	32 5f       	rsub %d15
8000cfdc:	3b d0 02 30 	mov %d3,45
8000cfe0:	e9 a3 0e 10 	st.b [%sp]78,%d3
8000cfe4:	8b af 40 32 	lt %d3,%d15,10
8000cfe8:	df 03 3e 80 	jne %d3,0,8000d064 <_svfprintf_r+0x638>
8000cfec:	82 06       	mov %d6,0
8000cfee:	3b a0 00 00 	mov %d0,10
8000cff2:	4b 0f 01 42 	div %e4,%d15,%d0
8000cff6:	8b 66 00 71 	rsub %d7,%d6,6
8000cffa:	60 72       	mov.a %a2,%d7
8000cffc:	d9 af 14 10 	lea %a15,[%sp]84
8000d000:	1b 05 03 30 	addi %d3,%d5,48
8000d004:	30 2f       	add.a %a15,%a2
8000d006:	28 03       	st.b [%a15]0,%d3
8000d008:	8b a4 80 32 	ge %d3,%d4,10
8000d00c:	02 4f       	mov %d15,%d4
8000d00e:	c2 16       	add %d6,1
8000d010:	df 03 f1 ff 	jne %d3,0,8000cff2 <_svfprintf_r+0x5c6>
8000d014:	60 74       	mov.a %a4,%d7
8000d016:	d9 a2 10 30 	lea %a2,[%sp]208
8000d01a:	1b 04 03 f0 	addi %d15,%d4,48
8000d01e:	30 42       	add.a %a2,%a4
8000d020:	d9 f7 ff ff 	lea %a7,[%a15]-1
8000d024:	e9 ff ff ff 	st.b [%a15]-1,%d15
8000d028:	80 22       	mov.d %d2,%a2
8000d02a:	d9 af 1b 10 	lea %a15,[%sp]91
8000d02e:	80 ff       	mov.d %d15,%a15
8000d030:	1b 32 f8 4f 	addi %d4,%d2,-125
8000d034:	82 03       	mov %d3,0
8000d036:	01 7f 20 30 	sub.a %a3,%a15,%a7
8000d03a:	3f 4f 08 80 	jlt.u %d15,%d4,8000d04a <_svfprintf_r+0x61e>
8000d03e:	80 a2       	mov.d %d2,%sp
8000d040:	1b 02 0d 20 	addi %d2,%d2,208
8000d044:	8b 52 07 42 	eq %d4,%d2,117
8000d048:	76 46       	jz %d4,8000d054 <_svfprintf_r+0x628>
8000d04a:	a0 03       	mov.a %a3,0
8000d04c:	3c 04       	j 8000d054 <_svfprintf_r+0x628>
8000d04e:	0c 70       	ld.bu %d15,[%a7]0
8000d050:	b0 17       	add.a %a7,1
8000d052:	28 0f       	st.b [%a15]0,%d15
8000d054:	60 3f       	mov.a %a15,%d3
8000d056:	d9 a2 0d 10 	lea %a2,[%sp]77
8000d05a:	b0 2f       	add.a %a15,2
8000d05c:	30 2f       	add.a %a15,%a2
8000d05e:	c2 13       	add %d3,1
8000d060:	fc 37       	loop %a3,8000d04e <_svfprintf_r+0x622>
8000d062:	3c 0b       	j 8000d078 <_svfprintf_r+0x64c>
8000d064:	3b 00 03 30 	mov %d3,48
8000d068:	1b 0f 03 f0 	addi %d15,%d15,48
8000d06c:	e9 a3 0f 10 	st.b [%sp]79,%d3
8000d070:	e9 af 10 10 	st.b [%sp]80,%d15
8000d074:	d9 af 11 10 	lea %a15,[%sp]81
8000d078:	d9 a7 0d 10 	lea %a7,[%sp]77
8000d07c:	01 7f 20 70 	sub.a %a7,%a15,%a7
8000d080:	80 79       	mov.d %d9,%a7
8000d082:	58 05       	ld.w %d15,[%sp]20
8000d084:	b5 a7 38 00 	st.a [%sp]56,%a7
8000d088:	42 f9       	add %d9,%d15
8000d08a:	ff 2f 04 00 	jge %d15,2,8000d092 <_svfprintf_r+0x666>
8000d08e:	6f 0a 2c 00 	jz.t %d10,0,8000d0e6 <_svfprintf_r+0x6ba>
8000d092:	c2 19       	add %d9,1
8000d094:	3c 29       	j 8000d0e6 <_svfprintf_r+0x6ba>
8000d096:	58 04       	ld.w %d15,[%sp]16
8000d098:	8b 6f 26 42 	ne %d4,%d15,102
8000d09c:	df 04 15 80 	jne %d4,0,8000d0c6 <_svfprintf_r+0x69a>
8000d0a0:	02 59       	mov %d9,%d5
8000d0a2:	8e 59       	jlez %d5,8000d0b4 <_svfprintf_r+0x688>
8000d0a4:	f6 e3       	jnz %d14,8000d0aa <_svfprintf_r+0x67e>
8000d0a6:	6f 0a 20 00 	jz.t %d10,0,8000d0e6 <_svfprintf_r+0x6ba>
8000d0aa:	1b 1e 00 30 	addi %d3,%d14,1
8000d0ae:	0b 35 00 90 	add %d9,%d5,%d3
8000d0b2:	3c 1a       	j 8000d0e6 <_svfprintf_r+0x6ba>
8000d0b4:	f6 e4       	jnz %d14,8000d0bc <_svfprintf_r+0x690>
8000d0b6:	82 19       	mov %d9,1
8000d0b8:	6f 0a 17 00 	jz.t %d10,0,8000d0e6 <_svfprintf_r+0x6ba>
8000d0bc:	1b 2e 00 90 	addi %d9,%d14,2
8000d0c0:	3c 13       	j 8000d0e6 <_svfprintf_r+0x6ba>
8000d0c2:	da 67       	mov %d15,103
8000d0c4:	78 04       	st.w [%sp]16,%d15
8000d0c6:	58 05       	ld.w %d15,[%sp]20
8000d0c8:	8f 1a 00 a1 	and %d10,%d10,1
8000d0cc:	0b a5 00 90 	add %d9,%d5,%d10
8000d0d0:	7f f5 0b 00 	jge %d5,%d15,8000d0e6 <_svfprintf_r+0x6ba>
8000d0d4:	8b 15 40 92 	lt %d9,%d5,1
8000d0d8:	8b 25 00 31 	rsub %d3,%d5,2
8000d0dc:	ab 13 80 39 	sel %d3,%d9,%d3,1
8000d0e0:	19 a9 14 00 	ld.w %d9,[%sp]20
8000d0e4:	42 39       	add %d9,%d3
8000d0e6:	58 09       	ld.w %d15,[%sp]36
8000d0e8:	82 0e       	mov %d14,0
8000d0ea:	df 0f 55 01 	jeq %d15,0,8000d394 <_svfprintf_r+0x968>
8000d0ee:	3b d0 02 70 	mov %d7,45
8000d0f2:	e9 a7 01 10 	st.b [%sp]65,%d7
8000d0f6:	1d 00 4f 01 	j 8000d394 <_svfprintf_r+0x968>
8000d0fa:	e9 af 01 10 	st.b [%sp]65,%d15
8000d0fe:	d9 f2 04 00 	lea %a2,[%a15]4
8000d102:	6f 5a 09 00 	jz.t %d10,5,8000d114 <_svfprintf_r+0x6e8>
8000d106:	58 0a       	ld.w %d15,[%sp]40
8000d108:	c8 03       	ld.a %a3,[%a15]0
8000d10a:	0b f0 00 48 	mov %e4,%d15
8000d10e:	89 34 40 09 	st.d [%a3],%e4
8000d112:	3c 0c       	j 8000d12a <_svfprintf_r+0x6fe>
8000d114:	6f 4a 08 80 	jnz.t %d10,4,8000d124 <_svfprintf_r+0x6f8>
8000d118:	6f 6a 06 00 	jz.t %d10,6,8000d124 <_svfprintf_r+0x6f8>
8000d11c:	c8 03       	ld.a %a3,[%a15]0
8000d11e:	58 0a       	ld.w %d15,[%sp]40
8000d120:	ac 30       	st.h [%a3]0,%d15
8000d122:	3c 04       	j 8000d12a <_svfprintf_r+0x6fe>
8000d124:	c8 03       	ld.a %a3,[%a15]0
8000d126:	58 0a       	ld.w %d15,[%sp]40
8000d128:	6c 30       	st.w [%a3]0,%d15
8000d12a:	40 2f       	mov.aa %a15,%a2
8000d12c:	1d ff b8 fc 	j 8000ca9c <_svfprintf_r+0x70>
8000d130:	8f 0a 41 a1 	or %d10,%d10,16
8000d134:	6f 5a 07 00 	jz.t %d10,5,8000d142 <_svfprintf_r+0x716>
8000d138:	d9 fc 08 00 	lea %a12,[%a15]8
8000d13c:	09 f8 40 09 	ld.d %e8,[%a15]
8000d140:	3c 0c       	j 8000d158 <_svfprintf_r+0x72c>
8000d142:	d9 fc 04 00 	lea %a12,[%a15]4
8000d146:	6f 4a 07 80 	jnz.t %d10,4,8000d154 <_svfprintf_r+0x728>
8000d14a:	6f 6a 05 00 	jz.t %d10,6,8000d154 <_svfprintf_r+0x728>
8000d14e:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000d152:	3c 02       	j 8000d156 <_svfprintf_r+0x72a>
8000d154:	48 08       	ld.w %d8,[%a15]0
8000d156:	82 09       	mov %d9,0
8000d158:	82 03       	mov %d3,0
8000d15a:	3c 73       	j 8000d240 <_svfprintf_r+0x814>
8000d15c:	3b 00 03 40 	mov %d4,48
8000d160:	7b 00 00 f8 	movh %d15,32768
8000d164:	1b 5f f3 f0 	addi %d15,%d15,3893
8000d168:	e9 a4 02 10 	st.b [%sp]66,%d4
8000d16c:	3b 80 07 40 	mov %d4,120
8000d170:	78 0f       	st.w [%sp]60,%d15
8000d172:	02 4f       	mov %d15,%d4
8000d174:	d9 fc 04 00 	lea %a12,[%a15]4
8000d178:	48 08       	ld.w %d8,[%a15]0
8000d17a:	82 09       	mov %d9,0
8000d17c:	8f 2a 40 a1 	or %d10,%d10,2
8000d180:	e9 a4 03 10 	st.b [%sp]67,%d4
8000d184:	82 23       	mov %d3,2
8000d186:	78 04       	st.w [%sp]16,%d15
8000d188:	3c 5c       	j 8000d240 <_svfprintf_r+0x814>
8000d18a:	82 07       	mov %d7,0
8000d18c:	48 0d       	ld.w %d13,[%a15]0
8000d18e:	e9 a7 01 10 	st.b [%sp]65,%d7
8000d192:	02 e9       	mov %d9,%d14
8000d194:	60 ad       	mov.a %a13,%d10
8000d196:	d9 fc 04 00 	lea %a12,[%a15]4
8000d19a:	60 d4       	mov.a %a4,%d13
8000d19c:	0e ef       	jltz %d14,8000d1ba <_svfprintf_r+0x78e>
8000d19e:	82 04       	mov %d4,0
8000d1a0:	02 e5       	mov %d5,%d14
8000d1a2:	6d 00 14 0c 	call 8000e9ca <memchr>
8000d1a6:	bd 02 f6 00 	jz.a %a2,8000d392 <_svfprintf_r+0x966>
8000d1aa:	60 d4       	mov.a %a4,%d13
8000d1ac:	01 42 20 30 	sub.a %a3,%a2,%a4
8000d1b0:	80 32       	mov.d %d2,%a3
8000d1b2:	0b e2 80 91 	min %d9,%d2,%d14
8000d1b6:	1d 00 ee 00 	j 8000d392 <_svfprintf_r+0x966>
8000d1ba:	6d ff cb fa 	call 8000c750 <strlen>
8000d1be:	02 29       	mov %d9,%d2
8000d1c0:	1d 00 e9 00 	j 8000d392 <_svfprintf_r+0x966>
8000d1c4:	8f 0a 41 a1 	or %d10,%d10,16
8000d1c8:	6f 5a 07 00 	jz.t %d10,5,8000d1d6 <_svfprintf_r+0x7aa>
8000d1cc:	d9 fc 08 00 	lea %a12,[%a15]8
8000d1d0:	09 f8 40 09 	ld.d %e8,[%a15]
8000d1d4:	3c 0c       	j 8000d1ec <_svfprintf_r+0x7c0>
8000d1d6:	d9 fc 04 00 	lea %a12,[%a15]4
8000d1da:	6f 4a 07 80 	jnz.t %d10,4,8000d1e8 <_svfprintf_r+0x7bc>
8000d1de:	6f 6a 05 00 	jz.t %d10,6,8000d1e8 <_svfprintf_r+0x7bc>
8000d1e2:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000d1e6:	3c 02       	j 8000d1ea <_svfprintf_r+0x7be>
8000d1e8:	48 08       	ld.w %d8,[%a15]0
8000d1ea:	82 09       	mov %d9,0
8000d1ec:	82 13       	mov %d3,1
8000d1ee:	3c 29       	j 8000d240 <_svfprintf_r+0x814>
8000d1f0:	e9 af 01 10 	st.b [%sp]65,%d15
8000d1f4:	7b 00 00 f8 	movh %d15,32768
8000d1f8:	1b 5f f3 f0 	addi %d15,%d15,3893
8000d1fc:	78 0f       	st.w [%sp]60,%d15
8000d1fe:	6f 5a 07 00 	jz.t %d10,5,8000d20c <_svfprintf_r+0x7e0>
8000d202:	d9 fc 08 00 	lea %a12,[%a15]8
8000d206:	09 f8 40 09 	ld.d %e8,[%a15]
8000d20a:	3c 0c       	j 8000d222 <_svfprintf_r+0x7f6>
8000d20c:	d9 fc 04 00 	lea %a12,[%a15]4
8000d210:	6f 4a 07 80 	jnz.t %d10,4,8000d21e <_svfprintf_r+0x7f2>
8000d214:	6f 6a 05 00 	jz.t %d10,6,8000d21e <_svfprintf_r+0x7f2>
8000d218:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000d21c:	3c 02       	j 8000d220 <_svfprintf_r+0x7f4>
8000d21e:	48 08       	ld.w %d8,[%a15]0
8000d220:	82 09       	mov %d9,0
8000d222:	82 23       	mov %d3,2
8000d224:	6f 0a 0e 00 	jz.t %d10,0,8000d240 <_svfprintf_r+0x814>
8000d228:	0f 89 a0 40 	or %d4,%d9,%d8
8000d22c:	76 4a       	jz %d4,8000d240 <_svfprintf_r+0x814>
8000d22e:	58 04       	ld.w %d15,[%sp]16
8000d230:	3b 00 03 70 	mov %d7,48
8000d234:	e9 a7 02 10 	st.b [%sp]66,%d7
8000d238:	e9 af 03 10 	st.b [%sp]67,%d15
8000d23c:	8f 2a 40 a1 	or %d10,%d10,2
8000d240:	82 07       	mov %d7,0
8000d242:	60 ad       	mov.a %a13,%d10
8000d244:	e9 a7 01 10 	st.b [%sp]65,%d7
8000d248:	80 d2       	mov.d %d2,%a13
8000d24a:	8b 0e 80 72 	ge %d7,%d14,0
8000d24e:	8f 02 c8 41 	andn %d4,%d2,128
8000d252:	2b 24 40 27 	sel %d2,%d7,%d4,%d2
8000d256:	0f 98 a0 60 	or %d6,%d8,%d9
8000d25a:	8b 0e 20 42 	ne %d4,%d14,0
8000d25e:	8b 06 00 45 	or.ne %d4,%d6,0
8000d262:	60 2d       	mov.a %a13,%d2
8000d264:	df 04 72 00 	jeq %d4,0,8000d348 <_svfprintf_r+0x91c>
8000d268:	df 13 06 00 	jeq %d3,1,8000d274 <_svfprintf_r+0x848>
8000d26c:	df 23 57 00 	jeq %d3,2,8000d31a <_svfprintf_r+0x8ee>
8000d270:	82 03       	mov %d3,0
8000d272:	3c 03       	j 8000d278 <_svfprintf_r+0x84c>
8000d274:	82 04       	mov %d4,0
8000d276:	3c 22       	j 8000d2ba <_svfprintf_r+0x88e>
8000d278:	8b 73 02 71 	rsub %d7,%d3,39
8000d27c:	60 72       	mov.a %a2,%d7
8000d27e:	8f 78 00 41 	and %d4,%d8,7
8000d282:	d9 a3 28 10 	lea %a3,[%sp]104
8000d286:	77 89 80 8e 	dextr %d8,%d9,%d8,29
8000d28a:	30 23       	add.a %a3,%a2
8000d28c:	1b 04 03 40 	addi %d4,%d4,48
8000d290:	06 d9       	sh %d9,-3
8000d292:	34 34       	st.b [%a3],%d4
8000d294:	0f 89 a0 60 	or %d6,%d9,%d8
8000d298:	c2 13       	add %d3,1
8000d29a:	df 06 ef ff 	jne %d6,0,8000d278 <_svfprintf_r+0x84c>
8000d29e:	80 d2       	mov.d %d2,%a13
8000d2a0:	80 3d       	mov.d %d13,%a3
8000d2a2:	6f 02 61 00 	jz.t %d2,0,8000d364 <_svfprintf_r+0x938>
8000d2a6:	8b 04 03 42 	eq %d4,%d4,48
8000d2aa:	df 04 5d 80 	jne %d4,0,8000d364 <_svfprintf_r+0x938>
8000d2ae:	3b 00 03 70 	mov %d7,48
8000d2b2:	c2 fd       	add %d13,-1
8000d2b4:	e9 37 ff ff 	st.b [%a3]-1,%d7
8000d2b8:	3c 56       	j 8000d364 <_svfprintf_r+0x938>
8000d2ba:	8b 84 02 71 	rsub %d7,%d4,40
8000d2be:	8b 09 00 32 	eq %d3,%d9,0
8000d2c2:	60 73       	mov.a %a3,%d7
8000d2c4:	8b a8 a0 34 	and.ge.u %d3,%d8,10
8000d2c8:	d9 a7 28 10 	lea %a7,[%sp]104
8000d2cc:	8b 09 00 35 	or.ne %d3,%d9,0
8000d2d0:	30 37       	add.a %a7,%a3
8000d2d2:	1b 14 00 d0 	addi %d13,%d4,1
8000d2d6:	df 03 1b 00 	jeq %d3,0,8000d30c <_svfprintf_r+0x8e0>
8000d2da:	8b 74 02 41 	rsub %d4,%d4,39
8000d2de:	60 42       	mov.a %a2,%d4
8000d2e0:	fb a0 00 60 	mov %e6,10
8000d2e4:	0b 89 10 48 	mov %e4,%d9,%d8
8000d2e8:	d9 af 28 10 	lea %a15,[%sp]104
8000d2ec:	30 2f       	add.a %a15,%a2
8000d2ee:	6d 00 98 12 	call 8000f81e <__umoddi3>
8000d2f2:	0b 89 10 48 	mov %e4,%d9,%d8
8000d2f6:	1b 02 03 20 	addi %d2,%d2,48
8000d2fa:	fb a0 00 60 	mov %e6,10
8000d2fe:	28 02       	st.b [%a15]0,%d2
8000d300:	6d 00 3f 12 	call 8000f77e <__udivdi3>
8000d304:	02 d4       	mov %d4,%d13
8000d306:	0b 23 10 88 	mov %e8,%d3,%d2
8000d30a:	3c d8       	j 8000d2ba <_svfprintf_r+0x88e>
8000d30c:	80 7d       	mov.d %d13,%a7
8000d30e:	1b 08 03 80 	addi %d8,%d8,48
8000d312:	c2 fd       	add %d13,-1
8000d314:	e9 78 ff ff 	st.b [%a7]-1,%d8
8000d318:	3c 26       	j 8000d364 <_svfprintf_r+0x938>
8000d31a:	82 03       	mov %d3,0
8000d31c:	d8 0f       	ld.a %a15,[%sp]60
8000d31e:	80 ad       	mov.d %d13,%sp
8000d320:	8f f8 00 f1 	and %d15,%d8,15
8000d324:	8b 73 02 71 	rsub %d7,%d3,39
8000d328:	1b 8d 06 d0 	addi %d13,%d13,104
8000d32c:	10 f7       	addsc.a %a7,%a15,%d15,0
8000d32e:	42 7d       	add %d13,%d7
8000d330:	77 89 00 8e 	dextr %d8,%d9,%d8,28
8000d334:	0c 70       	ld.bu %d15,[%a7]0
8000d336:	60 d2       	mov.a %a2,%d13
8000d338:	06 c9       	sh %d9,-4
8000d33a:	2c 20       	st.b [%a2]0,%d15
8000d33c:	0f 89 a0 40 	or %d4,%d9,%d8
8000d340:	c2 13       	add %d3,1
8000d342:	df 04 ed ff 	jne %d4,0,8000d31c <_svfprintf_r+0x8f0>
8000d346:	3c 0f       	j 8000d364 <_svfprintf_r+0x938>
8000d348:	80 a2       	mov.d %d2,%sp
8000d34a:	1b 02 09 d0 	addi %d13,%d2,144
8000d34e:	f6 3b       	jnz %d3,8000d364 <_svfprintf_r+0x938>
8000d350:	80 df       	mov.d %d15,%a13
8000d352:	2e 09       	jz.t %d15,0,8000d364 <_svfprintf_r+0x938>
8000d354:	1b 02 0d d0 	addi %d13,%d2,208
8000d358:	60 d2       	mov.a %a2,%d13
8000d35a:	3b 00 03 70 	mov %d7,48
8000d35e:	89 27 3f e4 	st.b [+%a2]-65,%d7
8000d362:	80 2d       	mov.d %d13,%a2
8000d364:	d9 a3 10 20 	lea %a3,[%sp]144
8000d368:	80 39       	mov.d %d9,%a3
8000d36a:	a2 d9       	sub %d9,%d13
8000d36c:	3c 14       	j 8000d394 <_svfprintf_r+0x968>
8000d36e:	e9 af 01 10 	st.b [%sp]65,%d15
8000d372:	58 04       	ld.w %d15,[%sp]16
8000d374:	df 0f 1f 04 	jeq %d15,0,8000dbb2 <_svfprintf_r+0x1186>
8000d378:	82 03       	mov %d3,0
8000d37a:	60 ad       	mov.a %a13,%d10
8000d37c:	e9 af 28 10 	st.b [%sp]104,%d15
8000d380:	e9 a3 01 10 	st.b [%sp]65,%d3
8000d384:	40 fc       	mov.aa %a12,%a15
8000d386:	80 a2       	mov.d %d2,%sp
8000d388:	82 19       	mov %d9,1
8000d38a:	82 0e       	mov %d14,0
8000d38c:	1b 82 06 d0 	addi %d13,%d2,104
8000d390:	3c 02       	j 8000d394 <_svfprintf_r+0x968>
8000d392:	82 0e       	mov %d14,0
8000d394:	79 a7 01 10 	ld.b %d7,[%sp]65
8000d398:	80 df       	mov.d %d15,%a13
8000d39a:	0b e9 a0 a1 	max %d10,%d9,%d14
8000d39e:	80 d2       	mov.d %d2,%a13
8000d3a0:	16 02       	and %d15,2
8000d3a2:	ab 1a 00 a7 	cadd %d10,%d7,%d10,1
8000d3a6:	60 ff       	mov.a %a15,%d15
8000d3a8:	8a 2a       	cadd %d10,%d15,2
8000d3aa:	8f 42 08 f1 	and %d15,%d2,132
8000d3ae:	ee 48       	jnz %d15,8000d43e <_svfprintf_r+0xa12>
8000d3b0:	19 a8 1c 00 	ld.w %d8,[%sp]28
8000d3b4:	a2 a8       	sub %d8,%d10
8000d3b6:	bf 18 44 00 	jlt %d8,1,8000d43e <_svfprintf_r+0xa12>
8000d3ba:	91 00 00 28 	movh.a %a2,32768
8000d3be:	d9 22 d8 d0 	lea %a2,[%a2]3928 <80000f58 <blanks.4035>>
8000d3c2:	19 a1 24 10 	ld.w %d1,[%sp]100 <80000f58 <blanks.4035>>
8000d3c6:	19 a4 20 10 	ld.w %d4,[%sp]96 <80000f58 <blanks.4035>>
8000d3ca:	8b 18 81 72 	ge %d7,%d8,17
8000d3ce:	f4 e2       	st.a [%a14],%a2
8000d3d0:	df 07 20 00 	jeq %d7,0,8000d410 <_svfprintf_r+0x9e4>
8000d3d4:	1b 14 00 00 	addi %d0,%d4,1
8000d3d8:	3b 00 01 20 	mov %d2,16
8000d3dc:	1b 01 01 10 	addi %d1,%d1,16
8000d3e0:	59 e2 04 00 	st.w [%a14]4,%d2
8000d3e4:	59 a0 20 10 	st.w [%sp]96,%d0
8000d3e8:	59 a1 24 10 	st.w [%sp]100,%d1
8000d3ec:	8b 80 80 02 	ge %d0,%d0,8
8000d3f0:	d9 ee 08 00 	lea %a14,[%a14]8
8000d3f4:	76 0b       	jz %d0,8000d40a <_svfprintf_r+0x9de>
8000d3f6:	60 c4       	mov.a %a4,%d12
8000d3f8:	60 b5       	mov.a %a5,%d11
8000d3fa:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d3fe:	6d 00 f4 0d 	call 8000efe6 <__ssprint_r>
8000d402:	df 02 e0 83 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d406:	d9 ae 10 20 	lea %a14,[%sp]144
8000d40a:	1b 08 ff 8f 	addi %d8,%d8,-16
8000d40e:	3c d6       	j 8000d3ba <_svfprintf_r+0x98e>
8000d410:	c2 14       	add %d4,1
8000d412:	42 81       	add %d1,%d8
8000d414:	59 e8 04 00 	st.w [%a14]4,%d8
8000d418:	59 a4 20 10 	st.w [%sp]96,%d4
8000d41c:	59 a1 24 10 	st.w [%sp]100,%d1
8000d420:	8b 84 80 42 	ge %d4,%d4,8
8000d424:	d9 ee 08 00 	lea %a14,[%a14]8
8000d428:	76 4b       	jz %d4,8000d43e <_svfprintf_r+0xa12>
8000d42a:	60 c4       	mov.a %a4,%d12
8000d42c:	60 b5       	mov.a %a5,%d11
8000d42e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d432:	6d 00 da 0d 	call 8000efe6 <__ssprint_r>
8000d436:	df 02 c6 83 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d43a:	d9 ae 10 20 	lea %a14,[%sp]144
8000d43e:	79 a4 01 10 	ld.b %d4,[%sp]65
8000d442:	df 04 21 00 	jeq %d4,0,8000d484 <_svfprintf_r+0xa58>
8000d446:	19 a4 24 10 	ld.w %d4,[%sp]100
8000d44a:	d9 a7 01 10 	lea %a7,[%sp]65
8000d44e:	c2 14       	add %d4,1
8000d450:	59 a4 24 10 	st.w [%sp]100,%d4
8000d454:	19 a4 20 10 	ld.w %d4,[%sp]96
8000d458:	82 17       	mov %d7,1
8000d45a:	c2 14       	add %d4,1
8000d45c:	f4 e7       	st.a [%a14],%a7
8000d45e:	59 e7 04 00 	st.w [%a14]4,%d7
8000d462:	59 a4 20 10 	st.w [%sp]96,%d4
8000d466:	8b 84 80 42 	ge %d4,%d4,8
8000d46a:	d9 ee 08 00 	lea %a14,[%a14]8
8000d46e:	76 4b       	jz %d4,8000d484 <_svfprintf_r+0xa58>
8000d470:	60 c4       	mov.a %a4,%d12
8000d472:	60 b5       	mov.a %a5,%d11
8000d474:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d478:	6d 00 b7 0d 	call 8000efe6 <__ssprint_r>
8000d47c:	df 02 a3 83 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d480:	d9 ae 10 20 	lea %a14,[%sp]144
8000d484:	bd 0f 21 00 	jz.a %a15,8000d4c6 <_svfprintf_r+0xa9a>
8000d488:	19 a4 24 10 	ld.w %d4,[%sp]100
8000d48c:	d9 a7 02 10 	lea %a7,[%sp]66
8000d490:	c2 24       	add %d4,2
8000d492:	59 a4 24 10 	st.w [%sp]100,%d4
8000d496:	19 a4 20 10 	ld.w %d4,[%sp]96
8000d49a:	82 27       	mov %d7,2
8000d49c:	c2 14       	add %d4,1
8000d49e:	f4 e7       	st.a [%a14],%a7
8000d4a0:	59 e7 04 00 	st.w [%a14]4,%d7
8000d4a4:	59 a4 20 10 	st.w [%sp]96,%d4
8000d4a8:	8b 84 80 42 	ge %d4,%d4,8
8000d4ac:	d9 ee 08 00 	lea %a14,[%a14]8
8000d4b0:	76 4b       	jz %d4,8000d4c6 <_svfprintf_r+0xa9a>
8000d4b2:	60 c4       	mov.a %a4,%d12
8000d4b4:	60 b5       	mov.a %a5,%d11
8000d4b6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d4ba:	6d 00 96 0d 	call 8000efe6 <__ssprint_r>
8000d4be:	df 02 82 83 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d4c2:	d9 ae 10 20 	lea %a14,[%sp]144
8000d4c6:	8b 0f 28 42 	ne %d4,%d15,128
8000d4ca:	df 04 48 80 	jne %d4,0,8000d55a <_svfprintf_r+0xb2e>
8000d4ce:	58 07       	ld.w %d15,[%sp]28
8000d4d0:	7b 00 00 28 	movh %d2,32768
8000d4d4:	60 23       	mov.a %a3,%d2
8000d4d6:	a2 af       	sub %d15,%d10
8000d4d8:	d9 3f c8 d0 	lea %a15,[%a3]3912
8000d4dc:	bf 1f 3f 00 	jlt %d15,1,8000d55a <_svfprintf_r+0xb2e>
8000d4e0:	19 a7 24 10 	ld.w %d7,[%sp]100
8000d4e4:	19 a4 20 10 	ld.w %d4,[%sp]96
8000d4e8:	8b 1f 81 82 	ge %d8,%d15,17
8000d4ec:	ec e0       	st.a [%a14]0,%a15
8000d4ee:	df 08 20 00 	jeq %d8,0,8000d52e <_svfprintf_r+0xb02>
8000d4f2:	1b 14 00 00 	addi %d0,%d4,1
8000d4f6:	3b 00 01 20 	mov %d2,16
8000d4fa:	1b 07 01 10 	addi %d1,%d7,16
8000d4fe:	59 e2 04 00 	st.w [%a14]4,%d2
8000d502:	59 a0 20 10 	st.w [%sp]96,%d0
8000d506:	59 a1 24 10 	st.w [%sp]100,%d1
8000d50a:	8b 80 80 02 	ge %d0,%d0,8
8000d50e:	d9 ee 08 00 	lea %a14,[%a14]8
8000d512:	76 0b       	jz %d0,8000d528 <_svfprintf_r+0xafc>
8000d514:	60 c4       	mov.a %a4,%d12
8000d516:	60 b5       	mov.a %a5,%d11
8000d518:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d51c:	6d 00 65 0d 	call 8000efe6 <__ssprint_r>
8000d520:	df 02 51 83 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d524:	d9 ae 10 20 	lea %a14,[%sp]144
8000d528:	1b 0f ff ff 	addi %d15,%d15,-16
8000d52c:	3c da       	j 8000d4e0 <_svfprintf_r+0xab4>
8000d52e:	c2 14       	add %d4,1
8000d530:	42 f7       	add %d7,%d15
8000d532:	6c e1       	st.w [%a14]4,%d15
8000d534:	59 a4 20 10 	st.w [%sp]96,%d4
8000d538:	59 a7 24 10 	st.w [%sp]100,%d7
8000d53c:	8b 84 80 42 	ge %d4,%d4,8
8000d540:	d9 ee 08 00 	lea %a14,[%a14]8
8000d544:	76 4b       	jz %d4,8000d55a <_svfprintf_r+0xb2e>
8000d546:	60 c4       	mov.a %a4,%d12
8000d548:	60 b5       	mov.a %a5,%d11
8000d54a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d54e:	6d 00 4c 0d 	call 8000efe6 <__ssprint_r>
8000d552:	df 02 38 83 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d556:	d9 ae 10 20 	lea %a14,[%sp]144
8000d55a:	7b 00 00 88 	movh %d8,32768
8000d55e:	a2 9e       	sub %d14,%d9
8000d560:	1b 88 f4 80 	addi %d8,%d8,3912
8000d564:	c5 0f 10 00 	lea %a15,10 <_.+0xf>
8000d568:	bf 1e 3c 00 	jlt %d14,1,8000d5e0 <_svfprintf_r+0xbb4>
8000d56c:	19 a6 24 10 	ld.w %d6,[%sp]100
8000d570:	19 a4 20 10 	ld.w %d4,[%sp]96
8000d574:	8b 1e 81 02 	ge %d0,%d14,17
8000d578:	74 e8       	st.w [%a14],%d8
8000d57a:	df 00 1c 00 	jeq %d0,0,8000d5b2 <_svfprintf_r+0xb86>
8000d57e:	c2 14       	add %d4,1
8000d580:	1b 06 01 00 	addi %d0,%d6,16
8000d584:	ec e1       	st.a [%a14]4,%a15
8000d586:	59 a4 20 10 	st.w [%sp]96,%d4
8000d58a:	59 a0 24 10 	st.w [%sp]100,%d0
8000d58e:	8b 84 80 42 	ge %d4,%d4,8
8000d592:	d9 ee 08 00 	lea %a14,[%a14]8
8000d596:	76 4b       	jz %d4,8000d5ac <_svfprintf_r+0xb80>
8000d598:	60 c4       	mov.a %a4,%d12
8000d59a:	60 b5       	mov.a %a5,%d11
8000d59c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d5a0:	6d 00 23 0d 	call 8000efe6 <__ssprint_r>
8000d5a4:	df 02 0f 83 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d5a8:	d9 ae 10 20 	lea %a14,[%sp]144
8000d5ac:	1b 0e ff ef 	addi %d14,%d14,-16
8000d5b0:	3c de       	j 8000d56c <_svfprintf_r+0xb40>
8000d5b2:	c2 14       	add %d4,1
8000d5b4:	42 e6       	add %d6,%d14
8000d5b6:	59 ee 04 00 	st.w [%a14]4,%d14
8000d5ba:	59 a4 20 10 	st.w [%sp]96,%d4
8000d5be:	59 a6 24 10 	st.w [%sp]100,%d6
8000d5c2:	8b 84 80 42 	ge %d4,%d4,8
8000d5c6:	d9 ee 08 00 	lea %a14,[%a14]8
8000d5ca:	76 4b       	jz %d4,8000d5e0 <_svfprintf_r+0xbb4>
8000d5cc:	60 c4       	mov.a %a4,%d12
8000d5ce:	60 b5       	mov.a %a5,%d11
8000d5d0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d5d4:	6d 00 09 0d 	call 8000efe6 <__ssprint_r>
8000d5d8:	df 02 f5 82 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d5dc:	d9 ae 10 20 	lea %a14,[%sp]144
8000d5e0:	80 df       	mov.d %d15,%a13
8000d5e2:	19 ae 24 10 	ld.w %d14,[%sp]100
8000d5e6:	19 a8 20 10 	ld.w %d8,[%sp]96
8000d5ea:	6f 8f 1d 80 	jnz.t %d15,8,8000d624 <_svfprintf_r+0xbf8>
8000d5ee:	c2 18       	add %d8,1
8000d5f0:	59 e9 04 00 	st.w [%a14]4,%d9
8000d5f4:	42 e9       	add %d9,%d14
8000d5f6:	59 a8 20 10 	st.w [%sp]96,%d8
8000d5fa:	74 ed       	st.w [%a14],%d13
8000d5fc:	59 a9 24 10 	st.w [%sp]100,%d9
8000d600:	8b 88 80 82 	ge %d8,%d8,8
8000d604:	d9 ef 08 00 	lea %a15,[%a14]8
8000d608:	df 08 79 02 	jeq %d8,0,8000dafa <_svfprintf_r+0x10ce>
8000d60c:	60 c4       	mov.a %a4,%d12
8000d60e:	60 b5       	mov.a %a5,%d11
8000d610:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d614:	6d 00 e9 0c 	call 8000efe6 <__ssprint_r>
8000d618:	df 02 d5 82 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d61c:	d9 af 10 20 	lea %a15,[%sp]144
8000d620:	1d 00 6d 02 	j 8000dafa <_svfprintf_r+0x10ce>
8000d624:	19 a2 10 00 	ld.w %d2,[%sp]16
8000d628:	8b 62 46 f2 	lt %d15,%d2,102
8000d62c:	df 0f be 81 	jne %d15,0,8000d9a8 <_svfprintf_r+0xf7c>
8000d630:	d2 06       	mov %e6,0
8000d632:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000d636:	19 a5 30 00 	ld.w %d5,[%sp]48
8000d63a:	6d 00 db 0f 	call 8000f5f0 <__eqdf2>
8000d63e:	df 02 78 80 	jne %d2,0,8000d72e <_svfprintf_r+0xd02>
8000d642:	7b 00 00 38 	movh %d3,32768
8000d646:	1b 63 f4 30 	addi %d3,%d3,3910
8000d64a:	c2 18       	add %d8,1
8000d64c:	74 e3       	st.w [%a14],%d3
8000d64e:	1b 1e 00 90 	addi %d9,%d14,1
8000d652:	82 13       	mov %d3,1
8000d654:	59 a8 20 10 	st.w [%sp]96,%d8
8000d658:	59 e3 04 00 	st.w [%a14]4,%d3
8000d65c:	59 a9 24 10 	st.w [%sp]100,%d9
8000d660:	8b 88 80 82 	ge %d8,%d8,8
8000d664:	d9 ef 08 00 	lea %a15,[%a14]8
8000d668:	76 8b       	jz %d8,8000d67e <_svfprintf_r+0xc52>
8000d66a:	60 c4       	mov.a %a4,%d12
8000d66c:	60 b5       	mov.a %a5,%d11
8000d66e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d672:	6d 00 ba 0c 	call 8000efe6 <__ssprint_r>
8000d676:	df 02 a6 82 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d67a:	d9 af 10 20 	lea %a15,[%sp]144
8000d67e:	58 11       	ld.w %d15,[%sp]68
8000d680:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d684:	3f 2f 05 00 	jlt %d15,%d2,8000d68e <_svfprintf_r+0xc62>
8000d688:	80 df       	mov.d %d15,%a13
8000d68a:	6f 0f 38 02 	jz.t %d15,0,8000dafa <_svfprintf_r+0x10ce>
8000d68e:	58 08       	ld.w %d15,[%sp]32
8000d690:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d694:	68 1f       	st.w [%a15]4,%d15
8000d696:	58 19       	ld.w %d15,[%sp]100
8000d698:	99 a3 34 00 	ld.a %a3,[%sp]52
8000d69c:	42 2f       	add %d15,%d2
8000d69e:	78 19       	st.w [%sp]100,%d15
8000d6a0:	58 18       	ld.w %d15,[%sp]96
8000d6a2:	e8 03       	st.a [%a15]0,%a3
8000d6a4:	c2 1f       	add %d15,1
8000d6a6:	78 18       	st.w [%sp]96,%d15
8000d6a8:	8b 8f 80 f2 	ge %d15,%d15,8
8000d6ac:	d9 ff 08 00 	lea %a15,[%a15]8
8000d6b0:	6e 0b       	jz %d15,8000d6c6 <_svfprintf_r+0xc9a>
8000d6b2:	60 c4       	mov.a %a4,%d12
8000d6b4:	60 b5       	mov.a %a5,%d11
8000d6b6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d6ba:	6d 00 96 0c 	call 8000efe6 <__ssprint_r>
8000d6be:	df 02 82 82 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d6c2:	d9 af 10 20 	lea %a15,[%sp]144
8000d6c6:	58 05       	ld.w %d15,[%sp]20
8000d6c8:	7b 00 00 88 	movh %d8,32768
8000d6cc:	c2 ff       	add %d15,-1
8000d6ce:	1b 88 f4 80 	addi %d8,%d8,3912
8000d6d2:	3b 00 01 90 	mov %d9,16
8000d6d6:	bf 1f 12 02 	jlt %d15,1,8000dafa <_svfprintf_r+0x10ce>
8000d6da:	19 a5 24 10 	ld.w %d5,[%sp]100
8000d6de:	19 a3 20 10 	ld.w %d3,[%sp]96
8000d6e2:	8b 1f 81 42 	ge %d4,%d15,17
8000d6e6:	68 08       	st.w [%a15]0,%d8
8000d6e8:	df 04 1c 00 	jeq %d4,0,8000d720 <_svfprintf_r+0xcf4>
8000d6ec:	c2 13       	add %d3,1
8000d6ee:	1b 05 01 40 	addi %d4,%d5,16
8000d6f2:	68 19       	st.w [%a15]4,%d9
8000d6f4:	59 a3 20 10 	st.w [%sp]96,%d3
8000d6f8:	59 a4 24 10 	st.w [%sp]100,%d4
8000d6fc:	8b 83 80 32 	ge %d3,%d3,8
8000d700:	d9 ff 08 00 	lea %a15,[%a15]8
8000d704:	76 3b       	jz %d3,8000d71a <_svfprintf_r+0xcee>
8000d706:	60 c4       	mov.a %a4,%d12
8000d708:	60 b5       	mov.a %a5,%d11
8000d70a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d70e:	6d 00 6c 0c 	call 8000efe6 <__ssprint_r>
8000d712:	df 02 58 82 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d716:	d9 af 10 20 	lea %a15,[%sp]144
8000d71a:	1b 0f ff ff 	addi %d15,%d15,-16
8000d71e:	3c de       	j 8000d6da <_svfprintf_r+0xcae>
8000d720:	12 54       	add %d4,%d15,%d5
8000d722:	68 1f       	st.w [%a15]4,%d15
8000d724:	59 a4 24 10 	st.w [%sp]100,%d4
8000d728:	9a 13       	add %d15,%d3,1
8000d72a:	1d 00 e1 01 	j 8000daec <_svfprintf_r+0x10c0>
8000d72e:	19 a3 04 10 	ld.w %d3,[%sp]68
8000d732:	ff 13 8e 00 	jge %d3,1,8000d84e <_svfprintf_r+0xe22>
8000d736:	7b 00 00 38 	movh %d3,32768
8000d73a:	1b 63 f4 30 	addi %d3,%d3,3910
8000d73e:	c2 18       	add %d8,1
8000d740:	74 e3       	st.w [%a14],%d3
8000d742:	1b 1e 00 90 	addi %d9,%d14,1
8000d746:	82 13       	mov %d3,1
8000d748:	59 a8 20 10 	st.w [%sp]96,%d8
8000d74c:	59 e3 04 00 	st.w [%a14]4,%d3
8000d750:	59 a9 24 10 	st.w [%sp]100,%d9
8000d754:	8b 88 80 82 	ge %d8,%d8,8
8000d758:	d9 ef 08 00 	lea %a15,[%a14]8
8000d75c:	76 8b       	jz %d8,8000d772 <_svfprintf_r+0xd46>
8000d75e:	60 c4       	mov.a %a4,%d12
8000d760:	60 b5       	mov.a %a5,%d11
8000d762:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d766:	6d 00 40 0c 	call 8000efe6 <__ssprint_r>
8000d76a:	df 02 2c 82 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d76e:	d9 af 10 20 	lea %a15,[%sp]144
8000d772:	58 11       	ld.w %d15,[%sp]68
8000d774:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d778:	a6 2f       	or %d15,%d2
8000d77a:	ee 04       	jnz %d15,8000d782 <_svfprintf_r+0xd56>
8000d77c:	80 df       	mov.d %d15,%a13
8000d77e:	6f 0f be 01 	jz.t %d15,0,8000dafa <_svfprintf_r+0x10ce>
8000d782:	58 08       	ld.w %d15,[%sp]32
8000d784:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d788:	68 1f       	st.w [%a15]4,%d15
8000d78a:	58 19       	ld.w %d15,[%sp]100
8000d78c:	99 a3 34 00 	ld.a %a3,[%sp]52
8000d790:	42 2f       	add %d15,%d2
8000d792:	78 19       	st.w [%sp]100,%d15
8000d794:	58 18       	ld.w %d15,[%sp]96
8000d796:	e8 03       	st.a [%a15]0,%a3
8000d798:	c2 1f       	add %d15,1
8000d79a:	78 18       	st.w [%sp]96,%d15
8000d79c:	8b 8f 80 f2 	ge %d15,%d15,8
8000d7a0:	d9 ff 08 00 	lea %a15,[%a15]8
8000d7a4:	6e 0b       	jz %d15,8000d7ba <_svfprintf_r+0xd8e>
8000d7a6:	60 c4       	mov.a %a4,%d12
8000d7a8:	60 b5       	mov.a %a5,%d11
8000d7aa:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d7ae:	6d 00 1c 0c 	call 8000efe6 <__ssprint_r>
8000d7b2:	df 02 08 82 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d7b6:	d9 af 10 20 	lea %a15,[%sp]144
8000d7ba:	58 11       	ld.w %d15,[%sp]68
8000d7bc:	7b 00 00 88 	movh %d8,32768
8000d7c0:	32 5f       	rsub %d15
8000d7c2:	1b 88 f4 80 	addi %d8,%d8,3912
8000d7c6:	3b 00 01 90 	mov %d9,16
8000d7ca:	bf 1f 3a 00 	jlt %d15,1,8000d83e <_svfprintf_r+0xe12>
8000d7ce:	19 a5 24 10 	ld.w %d5,[%sp]100
8000d7d2:	19 a3 20 10 	ld.w %d3,[%sp]96
8000d7d6:	8b 1f 81 42 	ge %d4,%d15,17
8000d7da:	68 08       	st.w [%a15]0,%d8
8000d7dc:	df 04 1c 00 	jeq %d4,0,8000d814 <_svfprintf_r+0xde8>
8000d7e0:	c2 13       	add %d3,1
8000d7e2:	1b 05 01 40 	addi %d4,%d5,16
8000d7e6:	68 19       	st.w [%a15]4,%d9
8000d7e8:	59 a3 20 10 	st.w [%sp]96,%d3
8000d7ec:	59 a4 24 10 	st.w [%sp]100,%d4
8000d7f0:	8b 83 80 32 	ge %d3,%d3,8
8000d7f4:	d9 ff 08 00 	lea %a15,[%a15]8
8000d7f8:	76 3b       	jz %d3,8000d80e <_svfprintf_r+0xde2>
8000d7fa:	60 c4       	mov.a %a4,%d12
8000d7fc:	60 b5       	mov.a %a5,%d11
8000d7fe:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d802:	6d 00 f2 0b 	call 8000efe6 <__ssprint_r>
8000d806:	df 02 de 81 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d80a:	d9 af 10 20 	lea %a15,[%sp]144
8000d80e:	1b 0f ff ff 	addi %d15,%d15,-16
8000d812:	3c de       	j 8000d7ce <_svfprintf_r+0xda2>
8000d814:	68 1f       	st.w [%a15]4,%d15
8000d816:	12 54       	add %d4,%d15,%d5
8000d818:	9a 13       	add %d15,%d3,1
8000d81a:	78 18       	st.w [%sp]96,%d15
8000d81c:	59 a4 24 10 	st.w [%sp]100,%d4
8000d820:	8b 8f 80 f2 	ge %d15,%d15,8
8000d824:	d9 ff 08 00 	lea %a15,[%a15]8
8000d828:	6e 0b       	jz %d15,8000d83e <_svfprintf_r+0xe12>
8000d82a:	60 c4       	mov.a %a4,%d12
8000d82c:	60 b5       	mov.a %a5,%d11
8000d82e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d832:	6d 00 da 0b 	call 8000efe6 <__ssprint_r>
8000d836:	df 02 c6 81 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d83a:	d9 af 10 20 	lea %a15,[%sp]144
8000d83e:	58 05       	ld.w %d15,[%sp]20
8000d840:	68 0d       	st.w [%a15]0,%d13
8000d842:	68 1f       	st.w [%a15]4,%d15
8000d844:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d848:	58 19       	ld.w %d15,[%sp]100
8000d84a:	1d 00 4d 01 	j 8000dae4 <_svfprintf_r+0x10b8>
8000d84e:	58 05       	ld.w %d15,[%sp]20
8000d850:	74 ed       	st.w [%a14],%d13
8000d852:	3f f3 6a 00 	jlt %d3,%d15,8000d926 <_svfprintf_r+0xefa>
8000d856:	02 f9       	mov %d9,%d15
8000d858:	c2 18       	add %d8,1
8000d85a:	42 e9       	add %d9,%d14
8000d85c:	59 a8 20 10 	st.w [%sp]96,%d8
8000d860:	6c e1       	st.w [%a14]4,%d15
8000d862:	59 a9 24 10 	st.w [%sp]100,%d9
8000d866:	8b 88 80 82 	ge %d8,%d8,8
8000d86a:	d9 ef 08 00 	lea %a15,[%a14]8
8000d86e:	76 8b       	jz %d8,8000d884 <_svfprintf_r+0xe58>
8000d870:	60 c4       	mov.a %a4,%d12
8000d872:	60 b5       	mov.a %a5,%d11
8000d874:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d878:	6d 00 b7 0b 	call 8000efe6 <__ssprint_r>
8000d87c:	df 02 a3 81 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d880:	d9 af 10 20 	lea %a15,[%sp]144
8000d884:	58 11       	ld.w %d15,[%sp]68
8000d886:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d88a:	7b 00 00 88 	movh %d8,32768
8000d88e:	a2 2f       	sub %d15,%d2
8000d890:	1b 88 f4 80 	addi %d8,%d8,3912
8000d894:	3b 00 01 90 	mov %d9,16
8000d898:	bf 1f 3a 00 	jlt %d15,1,8000d90c <_svfprintf_r+0xee0>
8000d89c:	19 a5 24 10 	ld.w %d5,[%sp]100
8000d8a0:	19 a3 20 10 	ld.w %d3,[%sp]96
8000d8a4:	8b 1f 81 42 	ge %d4,%d15,17
8000d8a8:	68 08       	st.w [%a15]0,%d8
8000d8aa:	df 04 1c 00 	jeq %d4,0,8000d8e2 <_svfprintf_r+0xeb6>
8000d8ae:	c2 13       	add %d3,1
8000d8b0:	1b 05 01 40 	addi %d4,%d5,16
8000d8b4:	68 19       	st.w [%a15]4,%d9
8000d8b6:	59 a3 20 10 	st.w [%sp]96,%d3
8000d8ba:	59 a4 24 10 	st.w [%sp]100,%d4
8000d8be:	8b 83 80 32 	ge %d3,%d3,8
8000d8c2:	d9 ff 08 00 	lea %a15,[%a15]8
8000d8c6:	76 3b       	jz %d3,8000d8dc <_svfprintf_r+0xeb0>
8000d8c8:	60 c4       	mov.a %a4,%d12
8000d8ca:	60 b5       	mov.a %a5,%d11
8000d8cc:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d8d0:	6d 00 8b 0b 	call 8000efe6 <__ssprint_r>
8000d8d4:	df 02 77 81 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d8d8:	d9 af 10 20 	lea %a15,[%sp]144
8000d8dc:	1b 0f ff ff 	addi %d15,%d15,-16
8000d8e0:	3c de       	j 8000d89c <_svfprintf_r+0xe70>
8000d8e2:	68 1f       	st.w [%a15]4,%d15
8000d8e4:	12 54       	add %d4,%d15,%d5
8000d8e6:	9a 13       	add %d15,%d3,1
8000d8e8:	78 18       	st.w [%sp]96,%d15
8000d8ea:	59 a4 24 10 	st.w [%sp]100,%d4
8000d8ee:	8b 8f 80 f2 	ge %d15,%d15,8
8000d8f2:	d9 ff 08 00 	lea %a15,[%a15]8
8000d8f6:	6e 0b       	jz %d15,8000d90c <_svfprintf_r+0xee0>
8000d8f8:	60 c4       	mov.a %a4,%d12
8000d8fa:	60 b5       	mov.a %a5,%d11
8000d8fc:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d900:	6d 00 73 0b 	call 8000efe6 <__ssprint_r>
8000d904:	df 02 5f 81 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d908:	d9 af 10 20 	lea %a15,[%sp]144
8000d90c:	80 df       	mov.d %d15,%a13
8000d90e:	6f 0f f6 00 	jz.t %d15,0,8000dafa <_svfprintf_r+0x10ce>
8000d912:	99 a3 34 00 	ld.a %a3,[%sp]52
8000d916:	58 08       	ld.w %d15,[%sp]32
8000d918:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d91c:	68 1f       	st.w [%a15]4,%d15
8000d91e:	e8 03       	st.a [%a15]0,%a3
8000d920:	58 19       	ld.w %d15,[%sp]100
8000d922:	1d 00 e1 00 	j 8000dae4 <_svfprintf_r+0x10b8>
8000d926:	c2 18       	add %d8,1
8000d928:	59 e3 04 00 	st.w [%a14]4,%d3
8000d92c:	42 e3       	add %d3,%d14
8000d92e:	59 a8 20 10 	st.w [%sp]96,%d8
8000d932:	59 a3 24 10 	st.w [%sp]100,%d3
8000d936:	8b 88 80 82 	ge %d8,%d8,8
8000d93a:	d9 ef 08 00 	lea %a15,[%a14]8
8000d93e:	76 8b       	jz %d8,8000d954 <_svfprintf_r+0xf28>
8000d940:	60 c4       	mov.a %a4,%d12
8000d942:	60 b5       	mov.a %a5,%d11
8000d944:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d948:	6d 00 4f 0b 	call 8000efe6 <__ssprint_r>
8000d94c:	df 02 3b 81 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d950:	d9 af 10 20 	lea %a15,[%sp]144
8000d954:	58 08       	ld.w %d15,[%sp]32
8000d956:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d95a:	68 1f       	st.w [%a15]4,%d15
8000d95c:	58 19       	ld.w %d15,[%sp]100
8000d95e:	99 a3 34 00 	ld.a %a3,[%sp]52
8000d962:	42 2f       	add %d15,%d2
8000d964:	78 19       	st.w [%sp]100,%d15
8000d966:	58 18       	ld.w %d15,[%sp]96
8000d968:	99 ae 04 10 	ld.a %a14,[%sp]68
8000d96c:	c2 1f       	add %d15,1
8000d96e:	60 d2       	mov.a %a2,%d13
8000d970:	e8 03       	st.a [%a15]0,%a3
8000d972:	78 18       	st.w [%sp]96,%d15
8000d974:	8b 8f 80 f2 	ge %d15,%d15,8
8000d978:	30 2e       	add.a %a14,%a2
8000d97a:	d9 ff 08 00 	lea %a15,[%a15]8
8000d97e:	6e 0b       	jz %d15,8000d994 <_svfprintf_r+0xf68>
8000d980:	60 c4       	mov.a %a4,%d12
8000d982:	60 b5       	mov.a %a5,%d11
8000d984:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d988:	6d 00 2f 0b 	call 8000efe6 <__ssprint_r>
8000d98c:	df 02 1b 81 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d990:	d9 af 10 20 	lea %a15,[%sp]144
8000d994:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d998:	58 11       	ld.w %d15,[%sp]68
8000d99a:	e8 0e       	st.a [%a15]0,%a14
8000d99c:	5a f2       	sub %d15,%d2,%d15
8000d99e:	68 1f       	st.w [%a15]4,%d15
8000d9a0:	19 a2 24 10 	ld.w %d2,[%sp]100
8000d9a4:	1d 00 a0 00 	j 8000dae4 <_svfprintf_r+0x10b8>
8000d9a8:	c2 18       	add %d8,1
8000d9aa:	82 13       	mov %d3,1
8000d9ac:	1b 1e 00 90 	addi %d9,%d14,1
8000d9b0:	58 05       	ld.w %d15,[%sp]20
8000d9b2:	59 a8 20 10 	st.w [%sp]96,%d8
8000d9b6:	74 ed       	st.w [%a14],%d13
8000d9b8:	59 e3 04 00 	st.w [%a14]4,%d3
8000d9bc:	59 a9 24 10 	st.w [%sp]100,%d9
8000d9c0:	8b 88 80 82 	ge %d8,%d8,8
8000d9c4:	ff 2f 05 00 	jge %d15,2,8000d9ce <_svfprintf_r+0xfa2>
8000d9c8:	80 d2       	mov.d %d2,%a13
8000d9ca:	6f 02 81 00 	jz.t %d2,0,8000dacc <_svfprintf_r+0x10a0>
8000d9ce:	d9 ef 08 00 	lea %a15,[%a14]8
8000d9d2:	76 8b       	jz %d8,8000d9e8 <_svfprintf_r+0xfbc>
8000d9d4:	60 c4       	mov.a %a4,%d12
8000d9d6:	60 b5       	mov.a %a5,%d11
8000d9d8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d9dc:	6d 00 05 0b 	call 8000efe6 <__ssprint_r>
8000d9e0:	df 02 f1 80 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000d9e4:	d9 af 10 20 	lea %a15,[%sp]144
8000d9e8:	58 08       	ld.w %d15,[%sp]32
8000d9ea:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d9ee:	68 1f       	st.w [%a15]4,%d15
8000d9f0:	58 19       	ld.w %d15,[%sp]100
8000d9f2:	99 a3 34 00 	ld.a %a3,[%sp]52
8000d9f6:	42 2f       	add %d15,%d2
8000d9f8:	78 19       	st.w [%sp]100,%d15
8000d9fa:	58 18       	ld.w %d15,[%sp]96
8000d9fc:	e8 03       	st.a [%a15]0,%a3
8000d9fe:	c2 1f       	add %d15,1
8000da00:	78 18       	st.w [%sp]96,%d15
8000da02:	8b 8f 80 f2 	ge %d15,%d15,8
8000da06:	d9 ff 08 00 	lea %a15,[%a15]8
8000da0a:	6e 0b       	jz %d15,8000da20 <_svfprintf_r+0xff4>
8000da0c:	60 c4       	mov.a %a4,%d12
8000da0e:	60 b5       	mov.a %a5,%d11
8000da10:	d9 a6 1c 10 	lea %a6,[%sp]92
8000da14:	6d 00 e9 0a 	call 8000efe6 <__ssprint_r>
8000da18:	df 02 d5 80 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000da1c:	d9 af 10 20 	lea %a15,[%sp]144
8000da20:	d2 06       	mov %e6,0
8000da22:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000da26:	19 a5 30 00 	ld.w %d5,[%sp]48
8000da2a:	6d 00 03 0e 	call 8000f630 <__nedf2>
8000da2e:	58 05       	ld.w %d15,[%sp]20
8000da30:	c2 ff       	add %d15,-1
8000da32:	76 2c       	jz %d2,8000da4a <_svfprintf_r+0x101e>
8000da34:	19 a2 24 10 	ld.w %d2,[%sp]100
8000da38:	60 de       	mov.a %a14,%d13
8000da3a:	68 1f       	st.w [%a15]4,%d15
8000da3c:	42 2f       	add %d15,%d2
8000da3e:	78 19       	st.w [%sp]100,%d15
8000da40:	58 18       	ld.w %d15,[%sp]96
8000da42:	b0 1e       	add.a %a14,1
8000da44:	e8 0e       	st.a [%a15]0,%a14
8000da46:	c2 1f       	add %d15,1
8000da48:	3c 31       	j 8000daaa <_svfprintf_r+0x107e>
8000da4a:	7b 00 00 88 	movh %d8,32768
8000da4e:	1b 88 f4 80 	addi %d8,%d8,3912
8000da52:	3b 00 01 90 	mov %d9,16
8000da56:	bf 1f 3f 00 	jlt %d15,1,8000dad4 <_svfprintf_r+0x10a8>
8000da5a:	19 a5 24 10 	ld.w %d5,[%sp]100
8000da5e:	19 a3 20 10 	ld.w %d3,[%sp]96
8000da62:	8b 1f 81 42 	ge %d4,%d15,17
8000da66:	68 08       	st.w [%a15]0,%d8
8000da68:	df 04 1c 00 	jeq %d4,0,8000daa0 <_svfprintf_r+0x1074>
8000da6c:	c2 13       	add %d3,1
8000da6e:	1b 05 01 40 	addi %d4,%d5,16
8000da72:	68 19       	st.w [%a15]4,%d9
8000da74:	59 a3 20 10 	st.w [%sp]96,%d3
8000da78:	59 a4 24 10 	st.w [%sp]100,%d4
8000da7c:	8b 83 80 32 	ge %d3,%d3,8
8000da80:	d9 ff 08 00 	lea %a15,[%a15]8
8000da84:	76 3b       	jz %d3,8000da9a <_svfprintf_r+0x106e>
8000da86:	60 c4       	mov.a %a4,%d12
8000da88:	60 b5       	mov.a %a5,%d11
8000da8a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000da8e:	6d 00 ac 0a 	call 8000efe6 <__ssprint_r>
8000da92:	df 02 98 80 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000da96:	d9 af 10 20 	lea %a15,[%sp]144
8000da9a:	1b 0f ff ff 	addi %d15,%d15,-16
8000da9e:	3c de       	j 8000da5a <_svfprintf_r+0x102e>
8000daa0:	12 54       	add %d4,%d15,%d5
8000daa2:	68 1f       	st.w [%a15]4,%d15
8000daa4:	59 a4 24 10 	st.w [%sp]100,%d4
8000daa8:	9a 13       	add %d15,%d3,1
8000daaa:	78 18       	st.w [%sp]96,%d15
8000daac:	8b 8f 80 f2 	ge %d15,%d15,8
8000dab0:	d9 ff 08 00 	lea %a15,[%a15]8
8000dab4:	6e 10       	jz %d15,8000dad4 <_svfprintf_r+0x10a8>
8000dab6:	60 c4       	mov.a %a4,%d12
8000dab8:	60 b5       	mov.a %a5,%d11
8000daba:	d9 a6 1c 10 	lea %a6,[%sp]92
8000dabe:	6d 00 94 0a 	call 8000efe6 <__ssprint_r>
8000dac2:	df 02 80 80 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000dac6:	d9 af 10 20 	lea %a15,[%sp]144
8000daca:	3c 05       	j 8000dad4 <_svfprintf_r+0x10a8>
8000dacc:	df 08 f5 ff 	jne %d8,0,8000dab6 <_svfprintf_r+0x108a>
8000dad0:	d9 ef 08 00 	lea %a15,[%a14]8
8000dad4:	58 0e       	ld.w %d15,[%sp]56
8000dad6:	d9 a3 0d 10 	lea %a3,[%sp]77
8000dada:	68 1f       	st.w [%a15]4,%d15
8000dadc:	19 a2 38 00 	ld.w %d2,[%sp]56
8000dae0:	58 19       	ld.w %d15,[%sp]100
8000dae2:	e8 03       	st.a [%a15]0,%a3
8000dae4:	42 2f       	add %d15,%d2
8000dae6:	78 19       	st.w [%sp]100,%d15
8000dae8:	58 18       	ld.w %d15,[%sp]96
8000daea:	c2 1f       	add %d15,1
8000daec:	78 18       	st.w [%sp]96,%d15
8000daee:	8b 8f 80 f2 	ge %d15,%d15,8
8000daf2:	df 0f 8d fd 	jne %d15,0,8000d60c <_svfprintf_r+0xbe0>
8000daf6:	d9 ff 08 00 	lea %a15,[%a15]8
8000dafa:	80 df       	mov.d %d15,%a13
8000dafc:	ae 2d       	jnz.t %d15,2,8000db16 <_svfprintf_r+0x10ea>
8000dafe:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000db02:	0b 2a a0 f1 	max %d15,%d10,%d2
8000db06:	19 a2 28 00 	ld.w %d2,[%sp]40
8000db0a:	42 f2       	add %d2,%d15
8000db0c:	58 19       	ld.w %d15,[%sp]100
8000db0e:	59 a2 28 00 	st.w [%sp]40,%d2
8000db12:	6e 49       	jz %d15,8000dba4 <_svfprintf_r+0x1178>
8000db14:	3c 40       	j 8000db94 <_svfprintf_r+0x1168>
8000db16:	58 07       	ld.w %d15,[%sp]28
8000db18:	3b 00 01 80 	mov %d8,16
8000db1c:	a2 af       	sub %d15,%d10
8000db1e:	bf 1f f0 7f 	jlt %d15,1,8000dafe <_svfprintf_r+0x10d2>
8000db22:	91 00 00 28 	movh.a %a2,32768
8000db26:	d9 22 d8 d0 	lea %a2,[%a2]3928 <80000f58 <blanks.4035>>
8000db2a:	19 a5 24 10 	ld.w %d5,[%sp]100 <80000f58 <blanks.4035>>
8000db2e:	19 a3 20 10 	ld.w %d3,[%sp]96 <80000f58 <blanks.4035>>
8000db32:	8b 1f 81 42 	ge %d4,%d15,17
8000db36:	e8 02       	st.a [%a15]0,%a2
8000db38:	df 04 1c 00 	jeq %d4,0,8000db70 <_svfprintf_r+0x1144>
8000db3c:	c2 13       	add %d3,1
8000db3e:	1b 05 01 40 	addi %d4,%d5,16
8000db42:	68 18       	st.w [%a15]4,%d8
8000db44:	59 a3 20 10 	st.w [%sp]96,%d3
8000db48:	59 a4 24 10 	st.w [%sp]100,%d4
8000db4c:	8b 83 80 32 	ge %d3,%d3,8
8000db50:	d9 ff 08 00 	lea %a15,[%a15]8
8000db54:	76 3b       	jz %d3,8000db6a <_svfprintf_r+0x113e>
8000db56:	60 c4       	mov.a %a4,%d12
8000db58:	60 b5       	mov.a %a5,%d11
8000db5a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000db5e:	6d 00 44 0a 	call 8000efe6 <__ssprint_r>
8000db62:	df 02 30 80 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000db66:	d9 af 10 20 	lea %a15,[%sp]144
8000db6a:	1b 0f ff ff 	addi %d15,%d15,-16
8000db6e:	3c da       	j 8000db22 <_svfprintf_r+0x10f6>
8000db70:	12 54       	add %d4,%d15,%d5
8000db72:	68 1f       	st.w [%a15]4,%d15
8000db74:	9a 13       	add %d15,%d3,1
8000db76:	78 18       	st.w [%sp]96,%d15
8000db78:	59 a4 24 10 	st.w [%sp]100,%d4
8000db7c:	8b 8f 40 f2 	lt %d15,%d15,8
8000db80:	ee bf       	jnz %d15,8000dafe <_svfprintf_r+0x10d2>
8000db82:	60 c4       	mov.a %a4,%d12
8000db84:	60 b5       	mov.a %a5,%d11
8000db86:	d9 a6 1c 10 	lea %a6,[%sp]92
8000db8a:	6d 00 2e 0a 	call 8000efe6 <__ssprint_r>
8000db8e:	df 02 b8 7f 	jeq %d2,0,8000dafe <_svfprintf_r+0x10d2>
8000db92:	3c 18       	j 8000dbc2 <_svfprintf_r+0x1196>
8000db94:	60 c4       	mov.a %a4,%d12
8000db96:	60 b5       	mov.a %a5,%d11
8000db98:	d9 a6 1c 10 	lea %a6,[%sp]92
8000db9c:	6d 00 25 0a 	call 8000efe6 <__ssprint_r>
8000dba0:	df 02 11 80 	jne %d2,0,8000dbc2 <_svfprintf_r+0x1196>
8000dba4:	82 0f       	mov %d15,0
8000dba6:	78 18       	st.w [%sp]96,%d15
8000dba8:	40 cf       	mov.aa %a15,%a12
8000dbaa:	d9 ae 10 20 	lea %a14,[%sp]144
8000dbae:	1d ff 77 f7 	j 8000ca9c <_svfprintf_r+0x70>
8000dbb2:	58 19       	ld.w %d15,[%sp]100
8000dbb4:	6e 07       	jz %d15,8000dbc2 <_svfprintf_r+0x1196>
8000dbb6:	60 c4       	mov.a %a4,%d12
8000dbb8:	60 b5       	mov.a %a5,%d11
8000dbba:	d9 a6 1c 10 	lea %a6,[%sp]92
8000dbbe:	6d 00 14 0a 	call 8000efe6 <__ssprint_r>
8000dbc2:	60 b3       	mov.a %a3,%d11
8000dbc4:	19 a2 28 00 	ld.w %d2,[%sp]40
8000dbc8:	8c 36       	ld.h %d15,[%a3]12
8000dbca:	16 40       	and %d15,64
8000dbcc:	aa f2       	cmov %d2,%d15,-1
8000dbce:	00 90       	ret 

8000dbd0 <quorem>:
8000dbd0:	19 58 10 00 	ld.w %d8,[%a5]16
8000dbd4:	4c 44       	ld.w %d15,[%a4]16
8000dbd6:	82 02       	mov %d2,0
8000dbd8:	3f 8f 88 00 	jlt %d15,%d8,8000dce8 <quorem+0x118>
8000dbdc:	c2 f8       	add %d8,-1
8000dbde:	80 4f       	mov.d %d15,%a4
8000dbe0:	8f 28 00 20 	sh %d2,%d8,2
8000dbe4:	60 2f       	mov.a %a15,%d2
8000dbe6:	1b 4f 01 90 	addi %d9,%d15,20
8000dbea:	d9 5c 14 00 	lea %a12,[%a5]20
8000dbee:	01 fc 10 d0 	add.a %a13,%a12,%a15
8000dbf2:	01 f9 00 f6 	addsc.a %a15,%a15,%d9,0
8000dbf6:	54 dc       	ld.w %d12,[%a13]
8000dbf8:	4c f0       	ld.w %d15,[%a15]0
8000dbfa:	c2 1c       	add %d12,1
8000dbfc:	4b cf 11 c2 	div.u %e12,%d15,%d12
8000dc00:	02 ca       	mov %d10,%d12
8000dc02:	df 0c 3d 00 	jeq %d12,0,8000dc7c <quorem+0xac>
8000dc06:	60 96       	mov.a %a6,%d9
8000dc08:	40 c2       	mov.aa %a2,%a12
8000dc0a:	82 05       	mov %d5,0
8000dc0c:	82 06       	mov %d6,0
8000dc0e:	54 22       	ld.w %d2,[%a2]
8000dc10:	40 63       	mov.aa %a3,%a6
8000dc12:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000dc16:	8f 02 1f 20 	sh %d2,%d2,-16
8000dc1a:	03 a3 0a 35 	madd %d3,%d5,%d3,%d10
8000dc1e:	b0 42       	add.a %a2,4
8000dc20:	8f 03 1f 40 	sh %d4,%d3,-16
8000dc24:	03 a2 0a 24 	madd %d2,%d4,%d2,%d10
8000dc28:	44 34       	ld.w %d4,[%a3+]
8000dc2a:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000dc2e:	b7 04 10 f8 	insert %d15,%d4,0,16,16
8000dc32:	8f 02 1f 50 	sh %d5,%d2,-16
8000dc36:	42 f6       	add %d6,%d15
8000dc38:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000dc3c:	0b 36 80 30 	sub %d3,%d6,%d3
8000dc40:	8f 04 1f 40 	sh %d4,%d4,-16
8000dc44:	8f 03 3f f0 	sha %d15,%d3,-16
8000dc48:	0b 24 80 20 	sub %d2,%d4,%d2
8000dc4c:	42 f2       	add %d2,%d15
8000dc4e:	37 23 10 38 	insert %d3,%d3,%d2,16,16
8000dc52:	8f 02 3f 60 	sha %d6,%d2,-16
8000dc56:	80 2f       	mov.d %d15,%a2
8000dc58:	80 d2       	mov.d %d2,%a13
8000dc5a:	74 63       	st.w [%a6],%d3
8000dc5c:	40 36       	mov.aa %a6,%a3
8000dc5e:	7f f2 d8 ff 	jge.u %d2,%d15,8000dc0e <quorem+0x3e>
8000dc62:	4c f0       	ld.w %d15,[%a15]0
8000dc64:	ee 0c       	jnz %d15,8000dc7c <quorem+0xac>
8000dc66:	b0 cf       	add.a %a15,-4
8000dc68:	80 f2       	mov.d %d2,%a15
8000dc6a:	3f 29 05 80 	jlt.u %d9,%d2,8000dc74 <quorem+0xa4>
8000dc6e:	59 48 10 00 	st.w [%a4]16,%d8
8000dc72:	3c 05       	j 8000dc7c <quorem+0xac>
8000dc74:	4c f0       	ld.w %d15,[%a15]0
8000dc76:	ee fc       	jnz %d15,8000dc6e <quorem+0x9e>
8000dc78:	c2 f8       	add %d8,-1
8000dc7a:	3c f6       	j 8000dc66 <quorem+0x96>
8000dc7c:	40 4e       	mov.aa %a14,%a4
8000dc7e:	6d 00 b9 08 	call 8000edf0 <__mcmp>
8000dc82:	bf 02 32 00 	jlt %d2,0,8000dce6 <quorem+0x116>
8000dc86:	60 92       	mov.a %a2,%d9
8000dc88:	1b 1c 00 a0 	addi %d10,%d12,1
8000dc8c:	82 04       	mov %d4,0
8000dc8e:	40 2f       	mov.aa %a15,%a2
8000dc90:	44 f3       	ld.w %d3,[%a15+]
8000dc92:	54 c5       	ld.w %d5,[%a12]
8000dc94:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000dc98:	8f 05 1f f0 	sh %d15,%d5,-16
8000dc9c:	42 42       	add %d2,%d4
8000dc9e:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000dca2:	8f 03 1f 30 	sh %d3,%d3,-16
8000dca6:	a2 42       	sub %d2,%d4
8000dca8:	8f 02 3f 40 	sha %d4,%d2,-16
8000dcac:	a2 f3       	sub %d3,%d15
8000dcae:	42 43       	add %d3,%d4
8000dcb0:	8f 03 3f 40 	sha %d4,%d3,-16
8000dcb4:	b0 4c       	add.a %a12,4
8000dcb6:	37 32 10 38 	insert %d3,%d2,%d3,16,16
8000dcba:	80 df       	mov.d %d15,%a13
8000dcbc:	80 c2       	mov.d %d2,%a12
8000dcbe:	74 23       	st.w [%a2],%d3
8000dcc0:	40 f2       	mov.aa %a2,%a15
8000dcc2:	7f 2f e6 ff 	jge.u %d15,%d2,8000dc8e <quorem+0xbe>
8000dcc6:	60 92       	mov.a %a2,%d9
8000dcc8:	01 28 02 f6 	addsc.a %a15,%a2,%d8,2
8000dccc:	4c f0       	ld.w %d15,[%a15]0
8000dcce:	ee 0c       	jnz %d15,8000dce6 <quorem+0x116>
8000dcd0:	b0 cf       	add.a %a15,-4
8000dcd2:	80 f2       	mov.d %d2,%a15
8000dcd4:	3f 29 05 80 	jlt.u %d9,%d2,8000dcde <quorem+0x10e>
8000dcd8:	59 e8 10 00 	st.w [%a14]16,%d8
8000dcdc:	3c 05       	j 8000dce6 <quorem+0x116>
8000dcde:	4c f0       	ld.w %d15,[%a15]0
8000dce0:	ee fc       	jnz %d15,8000dcd8 <quorem+0x108>
8000dce2:	c2 f8       	add %d8,-1
8000dce4:	3c f6       	j 8000dcd0 <quorem+0x100>
8000dce6:	02 a2       	mov %d2,%d10
8000dce8:	00 90       	ret 
	...

8000dcec <_dtoa_r>:
8000dcec:	20 58       	sub.a %sp,88
8000dcee:	b5 a5 08 10 	st.a [%sp]72,%a5
8000dcf2:	99 45 00 10 	ld.a %a5,[%a4]64
8000dcf6:	59 a6 1c 00 	st.w [%sp]28,%d6
8000dcfa:	59 a7 28 00 	st.w [%sp]40,%d7
8000dcfe:	b5 a7 38 00 	st.a [%sp]56,%a7
8000dd02:	40 4d       	mov.aa %a13,%a4
8000dd04:	0b 45 10 88 	mov %e8,%d5,%d4
8000dd08:	40 6c       	mov.aa %a12,%a6
8000dd0a:	0b 45 10 c8 	mov %e12,%d5,%d4
8000dd0e:	bc 5e       	jz.a %a5,8000dd2a <_dtoa_r+0x3e>
8000dd10:	19 4f 04 10 	ld.w %d15,[%a4]68
8000dd14:	82 12       	mov %d2,1
8000dd16:	0f f2 00 20 	sh %d2,%d2,%d15
8000dd1a:	6c 51       	st.w [%a5]4,%d15
8000dd1c:	59 52 08 00 	st.w [%a5]8,%d2
8000dd20:	82 0f       	mov %d15,0
8000dd22:	6d 00 99 06 	call 8000ea54 <_Bfree>
8000dd26:	59 df 00 10 	st.w [%a13]64,%d15
8000dd2a:	ce 96       	jgez %d9,8000dd36 <_dtoa_r+0x4a>
8000dd2c:	82 1f       	mov %d15,1
8000dd2e:	6c c0       	st.w [%a12]0,%d15
8000dd30:	b7 09 81 df 	insert %d13,%d9,0,31,1
8000dd34:	3c 03       	j 8000dd3a <_dtoa_r+0x4e>
8000dd36:	82 0f       	mov %d15,0
8000dd38:	6c c0       	st.w [%a12]0,%d15
8000dd3a:	7b 00 ff 27 	movh %d2,32752
8000dd3e:	26 d2       	and %d2,%d13
8000dd40:	7b 00 ff 37 	movh %d3,32752
8000dd44:	5f 32 22 80 	jne %d2,%d3,8000dd88 <_dtoa_r+0x9c>
8000dd48:	99 a3 08 10 	ld.a %a3,[%sp]72
8000dd4c:	3b f0 70 22 	mov %d2,9999
8000dd50:	91 00 00 f8 	movh.a %a15,32768
8000dd54:	74 32       	st.w [%a3],%d2
8000dd56:	d9 ff f1 d0 	lea %a15,[%a15]3953 <80000f71 <blanks.4035+0x19>>
8000dd5a:	f6 c8       	jnz %d12,8000dd6a <_dtoa_r+0x7e>
8000dd5c:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000dd60:	ee 05       	jnz %d15,8000dd6a <_dtoa_r+0x7e>
8000dd62:	91 00 00 f8 	movh.a %a15,32768
8000dd66:	d9 ff e8 d0 	lea %a15,[%a15]3944 <80000f68 <blanks.4035+0x10>>
8000dd6a:	99 a3 38 00 	ld.a %a3,[%sp]56 <80000f68 <blanks.4035+0x10>>
8000dd6e:	40 f2       	mov.aa %a2,%a15
8000dd70:	bd 03 26 06 	jz.a %a3,8000e9bc <_dtoa_r+0xcd0>
8000dd74:	80 ff       	mov.d %d15,%a15
8000dd76:	79 f3 03 00 	ld.b %d3,[%a15]3 <80000003 <BootModeHeader0+0x3>>
8000dd7a:	1b 8f 00 20 	addi %d2,%d15,8
8000dd7e:	c2 3f       	add %d15,3
8000dd80:	2b 2f 50 f3 	seln %d15,%d3,%d15,%d2
8000dd84:	6c 30       	st.w [%a3]0,%d15
8000dd86:	00 90       	ret 
8000dd88:	0b cd 10 48 	mov %e4,%d13,%d12
8000dd8c:	d2 06       	mov %e6,0
8000dd8e:	0b cd 10 88 	mov %e8,%d13,%d12
8000dd92:	6d 00 2f 0c 	call 8000f5f0 <__eqdf2>
8000dd96:	df 02 13 80 	jne %d2,0,8000ddbc <_dtoa_r+0xd0>
8000dd9a:	99 a3 08 10 	ld.a %a3,[%sp]72
8000dd9e:	d8 0e       	ld.a %a15,[%sp]56
8000dda0:	82 1f       	mov %d15,1
8000dda2:	91 00 00 28 	movh.a %a2,32768
8000dda6:	6c 30       	st.w [%a3]0,%d15
8000dda8:	d9 22 f5 d0 	lea %a2,[%a2]3957 <80000f75 <blanks.4035+0x1d>>
8000ddac:	bd 0f 08 06 	jz.a %a15,8000e9bc <_dtoa_r+0xcd0>
8000ddb0:	7b 00 00 f8 	movh %d15,32768
8000ddb4:	1b 6f f7 f0 	addi %d15,%d15,3958
8000ddb8:	68 0f       	st.w [%a15]0,%d15
8000ddba:	00 90       	ret 
8000ddbc:	0b cd 10 48 	mov %e4,%d13,%d12
8000ddc0:	40 d4       	mov.aa %a4,%a13
8000ddc2:	d9 a5 14 10 	lea %a5,[%sp]84
8000ddc6:	d9 a6 10 10 	lea %a6,[%sp]80
8000ddca:	6d 00 99 08 	call 8000eefc <__d2b>
8000ddce:	37 0d 6b ba 	extr.u %d11,%d13,20,11
8000ddd2:	40 2e       	mov.aa %a14,%a2
8000ddd4:	19 aa 10 10 	ld.w %d10,[%sp]80
8000ddd8:	76 bd       	jz %d11,8000ddf2 <_dtoa_r+0x106>
8000ddda:	b7 09 0c fa 	insert %d15,%d9,0,20,12
8000ddde:	0b cd 10 48 	mov %e4,%d13,%d12
8000dde2:	7b 00 ff 23 	movh %d2,16368
8000dde6:	0f 2f a0 50 	or %d5,%d15,%d2
8000ddea:	1b 1b c0 bf 	addi %d11,%d11,-1023
8000ddee:	82 0f       	mov %d15,0
8000ddf0:	3c 22       	j 8000de34 <_dtoa_r+0x148>
8000ddf2:	19 ab 14 10 	ld.w %d11,[%sp]84
8000ddf6:	3b e0 be 4f 	mov %d4,-1042
8000ddfa:	42 ab       	add %d11,%d10
8000ddfc:	a2 b4       	sub %d4,%d11
8000ddfe:	3b f0 be 2f 	mov %d2,-1041
8000de02:	0f 4c 00 40 	sh %d4,%d12,%d4
8000de06:	3f 2b 0f 00 	jlt %d11,%d2,8000de24 <_dtoa_r+0x138>
8000de0a:	1b 2b 41 30 	addi %d3,%d11,1042
8000de0e:	3b e0 c0 4f 	mov %d4,-1010
8000de12:	a2 b4       	sub %d4,%d11
8000de14:	8b 03 00 21 	rsub %d2,%d3,0
8000de18:	0f 2c 00 20 	sh %d2,%d12,%d2
8000de1c:	0f 4d 00 f0 	sh %d15,%d13,%d4
8000de20:	0f f2 a0 40 	or %d4,%d2,%d15
8000de24:	6d ff 7b f0 	call 8000bf1a <__floatunsidf>
8000de28:	0b 23 10 48 	mov %e4,%d3,%d2
8000de2c:	9b 03 e1 5f 	addih %d5,%d3,65040
8000de30:	c2 fb       	add %d11,-1
8000de32:	82 1f       	mov %d15,1
8000de34:	b7 00 ab 69 	imask %e6,0,19,11
8000de38:	78 13       	st.w [%sp]76,%d15
8000de3a:	6d ff a1 ee 	call 8000bb7c <__subdf3>
8000de3e:	7b 30 fd 73 	movh %d7,16339
8000de42:	0b 23 10 48 	mov %e4,%d3,%d2
8000de46:	7b f0 36 66 	movh %d6,25455
8000de4a:	1b 77 7a 78 	addi %d7,%d7,-30809
8000de4e:	1b 16 36 64 	addi %d6,%d6,17249
8000de52:	6d ff b5 ee 	call 8000bbbc <__muldf3>
8000de56:	7b 70 fc 73 	movh %d7,16327
8000de5a:	0b 23 10 48 	mov %e4,%d3,%d2
8000de5e:	7b 10 b6 68 	movh %d6,35681
8000de62:	1b 87 a2 78 	addi %d7,%d7,-30168
8000de66:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000de6a:	6d ff 6d ee 	call 8000bb44 <__adddf3>
8000de6e:	02 b4       	mov %d4,%d11
8000de70:	0b 23 10 88 	mov %e8,%d3,%d2
8000de74:	6d ff 02 f0 	call 8000be78 <__floatsidf>
8000de78:	7b 30 fd 73 	movh %d7,16339
8000de7c:	0b 23 10 48 	mov %e4,%d3,%d2
8000de80:	7b f0 09 65 	movh %d6,20639
8000de84:	1b 37 41 74 	addi %d7,%d7,17427
8000de88:	1b b6 9f 67 	addi %d6,%d6,31227
8000de8c:	6d ff 98 ee 	call 8000bbbc <__muldf3>
8000de90:	0b 89 10 48 	mov %e4,%d9,%d8
8000de94:	0b 23 10 68 	mov %e6,%d3,%d2
8000de98:	6d ff 56 ee 	call 8000bb44 <__adddf3>
8000de9c:	0b 23 10 48 	mov %e4,%d3,%d2
8000dea0:	0b 23 10 88 	mov %e8,%d3,%d2
8000dea4:	6d 00 46 0c 	call 8000f730 <__fixdfsi>
8000dea8:	0b 89 10 48 	mov %e4,%d9,%d8
8000deac:	d2 06       	mov %e6,0
8000deae:	59 a2 08 00 	st.w [%sp]8,%d2
8000deb2:	6d 00 1f 0c 	call 8000f6f0 <__ltdf2>
8000deb6:	ff 02 12 00 	jge %d2,0,8000deda <_dtoa_r+0x1ee>
8000deba:	19 a4 08 00 	ld.w %d4,[%sp]8
8000debe:	6d ff dd ef 	call 8000be78 <__floatsidf>
8000dec2:	0b 89 10 48 	mov %e4,%d9,%d8
8000dec6:	0b 23 10 68 	mov %e6,%d3,%d2
8000deca:	6d 00 b3 0b 	call 8000f630 <__nedf2>
8000dece:	19 a3 08 00 	ld.w %d3,[%sp]8
8000ded2:	ab f3 1f 32 	cadd %d3,%d2,%d3,-1
8000ded6:	59 a3 08 00 	st.w [%sp]8,%d3
8000deda:	19 a2 08 00 	ld.w %d2,[%sp]8
8000dede:	82 13       	mov %d3,1
8000dee0:	8b 72 a1 f2 	ge.u %d15,%d2,23
8000dee4:	59 a3 3c 00 	st.w [%sp]60,%d3
8000dee8:	ee 18       	jnz %d15,8000df18 <_dtoa_r+0x22c>
8000deea:	91 00 00 f8 	movh.a %a15,32768
8000deee:	d9 ff 18 01 	lea %a15,[%a15]4120 <80001018 <__mprec_tens>>
8000def2:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000def6:	0b cd 10 68 	mov %e6,%d13,%d12
8000defa:	09 f4 40 09 	ld.d %e4,[%a15]
8000defe:	6d 00 b9 0b 	call 8000f670 <__gtdf2>
8000df02:	8e 28       	jlez %d2,8000df12 <_dtoa_r+0x226>
8000df04:	58 02       	ld.w %d15,[%sp]8
8000df06:	82 02       	mov %d2,0
8000df08:	c2 ff       	add %d15,-1
8000df0a:	78 02       	st.w [%sp]8,%d15
8000df0c:	59 a2 3c 00 	st.w [%sp]60,%d2
8000df10:	3c 04       	j 8000df18 <_dtoa_r+0x22c>
8000df12:	82 03       	mov %d3,0
8000df14:	59 a3 3c 00 	st.w [%sp]60,%d3
8000df18:	0b ba 80 b0 	sub %d11,%d10,%d11
8000df1c:	9a fb       	add %d15,%d11,-1
8000df1e:	82 02       	mov %d2,0
8000df20:	78 06       	st.w [%sp]24,%d15
8000df22:	59 a2 14 00 	st.w [%sp]20,%d2
8000df26:	ce f6       	jgez %d15,8000df32 <_dtoa_r+0x246>
8000df28:	32 5f       	rsub %d15
8000df2a:	82 03       	mov %d3,0
8000df2c:	78 05       	st.w [%sp]20,%d15
8000df2e:	59 a3 18 00 	st.w [%sp]24,%d3
8000df32:	58 02       	ld.w %d15,[%sp]8
8000df34:	0e fa       	jltz %d15,8000df48 <_dtoa_r+0x25c>
8000df36:	19 a2 18 00 	ld.w %d2,[%sp]24
8000df3a:	78 0d       	st.w [%sp]52,%d15
8000df3c:	42 f2       	add %d2,%d15
8000df3e:	82 0f       	mov %d15,0
8000df40:	59 a2 18 00 	st.w [%sp]24,%d2
8000df44:	78 08       	st.w [%sp]32,%d15
8000df46:	3c 0d       	j 8000df60 <_dtoa_r+0x274>
8000df48:	19 a2 14 00 	ld.w %d2,[%sp]20
8000df4c:	19 a3 08 00 	ld.w %d3,[%sp]8
8000df50:	82 0f       	mov %d15,0
8000df52:	a2 32       	sub %d2,%d3
8000df54:	32 53       	rsub %d3
8000df56:	59 a2 14 00 	st.w [%sp]20,%d2
8000df5a:	59 a3 20 00 	st.w [%sp]32,%d3
8000df5e:	78 0d       	st.w [%sp]52,%d15
8000df60:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000df64:	82 18       	mov %d8,1
8000df66:	ff a2 46 80 	jge.u %d2,10,8000dff2 <_dtoa_r+0x306>
8000df6a:	bf 62 06 00 	jlt %d2,6,8000df76 <_dtoa_r+0x28a>
8000df6e:	c2 c2       	add %d2,-4
8000df70:	59 a2 1c 00 	st.w [%sp]28,%d2
8000df74:	82 08       	mov %d8,0
8000df76:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000df7a:	c2 e3       	add %d3,-2
8000df7c:	ff 43 4b 80 	jge.u %d3,4,8000e012 <_dtoa_r+0x326>
8000df80:	91 10 00 f8 	movh.a %a15,32769
8000df84:	d9 ff d0 ed 	lea %a15,[%a15]-8304 <8000df90 <_dtoa_r+0x2a4>>
8000df88:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000df8c:	dc 0f       	ji %a15
8000df8e:	00 00       	nop 
8000df90:	1d 00 08 00 	j 8000dfa0 <_dtoa_r+0x2b4>
8000df94:	1d 00 1c 00 	j 8000dfcc <_dtoa_r+0x2e0>
8000df98:	1d 00 08 00 	j 8000dfa8 <_dtoa_r+0x2bc>
8000df9c:	1d 00 1c 00 	j 8000dfd4 <_dtoa_r+0x2e8>
8000dfa0:	82 03       	mov %d3,0
8000dfa2:	59 a3 24 00 	st.w [%sp]36,%d3
8000dfa6:	3c 03       	j 8000dfac <_dtoa_r+0x2c0>
8000dfa8:	82 1f       	mov %d15,1
8000dfaa:	78 09       	st.w [%sp]36,%d15
8000dfac:	19 a2 28 00 	ld.w %d2,[%sp]40
8000dfb0:	59 a2 2c 00 	st.w [%sp]44,%d2
8000dfb4:	59 a2 10 00 	st.w [%sp]16,%d2
8000dfb8:	02 23       	mov %d3,%d2
8000dfba:	ff 12 38 00 	jge %d2,1,8000e02a <_dtoa_r+0x33e>
8000dfbe:	82 13       	mov %d3,1
8000dfc0:	82 1f       	mov %d15,1
8000dfc2:	59 a3 2c 00 	st.w [%sp]44,%d3
8000dfc6:	78 04       	st.w [%sp]16,%d15
8000dfc8:	82 12       	mov %d2,1
8000dfca:	3c 21       	j 8000e00c <_dtoa_r+0x320>
8000dfcc:	82 03       	mov %d3,0
8000dfce:	59 a3 24 00 	st.w [%sp]36,%d3
8000dfd2:	3c 03       	j 8000dfd8 <_dtoa_r+0x2ec>
8000dfd4:	82 1f       	mov %d15,1
8000dfd6:	78 09       	st.w [%sp]36,%d15
8000dfd8:	19 a3 08 00 	ld.w %d3,[%sp]8
8000dfdc:	19 a2 28 00 	ld.w %d2,[%sp]40
8000dfe0:	42 32       	add %d2,%d3
8000dfe2:	59 a2 2c 00 	st.w [%sp]44,%d2
8000dfe6:	c2 12       	add %d2,1
8000dfe8:	59 a2 10 00 	st.w [%sp]16,%d2
8000dfec:	8b 12 40 33 	max %d3,%d2,1
8000dff0:	3c 1d       	j 8000e02a <_dtoa_r+0x33e>
8000dff2:	82 0f       	mov %d15,0
8000dff4:	82 12       	mov %d2,1
8000dff6:	82 f3       	mov %d3,-1
8000dff8:	78 07       	st.w [%sp]28,%d15
8000dffa:	82 ff       	mov %d15,-1
8000dffc:	59 a2 24 00 	st.w [%sp]36,%d2
8000e000:	59 a3 2c 00 	st.w [%sp]44,%d3
8000e004:	78 04       	st.w [%sp]16,%d15
8000e006:	3b 20 01 30 	mov %d3,18
8000e00a:	82 02       	mov %d2,0
8000e00c:	59 a2 28 00 	st.w [%sp]40,%d2
8000e010:	3c 0d       	j 8000e02a <_dtoa_r+0x33e>
8000e012:	82 ff       	mov %d15,-1
8000e014:	82 13       	mov %d3,1
8000e016:	78 0b       	st.w [%sp]44,%d15
8000e018:	82 f2       	mov %d2,-1
8000e01a:	82 0f       	mov %d15,0
8000e01c:	59 a3 24 00 	st.w [%sp]36,%d3
8000e020:	59 a2 10 00 	st.w [%sp]16,%d2
8000e024:	3b 20 01 30 	mov %d3,18
8000e028:	78 0a       	st.w [%sp]40,%d15
8000e02a:	82 05       	mov %d5,0
8000e02c:	59 d5 04 10 	st.w [%a13]68,%d5
8000e030:	82 45       	mov %d5,4
8000e032:	1b 45 01 00 	addi %d0,%d5,20
8000e036:	3f 03 09 80 	jlt.u %d3,%d0,8000e048 <_dtoa_r+0x35c>
8000e03a:	19 d0 04 10 	ld.w %d0,[%a13]68
8000e03e:	06 15       	sh %d5,1
8000e040:	c2 10       	add %d0,1
8000e042:	59 d0 04 10 	st.w [%a13]68,%d0
8000e046:	3c f6       	j 8000e032 <_dtoa_r+0x346>
8000e048:	40 d4       	mov.aa %a4,%a13
8000e04a:	19 d4 04 10 	ld.w %d4,[%a13]68
8000e04e:	6d 00 d8 04 	call 8000e9fe <_Balloc>
8000e052:	19 a2 10 00 	ld.w %d2,[%sp]16
8000e056:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000e05a:	8b f2 60 32 	lt.u %d3,%d2,15
8000e05e:	b5 d2 00 10 	st.a [%a13]64,%a2
8000e062:	26 38       	and %d8,%d3
8000e064:	df 08 97 01 	jeq %d8,0,8000e392 <_dtoa_r+0x6a6>
8000e068:	19 a3 08 00 	ld.w %d3,[%sp]8
8000e06c:	89 ac 40 19 	st.d [%sp]64,%e12
8000e070:	bf 13 3f 00 	jlt %d3,1,8000e0ee <_dtoa_r+0x402>
8000e074:	91 00 00 f8 	movh.a %a15,32768
8000e078:	8f f3 00 31 	and %d3,%d3,15
8000e07c:	d9 ff 18 01 	lea %a15,[%a15]4120 <80001018 <__mprec_tens>>
8000e080:	19 ae 08 00 	ld.w %d14,[%sp]8 <80001018 <__mprec_tens>>
8000e084:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000e088:	86 ce       	sha %d14,-4
8000e08a:	09 f8 40 09 	ld.d %e8,[%a15]
8000e08e:	82 2a       	mov %d10,2
8000e090:	6f 4e 11 00 	jz.t %d14,4,8000e0b2 <_dtoa_r+0x3c6>
8000e094:	91 00 00 f8 	movh.a %a15,32768
8000e098:	0b cd 10 48 	mov %e4,%d13,%d12
8000e09c:	d9 ff f0 f0 	lea %a15,[%a15]4080 <80000ff0 <__mprec_bigtens>>
8000e0a0:	09 f6 60 09 	ld.d %e6,[%a15]32 <80000020 <_start>>
8000e0a4:	6d ff 5e ee 	call 8000bd60 <__divdf3>
8000e0a8:	0b 23 10 c8 	mov %e12,%d3,%d2
8000e0ac:	8f fe 00 e1 	and %d14,%d14,15
8000e0b0:	82 3a       	mov %d10,3
8000e0b2:	7b 00 00 b8 	movh %d11,32768
8000e0b6:	82 0f       	mov %d15,0
8000e0b8:	1b 0b ff b0 	addi %d11,%d11,4080
8000e0bc:	df 0e 12 00 	jeq %d14,0,8000e0e0 <_dtoa_r+0x3f4>
8000e0c0:	6f 0e 0d 00 	jz.t %d14,0,8000e0da <_dtoa_r+0x3ee>
8000e0c4:	60 b2       	mov.a %a2,%d11
8000e0c6:	d0 2f       	addsc.a %a15,%a2,%d15,3
8000e0c8:	0b 89 10 48 	mov %e4,%d9,%d8
8000e0cc:	09 f6 40 09 	ld.d %e6,[%a15]
8000e0d0:	6d ff 76 ed 	call 8000bbbc <__muldf3>
8000e0d4:	0b 23 10 88 	mov %e8,%d3,%d2
8000e0d8:	c2 1a       	add %d10,1
8000e0da:	86 fe       	sha %d14,-1
8000e0dc:	c2 1f       	add %d15,1
8000e0de:	3c ef       	j 8000e0bc <_dtoa_r+0x3d0>
8000e0e0:	0b cd 10 48 	mov %e4,%d13,%d12
8000e0e4:	0b 89 10 68 	mov %e6,%d9,%d8
8000e0e8:	6d ff 3c ee 	call 8000bd60 <__divdf3>
8000e0ec:	3c 2c       	j 8000e144 <_dtoa_r+0x458>
8000e0ee:	19 a8 08 00 	ld.w %d8,[%sp]8
8000e0f2:	82 2a       	mov %d10,2
8000e0f4:	32 58       	rsub %d8
8000e0f6:	df 08 29 00 	jeq %d8,0,8000e148 <_dtoa_r+0x45c>
8000e0fa:	91 00 00 f8 	movh.a %a15,32768
8000e0fe:	8f f8 00 31 	and %d3,%d8,15
8000e102:	d9 ff 18 01 	lea %a15,[%a15]4120 <80001018 <__mprec_tens>>
8000e106:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000e10a:	09 a4 40 19 	ld.d %e4,[%sp]64
8000e10e:	09 f6 40 09 	ld.d %e6,[%a15]
8000e112:	7b 00 00 c8 	movh %d12,32768
8000e116:	6d ff 53 ed 	call 8000bbbc <__muldf3>
8000e11a:	82 09       	mov %d9,0
8000e11c:	86 c8       	sha %d8,-4
8000e11e:	1b 0c ff c0 	addi %d12,%d12,4080
8000e122:	df 08 11 00 	jeq %d8,0,8000e144 <_dtoa_r+0x458>
8000e126:	6f 08 0c 00 	jz.t %d8,0,8000e13e <_dtoa_r+0x452>
8000e12a:	60 c3       	mov.a %a3,%d12
8000e12c:	01 39 03 f6 	addsc.a %a15,%a3,%d9,3
8000e130:	0b 23 10 48 	mov %e4,%d3,%d2
8000e134:	09 f6 40 09 	ld.d %e6,[%a15]
8000e138:	c2 1a       	add %d10,1
8000e13a:	6d ff 41 ed 	call 8000bbbc <__muldf3>
8000e13e:	86 f8       	sha %d8,-1
8000e140:	c2 19       	add %d9,1
8000e142:	3c f0       	j 8000e122 <_dtoa_r+0x436>
8000e144:	0b 23 10 c8 	mov %e12,%d3,%d2
8000e148:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000e14c:	df 02 23 00 	jeq %d2,0,8000e192 <_dtoa_r+0x4a6>
8000e150:	0b cd 10 48 	mov %e4,%d13,%d12
8000e154:	b7 00 2a 6a 	imask %e6,0,20,10
8000e158:	6d 00 cc 0a 	call 8000f6f0 <__ltdf2>
8000e15c:	ff 02 20 00 	jge %d2,0,8000e19c <_dtoa_r+0x4b0>
8000e160:	19 a3 10 00 	ld.w %d3,[%sp]16
8000e164:	df 03 21 00 	jeq %d3,0,8000e1a6 <_dtoa_r+0x4ba>
8000e168:	58 0b       	ld.w %d15,[%sp]44
8000e16a:	bf 1f 12 01 	jlt %d15,1,8000e38e <_dtoa_r+0x6a2>
8000e16e:	19 a2 08 00 	ld.w %d2,[%sp]8
8000e172:	0b cd 10 48 	mov %e4,%d13,%d12
8000e176:	c2 f2       	add %d2,-1
8000e178:	82 06       	mov %d6,0
8000e17a:	7b 40 02 74 	movh %d7,16420
8000e17e:	59 a2 30 00 	st.w [%sp]48,%d2
8000e182:	6d ff 1d ed 	call 8000bbbc <__muldf3>
8000e186:	c2 1a       	add %d10,1
8000e188:	0b 23 10 c8 	mov %e12,%d3,%d2
8000e18c:	99 ac 2c 00 	ld.a %a12,[%sp]44
8000e190:	3c 10       	j 8000e1b0 <_dtoa_r+0x4c4>
8000e192:	19 a3 08 00 	ld.w %d3,[%sp]8
8000e196:	59 a3 30 00 	st.w [%sp]48,%d3
8000e19a:	3c 03       	j 8000e1a0 <_dtoa_r+0x4b4>
8000e19c:	58 02       	ld.w %d15,[%sp]8
8000e19e:	78 0c       	st.w [%sp]48,%d15
8000e1a0:	99 ac 10 00 	ld.a %a12,[%sp]16
8000e1a4:	3c 06       	j 8000e1b0 <_dtoa_r+0x4c4>
8000e1a6:	19 a2 08 00 	ld.w %d2,[%sp]8
8000e1aa:	a0 0c       	mov.a %a12,0
8000e1ac:	59 a2 30 00 	st.w [%sp]48,%d2
8000e1b0:	02 a4       	mov %d4,%d10
8000e1b2:	6d ff 63 ee 	call 8000be78 <__floatsidf>
8000e1b6:	0b cd 10 68 	mov %e6,%d13,%d12
8000e1ba:	0b 23 10 48 	mov %e4,%d3,%d2
8000e1be:	6d ff ff ec 	call 8000bbbc <__muldf3>
8000e1c2:	0b 23 10 48 	mov %e4,%d3,%d2
8000e1c6:	82 06       	mov %d6,0
8000e1c8:	7b c0 01 74 	movh %d7,16412
8000e1cc:	6d ff bc ec 	call 8000bb44 <__adddf3>
8000e1d0:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e1d4:	0b 23 10 e8 	mov %e14,%d3,%d2
8000e1d8:	60 b2       	mov.a %a2,%d11
8000e1da:	11 02 cc ff 	addih.a %a15,%a2,64704
8000e1de:	80 ff       	mov.d %d15,%a15
8000e1e0:	bd 0c 1e 80 	jnz.a %a12,8000e21c <_dtoa_r+0x530>
8000e1e4:	0b cd 10 48 	mov %e4,%d13,%d12
8000e1e8:	82 06       	mov %d6,0
8000e1ea:	7b 40 01 74 	movh %d7,16404
8000e1ee:	6d ff c7 ec 	call 8000bb7c <__subdf3>
8000e1f2:	80 f7       	mov.d %d7,%a15
8000e1f4:	0b 23 10 48 	mov %e4,%d3,%d2
8000e1f8:	02 e6       	mov %d6,%d14
8000e1fa:	0b 23 10 88 	mov %e8,%d3,%d2
8000e1fe:	6d 00 39 0a 	call 8000f670 <__gtdf2>
8000e202:	ff 12 8e 02 	jge %d2,1,8000e71e <_dtoa_r+0xa32>
8000e206:	0b 89 10 48 	mov %e4,%d9,%d8
8000e20a:	02 e6       	mov %d6,%d14
8000e20c:	9b 0b cc 77 	addih %d7,%d11,31936
8000e210:	6d 00 70 0a 	call 8000f6f0 <__ltdf2>
8000e214:	bf 02 7d 02 	jlt %d2,0,8000e70e <_dtoa_r+0xa22>
8000e218:	1d 00 bb 00 	j 8000e38e <_dtoa_r+0x6a2>
8000e21c:	80 c5       	mov.d %d5,%a12
8000e21e:	91 00 00 f8 	movh.a %a15,32768
8000e222:	19 a2 24 00 	ld.w %d2,[%sp]36
8000e226:	d9 ff 18 01 	lea %a15,[%a15]4120 <80001018 <__mprec_tens>>
8000e22a:	c2 f5       	add %d5,-1
8000e22c:	01 f5 03 f6 	addsc.a %a15,%a15,%d5,3
8000e230:	df 02 57 00 	jeq %d2,0,8000e2de <_dtoa_r+0x5f2>
8000e234:	b7 00 a9 4a 	imask %e4,0,21,9
8000e238:	09 f6 40 09 	ld.d %e6,[%a15]
8000e23c:	6d ff 92 ed 	call 8000bd60 <__divdf3>
8000e240:	0b ef 10 68 	mov %e6,%d15,%d14
8000e244:	0b 23 10 48 	mov %e4,%d3,%d2
8000e248:	6d ff 9a ec 	call 8000bb7c <__subdf3>
8000e24c:	d8 03       	ld.a %a15,[%sp]12
8000e24e:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e252:	0b cd 10 48 	mov %e4,%d13,%d12
8000e256:	80 fe       	mov.d %d14,%a15
8000e258:	6d 00 6c 0a 	call 8000f730 <__fixdfsi>
8000e25c:	02 24       	mov %d4,%d2
8000e25e:	02 2f       	mov %d15,%d2
8000e260:	6d ff 0c ee 	call 8000be78 <__floatsidf>
8000e264:	0b cd 10 48 	mov %e4,%d13,%d12
8000e268:	0b 23 10 68 	mov %e6,%d3,%d2
8000e26c:	c2 1e       	add %d14,1
8000e26e:	6d ff 87 ec 	call 8000bb7c <__subdf3>
8000e272:	1b 0f 03 50 	addi %d5,%d15,48
8000e276:	28 05       	st.b [%a15]0,%d5
8000e278:	0b ab 10 68 	mov %e6,%d11,%d10
8000e27c:	0b 23 10 48 	mov %e4,%d3,%d2
8000e280:	0b 23 10 88 	mov %e8,%d3,%d2
8000e284:	6d 00 36 0a 	call 8000f6f0 <__ltdf2>
8000e288:	bf 02 86 03 	jlt %d2,0,8000e994 <_dtoa_r+0xca8>
8000e28c:	b7 00 2a 4a 	imask %e4,0,20,10
8000e290:	0b 89 10 68 	mov %e6,%d9,%d8
8000e294:	6d ff 74 ec 	call 8000bb7c <__subdf3>
8000e298:	0b ab 10 68 	mov %e6,%d11,%d10
8000e29c:	0b 23 10 48 	mov %e4,%d3,%d2
8000e2a0:	6d 00 28 0a 	call 8000f6f0 <__ltdf2>
8000e2a4:	bf 02 ea 00 	jlt %d2,0,8000e478 <_dtoa_r+0x78c>
8000e2a8:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000e2ac:	02 e5       	mov %d5,%d14
8000e2ae:	80 cf       	mov.d %d15,%a12
8000e2b0:	a2 35       	sub %d5,%d3
8000e2b2:	7f f5 6e 00 	jge %d5,%d15,8000e38e <_dtoa_r+0x6a2>
8000e2b6:	0b ab 10 48 	mov %e4,%d11,%d10
8000e2ba:	82 06       	mov %d6,0
8000e2bc:	7b 40 02 74 	movh %d7,16420
8000e2c0:	6d ff 7e ec 	call 8000bbbc <__muldf3>
8000e2c4:	0b 89 10 48 	mov %e4,%d9,%d8
8000e2c8:	82 06       	mov %d6,0
8000e2ca:	7b 40 02 74 	movh %d7,16420
8000e2ce:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e2d2:	6d ff 75 ec 	call 8000bbbc <__muldf3>
8000e2d6:	60 ef       	mov.a %a15,%d14
8000e2d8:	0b 23 10 c8 	mov %e12,%d3,%d2
8000e2dc:	3c bb       	j 8000e252 <_dtoa_r+0x566>
8000e2de:	0b ef 10 68 	mov %e6,%d15,%d14
8000e2e2:	09 f4 40 09 	ld.d %e4,[%a15]
8000e2e6:	6d ff 6b ec 	call 8000bbbc <__muldf3>
8000e2ea:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000e2ee:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e2f2:	30 c3       	add.a %a3,%a12
8000e2f4:	99 ac 0c 00 	ld.a %a12,[%sp]12
8000e2f8:	80 3e       	mov.d %d14,%a3
8000e2fa:	0b cd 10 48 	mov %e4,%d13,%d12
8000e2fe:	d9 cf 01 00 	lea %a15,[%a12]1
8000e302:	6d 00 17 0a 	call 8000f730 <__fixdfsi>
8000e306:	02 24       	mov %d4,%d2
8000e308:	02 2f       	mov %d15,%d2
8000e30a:	6d ff b7 ed 	call 8000be78 <__floatsidf>
8000e30e:	0b cd 10 48 	mov %e4,%d13,%d12
8000e312:	0b 23 10 68 	mov %e6,%d3,%d2
8000e316:	6d ff 33 ec 	call 8000bb7c <__subdf3>
8000e31a:	1b 0f 03 50 	addi %d5,%d15,48
8000e31e:	0b 23 10 88 	mov %e8,%d3,%d2
8000e322:	80 f2       	mov.d %d2,%a15
8000e324:	34 c5       	st.b [%a12],%d5
8000e326:	5f e2 29 80 	jne %d2,%d14,8000e378 <_dtoa_r+0x68c>
8000e32a:	0b ab 10 48 	mov %e4,%d11,%d10
8000e32e:	b7 00 a9 6a 	imask %e6,0,21,9
8000e332:	6d ff 09 ec 	call 8000bb44 <__adddf3>
8000e336:	0b 89 10 48 	mov %e4,%d9,%d8
8000e33a:	0b 23 10 68 	mov %e6,%d3,%d2
8000e33e:	6d 00 99 09 	call 8000f670 <__gtdf2>
8000e342:	ff 12 9b 00 	jge %d2,1,8000e478 <_dtoa_r+0x78c>
8000e346:	b7 00 a9 4a 	imask %e4,0,21,9
8000e34a:	0b ab 10 68 	mov %e6,%d11,%d10
8000e34e:	6d ff 17 ec 	call 8000bb7c <__subdf3>
8000e352:	0b 89 10 48 	mov %e4,%d9,%d8
8000e356:	0b 23 10 68 	mov %e6,%d3,%d2
8000e35a:	6d 00 cb 09 	call 8000f6f0 <__ltdf2>
8000e35e:	ff 02 18 00 	jge %d2,0,8000e38e <_dtoa_r+0x6a2>
8000e362:	60 e2       	mov.a %a2,%d14
8000e364:	60 ef       	mov.a %a15,%d14
8000e366:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000e36a:	b0 ff       	add.a %a15,-1
8000e36c:	8b 0f 03 f2 	eq %d15,%d15,48
8000e370:	df 0f 12 03 	jeq %d15,0,8000e994 <_dtoa_r+0xca8>
8000e374:	80 fe       	mov.d %d14,%a15
8000e376:	3c f6       	j 8000e362 <_dtoa_r+0x676>
8000e378:	0b 89 10 48 	mov %e4,%d9,%d8
8000e37c:	82 06       	mov %d6,0
8000e37e:	7b 40 02 74 	movh %d7,16420
8000e382:	6d ff 1d ec 	call 8000bbbc <__muldf3>
8000e386:	40 fc       	mov.aa %a12,%a15
8000e388:	0b 23 10 c8 	mov %e12,%d3,%d2
8000e38c:	3c b7       	j 8000e2fa <_dtoa_r+0x60e>
8000e38e:	09 ac 40 19 	ld.d %e12,[%sp]64
8000e392:	19 a3 14 10 	ld.w %d3,[%sp]84
8000e396:	19 a2 08 00 	ld.w %d2,[%sp]8
8000e39a:	8b 03 80 52 	ge %d5,%d3,0
8000e39e:	8b f2 40 54 	and.lt %d5,%d2,15
8000e3a2:	df 05 9e 00 	jeq %d5,0,8000e4de <_dtoa_r+0x7f2>
8000e3a6:	91 00 00 f8 	movh.a %a15,32768
8000e3aa:	d9 ff 18 01 	lea %a15,[%a15]4120 <80001018 <__mprec_tens>>
8000e3ae:	19 a3 10 00 	ld.w %d3,[%sp]16 <80001018 <__mprec_tens>>
8000e3b2:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000e3b6:	19 a2 28 00 	ld.w %d2,[%sp]40
8000e3ba:	fa 13       	lt %d15,%d3,1
8000e3bc:	87 f2 1f f0 	and.t %d15,%d2,31,%d15,0
8000e3c0:	09 f8 40 09 	ld.d %e8,[%a15]
8000e3c4:	6e 16       	jz %d15,8000e3f0 <_dtoa_r+0x704>
8000e3c6:	df 03 a4 81 	jne %d3,0,8000e70e <_dtoa_r+0xa22>
8000e3ca:	0b 89 10 48 	mov %e4,%d9,%d8
8000e3ce:	82 06       	mov %d6,0
8000e3d0:	7b 40 01 74 	movh %d7,16404
8000e3d4:	6d ff f4 eb 	call 8000bbbc <__muldf3>
8000e3d8:	0b cd 10 68 	mov %e6,%d13,%d12
8000e3dc:	0b 23 10 48 	mov %e4,%d3,%d2
8000e3e0:	a0 0c       	mov.a %a12,0
8000e3e2:	6d 00 67 09 	call 8000f6b0 <__gedf2>
8000e3e6:	a0 0f       	mov.a %a15,0
8000e3e8:	ff 02 95 01 	jge %d2,0,8000e712 <_dtoa_r+0xa26>
8000e3ec:	1d 00 9d 01 	j 8000e726 <_dtoa_r+0xa3a>
8000e3f0:	d8 03       	ld.a %a15,[%sp]12
8000e3f2:	0b cd 10 a8 	mov %e10,%d13,%d12
8000e3f6:	0b 89 10 68 	mov %e6,%d9,%d8
8000e3fa:	0b ab 10 48 	mov %e4,%d11,%d10
8000e3fe:	80 fe       	mov.d %d14,%a15
8000e400:	6d ff b0 ec 	call 8000bd60 <__divdf3>
8000e404:	0b 23 10 48 	mov %e4,%d3,%d2
8000e408:	c2 1e       	add %d14,1
8000e40a:	6d 00 93 09 	call 8000f730 <__fixdfsi>
8000e40e:	02 24       	mov %d4,%d2
8000e410:	02 2f       	mov %d15,%d2
8000e412:	6d ff 33 ed 	call 8000be78 <__floatsidf>
8000e416:	0b 89 10 68 	mov %e6,%d9,%d8
8000e41a:	0b 23 10 48 	mov %e4,%d3,%d2
8000e41e:	6d ff cf eb 	call 8000bbbc <__muldf3>
8000e422:	0b ab 10 48 	mov %e4,%d11,%d10
8000e426:	0b 23 10 68 	mov %e6,%d3,%d2
8000e42a:	6d ff a9 eb 	call 8000bb7c <__subdf3>
8000e42e:	0b 23 10 48 	mov %e4,%d3,%d2
8000e432:	1b 0f 03 30 	addi %d3,%d15,48
8000e436:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000e43a:	28 03       	st.b [%a15]0,%d3
8000e43c:	02 e3       	mov %d3,%d14
8000e43e:	a2 23       	sub %d3,%d2
8000e440:	19 a2 10 00 	ld.w %d2,[%sp]16
8000e444:	5f 23 3c 80 	jne %d3,%d2,8000e4bc <_dtoa_r+0x7d0>
8000e448:	0b 45 10 68 	mov %e6,%d5,%d4
8000e44c:	6d ff 7c eb 	call 8000bb44 <__adddf3>
8000e450:	0b 89 10 68 	mov %e6,%d9,%d8
8000e454:	0b 23 10 48 	mov %e4,%d3,%d2
8000e458:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e45c:	6d 00 0a 09 	call 8000f670 <__gtdf2>
8000e460:	4e 2e       	jgtz %d2,8000e47c <_dtoa_r+0x790>
8000e462:	0b ab 10 48 	mov %e4,%d11,%d10
8000e466:	0b 89 10 68 	mov %e6,%d9,%d8
8000e46a:	6d 00 c3 08 	call 8000f5f0 <__eqdf2>
8000e46e:	df 02 95 82 	jne %d2,0,8000e998 <_dtoa_r+0xcac>
8000e472:	ae 05       	jnz.t %d15,0,8000e47c <_dtoa_r+0x790>
8000e474:	1d 00 92 02 	j 8000e998 <_dtoa_r+0xcac>
8000e478:	58 0c       	ld.w %d15,[%sp]48
8000e47a:	78 02       	st.w [%sp]8,%d15
8000e47c:	58 03       	ld.w %d15,[%sp]12
8000e47e:	a2 ef       	sub %d15,%d14
8000e480:	46 0f       	not %d15
8000e482:	60 e2       	mov.a %a2,%d14
8000e484:	60 ef       	mov.a %a15,%d14
8000e486:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000e48a:	b0 ff       	add.a %a15,-1
8000e48c:	8b 93 03 32 	eq %d3,%d3,57
8000e490:	df 03 11 00 	jeq %d3,0,8000e4b2 <_dtoa_r+0x7c6>
8000e494:	9f 0f 0d 80 	jned %d15,0,8000e4ae <_dtoa_r+0x7c2>
8000e498:	19 a3 08 00 	ld.w %d3,[%sp]8
8000e49c:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000e4a0:	c2 13       	add %d3,1
8000e4a2:	da 30       	mov %d15,48
8000e4a4:	59 a3 08 00 	st.w [%sp]8,%d3
8000e4a8:	2c 30       	st.b [%a3]0,%d15
8000e4aa:	40 3f       	mov.aa %a15,%a3
8000e4ac:	3c 03       	j 8000e4b2 <_dtoa_r+0x7c6>
8000e4ae:	80 fe       	mov.d %d14,%a15
8000e4b0:	3c e9       	j 8000e482 <_dtoa_r+0x796>
8000e4b2:	0c f0       	ld.bu %d15,[%a15]0
8000e4b4:	c2 1f       	add %d15,1
8000e4b6:	28 0f       	st.b [%a15]0,%d15
8000e4b8:	1d 00 70 02 	j 8000e998 <_dtoa_r+0xcac>
8000e4bc:	82 06       	mov %d6,0
8000e4be:	7b 40 02 74 	movh %d7,16420
8000e4c2:	6d ff 7d eb 	call 8000bbbc <__muldf3>
8000e4c6:	d2 06       	mov %e6,0
8000e4c8:	0b 23 10 48 	mov %e4,%d3,%d2
8000e4cc:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e4d0:	60 ef       	mov.a %a15,%d14
8000e4d2:	6d 00 8f 08 	call 8000f5f0 <__eqdf2>
8000e4d6:	df 02 90 ff 	jne %d2,0,8000e3f6 <_dtoa_r+0x70a>
8000e4da:	1d 00 5f 02 	j 8000e998 <_dtoa_r+0xcac>
8000e4de:	19 a2 24 00 	ld.w %d2,[%sp]36
8000e4e2:	58 08       	ld.w %d15,[%sp]32
8000e4e4:	19 a8 14 00 	ld.w %d8,[%sp]20
8000e4e8:	a0 0f       	mov.a %a15,0
8000e4ea:	df 02 3b 00 	jeq %d2,0,8000e560 <_dtoa_r+0x874>
8000e4ee:	58 07       	ld.w %d15,[%sp]28
8000e4f0:	ff 2f 10 00 	jge %d15,2,8000e510 <_dtoa_r+0x824>
8000e4f4:	58 13       	ld.w %d15,[%sp]76
8000e4f6:	6e 05       	jz %d15,8000e500 <_dtoa_r+0x814>
8000e4f8:	1b 33 43 30 	addi %d3,%d3,1075
8000e4fc:	58 08       	ld.w %d15,[%sp]32
8000e4fe:	3c 22       	j 8000e542 <_dtoa_r+0x856>
8000e500:	19 a3 10 10 	ld.w %d3,[%sp]80
8000e504:	58 08       	ld.w %d15,[%sp]32
8000e506:	8b 63 03 31 	rsub %d3,%d3,54
8000e50a:	19 a8 14 00 	ld.w %d8,[%sp]20
8000e50e:	3c 1a       	j 8000e542 <_dtoa_r+0x856>
8000e510:	58 04       	ld.w %d15,[%sp]16
8000e512:	19 a2 20 00 	ld.w %d2,[%sp]32
8000e516:	c2 ff       	add %d15,-1
8000e518:	3f f2 04 00 	jlt %d2,%d15,8000e520 <_dtoa_r+0x834>
8000e51c:	5a f2       	sub %d15,%d2,%d15
8000e51e:	3c 0b       	j 8000e534 <_dtoa_r+0x848>
8000e520:	19 a3 20 00 	ld.w %d3,[%sp]32
8000e524:	78 08       	st.w [%sp]32,%d15
8000e526:	52 32       	sub %d2,%d15,%d3
8000e528:	19 a3 34 00 	ld.w %d3,[%sp]52
8000e52c:	82 0f       	mov %d15,0
8000e52e:	42 23       	add %d3,%d2
8000e530:	59 a3 34 00 	st.w [%sp]52,%d3
8000e534:	19 a3 10 00 	ld.w %d3,[%sp]16
8000e538:	19 a8 14 00 	ld.w %d8,[%sp]20
8000e53c:	ce 33       	jgez %d3,8000e542 <_dtoa_r+0x856>
8000e53e:	a2 38       	sub %d8,%d3
8000e540:	82 03       	mov %d3,0
8000e542:	19 a2 14 00 	ld.w %d2,[%sp]20
8000e546:	40 d4       	mov.aa %a4,%a13
8000e548:	42 32       	add %d2,%d3
8000e54a:	59 a2 14 00 	st.w [%sp]20,%d2
8000e54e:	19 a2 18 00 	ld.w %d2,[%sp]24
8000e552:	82 14       	mov %d4,1
8000e554:	42 32       	add %d2,%d3
8000e556:	59 a2 18 00 	st.w [%sp]24,%d2
8000e55a:	6d 00 1b 03 	call 8000eb90 <__i2b>
8000e55e:	40 2f       	mov.aa %a15,%a2
8000e560:	19 a2 18 00 	ld.w %d2,[%sp]24
8000e564:	8b 18 80 32 	ge %d3,%d8,1
8000e568:	8b 12 80 34 	and.ge %d3,%d2,1
8000e56c:	76 3e       	jz %d3,8000e588 <_dtoa_r+0x89c>
8000e56e:	0b 82 80 31 	min %d3,%d2,%d8
8000e572:	19 a2 14 00 	ld.w %d2,[%sp]20
8000e576:	a2 38       	sub %d8,%d3
8000e578:	a2 32       	sub %d2,%d3
8000e57a:	59 a2 14 00 	st.w [%sp]20,%d2
8000e57e:	19 a2 18 00 	ld.w %d2,[%sp]24
8000e582:	a2 32       	sub %d2,%d3
8000e584:	59 a2 18 00 	st.w [%sp]24,%d2
8000e588:	19 a3 20 00 	ld.w %d3,[%sp]32
8000e58c:	bf 13 27 00 	jlt %d3,1,8000e5da <_dtoa_r+0x8ee>
8000e590:	19 a2 24 00 	ld.w %d2,[%sp]36
8000e594:	df 02 1c 00 	jeq %d2,0,8000e5cc <_dtoa_r+0x8e0>
8000e598:	bf 1f 13 00 	jlt %d15,1,8000e5be <_dtoa_r+0x8d2>
8000e59c:	40 f5       	mov.aa %a5,%a15
8000e59e:	02 f4       	mov %d4,%d15
8000e5a0:	40 d4       	mov.aa %a4,%a13
8000e5a2:	6d 00 8c 03 	call 8000ecba <__pow5mult>
8000e5a6:	40 e6       	mov.aa %a6,%a14
8000e5a8:	40 d4       	mov.aa %a4,%a13
8000e5aa:	40 25       	mov.aa %a5,%a2
8000e5ac:	40 2f       	mov.aa %a15,%a2
8000e5ae:	6d 00 f9 02 	call 8000eba0 <__multiply>
8000e5b2:	40 e5       	mov.aa %a5,%a14
8000e5b4:	40 2c       	mov.aa %a12,%a2
8000e5b6:	40 d4       	mov.aa %a4,%a13
8000e5b8:	6d 00 4e 02 	call 8000ea54 <_Bfree>
8000e5bc:	40 ce       	mov.aa %a14,%a12
8000e5be:	19 a4 20 00 	ld.w %d4,[%sp]32
8000e5c2:	40 d4       	mov.aa %a4,%a13
8000e5c4:	a2 f4       	sub %d4,%d15
8000e5c6:	40 e5       	mov.aa %a5,%a14
8000e5c8:	76 49       	jz %d4,8000e5da <_dtoa_r+0x8ee>
8000e5ca:	3c 05       	j 8000e5d4 <_dtoa_r+0x8e8>
8000e5cc:	19 a4 20 00 	ld.w %d4,[%sp]32
8000e5d0:	40 d4       	mov.aa %a4,%a13
8000e5d2:	40 e5       	mov.aa %a5,%a14
8000e5d4:	6d 00 73 03 	call 8000ecba <__pow5mult>
8000e5d8:	40 2e       	mov.aa %a14,%a2
8000e5da:	40 d4       	mov.aa %a4,%a13
8000e5dc:	82 14       	mov %d4,1
8000e5de:	6d 00 d9 02 	call 8000eb90 <__i2b>
8000e5e2:	19 a3 34 00 	ld.w %d3,[%sp]52
8000e5e6:	40 2c       	mov.aa %a12,%a2
8000e5e8:	8e 3c       	jlez %d3,8000e600 <_dtoa_r+0x914>
8000e5ea:	40 d4       	mov.aa %a4,%a13
8000e5ec:	40 25       	mov.aa %a5,%a2
8000e5ee:	02 34       	mov %d4,%d3
8000e5f0:	6d 00 65 03 	call 8000ecba <__pow5mult>
8000e5f4:	58 07       	ld.w %d15,[%sp]28
8000e5f6:	40 2c       	mov.aa %a12,%a2
8000e5f8:	82 09       	mov %d9,0
8000e5fa:	ff 2f 1f 00 	jge %d15,2,8000e638 <_dtoa_r+0x94c>
8000e5fe:	3c 06       	j 8000e60a <_dtoa_r+0x91e>
8000e600:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000e604:	82 09       	mov %d9,0
8000e606:	ff 22 15 00 	jge %d2,2,8000e630 <_dtoa_r+0x944>
8000e60a:	82 09       	mov %d9,0
8000e60c:	df 0c 12 80 	jne %d12,0,8000e630 <_dtoa_r+0x944>
8000e610:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000e614:	ee 0e       	jnz %d15,8000e630 <_dtoa_r+0x944>
8000e616:	7b 00 ff f7 	movh %d15,32752
8000e61a:	26 df       	and %d15,%d13
8000e61c:	6e 0a       	jz %d15,8000e630 <_dtoa_r+0x944>
8000e61e:	19 a3 14 00 	ld.w %d3,[%sp]20
8000e622:	58 06       	ld.w %d15,[%sp]24
8000e624:	c2 13       	add %d3,1
8000e626:	c2 1f       	add %d15,1
8000e628:	59 a3 14 00 	st.w [%sp]20,%d3
8000e62c:	78 06       	st.w [%sp]24,%d15
8000e62e:	82 19       	mov %d9,1
8000e630:	19 a3 34 00 	ld.w %d3,[%sp]52
8000e634:	82 12       	mov %d2,1
8000e636:	76 39       	jz %d3,8000e648 <_dtoa_r+0x95c>
8000e638:	4c c4       	ld.w %d15,[%a12]16
8000e63a:	90 c3       	addsc.a %a3,%a12,%d15,2
8000e63c:	19 34 10 00 	ld.w %d4,[%a3]16
8000e640:	6d 00 54 02 	call 8000eae8 <__hi0bits>
8000e644:	8b 02 02 21 	rsub %d2,%d2,32
8000e648:	58 06       	ld.w %d15,[%sp]24
8000e64a:	42 2f       	add %d15,%d2
8000e64c:	16 1f       	and %d15,31
8000e64e:	6e 0a       	jz %d15,8000e662 <_dtoa_r+0x976>
8000e650:	8b 0f 02 31 	rsub %d3,%d15,32
8000e654:	8b cf 01 f1 	rsub %d15,%d15,28
8000e658:	ff 53 07 00 	jge %d3,5,8000e666 <_dtoa_r+0x97a>
8000e65c:	df 43 10 00 	jeq %d3,4,8000e67c <_dtoa_r+0x990>
8000e660:	02 3f       	mov %d15,%d3
8000e662:	1b cf 01 f0 	addi %d15,%d15,28
8000e666:	19 a2 14 00 	ld.w %d2,[%sp]20
8000e66a:	19 a3 18 00 	ld.w %d3,[%sp]24
8000e66e:	42 f2       	add %d2,%d15
8000e670:	42 f3       	add %d3,%d15
8000e672:	59 a2 14 00 	st.w [%sp]20,%d2
8000e676:	42 f8       	add %d8,%d15
8000e678:	59 a3 18 00 	st.w [%sp]24,%d3
8000e67c:	58 05       	ld.w %d15,[%sp]20
8000e67e:	8e f7       	jlez %d15,8000e68c <_dtoa_r+0x9a0>
8000e680:	40 e5       	mov.aa %a5,%a14
8000e682:	40 d4       	mov.aa %a4,%a13
8000e684:	02 f4       	mov %d4,%d15
8000e686:	6d 00 58 03 	call 8000ed36 <__lshift>
8000e68a:	40 2e       	mov.aa %a14,%a2
8000e68c:	19 a2 18 00 	ld.w %d2,[%sp]24
8000e690:	8e 27       	jlez %d2,8000e69e <_dtoa_r+0x9b2>
8000e692:	40 c5       	mov.aa %a5,%a12
8000e694:	40 d4       	mov.aa %a4,%a13
8000e696:	02 24       	mov %d4,%d2
8000e698:	6d 00 4f 03 	call 8000ed36 <__lshift>
8000e69c:	40 2c       	mov.aa %a12,%a2
8000e69e:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000e6a2:	df 03 20 00 	jeq %d3,0,8000e6e2 <_dtoa_r+0x9f6>
8000e6a6:	40 e4       	mov.aa %a4,%a14
8000e6a8:	40 c5       	mov.aa %a5,%a12
8000e6aa:	6d 00 a3 03 	call 8000edf0 <__mcmp>
8000e6ae:	ff 02 1a 00 	jge %d2,0,8000e6e2 <_dtoa_r+0x9f6>
8000e6b2:	58 02       	ld.w %d15,[%sp]8
8000e6b4:	40 e5       	mov.aa %a5,%a14
8000e6b6:	c2 ff       	add %d15,-1
8000e6b8:	40 d4       	mov.aa %a4,%a13
8000e6ba:	fb a0 00 40 	mov %e4,10
8000e6be:	78 02       	st.w [%sp]8,%d15
8000e6c0:	6d 00 d3 01 	call 8000ea66 <__multadd>
8000e6c4:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000e6c8:	19 a3 24 00 	ld.w %d3,[%sp]36
8000e6cc:	59 a2 10 00 	st.w [%sp]16,%d2
8000e6d0:	40 2e       	mov.aa %a14,%a2
8000e6d2:	76 38       	jz %d3,8000e6e2 <_dtoa_r+0x9f6>
8000e6d4:	40 f5       	mov.aa %a5,%a15
8000e6d6:	40 d4       	mov.aa %a4,%a13
8000e6d8:	fb a0 00 40 	mov %e4,10
8000e6dc:	6d 00 c5 01 	call 8000ea66 <__multadd>
8000e6e0:	40 2f       	mov.aa %a15,%a2
8000e6e2:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000e6e6:	19 a3 10 00 	ld.w %d3,[%sp]16
8000e6ea:	8b 32 80 f2 	ge %d15,%d2,3
8000e6ee:	8b 13 40 f4 	and.lt %d15,%d3,1
8000e6f2:	6e 2a       	jz %d15,8000e746 <_dtoa_r+0xa5a>
8000e6f4:	f6 3f       	jnz %d3,8000e712 <_dtoa_r+0xa26>
8000e6f6:	40 c5       	mov.aa %a5,%a12
8000e6f8:	40 d4       	mov.aa %a4,%a13
8000e6fa:	d2 54       	mov %e4,5
8000e6fc:	6d 00 b5 01 	call 8000ea66 <__multadd>
8000e700:	40 e4       	mov.aa %a4,%a14
8000e702:	40 25       	mov.aa %a5,%a2
8000e704:	40 2c       	mov.aa %a12,%a2
8000e706:	6d 00 75 03 	call 8000edf0 <__mcmp>
8000e70a:	4e 2e       	jgtz %d2,8000e726 <_dtoa_r+0xa3a>
8000e70c:	3c 03       	j 8000e712 <_dtoa_r+0xa26>
8000e70e:	a0 0c       	mov.a %a12,0
8000e710:	a0 0f       	mov.a %a15,0
8000e712:	58 0a       	ld.w %d15,[%sp]40
8000e714:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000e718:	46 0f       	not %d15
8000e71a:	78 02       	st.w [%sp]8,%d15
8000e71c:	3c 11       	j 8000e73e <_dtoa_r+0xa52>
8000e71e:	58 0c       	ld.w %d15,[%sp]48
8000e720:	a0 0c       	mov.a %a12,0
8000e722:	78 02       	st.w [%sp]8,%d15
8000e724:	a0 0f       	mov.a %a15,0
8000e726:	19 a2 08 00 	ld.w %d2,[%sp]8
8000e72a:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000e72e:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000e732:	da 31       	mov %d15,49
8000e734:	c2 12       	add %d2,1
8000e736:	c2 1e       	add %d14,1
8000e738:	2c 30       	st.b [%a3]0,%d15
8000e73a:	59 a2 08 00 	st.w [%sp]8,%d2
8000e73e:	80 f8       	mov.d %d8,%a15
8000e740:	a0 0f       	mov.a %a15,0
8000e742:	1d 00 14 01 	j 8000e96a <_dtoa_r+0xc7e>
8000e746:	19 a3 24 00 	ld.w %d3,[%sp]36
8000e74a:	f6 35       	jnz %d3,8000e754 <_dtoa_r+0xa68>
8000e74c:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000e750:	1d 00 c2 00 	j 8000e8d4 <_dtoa_r+0xbe8>
8000e754:	8e 87       	jlez %d8,8000e762 <_dtoa_r+0xa76>
8000e756:	40 f5       	mov.aa %a5,%a15
8000e758:	40 d4       	mov.aa %a4,%a13
8000e75a:	02 84       	mov %d4,%d8
8000e75c:	6d 00 ed 02 	call 8000ed36 <__lshift>
8000e760:	40 2f       	mov.aa %a15,%a2
8000e762:	80 f8       	mov.d %d8,%a15
8000e764:	df 09 16 00 	jeq %d9,0,8000e790 <_dtoa_r+0xaa4>
8000e768:	40 d4       	mov.aa %a4,%a13
8000e76a:	48 14       	ld.w %d4,[%a15]4
8000e76c:	6d 00 49 01 	call 8000e9fe <_Balloc>
8000e770:	48 44       	ld.w %d4,[%a15]16
8000e772:	d9 24 0c 00 	lea %a4,[%a2]12
8000e776:	c2 24       	add %d4,2
8000e778:	d9 f5 0c 00 	lea %a5,[%a15]12
8000e77c:	06 24       	sh %d4,2
8000e77e:	80 2f       	mov.d %d15,%a2
8000e780:	6d 00 31 01 	call 8000e9e2 <memcpy>
8000e784:	60 f5       	mov.a %a5,%d15
8000e786:	40 d4       	mov.aa %a4,%a13
8000e788:	82 14       	mov %d4,1
8000e78a:	6d 00 d6 02 	call 8000ed36 <__lshift>
8000e78e:	80 28       	mov.d %d8,%a2
8000e790:	19 a9 0c 00 	ld.w %d9,[%sp]12
8000e794:	8f 1c 00 a1 	and %d10,%d12,1
8000e798:	40 e4       	mov.aa %a4,%a14
8000e79a:	40 c5       	mov.aa %a5,%a12
8000e79c:	6d ff 1a fa 	call 8000dbd0 <quorem>
8000e7a0:	40 e4       	mov.aa %a4,%a14
8000e7a2:	40 f5       	mov.aa %a5,%a15
8000e7a4:	02 2e       	mov %d14,%d2
8000e7a6:	1b 02 03 f0 	addi %d15,%d2,48
8000e7aa:	6d 00 23 03 	call 8000edf0 <__mcmp>
8000e7ae:	60 86       	mov.a %a6,%d8
8000e7b0:	40 d4       	mov.aa %a4,%a13
8000e7b2:	40 c5       	mov.aa %a5,%a12
8000e7b4:	02 2b       	mov %d11,%d2
8000e7b6:	6d 00 3e 03 	call 8000ee32 <__mdiff>
8000e7ba:	19 22 0c 00 	ld.w %d2,[%a2]12
8000e7be:	80 2d       	mov.d %d13,%a2
8000e7c0:	82 1c       	mov %d12,1
8000e7c2:	f6 26       	jnz %d2,8000e7ce <_dtoa_r+0xae2>
8000e7c4:	40 e4       	mov.aa %a4,%a14
8000e7c6:	40 25       	mov.aa %a5,%a2
8000e7c8:	6d 00 14 03 	call 8000edf0 <__mcmp>
8000e7cc:	02 2c       	mov %d12,%d2
8000e7ce:	60 d5       	mov.a %a5,%d13
8000e7d0:	40 d4       	mov.aa %a4,%a13
8000e7d2:	6d 00 41 01 	call 8000ea54 <_Bfree>
8000e7d6:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000e7da:	1b 19 00 d0 	addi %d13,%d9,1
8000e7de:	a6 c3       	or %d3,%d12
8000e7e0:	f6 3f       	jnz %d3,8000e7fe <_dtoa_r+0xb12>
8000e7e2:	f6 ae       	jnz %d10,8000e7fe <_dtoa_r+0xb12>
8000e7e4:	8b 9f 03 32 	eq %d3,%d15,57
8000e7e8:	40 e2       	mov.aa %a2,%a14
8000e7ea:	df 03 3a 80 	jne %d3,0,8000e85e <_dtoa_r+0xb72>
8000e7ee:	1b 1e 03 20 	addi %d2,%d14,49
8000e7f2:	8b 1b 80 b2 	ge %d11,%d11,1
8000e7f6:	2b f2 40 fb 	sel %d15,%d11,%d2,%d15
8000e7fa:	02 de       	mov %d14,%d13
8000e7fc:	3c 37       	j 8000e86a <_dtoa_r+0xb7e>
8000e7fe:	ce b5       	jgez %d11,8000e808 <_dtoa_r+0xb1c>
8000e800:	02 fa       	mov %d10,%d15
8000e802:	40 e2       	mov.aa %a2,%a14
8000e804:	4e ca       	jgtz %d12,8000e818 <_dtoa_r+0xb2c>
8000e806:	3c 1e       	j 8000e842 <_dtoa_r+0xb56>
8000e808:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000e80c:	a6 2b       	or %d11,%d2
8000e80e:	df 0b 20 80 	jne %d11,0,8000e84e <_dtoa_r+0xb62>
8000e812:	df 0a 1e 80 	jne %d10,0,8000e84e <_dtoa_r+0xb62>
8000e816:	3c f5       	j 8000e800 <_dtoa_r+0xb14>
8000e818:	40 d4       	mov.aa %a4,%a13
8000e81a:	40 e5       	mov.aa %a5,%a14
8000e81c:	82 14       	mov %d4,1
8000e81e:	6d 00 8c 02 	call 8000ed36 <__lshift>
8000e822:	40 c5       	mov.aa %a5,%a12
8000e824:	40 24       	mov.aa %a4,%a2
8000e826:	b5 a2 04 00 	st.a [%sp]4,%a2
8000e82a:	6d 00 e3 02 	call 8000edf0 <__mcmp>
8000e82e:	99 a2 04 00 	ld.a %a2,[%sp]4
8000e832:	4e 23       	jgtz %d2,8000e838 <_dtoa_r+0xb4c>
8000e834:	f6 27       	jnz %d2,8000e842 <_dtoa_r+0xb56>
8000e836:	2e 06       	jz.t %d15,0,8000e842 <_dtoa_r+0xb56>
8000e838:	8b 9f 03 32 	eq %d3,%d15,57
8000e83c:	df 03 11 80 	jne %d3,0,8000e85e <_dtoa_r+0xb72>
8000e840:	92 1a       	add %d10,%d15,1
8000e842:	60 93       	mov.a %a3,%d9
8000e844:	02 de       	mov %d14,%d13
8000e846:	34 3a       	st.b [%a3],%d10
8000e848:	40 2e       	mov.aa %a14,%a2
8000e84a:	1d 00 90 00 	j 8000e96a <_dtoa_r+0xc7e>
8000e84e:	bf 1c 11 00 	jlt %d12,1,8000e870 <_dtoa_r+0xb84>
8000e852:	8b 9f 23 32 	ne %d3,%d15,57
8000e856:	40 e2       	mov.aa %a2,%a14
8000e858:	02 de       	mov %d14,%d13
8000e85a:	c2 1f       	add %d15,1
8000e85c:	f6 37       	jnz %d3,8000e86a <_dtoa_r+0xb7e>
8000e85e:	60 93       	mov.a %a3,%d9
8000e860:	da 39       	mov %d15,57
8000e862:	02 de       	mov %d14,%d13
8000e864:	2c 30       	st.b [%a3]0,%d15
8000e866:	40 2e       	mov.aa %a14,%a2
8000e868:	3c 5d       	j 8000e922 <_dtoa_r+0xc36>
8000e86a:	60 92       	mov.a %a2,%d9
8000e86c:	2c 20       	st.b [%a2]0,%d15
8000e86e:	3c 7e       	j 8000e96a <_dtoa_r+0xc7e>
8000e870:	60 93       	mov.a %a3,%d9
8000e872:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000e876:	02 d5       	mov %d5,%d13
8000e878:	19 a3 10 00 	ld.w %d3,[%sp]16
8000e87c:	2c 30       	st.b [%a3]0,%d15
8000e87e:	a2 25       	sub %d5,%d2
8000e880:	02 de       	mov %d14,%d13
8000e882:	5f 35 41 00 	jeq %d5,%d3,8000e904 <_dtoa_r+0xc18>
8000e886:	40 e5       	mov.aa %a5,%a14
8000e888:	40 d4       	mov.aa %a4,%a13
8000e88a:	fb a0 00 40 	mov %e4,10
8000e88e:	6d 00 ec 00 	call 8000ea66 <__multadd>
8000e892:	80 ff       	mov.d %d15,%a15
8000e894:	40 2e       	mov.aa %a14,%a2
8000e896:	40 d4       	mov.aa %a4,%a13
8000e898:	40 f5       	mov.aa %a5,%a15
8000e89a:	fb a0 00 40 	mov %e4,10
8000e89e:	7e 86       	jne %d15,%d8,8000e8aa <_dtoa_r+0xbbe>
8000e8a0:	6d 00 e3 00 	call 8000ea66 <__multadd>
8000e8a4:	40 2f       	mov.aa %a15,%a2
8000e8a6:	80 28       	mov.d %d8,%a2
8000e8a8:	3c 0b       	j 8000e8be <_dtoa_r+0xbd2>
8000e8aa:	6d 00 de 00 	call 8000ea66 <__multadd>
8000e8ae:	60 85       	mov.a %a5,%d8
8000e8b0:	40 d4       	mov.aa %a4,%a13
8000e8b2:	fb a0 00 40 	mov %e4,10
8000e8b6:	40 2f       	mov.aa %a15,%a2
8000e8b8:	6d 00 d7 00 	call 8000ea66 <__multadd>
8000e8bc:	80 28       	mov.d %d8,%a2
8000e8be:	02 d9       	mov %d9,%d13
8000e8c0:	1d ff 6c ff 	j 8000e798 <_dtoa_r+0xaac>
8000e8c4:	40 e5       	mov.aa %a5,%a14
8000e8c6:	40 d4       	mov.aa %a4,%a13
8000e8c8:	fb a0 00 40 	mov %e4,10
8000e8cc:	6d 00 cd 00 	call 8000ea66 <__multadd>
8000e8d0:	02 98       	mov %d8,%d9
8000e8d2:	40 2e       	mov.aa %a14,%a2
8000e8d4:	40 e4       	mov.aa %a4,%a14
8000e8d6:	40 c5       	mov.aa %a5,%a12
8000e8d8:	6d ff 7c f9 	call 8000dbd0 <quorem>
8000e8dc:	1b 18 00 90 	addi %d9,%d8,1
8000e8e0:	1b 02 03 f0 	addi %d15,%d2,48
8000e8e4:	60 82       	mov.a %a2,%d8
8000e8e6:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000e8ea:	02 95       	mov %d5,%d9
8000e8ec:	19 a3 10 00 	ld.w %d3,[%sp]16
8000e8f0:	2c 20       	st.b [%a2]0,%d15
8000e8f2:	a2 25       	sub %d5,%d2
8000e8f4:	3f 35 e8 7f 	jlt %d5,%d3,8000e8c4 <_dtoa_r+0xbd8>
8000e8f8:	8b 13 40 33 	max %d3,%d3,1
8000e8fc:	02 2e       	mov %d14,%d2
8000e8fe:	80 f8       	mov.d %d8,%a15
8000e900:	42 3e       	add %d14,%d3
8000e902:	a0 0f       	mov.a %a15,0
8000e904:	40 e5       	mov.aa %a5,%a14
8000e906:	40 d4       	mov.aa %a4,%a13
8000e908:	82 14       	mov %d4,1
8000e90a:	6d 00 16 02 	call 8000ed36 <__lshift>
8000e90e:	40 c5       	mov.aa %a5,%a12
8000e910:	40 2e       	mov.aa %a14,%a2
8000e912:	40 24       	mov.aa %a4,%a2
8000e914:	6d 00 6e 02 	call 8000edf0 <__mcmp>
8000e918:	4e 25       	jgtz %d2,8000e922 <_dtoa_r+0xc36>
8000e91a:	df 02 1e 80 	jne %d2,0,8000e956 <_dtoa_r+0xc6a>
8000e91e:	6f 0f 1c 00 	jz.t %d15,0,8000e956 <_dtoa_r+0xc6a>
8000e922:	58 03       	ld.w %d15,[%sp]12
8000e924:	a2 ef       	sub %d15,%d14
8000e926:	46 0f       	not %d15
8000e928:	60 e2       	mov.a %a2,%d14
8000e92a:	60 e3       	mov.a %a3,%d14
8000e92c:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000e930:	b0 f3       	add.a %a3,-1
8000e932:	8b 93 03 52 	eq %d5,%d3,57
8000e936:	76 5d       	jz %d5,8000e950 <_dtoa_r+0xc64>
8000e938:	9f 0f 0a 80 	jned %d15,0,8000e94c <_dtoa_r+0xc60>
8000e93c:	58 02       	ld.w %d15,[%sp]8
8000e93e:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000e942:	c2 1f       	add %d15,1
8000e944:	78 02       	st.w [%sp]8,%d15
8000e946:	da 31       	mov %d15,49
8000e948:	2c 30       	st.b [%a3]0,%d15
8000e94a:	3c 10       	j 8000e96a <_dtoa_r+0xc7e>
8000e94c:	80 3e       	mov.d %d14,%a3
8000e94e:	3c ed       	j 8000e928 <_dtoa_r+0xc3c>
8000e950:	c2 13       	add %d3,1
8000e952:	34 33       	st.b [%a3],%d3
8000e954:	3c 0b       	j 8000e96a <_dtoa_r+0xc7e>
8000e956:	60 e2       	mov.a %a2,%d14
8000e958:	60 e3       	mov.a %a3,%d14
8000e95a:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000e95e:	b0 f3       	add.a %a3,-1
8000e960:	8b 0f 03 f2 	eq %d15,%d15,48
8000e964:	6e 03       	jz %d15,8000e96a <_dtoa_r+0xc7e>
8000e966:	80 3e       	mov.d %d14,%a3
8000e968:	3c f7       	j 8000e956 <_dtoa_r+0xc6a>
8000e96a:	40 d4       	mov.aa %a4,%a13
8000e96c:	40 c5       	mov.aa %a5,%a12
8000e96e:	6d 00 73 00 	call 8000ea54 <_Bfree>
8000e972:	df 08 13 00 	jeq %d8,0,8000e998 <_dtoa_r+0xcac>
8000e976:	80 f2       	mov.d %d2,%a15
8000e978:	8b 02 20 f2 	ne %d15,%d2,0
8000e97c:	0b 82 10 f2 	and.ne %d15,%d2,%d8
8000e980:	6e 05       	jz %d15,8000e98a <_dtoa_r+0xc9e>
8000e982:	40 d4       	mov.aa %a4,%a13
8000e984:	40 f5       	mov.aa %a5,%a15
8000e986:	6d 00 67 00 	call 8000ea54 <_Bfree>
8000e98a:	60 85       	mov.a %a5,%d8
8000e98c:	40 d4       	mov.aa %a4,%a13
8000e98e:	6d 00 63 00 	call 8000ea54 <_Bfree>
8000e992:	3c 03       	j 8000e998 <_dtoa_r+0xcac>
8000e994:	58 0c       	ld.w %d15,[%sp]48
8000e996:	78 02       	st.w [%sp]8,%d15
8000e998:	40 d4       	mov.aa %a4,%a13
8000e99a:	40 e5       	mov.aa %a5,%a14
8000e99c:	6d 00 5c 00 	call 8000ea54 <_Bfree>
8000e9a0:	60 e2       	mov.a %a2,%d14
8000e9a2:	19 a2 08 00 	ld.w %d2,[%sp]8
8000e9a6:	99 a3 08 10 	ld.a %a3,[%sp]72
8000e9aa:	82 0f       	mov %d15,0
8000e9ac:	d8 0e       	ld.a %a15,[%sp]56
8000e9ae:	2c 20       	st.b [%a2]0,%d15
8000e9b0:	c2 12       	add %d2,1
8000e9b2:	74 32       	st.w [%a3],%d2
8000e9b4:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000e9b8:	bc f2       	jz.a %a15,8000e9bc <_dtoa_r+0xcd0>
8000e9ba:	68 0e       	st.w [%a15]0,%d14
8000e9bc:	00 90       	ret 
	...

8000e9c0 <_localeconv_r>:
8000e9c0:	91 00 00 28 	movh.a %a2,32768
8000e9c4:	d9 22 c4 e0 	lea %a2,[%a2]3972 <80000f84 <lconv>>
8000e9c8:	00 90       	ret 

8000e9ca <memchr>:
8000e9ca:	8f f4 0f 41 	and %d4,%d4,255
8000e9ce:	9f 05 04 80 	jned %d5,0,8000e9d6 <memchr+0xc>
8000e9d2:	a0 02       	mov.a %a2,0
8000e9d4:	00 90       	ret 
8000e9d6:	0c 40       	ld.bu %d15,[%a4]0
8000e9d8:	3e 43       	jeq %d15,%d4,8000e9de <memchr+0x14>
8000e9da:	b0 14       	add.a %a4,1
8000e9dc:	3c f9       	j 8000e9ce <memchr+0x4>
8000e9de:	40 42       	mov.aa %a2,%a4
8000e9e0:	00 90       	ret 

8000e9e2 <memcpy>:
8000e9e2:	40 42       	mov.aa %a2,%a4
8000e9e4:	a0 0f       	mov.a %a15,0
8000e9e6:	01 f2 10 40 	add.a %a4,%a2,%a15
8000e9ea:	01 f5 10 30 	add.a %a3,%a5,%a15
8000e9ee:	9f 04 03 80 	jned %d4,0,8000e9f4 <memcpy+0x12>
8000e9f2:	00 90       	ret 
8000e9f4:	79 3f 00 00 	ld.b %d15,[%a3]0
8000e9f8:	b0 1f       	add.a %a15,1
8000e9fa:	2c 40       	st.b [%a4]0,%d15
8000e9fc:	3c f5       	j 8000e9e6 <memcpy+0x4>

8000e9fe <_Balloc>:
8000e9fe:	19 42 0c 10 	ld.w %d2,[%a4]76
8000ea02:	40 4f       	mov.aa %a15,%a4
8000ea04:	02 4f       	mov %d15,%d4
8000ea06:	76 29       	jz %d2,8000ea18 <_Balloc+0x1a>
8000ea08:	99 f3 0c 10 	ld.a %a3,[%a15]76
8000ea0c:	90 33       	addsc.a %a3,%a3,%d15,2
8000ea0e:	d4 32       	ld.a %a2,[%a3]
8000ea10:	bc 2f       	jz.a %a2,8000ea2e <_Balloc+0x30>
8000ea12:	4c 20       	ld.w %d15,[%a2]0
8000ea14:	6c 30       	st.w [%a3]0,%d15
8000ea16:	3c 1b       	j 8000ea4c <_Balloc+0x4e>
8000ea18:	82 44       	mov %d4,4
8000ea1a:	3b 10 02 50 	mov %d5,33
8000ea1e:	6d 00 5c 03 	call 8000f0d6 <_calloc_r>
8000ea22:	b5 f2 0c 10 	st.a [%a15]76,%a2
8000ea26:	bd 02 f1 ff 	jnz.a %a2,8000ea08 <_Balloc+0xa>
8000ea2a:	a0 02       	mov.a %a2,0
8000ea2c:	00 90       	ret 
8000ea2e:	82 18       	mov %d8,1
8000ea30:	0f f8 00 80 	sh %d8,%d8,%d15
8000ea34:	1b 58 00 50 	addi %d5,%d8,5
8000ea38:	40 f4       	mov.aa %a4,%a15
8000ea3a:	82 14       	mov %d4,1
8000ea3c:	06 25       	sh %d5,2
8000ea3e:	6d 00 4c 03 	call 8000f0d6 <_calloc_r>
8000ea42:	bd 02 f4 7f 	jz.a %a2,8000ea2a <_Balloc+0x2c>
8000ea46:	6c 21       	st.w [%a2]4,%d15
8000ea48:	59 28 08 00 	st.w [%a2]8,%d8
8000ea4c:	82 0f       	mov %d15,0
8000ea4e:	6c 24       	st.w [%a2]16,%d15
8000ea50:	6c 23       	st.w [%a2]12,%d15
8000ea52:	00 90       	ret 

8000ea54 <_Bfree>:
8000ea54:	bc 58       	jz.a %a5,8000ea64 <_Bfree+0x10>
8000ea56:	99 4f 0c 10 	ld.a %a15,[%a4]76
8000ea5a:	4c 51       	ld.w %d15,[%a5]4
8000ea5c:	90 ff       	addsc.a %a15,%a15,%d15,2
8000ea5e:	4c f0       	ld.w %d15,[%a15]0
8000ea60:	6c 50       	st.w [%a5]0,%d15
8000ea62:	e8 05       	st.a [%a15]0,%a5
8000ea64:	00 90       	ret 

8000ea66 <__multadd>:
8000ea66:	19 59 10 00 	ld.w %d9,[%a5]16
8000ea6a:	40 4c       	mov.aa %a12,%a4
8000ea6c:	9a f9       	add %d15,%d9,-1
8000ea6e:	8b 19 80 22 	ge %d2,%d9,1
8000ea72:	40 5f       	mov.aa %a15,%a5
8000ea74:	02 58       	mov %d8,%d5
8000ea76:	d9 53 14 00 	lea %a3,[%a5]20
8000ea7a:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000ea7e:	40 32       	mov.aa %a2,%a3
8000ea80:	44 25       	ld.w %d5,[%a2+]
8000ea82:	b7 05 10 38 	insert %d3,%d5,0,16,16
8000ea86:	8f 05 1f f0 	sh %d15,%d5,-16
8000ea8a:	03 43 0a 38 	madd %d3,%d8,%d3,%d4
8000ea8e:	8f 03 1f 60 	sh %d6,%d3,-16
8000ea92:	03 4f 0a f6 	madd %d15,%d6,%d15,%d4
8000ea96:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000ea9a:	8f 0f 1f 80 	sh %d8,%d15,-16
8000ea9e:	74 33       	st.w [%a3],%d3
8000eaa0:	40 23       	mov.aa %a3,%a2
8000eaa2:	9f 02 ee ff 	jned %d2,0,8000ea7e <__multadd+0x18>
8000eaa6:	df 08 1f 00 	jeq %d8,0,8000eae4 <__multadd+0x7e>
8000eaaa:	4c f2       	ld.w %d15,[%a15]8
8000eaac:	3f f9 16 00 	jlt %d9,%d15,8000ead8 <__multadd+0x72>
8000eab0:	48 14       	ld.w %d4,[%a15]4
8000eab2:	40 c4       	mov.aa %a4,%a12
8000eab4:	c2 14       	add %d4,1
8000eab6:	6d ff a4 ff 	call 8000e9fe <_Balloc>
8000eaba:	48 44       	ld.w %d4,[%a15]16
8000eabc:	d9 f5 0c 00 	lea %a5,[%a15]12
8000eac0:	c2 24       	add %d4,2
8000eac2:	d9 24 0c 00 	lea %a4,[%a2]12
8000eac6:	06 24       	sh %d4,2
8000eac8:	40 2d       	mov.aa %a13,%a2
8000eaca:	6d ff 8c ff 	call 8000e9e2 <memcpy>
8000eace:	40 f5       	mov.aa %a5,%a15
8000ead0:	40 c4       	mov.aa %a4,%a12
8000ead2:	6d ff c1 ff 	call 8000ea54 <_Bfree>
8000ead6:	40 df       	mov.aa %a15,%a13
8000ead8:	01 f9 02 26 	addsc.a %a2,%a15,%d9,2
8000eadc:	c2 19       	add %d9,1
8000eade:	59 28 14 00 	st.w [%a2]20,%d8
8000eae2:	68 49       	st.w [%a15]16,%d9
8000eae4:	40 f2       	mov.aa %a2,%a15
8000eae6:	00 90       	ret 

8000eae8 <__hi0bits>:
8000eae8:	b7 04 10 f0 	insert %d15,%d4,0,0,16
8000eaec:	82 02       	mov %d2,0
8000eaee:	ee 05       	jnz %d15,8000eaf8 <__hi0bits+0x10>
8000eaf0:	8f 04 01 40 	sh %d4,%d4,16
8000eaf4:	3b 00 01 20 	mov %d2,16
8000eaf8:	b7 04 18 f0 	insert %d15,%d4,0,0,24
8000eafc:	ee 05       	jnz %d15,8000eb06 <__hi0bits+0x1e>
8000eafe:	1b 82 00 20 	addi %d2,%d2,8
8000eb02:	8f 84 00 40 	sh %d4,%d4,8
8000eb06:	b7 04 1c f0 	insert %d15,%d4,0,0,28
8000eb0a:	ee 03       	jnz %d15,8000eb10 <__hi0bits+0x28>
8000eb0c:	c2 42       	add %d2,4
8000eb0e:	06 44       	sh %d4,4
8000eb10:	b7 04 1e f0 	insert %d15,%d4,0,0,30
8000eb14:	ee 03       	jnz %d15,8000eb1a <__hi0bits+0x32>
8000eb16:	c2 22       	add %d2,2
8000eb18:	06 24       	sh %d4,2
8000eb1a:	0e 47       	jltz %d4,8000eb28 <__hi0bits+0x40>
8000eb1c:	7b 00 00 f4 	movh %d15,16384
8000eb20:	26 f4       	and %d4,%d15
8000eb22:	c2 12       	add %d2,1
8000eb24:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000eb28:	00 90       	ret 

8000eb2a <__lo0bits>:
8000eb2a:	54 43       	ld.w %d3,[%a4]
8000eb2c:	8f 73 00 f1 	and %d15,%d3,7
8000eb30:	6e 0e       	jz %d15,8000eb4c <__lo0bits+0x22>
8000eb32:	82 02       	mov %d2,0
8000eb34:	6f 03 2d 80 	jnz.t %d3,0,8000eb8e <__lo0bits+0x64>
8000eb38:	6f 13 06 00 	jz.t %d3,1,8000eb44 <__lo0bits+0x1a>
8000eb3c:	06 f3       	sh %d3,-1
8000eb3e:	74 43       	st.w [%a4],%d3
8000eb40:	82 12       	mov %d2,1
8000eb42:	00 90       	ret 
8000eb44:	06 e3       	sh %d3,-2
8000eb46:	74 43       	st.w [%a4],%d3
8000eb48:	82 22       	mov %d2,2
8000eb4a:	00 90       	ret 
8000eb4c:	b7 03 10 f8 	insert %d15,%d3,0,16,16
8000eb50:	82 04       	mov %d4,0
8000eb52:	ee 05       	jnz %d15,8000eb5c <__lo0bits+0x32>
8000eb54:	8f 03 1f 30 	sh %d3,%d3,-16
8000eb58:	3b 00 01 40 	mov %d4,16
8000eb5c:	02 3f       	mov %d15,%d3
8000eb5e:	16 ff       	and %d15,255
8000eb60:	ee 04       	jnz %d15,8000eb68 <__lo0bits+0x3e>
8000eb62:	1b 84 00 40 	addi %d4,%d4,8
8000eb66:	06 83       	sh %d3,-8
8000eb68:	8f f3 00 f1 	and %d15,%d3,15
8000eb6c:	ee 03       	jnz %d15,8000eb72 <__lo0bits+0x48>
8000eb6e:	c2 44       	add %d4,4
8000eb70:	06 c3       	sh %d3,-4
8000eb72:	8f 33 00 f1 	and %d15,%d3,3
8000eb76:	ee 03       	jnz %d15,8000eb7c <__lo0bits+0x52>
8000eb78:	c2 24       	add %d4,2
8000eb7a:	06 e3       	sh %d3,-2
8000eb7c:	6f 03 07 80 	jnz.t %d3,0,8000eb8a <__lo0bits+0x60>
8000eb80:	06 f3       	sh %d3,-1
8000eb82:	3b 00 02 20 	mov %d2,32
8000eb86:	76 34       	jz %d3,8000eb8e <__lo0bits+0x64>
8000eb88:	c2 14       	add %d4,1
8000eb8a:	74 43       	st.w [%a4],%d3
8000eb8c:	02 42       	mov %d2,%d4
8000eb8e:	00 90       	ret 

8000eb90 <__i2b>:
8000eb90:	02 4f       	mov %d15,%d4
8000eb92:	82 14       	mov %d4,1
8000eb94:	6d ff 35 ff 	call 8000e9fe <_Balloc>
8000eb98:	6c 25       	st.w [%a2]20,%d15
8000eb9a:	82 1f       	mov %d15,1
8000eb9c:	6c 24       	st.w [%a2]16,%d15
8000eb9e:	00 90       	ret 

8000eba0 <__multiply>:
8000eba0:	19 52 10 00 	ld.w %d2,[%a5]16
8000eba4:	4c 64       	ld.w %d15,[%a6]16
8000eba6:	40 5f       	mov.aa %a15,%a5
8000eba8:	40 6c       	mov.aa %a12,%a6
8000ebaa:	7f f2 04 00 	jge %d2,%d15,8000ebb2 <__multiply+0x12>
8000ebae:	40 6f       	mov.aa %a15,%a6
8000ebb0:	40 5c       	mov.aa %a12,%a5
8000ebb2:	48 4a       	ld.w %d10,[%a15]16
8000ebb4:	19 c9 10 00 	ld.w %d9,[%a12]16
8000ebb8:	4c f2       	ld.w %d15,[%a15]8
8000ebba:	0b 9a 00 80 	add %d8,%d10,%d9
8000ebbe:	48 12       	ld.w %d2,[%a15]4
8000ebc0:	0b 8f 20 41 	lt %d4,%d15,%d8
8000ebc4:	42 24       	add %d4,%d2
8000ebc6:	6d ff 1c ff 	call 8000e9fe <_Balloc>
8000ebca:	d9 23 14 00 	lea %a3,[%a2]20
8000ebce:	01 38 02 d6 	addsc.a %a13,%a3,%d8,2
8000ebd2:	40 34       	mov.aa %a4,%a3
8000ebd4:	82 0f       	mov %d15,0
8000ebd6:	80 43       	mov.d %d3,%a4
8000ebd8:	80 d2       	mov.d %d2,%a13
8000ebda:	7f 23 04 80 	jge.u %d3,%d2,8000ebe2 <__multiply+0x42>
8000ebde:	64 4f       	st.w [%a4+],%d15
8000ebe0:	3c fb       	j 8000ebd6 <__multiply+0x36>
8000ebe2:	d9 ff 14 00 	lea %a15,[%a15]20
8000ebe6:	d9 cc 14 00 	lea %a12,[%a12]20
8000ebea:	80 f3       	mov.d %d3,%a15
8000ebec:	80 cf       	mov.d %d15,%a12
8000ebee:	13 4a 20 43 	madd %d4,%d3,%d10,4
8000ebf2:	13 49 20 0f 	madd %d0,%d15,%d9,4
8000ebf6:	80 c2       	mov.d %d2,%a12
8000ebf8:	7f 02 54 80 	jge.u %d2,%d0,8000eca0 <__multiply+0x100>
8000ebfc:	b9 c2 00 00 	ld.hu %d2,[%a12]0
8000ec00:	40 34       	mov.aa %a4,%a3
8000ec02:	40 f6       	mov.aa %a6,%a15
8000ec04:	82 03       	mov %d3,0
8000ec06:	df 02 21 00 	jeq %d2,0,8000ec48 <__multiply+0xa8>
8000ec0a:	40 45       	mov.aa %a5,%a4
8000ec0c:	44 67       	ld.w %d7,[%a6+]
8000ec0e:	44 56       	ld.w %d6,[%a5+]
8000ec10:	b7 07 10 18 	insert %d1,%d7,0,16,16
8000ec14:	b7 06 10 58 	insert %d5,%d6,0,16,16
8000ec18:	8f 07 1f 70 	sh %d7,%d7,-16
8000ec1c:	03 21 0a 55 	madd %d5,%d5,%d1,%d2
8000ec20:	8f 06 1f 60 	sh %d6,%d6,-16
8000ec24:	03 27 0a 66 	madd %d6,%d6,%d7,%d2
8000ec28:	42 35       	add %d5,%d3
8000ec2a:	8f 05 1f 30 	sh %d3,%d5,-16
8000ec2e:	1a 36       	add %d15,%d6,%d3
8000ec30:	37 f5 10 58 	insert %d5,%d5,%d15,16,16
8000ec34:	8f 0f 1f 30 	sh %d3,%d15,-16
8000ec38:	80 6f       	mov.d %d15,%a6
8000ec3a:	74 45       	st.w [%a4],%d5
8000ec3c:	7f 4f 04 80 	jge.u %d15,%d4,8000ec44 <__multiply+0xa4>
8000ec40:	40 54       	mov.aa %a4,%a5
8000ec42:	3c e4       	j 8000ec0a <__multiply+0x6a>
8000ec44:	59 43 04 00 	st.w [%a4]4,%d3
8000ec48:	b9 c2 02 00 	ld.hu %d2,[%a12]2
8000ec4c:	df 02 27 00 	jeq %d2,0,8000ec9a <__multiply+0xfa>
8000ec50:	54 33       	ld.w %d3,[%a3]
8000ec52:	40 34       	mov.aa %a4,%a3
8000ec54:	40 f5       	mov.aa %a5,%a15
8000ec56:	82 07       	mov %d7,0
8000ec58:	40 56       	mov.aa %a6,%a5
8000ec5a:	44 66       	ld.w %d6,[%a6+]
8000ec5c:	40 47       	mov.aa %a7,%a4
8000ec5e:	44 75       	ld.w %d5,[%a7+]
8000ec60:	b7 06 10 68 	insert %d6,%d6,0,16,16
8000ec64:	8f 05 1f 50 	sh %d5,%d5,-16
8000ec68:	03 26 0a f5 	madd %d15,%d5,%d6,%d2
8000ec6c:	42 7f       	add %d15,%d7
8000ec6e:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000ec72:	8f 0f 1f f0 	sh %d15,%d15,-16
8000ec76:	74 43       	st.w [%a4],%d3
8000ec78:	b9 55 02 00 	ld.hu %d5,[%a5]2
8000ec7c:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000ec80:	40 65       	mov.aa %a5,%a6
8000ec82:	03 25 0a 33 	madd %d3,%d3,%d5,%d2
8000ec86:	42 f3       	add %d3,%d15
8000ec88:	80 6f       	mov.d %d15,%a6
8000ec8a:	8f 03 1f 70 	sh %d7,%d3,-16
8000ec8e:	7f 4f 04 80 	jge.u %d15,%d4,8000ec96 <__multiply+0xf6>
8000ec92:	40 74       	mov.aa %a4,%a7
8000ec94:	3c e2       	j 8000ec58 <__multiply+0xb8>
8000ec96:	59 43 04 00 	st.w [%a4]4,%d3
8000ec9a:	b0 4c       	add.a %a12,4
8000ec9c:	b0 43       	add.a %a3,4
8000ec9e:	3c ac       	j 8000ebf6 <__multiply+0x56>
8000eca0:	8b 08 40 f3 	max %d15,%d8,0
8000eca4:	9f 0f 05 80 	jned %d15,0,8000ecae <__multiply+0x10e>
8000eca8:	59 28 10 00 	st.w [%a2]16,%d8
8000ecac:	00 90       	ret 
8000ecae:	09 d2 3c f5 	ld.w %d2,[+%a13]-4
8000ecb2:	df 02 fb ff 	jne %d2,0,8000eca8 <__multiply+0x108>
8000ecb6:	c2 f8       	add %d8,-1
8000ecb8:	3c f6       	j 8000eca4 <__multiply+0x104>

8000ecba <__pow5mult>:
8000ecba:	8f 34 00 21 	and %d2,%d4,3
8000ecbe:	40 4c       	mov.aa %a12,%a4
8000ecc0:	40 5d       	mov.aa %a13,%a5
8000ecc2:	02 4f       	mov %d15,%d4
8000ecc4:	76 2d       	jz %d2,8000ecde <__pow5mult+0x24>
8000ecc6:	91 00 00 f8 	movh.a %a15,32768
8000ecca:	d9 ff fc e0 	lea %a15,[%a15]4028 <80000fbc <p05.2553>>
8000ecce:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
8000ecd2:	82 05       	mov %d5,0
8000ecd4:	19 f4 fc ff 	ld.w %d4,[%a15]-4
8000ecd8:	6d ff c7 fe 	call 8000ea66 <__multadd>
8000ecdc:	40 2d       	mov.aa %a13,%a2
8000ecde:	86 ef       	sha %d15,-2
8000ece0:	6e 29       	jz %d15,8000ed32 <__pow5mult+0x78>
8000ece2:	99 cf 08 10 	ld.a %a15,[%a12]72
8000ece6:	7c fb       	jnz.a %a15,8000ecfc <__pow5mult+0x42>
8000ece8:	40 c4       	mov.aa %a4,%a12
8000ecea:	3b 10 27 40 	mov %d4,625
8000ecee:	6d ff 51 ff 	call 8000eb90 <__i2b>
8000ecf2:	82 02       	mov %d2,0
8000ecf4:	b5 c2 08 10 	st.a [%a12]72,%a2
8000ecf8:	40 2f       	mov.aa %a15,%a2
8000ecfa:	74 22       	st.w [%a2],%d2
8000ecfc:	82 08       	mov %d8,0
8000ecfe:	2e 0c       	jz.t %d15,0,8000ed16 <__pow5mult+0x5c>
8000ed00:	40 d5       	mov.aa %a5,%a13
8000ed02:	40 c4       	mov.aa %a4,%a12
8000ed04:	40 f6       	mov.aa %a6,%a15
8000ed06:	6d ff 4d ff 	call 8000eba0 <__multiply>
8000ed0a:	40 d5       	mov.aa %a5,%a13
8000ed0c:	40 2e       	mov.aa %a14,%a2
8000ed0e:	40 c4       	mov.aa %a4,%a12
8000ed10:	6d ff a2 fe 	call 8000ea54 <_Bfree>
8000ed14:	40 ed       	mov.aa %a13,%a14
8000ed16:	86 ff       	sha %d15,-1
8000ed18:	6e 0d       	jz %d15,8000ed32 <__pow5mult+0x78>
8000ed1a:	c8 02       	ld.a %a2,[%a15]0
8000ed1c:	bc 23       	jz.a %a2,8000ed22 <__pow5mult+0x68>
8000ed1e:	40 2f       	mov.aa %a15,%a2
8000ed20:	3c ef       	j 8000ecfe <__pow5mult+0x44>
8000ed22:	40 c4       	mov.aa %a4,%a12
8000ed24:	40 f5       	mov.aa %a5,%a15
8000ed26:	40 f6       	mov.aa %a6,%a15
8000ed28:	6d ff 3c ff 	call 8000eba0 <__multiply>
8000ed2c:	e8 02       	st.a [%a15]0,%a2
8000ed2e:	74 28       	st.w [%a2],%d8
8000ed30:	3c f7       	j 8000ed1e <__pow5mult+0x64>
8000ed32:	40 d2       	mov.aa %a2,%a13
8000ed34:	00 90       	ret 

8000ed36 <__lshift>:
8000ed36:	19 5b 10 00 	ld.w %d11,[%a5]16
8000ed3a:	8f b4 3f 80 	sha %d8,%d4,-5
8000ed3e:	02 4a       	mov %d10,%d4
8000ed40:	42 8b       	add %d11,%d8
8000ed42:	19 54 04 00 	ld.w %d4,[%a5]4
8000ed46:	4c 52       	ld.w %d15,[%a5]8
8000ed48:	40 4e       	mov.aa %a14,%a4
8000ed4a:	40 5c       	mov.aa %a12,%a5
8000ed4c:	1b 1b 00 90 	addi %d9,%d11,1
8000ed50:	7f 9f 05 00 	jge %d15,%d9,8000ed5a <__lshift+0x24>
8000ed54:	c2 14       	add %d4,1
8000ed56:	06 1f       	sh %d15,1
8000ed58:	3c fc       	j 8000ed50 <__lshift+0x1a>
8000ed5a:	40 e4       	mov.aa %a4,%a14
8000ed5c:	6d ff 51 fe 	call 8000e9fe <_Balloc>
8000ed60:	8b 08 40 f3 	max %d15,%d8,0
8000ed64:	40 2d       	mov.aa %a13,%a2
8000ed66:	d9 2f 14 00 	lea %a15,[%a2]20
8000ed6a:	d2 02       	mov %e2,0
8000ed6c:	01 f2 02 26 	addsc.a %a2,%a15,%d2,2
8000ed70:	9f 0f 03 80 	jned %d15,0,8000ed76 <__lshift+0x40>
8000ed74:	3c 04       	j 8000ed7c <__lshift+0x46>
8000ed76:	74 23       	st.w [%a2],%d3
8000ed78:	c2 12       	add %d2,1
8000ed7a:	3c f9       	j 8000ed6c <__lshift+0x36>
8000ed7c:	8b 08 40 83 	max %d8,%d8,0
8000ed80:	01 f8 02 36 	addsc.a %a3,%a15,%d8,2
8000ed84:	d9 cf 14 00 	lea %a15,[%a12]20
8000ed88:	19 c2 10 00 	ld.w %d2,[%a12]16
8000ed8c:	80 f3       	mov.d %d3,%a15
8000ed8e:	8f fa 01 41 	and %d4,%d10,31
8000ed92:	13 42 20 23 	madd %d2,%d3,%d2,4
8000ed96:	8b 04 02 51 	rsub %d5,%d4,32
8000ed9a:	82 0f       	mov %d15,0
8000ed9c:	df 04 1a 00 	jeq %d4,0,8000edd0 <__lshift+0x9a>
8000eda0:	40 f5       	mov.aa %a5,%a15
8000eda2:	44 53       	ld.w %d3,[%a5+]
8000eda4:	d9 32 04 00 	lea %a2,[%a3]4
8000eda8:	0f 43 00 30 	sh %d3,%d3,%d4
8000edac:	a6 3f       	or %d15,%d3
8000edae:	6c 30       	st.w [%a3]0,%d15
8000edb0:	4c f0       	ld.w %d15,[%a15]0
8000edb2:	8b 05 00 31 	rsub %d3,%d5,0
8000edb6:	0f 3f 00 30 	sh %d3,%d15,%d3
8000edba:	02 3f       	mov %d15,%d3
8000edbc:	80 53       	mov.d %d3,%a5
8000edbe:	40 5f       	mov.aa %a15,%a5
8000edc0:	7f 23 04 80 	jge.u %d3,%d2,8000edc8 <__lshift+0x92>
8000edc4:	40 23       	mov.aa %a3,%a2
8000edc6:	3c ed       	j 8000eda0 <__lshift+0x6a>
8000edc8:	c2 2b       	add %d11,2
8000edca:	6c 31       	st.w [%a3]4,%d15
8000edcc:	2a b9       	cmov %d9,%d15,%d11
8000edce:	3c 08       	j 8000edde <__lshift+0xa8>
8000edd0:	4c f0       	ld.w %d15,[%a15]0
8000edd2:	b0 4f       	add.a %a15,4
8000edd4:	80 f3       	mov.d %d3,%a15
8000edd6:	6c 30       	st.w [%a3]0,%d15
8000edd8:	b0 43       	add.a %a3,4
8000edda:	3f 23 fb ff 	jlt.u %d3,%d2,8000edd0 <__lshift+0x9a>
8000edde:	c2 f9       	add %d9,-1
8000ede0:	59 d9 10 00 	st.w [%a13]16,%d9
8000ede4:	40 e4       	mov.aa %a4,%a14
8000ede6:	40 c5       	mov.aa %a5,%a12
8000ede8:	6d ff 36 fe 	call 8000ea54 <_Bfree>
8000edec:	40 d2       	mov.aa %a2,%a13
8000edee:	00 90       	ret 

8000edf0 <__mcmp>:
8000edf0:	4c 54       	ld.w %d15,[%a5]16
8000edf2:	19 42 10 00 	ld.w %d2,[%a4]16
8000edf6:	a2 f2       	sub %d2,%d15
8000edf8:	df 02 1c 80 	jne %d2,0,8000ee30 <__mcmp+0x40>
8000edfc:	80 42       	mov.d %d2,%a4
8000edfe:	06 2f       	sh %d15,2
8000ee00:	60 f2       	mov.a %a2,%d15
8000ee02:	1b 42 01 30 	addi %d3,%d2,20
8000ee06:	d9 55 14 00 	lea %a5,[%a5]20
8000ee0a:	01 23 00 f6 	addsc.a %a15,%a2,%d3,0
8000ee0e:	30 25       	add.a %a5,%a2
8000ee10:	09 f2 3c f5 	ld.w %d2,[+%a15]-4
8000ee14:	09 5f 3c f5 	ld.w %d15,[+%a5]-4
8000ee18:	5f f2 08 00 	jeq %d2,%d15,8000ee28 <__mcmp+0x38>
8000ee1c:	0b f2 30 21 	lt.u %d2,%d2,%d15
8000ee20:	82 f3       	mov %d3,-1
8000ee22:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000ee26:	00 90       	ret 
8000ee28:	80 ff       	mov.d %d15,%a15
8000ee2a:	3f f3 f3 ff 	jlt.u %d3,%d15,8000ee10 <__mcmp+0x20>
8000ee2e:	82 02       	mov %d2,0
8000ee30:	00 90       	ret 

8000ee32 <__mdiff>:
8000ee32:	40 4d       	mov.aa %a13,%a4
8000ee34:	40 5f       	mov.aa %a15,%a5
8000ee36:	40 54       	mov.aa %a4,%a5
8000ee38:	40 65       	mov.aa %a5,%a6
8000ee3a:	40 6c       	mov.aa %a12,%a6
8000ee3c:	6d ff da ff 	call 8000edf0 <__mcmp>
8000ee40:	02 2f       	mov %d15,%d2
8000ee42:	f6 2a       	jnz %d2,8000ee56 <__mdiff+0x24>
8000ee44:	40 d4       	mov.aa %a4,%a13
8000ee46:	82 04       	mov %d4,0
8000ee48:	6d ff db fd 	call 8000e9fe <_Balloc>
8000ee4c:	82 12       	mov %d2,1
8000ee4e:	59 22 10 00 	st.w [%a2]16,%d2
8000ee52:	6c 25       	st.w [%a2]20,%d15
8000ee54:	00 90       	ret 
8000ee56:	82 08       	mov %d8,0
8000ee58:	ce 25       	jgez %d2,8000ee62 <__mdiff+0x30>
8000ee5a:	40 f2       	mov.aa %a2,%a15
8000ee5c:	82 18       	mov %d8,1
8000ee5e:	40 cf       	mov.aa %a15,%a12
8000ee60:	40 2c       	mov.aa %a12,%a2
8000ee62:	40 d4       	mov.aa %a4,%a13
8000ee64:	48 14       	ld.w %d4,[%a15]4
8000ee66:	6d ff cc fd 	call 8000e9fe <_Balloc>
8000ee6a:	48 42       	ld.w %d2,[%a15]16
8000ee6c:	d9 ff 14 00 	lea %a15,[%a15]20
8000ee70:	80 ff       	mov.d %d15,%a15
8000ee72:	d9 c4 14 00 	lea %a4,[%a12]20
8000ee76:	13 42 20 7f 	madd %d7,%d15,%d2,4
8000ee7a:	19 c0 10 00 	ld.w %d0,[%a12]16
8000ee7e:	80 4f       	mov.d %d15,%a4
8000ee80:	59 28 0c 00 	st.w [%a2]12,%d8
8000ee84:	13 40 20 0f 	madd %d0,%d15,%d0,4
8000ee88:	d9 25 14 00 	lea %a5,[%a2]20
8000ee8c:	82 03       	mov %d3,0
8000ee8e:	44 f6       	ld.w %d6,[%a15+]
8000ee90:	44 45       	ld.w %d5,[%a4+]
8000ee92:	b7 06 10 48 	insert %d4,%d6,0,16,16
8000ee96:	b7 05 10 18 	insert %d1,%d5,0,16,16
8000ee9a:	42 34       	add %d4,%d3
8000ee9c:	a2 14       	sub %d4,%d1
8000ee9e:	8f 06 1f 60 	sh %d6,%d6,-16
8000eea2:	8f 05 1f 50 	sh %d5,%d5,-16
8000eea6:	8f 04 3f 30 	sha %d3,%d4,-16
8000eeaa:	0b 56 80 50 	sub %d5,%d6,%d5
8000eeae:	1a 35       	add %d15,%d5,%d3
8000eeb0:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000eeb4:	8f 0f 3f 30 	sha %d3,%d15,-16
8000eeb8:	80 4f       	mov.d %d15,%a4
8000eeba:	d9 53 04 00 	lea %a3,[%a5]4
8000eebe:	74 54       	st.w [%a5],%d4
8000eec0:	40 35       	mov.aa %a5,%a3
8000eec2:	3f 0f e6 ff 	jlt.u %d15,%d0,8000ee8e <__mdiff+0x5c>
8000eec6:	80 ff       	mov.d %d15,%a15
8000eec8:	7f 7f 12 80 	jge.u %d15,%d7,8000eeec <__mdiff+0xba>
8000eecc:	44 f5       	ld.w %d5,[%a15+]
8000eece:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000eed2:	8f 05 1f 50 	sh %d5,%d5,-16
8000eed6:	42 34       	add %d4,%d3
8000eed8:	8f 04 3f f0 	sha %d15,%d4,-16
8000eedc:	42 5f       	add %d15,%d5
8000eede:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000eee2:	8f 0f 3f 30 	sha %d3,%d15,-16
8000eee6:	74 34       	st.w [%a3],%d4
8000eee8:	b0 43       	add.a %a3,4
8000eeea:	3c ee       	j 8000eec6 <__mdiff+0x94>
8000eeec:	09 3f 3c f5 	ld.w %d15,[+%a3]-4
8000eef0:	ee 03       	jnz %d15,8000eef6 <__mdiff+0xc4>
8000eef2:	c2 f2       	add %d2,-1
8000eef4:	3c fc       	j 8000eeec <__mdiff+0xba>
8000eef6:	59 22 10 00 	st.w [%a2]16,%d2
8000eefa:	00 90       	ret 

8000eefc <__d2b>:
8000eefc:	20 08       	sub.a %sp,8
8000eefe:	02 48       	mov %d8,%d4
8000ef00:	82 14       	mov %d4,1
8000ef02:	02 59       	mov %d9,%d5
8000ef04:	40 5d       	mov.aa %a13,%a5
8000ef06:	40 6c       	mov.aa %a12,%a6
8000ef08:	6d ff 7b fd 	call 8000e9fe <_Balloc>
8000ef0c:	b7 09 0c 2a 	insert %d2,%d9,0,20,12
8000ef10:	37 09 6b 9a 	extr.u %d9,%d9,20,11
8000ef14:	40 2f       	mov.aa %a15,%a2
8000ef16:	76 93       	jz %d9,8000ef1c <__d2b+0x20>
8000ef18:	b7 f2 01 2a 	insert %d2,%d2,15,20,1
8000ef1c:	59 a2 04 00 	st.w [%sp]4,%d2
8000ef20:	df 08 20 00 	jeq %d8,0,8000ef60 <__d2b+0x64>
8000ef24:	d9 a4 08 00 	lea %a4,[%sp]8
8000ef28:	89 48 38 f5 	st.w [+%a4]-8,%d8
8000ef2c:	40 a4       	mov.aa %a4,%sp
8000ef2e:	6d ff fe fd 	call 8000eb2a <__lo0bits>
8000ef32:	58 00       	ld.w %d15,[%sp]0
8000ef34:	76 2f       	jz %d2,8000ef52 <__d2b+0x56>
8000ef36:	19 a4 04 00 	ld.w %d4,[%sp]4
8000ef3a:	8b 02 02 31 	rsub %d3,%d2,32
8000ef3e:	0f 34 00 30 	sh %d3,%d4,%d3
8000ef42:	a6 3f       	or %d15,%d3
8000ef44:	68 5f       	st.w [%a15]20,%d15
8000ef46:	8b 02 00 f1 	rsub %d15,%d2,0
8000ef4a:	0f f4 00 f0 	sh %d15,%d4,%d15
8000ef4e:	78 01       	st.w [%sp]4,%d15
8000ef50:	3c 02       	j 8000ef54 <__d2b+0x58>
8000ef52:	68 5f       	st.w [%a15]20,%d15
8000ef54:	58 01       	ld.w %d15,[%sp]4
8000ef56:	82 28       	mov %d8,2
8000ef58:	ea 18       	cmovn %d8,%d15,1
8000ef5a:	68 6f       	st.w [%a15]24,%d15
8000ef5c:	68 48       	st.w [%a15]16,%d8
8000ef5e:	3c 0c       	j 8000ef76 <__d2b+0x7a>
8000ef60:	d9 a4 04 00 	lea %a4,[%sp]4
8000ef64:	6d ff e3 fd 	call 8000eb2a <__lo0bits>
8000ef68:	58 01       	ld.w %d15,[%sp]4
8000ef6a:	1b 02 02 20 	addi %d2,%d2,32
8000ef6e:	68 5f       	st.w [%a15]20,%d15
8000ef70:	82 1f       	mov %d15,1
8000ef72:	68 4f       	st.w [%a15]16,%d15
8000ef74:	82 18       	mov %d8,1
8000ef76:	76 98       	jz %d9,8000ef86 <__d2b+0x8a>
8000ef78:	1b d9 bc 9f 	addi %d9,%d9,-1075
8000ef7c:	42 29       	add %d9,%d2
8000ef7e:	74 d9       	st.w [%a13],%d9
8000ef80:	8b 52 03 21 	rsub %d2,%d2,53
8000ef84:	3c 0d       	j 8000ef9e <__d2b+0xa2>
8000ef86:	01 f8 02 26 	addsc.a %a2,%a15,%d8,2
8000ef8a:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000ef8e:	74 d2       	st.w [%a13],%d2
8000ef90:	19 24 10 00 	ld.w %d4,[%a2]16
8000ef94:	6d ff aa fd 	call 8000eae8 <__hi0bits>
8000ef98:	06 58       	sh %d8,5
8000ef9a:	0b 28 80 20 	sub %d2,%d8,%d2
8000ef9e:	74 c2       	st.w [%a12],%d2
8000efa0:	40 f2       	mov.aa %a2,%a15
8000efa2:	00 90       	ret 

8000efa4 <__fpclassifyd>:
8000efa4:	0f 45 a0 f0 	or %d15,%d5,%d4
8000efa8:	82 22       	mov %d2,2
8000efaa:	6e 1d       	jz %d15,8000efe4 <__fpclassifyd+0x40>
8000efac:	7b 00 00 38 	movh %d3,32768
8000efb0:	3a 53       	eq %d15,%d3,%d5
8000efb2:	8b 04 00 f4 	and.eq %d15,%d4,0
8000efb6:	8b 04 00 62 	eq %d6,%d4,0
8000efba:	ee 15       	jnz %d15,8000efe4 <__fpclassifyd+0x40>
8000efbc:	b7 05 81 5f 	insert %d5,%d5,0,31,1
8000efc0:	7b 00 fe f7 	movh %d15,32736
8000efc4:	9b 05 ff 3f 	addih %d3,%d5,65520
8000efc8:	82 42       	mov %d2,4
8000efca:	3f f3 0d 80 	jlt.u %d3,%d15,8000efe4 <__fpclassifyd+0x40>
8000efce:	7b 00 01 f0 	movh %d15,16
8000efd2:	82 32       	mov %d2,3
8000efd4:	3f f5 08 80 	jlt.u %d5,%d15,8000efe4 <__fpclassifyd+0x40>
8000efd8:	7b 00 ff 27 	movh %d2,32752
8000efdc:	0b 25 00 51 	eq %d5,%d5,%d2
8000efe0:	0f 56 80 20 	and %d2,%d6,%d5
8000efe4:	00 90       	ret 

8000efe6 <__ssprint_r>:
8000efe6:	4c 62       	ld.w %d15,[%a6]8
8000efe8:	20 08       	sub.a %sp,8
8000efea:	40 4e       	mov.aa %a14,%a4
8000efec:	40 5f       	mov.aa %a15,%a5
8000efee:	40 6c       	mov.aa %a12,%a6
8000eff0:	54 6c       	ld.w %d12,[%a6]
8000eff2:	6e 30       	jz %d15,8000f052 <__ssprint_r+0x6c>
8000eff4:	a0 02       	mov.a %a2,0
8000eff6:	b5 a2 04 00 	st.a [%sp]4,%a2
8000effa:	82 09       	mov %d9,0
8000effc:	3b 00 48 e0 	mov %d14,1152
8000f000:	3b f0 b7 df 	mov %d13,-1153
8000f004:	3c 0a       	j 8000f018 <__ssprint_r+0x32>
8000f006:	60 c2       	mov.a %a2,%d12
8000f008:	d4 22       	ld.a %a2,[%a2]
8000f00a:	b5 a2 04 00 	st.a [%sp]4,%a2
8000f00e:	60 c2       	mov.a %a2,%d12
8000f010:	1b 8c 00 c0 	addi %d12,%d12,8
8000f014:	19 29 04 00 	ld.w %d9,[%a2]4
8000f018:	df 09 f7 7f 	jeq %d9,0,8000f006 <__ssprint_r+0x20>
8000f01c:	48 28       	ld.w %d8,[%a15]8
8000f01e:	3f 89 5a 80 	jlt.u %d9,%d8,8000f0d2 <__ssprint_r+0xec>
8000f022:	88 62       	ld.h %d2,[%a15]12
8000f024:	0f e2 80 f0 	and %d15,%d2,%d14
8000f028:	ee 19       	jnz %d15,8000f05a <__ssprint_r+0x74>
8000f02a:	3f 89 54 80 	jlt.u %d9,%d8,8000f0d2 <__ssprint_r+0xec>
8000f02e:	c8 04       	ld.a %a4,[%a15]0
8000f030:	99 a5 04 00 	ld.a %a5,[%sp]4
8000f034:	02 84       	mov %d4,%d8
8000f036:	6d 00 81 00 	call 8000f138 <memmove>
8000f03a:	4c f2       	ld.w %d15,[%a15]8
8000f03c:	a2 8f       	sub %d15,%d8
8000f03e:	68 2f       	st.w [%a15]8,%d15
8000f040:	4c f0       	ld.w %d15,[%a15]0
8000f042:	42 f8       	add %d8,%d15
8000f044:	4c c2       	ld.w %d15,[%a12]8
8000f046:	68 08       	st.w [%a15]0,%d8
8000f048:	52 99       	sub %d9,%d15,%d9
8000f04a:	59 c9 08 00 	st.w [%a12]8,%d9
8000f04e:	df 09 dc ff 	jne %d9,0,8000f006 <__ssprint_r+0x20>
8000f052:	82 0f       	mov %d15,0
8000f054:	6c c1       	st.w [%a12]4,%d15
8000f056:	82 02       	mov %d2,0
8000f058:	00 90       	ret 
8000f05a:	c8 45       	ld.a %a5,[%a15]16
8000f05c:	48 5a       	ld.w %d10,[%a15]20
8000f05e:	4c f0       	ld.w %d15,[%a15]0
8000f060:	80 53       	mov.d %d3,%a5
8000f062:	53 3a 20 a0 	mul %d10,%d10,3
8000f066:	a2 3f       	sub %d15,%d3
8000f068:	82 23       	mov %d3,2
8000f06a:	4b 3a 01 a2 	div %e10,%d10,%d3
8000f06e:	92 13       	add %d3,%d15,1
8000f070:	42 93       	add %d3,%d9
8000f072:	0b 3a b0 a1 	max.u %d10,%d10,%d3
8000f076:	40 e4       	mov.aa %a4,%a14
8000f078:	02 a4       	mov %d4,%d10
8000f07a:	6f a2 12 00 	jz.t %d2,10,8000f09e <__ssprint_r+0xb8>
8000f07e:	6d ff 0b e9 	call 8000c294 <_malloc_r>
8000f082:	40 2d       	mov.aa %a13,%a2
8000f084:	bd 02 15 00 	jz.a %a2,8000f0ae <__ssprint_r+0xc8>
8000f088:	c8 45       	ld.a %a5,[%a15]16
8000f08a:	40 24       	mov.aa %a4,%a2
8000f08c:	02 f4       	mov %d4,%d15
8000f08e:	6d ff aa fc 	call 8000e9e2 <memcpy>
8000f092:	88 62       	ld.h %d2,[%a15]12
8000f094:	26 d2       	and %d2,%d13
8000f096:	8f 02 48 21 	or %d2,%d2,128
8000f09a:	a8 62       	st.h [%a15]12,%d2
8000f09c:	3c 13       	j 8000f0c2 <__ssprint_r+0xdc>
8000f09e:	6d 00 7d 00 	call 8000f198 <_realloc_r>
8000f0a2:	40 2d       	mov.aa %a13,%a2
8000f0a4:	7c 2f       	jnz.a %a2,8000f0c2 <__ssprint_r+0xdc>
8000f0a6:	c8 45       	ld.a %a5,[%a15]16
8000f0a8:	40 e4       	mov.aa %a4,%a14
8000f0aa:	6d ff ea eb 	call 8000c87e <_free_r>
8000f0ae:	da 0c       	mov %d15,12
8000f0b0:	6c e0       	st.w [%a14]0,%d15
8000f0b2:	8c f6       	ld.h %d15,[%a15]12
8000f0b4:	82 f2       	mov %d2,-1
8000f0b6:	96 40       	or %d15,64
8000f0b8:	a8 6f       	st.h [%a15]12,%d15
8000f0ba:	82 0f       	mov %d15,0
8000f0bc:	6c c2       	st.w [%a12]8,%d15
8000f0be:	6c c1       	st.w [%a12]4,%d15
8000f0c0:	00 90       	ret 
8000f0c2:	e8 4d       	st.a [%a15]16,%a13
8000f0c4:	10 dd       	addsc.a %a13,%a13,%d15,0
8000f0c6:	68 5a       	st.w [%a15]20,%d10
8000f0c8:	a2 fa       	sub %d10,%d15
8000f0ca:	e8 0d       	st.a [%a15]0,%a13
8000f0cc:	02 98       	mov %d8,%d9
8000f0ce:	68 2a       	st.w [%a15]8,%d10
8000f0d0:	3c ad       	j 8000f02a <__ssprint_r+0x44>
8000f0d2:	02 98       	mov %d8,%d9
8000f0d4:	3c ad       	j 8000f02e <__ssprint_r+0x48>

8000f0d6 <_calloc_r>:
8000f0d6:	e2 54       	mul %d4,%d5
8000f0d8:	6d ff de e8 	call 8000c294 <_malloc_r>
8000f0dc:	40 2f       	mov.aa %a15,%a2
8000f0de:	a0 02       	mov.a %a2,0
8000f0e0:	bd 0f 2b 00 	jz.a %a15,8000f136 <_calloc_r+0x60>
8000f0e4:	19 f5 fc ff 	ld.w %d5,[%a15]-4
8000f0e8:	8f 35 c0 51 	andn %d5,%d5,3
8000f0ec:	c2 c5       	add %d5,-4
8000f0ee:	8b 55 a2 f2 	ge.u %d15,%d5,37
8000f0f2:	ee 1d       	jnz %d15,8000f12c <_calloc_r+0x56>
8000f0f4:	8b 45 61 f2 	lt.u %d15,%d5,20
8000f0f8:	40 f2       	mov.aa %a2,%a15
8000f0fa:	ee 14       	jnz %d15,8000f122 <_calloc_r+0x4c>
8000f0fc:	82 0f       	mov %d15,0
8000f0fe:	68 0f       	st.w [%a15]0,%d15
8000f100:	68 1f       	st.w [%a15]4,%d15
8000f102:	8b c5 a1 22 	ge.u %d2,%d5,28
8000f106:	d9 f2 08 00 	lea %a2,[%a15]8
8000f10a:	76 2c       	jz %d2,8000f122 <_calloc_r+0x4c>
8000f10c:	68 2f       	st.w [%a15]8,%d15
8000f10e:	68 3f       	st.w [%a15]12,%d15
8000f110:	8b 45 02 52 	eq %d5,%d5,36
8000f114:	d9 f2 10 00 	lea %a2,[%a15]16
8000f118:	76 55       	jz %d5,8000f122 <_calloc_r+0x4c>
8000f11a:	68 4f       	st.w [%a15]16,%d15
8000f11c:	d9 f2 18 00 	lea %a2,[%a15]24
8000f120:	68 5f       	st.w [%a15]20,%d15
8000f122:	82 0f       	mov %d15,0
8000f124:	6c 20       	st.w [%a2]0,%d15
8000f126:	6c 21       	st.w [%a2]4,%d15
8000f128:	6c 22       	st.w [%a2]8,%d15
8000f12a:	3c 05       	j 8000f134 <_calloc_r+0x5e>
8000f12c:	40 f4       	mov.aa %a4,%a15
8000f12e:	82 04       	mov %d4,0
8000f130:	6d 00 2c 00 	call 8000f188 <memset>
8000f134:	40 f2       	mov.aa %a2,%a15
8000f136:	00 90       	ret 

8000f138 <memmove>:
8000f138:	80 46       	mov.d %d6,%a4
8000f13a:	80 52       	mov.d %d2,%a5
8000f13c:	7f 62 16 80 	jge.u %d2,%d6,8000f168 <memmove+0x30>
8000f140:	0b 42 00 50 	add %d5,%d2,%d4
8000f144:	7f 56 12 80 	jge.u %d6,%d5,8000f168 <memmove+0x30>
8000f148:	60 4f       	mov.a %a15,%d4
8000f14a:	02 42       	mov %d2,%d4
8000f14c:	c2 f2       	add %d2,-1
8000f14e:	fd f0 03 00 	loop %a15,8000f154 <memmove+0x1c>
8000f152:	3c 19       	j 8000f184 <memmove+0x4c>
8000f154:	5a 42       	sub %d15,%d2,%d4
8000f156:	60 f2       	mov.a %a2,%d15
8000f158:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000f15c:	1a 62       	add %d15,%d2,%d6
8000f15e:	79 23 00 00 	ld.b %d3,[%a2]0
8000f162:	60 f2       	mov.a %a2,%d15
8000f164:	34 23       	st.b [%a2],%d3
8000f166:	3c f3       	j 8000f14c <memmove+0x14>
8000f168:	60 4f       	mov.a %a15,%d4
8000f16a:	a0 02       	mov.a %a2,0
8000f16c:	01 26 00 46 	addsc.a %a4,%a2,%d6,0
8000f170:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000f174:	fd f0 03 00 	loop %a15,8000f17a <memmove+0x42>
8000f178:	3c 06       	j 8000f184 <memmove+0x4c>
8000f17a:	79 33 00 00 	ld.b %d3,[%a3]0
8000f17e:	b0 12       	add.a %a2,1
8000f180:	34 43       	st.b [%a4],%d3
8000f182:	3c f5       	j 8000f16c <memmove+0x34>
8000f184:	60 62       	mov.a %a2,%d6
8000f186:	00 90       	ret 

8000f188 <memset>:
8000f188:	40 42       	mov.aa %a2,%a4
8000f18a:	40 4f       	mov.aa %a15,%a4
8000f18c:	9f 05 03 80 	jned %d5,0,8000f192 <memset+0xa>
8000f190:	00 90       	ret 
8000f192:	28 04       	st.b [%a15]0,%d4
8000f194:	b0 1f       	add.a %a15,1
8000f196:	3c fb       	j 8000f18c <memset+0x4>

8000f198 <_realloc_r>:
8000f198:	40 4d       	mov.aa %a13,%a4
8000f19a:	40 5f       	mov.aa %a15,%a5
8000f19c:	02 49       	mov %d9,%d4
8000f19e:	7c 53       	jnz.a %a5,8000f1a4 <_realloc_r+0xc>
8000f1a0:	1d ff 7a e8 	j 8000c294 <_malloc_r>
8000f1a4:	6d ff c5 ea 	call 8000c72e <__malloc_lock>
8000f1a8:	1b b9 00 20 	addi %d2,%d9,11
8000f1ac:	8b 72 61 f2 	lt.u %d15,%d2,23
8000f1b0:	8f 72 c0 21 	andn %d2,%d2,7
8000f1b4:	ab 02 a1 ff 	seln %d15,%d15,%d2,16
8000f1b8:	19 f3 fc ff 	ld.w %d3,[%a15]-4
8000f1bc:	0b 9f 30 21 	lt.u %d2,%d15,%d9
8000f1c0:	8b 0f 20 25 	or.lt %d2,%d15,0
8000f1c4:	d9 fe f8 ff 	lea %a14,[%a15]-8
8000f1c8:	8f 33 c0 81 	andn %d8,%d3,3
8000f1cc:	76 25       	jz %d2,8000f1d6 <_realloc_r+0x3e>
8000f1ce:	da 0c       	mov %d15,12
8000f1d0:	6c d0       	st.w [%a13]0,%d15
8000f1d2:	1d 00 56 01 	j 8000f47e <_realloc_r+0x2e6>
8000f1d6:	7f f8 ac 01 	jge %d8,%d15,8000f52e <_realloc_r+0x396>
8000f1da:	7b 00 00 c7 	movh %d12,28672
8000f1de:	60 c3       	mov.a %a3,%d12
8000f1e0:	01 e8 00 26 	addsc.a %a2,%a14,%d8,0
8000f1e4:	d9 34 28 00 	lea %a4,[%a3]40
8000f1e8:	99 43 08 00 	ld.a %a3,[%a4]8
8000f1ec:	80 4c       	mov.d %d12,%a4
8000f1ee:	19 2b 04 00 	ld.w %d11,[%a2]4
8000f1f2:	7d 32 0a 00 	jeq.a %a2,%a3,8000f206 <_realloc_r+0x6e>
8000f1f6:	8f 1b c0 21 	andn %d2,%d11,1
8000f1fa:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
8000f1fe:	19 42 04 00 	ld.w %d2,[%a4]4
8000f202:	6f 02 2b 80 	jnz.t %d2,0,8000f258 <_realloc_r+0xc0>
8000f206:	8f 3b c0 b1 	andn %d11,%d11,3
8000f20a:	0b 8b 00 20 	add %d2,%d11,%d8
8000f20e:	7d 32 1b 80 	jne.a %a2,%a3,8000f244 <_realloc_r+0xac>
8000f212:	1b 0f 01 40 	addi %d4,%d15,16
8000f216:	3f 42 23 00 	jlt %d2,%d4,8000f25c <_realloc_r+0xc4>
8000f21a:	10 ee       	addsc.a %a14,%a14,%d15,0
8000f21c:	60 c2       	mov.a %a2,%d12
8000f21e:	a2 f2       	sub %d2,%d15
8000f220:	b5 2e 08 00 	st.a [%a2]8,%a14
8000f224:	8f 12 40 21 	or %d2,%d2,1
8000f228:	59 e2 04 00 	st.w [%a14]4,%d2
8000f22c:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000f230:	40 d4       	mov.aa %a4,%a13
8000f232:	8f 12 00 21 	and %d2,%d2,1
8000f236:	a6 2f       	or %d15,%d2
8000f238:	59 ff fc ff 	st.w [%a15]-4,%d15
8000f23c:	6d ff 7a ea 	call 8000c730 <__malloc_unlock>
8000f240:	40 f2       	mov.aa %a2,%a15
8000f242:	00 90       	ret 
8000f244:	3f f2 0c 00 	jlt %d2,%d15,8000f25c <_realloc_r+0xc4>
8000f248:	cc 23       	ld.a %a15,[%a2]12
8000f24a:	99 22 08 00 	ld.a %a2,[%a2]8
8000f24e:	02 28       	mov %d8,%d2
8000f250:	ec 23       	st.a [%a2]12,%a15
8000f252:	e8 22       	st.a [%a15]8,%a2
8000f254:	1d 00 6d 01 	j 8000f52e <_realloc_r+0x396>
8000f258:	82 0b       	mov %d11,0
8000f25a:	a0 02       	mov.a %a2,0
8000f25c:	6f 03 08 81 	jnz.t %d3,0,8000f46c <_realloc_r+0x2d4>
8000f260:	99 fc f8 ff 	ld.a %a12,[%a15]-8
8000f264:	01 ce 20 c0 	sub.a %a12,%a14,%a12
8000f268:	19 ca 04 00 	ld.w %d10,[%a12]4
8000f26c:	8f 3a c0 a1 	andn %d10,%d10,3
8000f270:	42 8a       	add %d10,%d8
8000f272:	bd 02 b3 00 	jz.a %a2,8000f3d8 <_realloc_r+0x240>
8000f276:	42 ab       	add %d11,%d10
8000f278:	7d 32 5f 80 	jne.a %a2,%a3,8000f336 <_realloc_r+0x19e>
8000f27c:	1b 0f 01 20 	addi %d2,%d15,16
8000f280:	3f 2b ac 00 	jlt %d11,%d2,8000f3d8 <_realloc_r+0x240>
8000f284:	40 ce       	mov.aa %a14,%a12
8000f286:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000f28a:	09 e3 88 05 	ld.a %a3,[+%a14]8
8000f28e:	1b c8 ff 4f 	addi %d4,%d8,-4
8000f292:	8b 54 a2 22 	ge.u %d2,%d4,37
8000f296:	b5 32 0c 00 	st.a [%a3]12,%a2
8000f29a:	b5 23 08 00 	st.a [%a2]8,%a3
8000f29e:	df 02 36 80 	jne %d2,0,8000f30a <_realloc_r+0x172>
8000f2a2:	8b 44 61 22 	lt.u %d2,%d4,20
8000f2a6:	40 e3       	mov.aa %a3,%a14
8000f2a8:	df 02 28 80 	jne %d2,0,8000f2f8 <_realloc_r+0x160>
8000f2ac:	48 02       	ld.w %d2,[%a15]0
8000f2ae:	59 c2 08 00 	st.w [%a12]8,%d2
8000f2b2:	48 13       	ld.w %d3,[%a15]4
8000f2b4:	8b c4 a1 22 	ge.u %d2,%d4,28
8000f2b8:	59 c3 0c 00 	st.w [%a12]12,%d3
8000f2bc:	f6 26       	jnz %d2,8000f2c8 <_realloc_r+0x130>
8000f2be:	d9 c3 10 00 	lea %a3,[%a12]16
8000f2c2:	d9 ff 08 00 	lea %a15,[%a15]8
8000f2c6:	3c 19       	j 8000f2f8 <_realloc_r+0x160>
8000f2c8:	48 22       	ld.w %d2,[%a15]8
8000f2ca:	8b 44 02 82 	eq %d8,%d4,36
8000f2ce:	59 c2 10 00 	st.w [%a12]16,%d2
8000f2d2:	48 33       	ld.w %d3,[%a15]12
8000f2d4:	59 c3 14 00 	st.w [%a12]20,%d3
8000f2d8:	f6 86       	jnz %d8,8000f2e4 <_realloc_r+0x14c>
8000f2da:	d9 c3 18 00 	lea %a3,[%a12]24
8000f2de:	d9 ff 10 00 	lea %a15,[%a15]16
8000f2e2:	3c 0b       	j 8000f2f8 <_realloc_r+0x160>
8000f2e4:	48 42       	ld.w %d2,[%a15]16
8000f2e6:	d9 c3 20 00 	lea %a3,[%a12]32
8000f2ea:	59 c2 18 00 	st.w [%a12]24,%d2
8000f2ee:	48 53       	ld.w %d3,[%a15]20
8000f2f0:	d9 ff 18 00 	lea %a15,[%a15]24
8000f2f4:	59 c3 1c 00 	st.w [%a12]28,%d3
8000f2f8:	48 02       	ld.w %d2,[%a15]0
8000f2fa:	74 32       	st.w [%a3],%d2
8000f2fc:	48 13       	ld.w %d3,[%a15]4
8000f2fe:	59 33 04 00 	st.w [%a3]4,%d3
8000f302:	48 22       	ld.w %d2,[%a15]8
8000f304:	59 32 08 00 	st.w [%a3]8,%d2
8000f308:	3c 05       	j 8000f312 <_realloc_r+0x17a>
8000f30a:	40 e4       	mov.aa %a4,%a14
8000f30c:	40 f5       	mov.aa %a5,%a15
8000f30e:	6d ff 15 ff 	call 8000f138 <memmove>
8000f312:	10 cf       	addsc.a %a15,%a12,%d15,0
8000f314:	60 c2       	mov.a %a2,%d12
8000f316:	a2 fb       	sub %d11,%d15
8000f318:	ec 22       	st.a [%a2]8,%a15
8000f31a:	8f 1b 40 b1 	or %d11,%d11,1
8000f31e:	68 1b       	st.w [%a15]4,%d11
8000f320:	19 c2 04 00 	ld.w %d2,[%a12]4
8000f324:	40 d4       	mov.aa %a4,%a13
8000f326:	8f 12 00 21 	and %d2,%d2,1
8000f32a:	a6 2f       	or %d15,%d2
8000f32c:	6c c1       	st.w [%a12]4,%d15
8000f32e:	6d ff 01 ea 	call 8000c730 <__malloc_unlock>
8000f332:	40 e2       	mov.aa %a2,%a14
8000f334:	00 90       	ret 
8000f336:	3f fb 51 00 	jlt %d11,%d15,8000f3d8 <_realloc_r+0x240>
8000f33a:	99 23 0c 00 	ld.a %a3,[%a2]12
8000f33e:	99 22 08 00 	ld.a %a2,[%a2]8
8000f342:	40 c4       	mov.aa %a4,%a12
8000f344:	1b c8 ff 4f 	addi %d4,%d8,-4
8000f348:	b5 23 0c 00 	st.a [%a2]12,%a3
8000f34c:	b5 32 08 00 	st.a [%a3]8,%a2
8000f350:	09 43 88 05 	ld.a %a3,[+%a4]8
8000f354:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000f358:	8b 54 a2 22 	ge.u %d2,%d4,37
8000f35c:	b5 32 0c 00 	st.a [%a3]12,%a2
8000f360:	b5 23 08 00 	st.a [%a2]8,%a3
8000f364:	df 02 35 80 	jne %d2,0,8000f3ce <_realloc_r+0x236>
8000f368:	8b 44 61 22 	lt.u %d2,%d4,20
8000f36c:	df 02 28 80 	jne %d2,0,8000f3bc <_realloc_r+0x224>
8000f370:	48 02       	ld.w %d2,[%a15]0
8000f372:	59 c2 08 00 	st.w [%a12]8,%d2
8000f376:	48 13       	ld.w %d3,[%a15]4
8000f378:	8b c4 a1 22 	ge.u %d2,%d4,28
8000f37c:	59 c3 0c 00 	st.w [%a12]12,%d3
8000f380:	f6 26       	jnz %d2,8000f38c <_realloc_r+0x1f4>
8000f382:	d9 c4 10 00 	lea %a4,[%a12]16
8000f386:	d9 ff 08 00 	lea %a15,[%a15]8
8000f38a:	3c 19       	j 8000f3bc <_realloc_r+0x224>
8000f38c:	48 22       	ld.w %d2,[%a15]8
8000f38e:	8b 44 02 82 	eq %d8,%d4,36
8000f392:	59 c2 10 00 	st.w [%a12]16,%d2
8000f396:	48 33       	ld.w %d3,[%a15]12
8000f398:	59 c3 14 00 	st.w [%a12]20,%d3
8000f39c:	f6 86       	jnz %d8,8000f3a8 <_realloc_r+0x210>
8000f39e:	d9 c4 18 00 	lea %a4,[%a12]24
8000f3a2:	d9 ff 10 00 	lea %a15,[%a15]16
8000f3a6:	3c 0b       	j 8000f3bc <_realloc_r+0x224>
8000f3a8:	48 42       	ld.w %d2,[%a15]16
8000f3aa:	d9 c4 20 00 	lea %a4,[%a12]32
8000f3ae:	59 c2 18 00 	st.w [%a12]24,%d2
8000f3b2:	48 53       	ld.w %d3,[%a15]20
8000f3b4:	d9 ff 18 00 	lea %a15,[%a15]24
8000f3b8:	59 c3 1c 00 	st.w [%a12]28,%d3
8000f3bc:	48 02       	ld.w %d2,[%a15]0
8000f3be:	74 42       	st.w [%a4],%d2
8000f3c0:	48 13       	ld.w %d3,[%a15]4
8000f3c2:	59 43 04 00 	st.w [%a4]4,%d3
8000f3c6:	48 22       	ld.w %d2,[%a15]8
8000f3c8:	59 42 08 00 	st.w [%a4]8,%d2
8000f3cc:	3c 04       	j 8000f3d4 <_realloc_r+0x23c>
8000f3ce:	40 f5       	mov.aa %a5,%a15
8000f3d0:	6d ff b4 fe 	call 8000f138 <memmove>
8000f3d4:	02 b8       	mov %d8,%d11
8000f3d6:	3c 45       	j 8000f460 <_realloc_r+0x2c8>
8000f3d8:	3f fa 4a 00 	jlt %d10,%d15,8000f46c <_realloc_r+0x2d4>
8000f3dc:	40 c4       	mov.aa %a4,%a12
8000f3de:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000f3e2:	09 43 88 05 	ld.a %a3,[+%a4]8
8000f3e6:	1b c8 ff 4f 	addi %d4,%d8,-4
8000f3ea:	8b 54 a2 22 	ge.u %d2,%d4,37
8000f3ee:	b5 32 0c 00 	st.a [%a3]12,%a2
8000f3f2:	b5 23 08 00 	st.a [%a2]8,%a3
8000f3f6:	df 02 37 80 	jne %d2,0,8000f464 <_realloc_r+0x2cc>
8000f3fa:	8b 44 61 22 	lt.u %d2,%d4,20
8000f3fe:	df 02 28 80 	jne %d2,0,8000f44e <_realloc_r+0x2b6>
8000f402:	48 03       	ld.w %d3,[%a15]0
8000f404:	59 c3 08 00 	st.w [%a12]8,%d3
8000f408:	48 12       	ld.w %d2,[%a15]4
8000f40a:	59 c2 0c 00 	st.w [%a12]12,%d2
8000f40e:	8b c4 a1 22 	ge.u %d2,%d4,28
8000f412:	f6 26       	jnz %d2,8000f41e <_realloc_r+0x286>
8000f414:	d9 c4 10 00 	lea %a4,[%a12]16
8000f418:	d9 ff 08 00 	lea %a15,[%a15]8
8000f41c:	3c 19       	j 8000f44e <_realloc_r+0x2b6>
8000f41e:	48 23       	ld.w %d3,[%a15]8
8000f420:	8b 44 02 82 	eq %d8,%d4,36
8000f424:	59 c3 10 00 	st.w [%a12]16,%d3
8000f428:	48 32       	ld.w %d2,[%a15]12
8000f42a:	59 c2 14 00 	st.w [%a12]20,%d2
8000f42e:	f6 86       	jnz %d8,8000f43a <_realloc_r+0x2a2>
8000f430:	d9 c4 18 00 	lea %a4,[%a12]24
8000f434:	d9 ff 10 00 	lea %a15,[%a15]16
8000f438:	3c 0b       	j 8000f44e <_realloc_r+0x2b6>
8000f43a:	48 43       	ld.w %d3,[%a15]16
8000f43c:	d9 c4 20 00 	lea %a4,[%a12]32
8000f440:	59 c3 18 00 	st.w [%a12]24,%d3
8000f444:	48 52       	ld.w %d2,[%a15]20
8000f446:	d9 ff 18 00 	lea %a15,[%a15]24
8000f44a:	59 c2 1c 00 	st.w [%a12]28,%d2
8000f44e:	48 03       	ld.w %d3,[%a15]0
8000f450:	74 43       	st.w [%a4],%d3
8000f452:	48 12       	ld.w %d2,[%a15]4
8000f454:	59 42 04 00 	st.w [%a4]4,%d2
8000f458:	48 23       	ld.w %d3,[%a15]8
8000f45a:	59 43 08 00 	st.w [%a4]8,%d3
8000f45e:	02 a8       	mov %d8,%d10
8000f460:	40 ce       	mov.aa %a14,%a12
8000f462:	3c 66       	j 8000f52e <_realloc_r+0x396>
8000f464:	40 f5       	mov.aa %a5,%a15
8000f466:	6d ff 69 fe 	call 8000f138 <memmove>
8000f46a:	3c fa       	j 8000f45e <_realloc_r+0x2c6>
8000f46c:	40 d4       	mov.aa %a4,%a13
8000f46e:	02 94       	mov %d4,%d9
8000f470:	6d ff 12 e7 	call 8000c294 <_malloc_r>
8000f474:	40 2c       	mov.aa %a12,%a2
8000f476:	7c 26       	jnz.a %a2,8000f482 <_realloc_r+0x2ea>
8000f478:	40 d4       	mov.aa %a4,%a13
8000f47a:	6d ff 5b e9 	call 8000c730 <__malloc_unlock>
8000f47e:	a0 02       	mov.a %a2,0
8000f480:	00 90       	ret 
8000f482:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000f486:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000f48a:	8f 12 c0 21 	andn %d2,%d2,1
8000f48e:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
8000f492:	80 32       	mov.d %d2,%a3
8000f494:	80 23       	mov.d %d3,%a2
8000f496:	5f 32 08 80 	jne %d2,%d3,8000f4a6 <_realloc_r+0x30e>
8000f49a:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000f49e:	8f 32 c0 21 	andn %d2,%d2,3
8000f4a2:	42 28       	add %d8,%d2
8000f4a4:	3c 45       	j 8000f52e <_realloc_r+0x396>
8000f4a6:	1b c8 ff 4f 	addi %d4,%d8,-4
8000f4aa:	8b 54 a2 f2 	ge.u %d15,%d4,37
8000f4ae:	ee 33       	jnz %d15,8000f514 <_realloc_r+0x37c>
8000f4b0:	8b 44 61 f2 	lt.u %d15,%d4,20
8000f4b4:	40 c3       	mov.aa %a3,%a12
8000f4b6:	40 f2       	mov.aa %a2,%a15
8000f4b8:	ee 23       	jnz %d15,8000f4fe <_realloc_r+0x366>
8000f4ba:	4c f0       	ld.w %d15,[%a15]0
8000f4bc:	d9 c3 08 00 	lea %a3,[%a12]8
8000f4c0:	6c c0       	st.w [%a12]0,%d15
8000f4c2:	48 12       	ld.w %d2,[%a15]4
8000f4c4:	8b c4 a1 f2 	ge.u %d15,%d4,28
8000f4c8:	59 c2 04 00 	st.w [%a12]4,%d2
8000f4cc:	d9 f2 08 00 	lea %a2,[%a15]8
8000f4d0:	6e 17       	jz %d15,8000f4fe <_realloc_r+0x366>
8000f4d2:	48 23       	ld.w %d3,[%a15]8
8000f4d4:	8b 44 02 82 	eq %d8,%d4,36
8000f4d8:	59 c3 08 00 	st.w [%a12]8,%d3
8000f4dc:	4c f3       	ld.w %d15,[%a15]12
8000f4de:	d9 c3 10 00 	lea %a3,[%a12]16
8000f4e2:	6c c3       	st.w [%a12]12,%d15
8000f4e4:	d9 f2 10 00 	lea %a2,[%a15]16
8000f4e8:	76 8b       	jz %d8,8000f4fe <_realloc_r+0x366>
8000f4ea:	48 42       	ld.w %d2,[%a15]16
8000f4ec:	d9 c3 18 00 	lea %a3,[%a12]24
8000f4f0:	59 c2 10 00 	st.w [%a12]16,%d2
8000f4f4:	48 53       	ld.w %d3,[%a15]20
8000f4f6:	d9 f2 18 00 	lea %a2,[%a15]24
8000f4fa:	59 c3 14 00 	st.w [%a12]20,%d3
8000f4fe:	4c 20       	ld.w %d15,[%a2]0
8000f500:	6c 30       	st.w [%a3]0,%d15
8000f502:	19 22 04 00 	ld.w %d2,[%a2]4
8000f506:	59 32 04 00 	st.w [%a3]4,%d2
8000f50a:	19 23 08 00 	ld.w %d3,[%a2]8
8000f50e:	59 33 08 00 	st.w [%a3]8,%d3
8000f512:	3c 05       	j 8000f51c <_realloc_r+0x384>
8000f514:	40 c4       	mov.aa %a4,%a12
8000f516:	40 f5       	mov.aa %a5,%a15
8000f518:	6d ff 10 fe 	call 8000f138 <memmove>
8000f51c:	40 d4       	mov.aa %a4,%a13
8000f51e:	40 f5       	mov.aa %a5,%a15
8000f520:	6d ff af e9 	call 8000c87e <_free_r>
8000f524:	40 d4       	mov.aa %a4,%a13
8000f526:	6d ff 05 e9 	call 8000c730 <__malloc_unlock>
8000f52a:	40 c2       	mov.aa %a2,%a12
8000f52c:	00 90       	ret 
8000f52e:	0b f8 80 20 	sub %d2,%d8,%d15
8000f532:	8b 02 61 42 	lt.u %d4,%d2,16
8000f536:	19 e3 04 00 	ld.w %d3,[%a14]4
8000f53a:	df 04 16 80 	jne %d4,0,8000f566 <_realloc_r+0x3ce>
8000f53e:	8f 13 00 31 	and %d3,%d3,1
8000f542:	10 e5       	addsc.a %a5,%a14,%d15,0
8000f544:	a6 3f       	or %d15,%d3
8000f546:	6c e1       	st.w [%a14]4,%d15
8000f548:	01 52 00 f6 	addsc.a %a15,%a5,%d2,0
8000f54c:	8f 12 40 f1 	or %d15,%d2,1
8000f550:	b7 10 21 20 	imask %e2,1,0,1
8000f554:	6c 51       	st.w [%a5]4,%d15
8000f556:	49 f2 44 08 	ldmst [%a15]4,%e2
8000f55a:	40 d4       	mov.aa %a4,%a13
8000f55c:	d9 55 08 00 	lea %a5,[%a5]8
8000f560:	6d ff 8f e9 	call 8000c87e <_free_r>
8000f564:	3c 0c       	j 8000f57c <_realloc_r+0x3e4>
8000f566:	8f 13 00 31 	and %d3,%d3,1
8000f56a:	a6 83       	or %d3,%d8
8000f56c:	59 e3 04 00 	st.w [%a14]4,%d3
8000f570:	01 e8 00 f6 	addsc.a %a15,%a14,%d8,0
8000f574:	b7 10 21 20 	imask %e2,1,0,1
8000f578:	49 f2 44 08 	ldmst [%a15]4,%e2
8000f57c:	40 d4       	mov.aa %a4,%a13
8000f57e:	6d ff d9 e8 	call 8000c730 <__malloc_unlock>
8000f582:	d9 e2 08 00 	lea %a2,[%a14]8
8000f586:	00 90       	ret 

8000f588 <_exit>:
8000f588:	76 43       	jz %d4,8000f58e <_exit+0x6>
8000f58a:	60 4e       	mov.a %a14,%d4
8000f58c:	3c 04       	j 8000f594 <_exit+0xc>
8000f58e:	bb d0 00 f9 	mov.u %d15,36877
8000f592:	60 fe       	mov.a %a14,%d15
8000f594:	00 a0       	debug 
8000f596:	3c 00       	j 8000f596 <_exit+0xe>

8000f598 <sbrk>:
8000f598:	91 00 00 f7 	movh.a %a15,28672
8000f59c:	19 ff 98 10 	ld.w %d15,[%a15]2136 <70000858 <heap_top.2289>>
8000f5a0:	7b 00 00 27 	movh %d2,28672
8000f5a4:	42 f4       	add %d4,%d15
8000f5a6:	1b 02 b7 20 	addi %d2,%d2,2928
8000f5aa:	7f 42 09 80 	jge.u %d2,%d4,8000f5bc <sbrk+0x24>
8000f5ae:	6d 00 13 00 	call 8000f5d4 <__errno>
8000f5b2:	da 0c       	mov %d15,12
8000f5b4:	6c 20       	st.w [%a2]0,%d15
8000f5b6:	a0 02       	mov.a %a2,0
8000f5b8:	b0 f2       	add.a %a2,-1
8000f5ba:	00 90       	ret 
8000f5bc:	7b 00 00 27 	movh %d2,28672
8000f5c0:	1b 02 b7 20 	addi %d2,%d2,2928
8000f5c4:	7f 24 04 80 	jge.u %d4,%d2,8000f5cc <sbrk+0x34>
8000f5c8:	6d 00 0b 00 	call 8000f5de <abort>
8000f5cc:	59 f4 98 10 	st.w [%a15]2136,%d4
8000f5d0:	60 f2       	mov.a %a2,%d15
8000f5d2:	00 90       	ret 

8000f5d4 <__errno>:
8000f5d4:	91 00 00 27 	movh.a %a2,28672
8000f5d8:	d9 22 a8 d0 	lea %a2,[%a2]2920 <70000b68 <_my_errno>>
8000f5dc:	00 90       	ret 

8000f5de <abort>:
8000f5de:	00 a0       	debug 
8000f5e0:	7b e0 ea fd 	movh %d15,57006
8000f5e4:	1b ff ee fb 	addi %d15,%d15,-16657
8000f5e8:	60 fe       	mov.a %a14,%d15
8000f5ea:	1d ff cf ff 	j 8000f588 <_exit>
8000f5ee:	3c 00       	j 8000f5ee <abort+0x10>

8000f5f0 <__eqdf2>:
8000f5f0:	20 38       	sub.a %sp,56
8000f5f2:	40 a4       	mov.aa %a4,%sp
8000f5f4:	d9 a5 10 00 	lea %a5,[%sp]16
8000f5f8:	89 a4 40 09 	st.d [%sp],%e4
8000f5fc:	89 a6 48 09 	st.d [%sp]8,%e6
8000f600:	6d ff 84 e5 	call 8000c108 <__unpack_d>
8000f604:	d9 a4 08 00 	lea %a4,[%sp]8
8000f608:	d9 a5 24 00 	lea %a5,[%sp]36
8000f60c:	6d ff 7e e5 	call 8000c108 <__unpack_d>
8000f610:	39 af 10 00 	ld.bu %d15,[%sp]16
8000f614:	82 12       	mov %d2,1
8000f616:	bf 2f 0c 80 	jlt.u %d15,2,8000f62e <__eqdf2+0x3e>
8000f61a:	39 af 24 00 	ld.bu %d15,[%sp]36
8000f61e:	bf 2f 08 80 	jlt.u %d15,2,8000f62e <__eqdf2+0x3e>
8000f622:	d9 a4 10 00 	lea %a4,[%sp]16
8000f626:	d9 a5 24 00 	lea %a5,[%sp]36
8000f62a:	6d 00 0d 01 	call 8000f844 <__fpcmp_parts_d>
8000f62e:	00 90       	ret 

8000f630 <__nedf2>:
8000f630:	20 38       	sub.a %sp,56
8000f632:	40 a4       	mov.aa %a4,%sp
8000f634:	d9 a5 10 00 	lea %a5,[%sp]16
8000f638:	89 a4 40 09 	st.d [%sp],%e4
8000f63c:	89 a6 48 09 	st.d [%sp]8,%e6
8000f640:	6d ff 64 e5 	call 8000c108 <__unpack_d>
8000f644:	d9 a4 08 00 	lea %a4,[%sp]8
8000f648:	d9 a5 24 00 	lea %a5,[%sp]36
8000f64c:	6d ff 5e e5 	call 8000c108 <__unpack_d>
8000f650:	39 af 10 00 	ld.bu %d15,[%sp]16
8000f654:	82 12       	mov %d2,1
8000f656:	bf 2f 0c 80 	jlt.u %d15,2,8000f66e <__nedf2+0x3e>
8000f65a:	39 af 24 00 	ld.bu %d15,[%sp]36
8000f65e:	bf 2f 08 80 	jlt.u %d15,2,8000f66e <__nedf2+0x3e>
8000f662:	d9 a4 10 00 	lea %a4,[%sp]16
8000f666:	d9 a5 24 00 	lea %a5,[%sp]36
8000f66a:	6d 00 ed 00 	call 8000f844 <__fpcmp_parts_d>
8000f66e:	00 90       	ret 

8000f670 <__gtdf2>:
8000f670:	20 38       	sub.a %sp,56
8000f672:	40 a4       	mov.aa %a4,%sp
8000f674:	d9 a5 10 00 	lea %a5,[%sp]16
8000f678:	89 a4 40 09 	st.d [%sp],%e4
8000f67c:	89 a6 48 09 	st.d [%sp]8,%e6
8000f680:	6d ff 44 e5 	call 8000c108 <__unpack_d>
8000f684:	d9 a4 08 00 	lea %a4,[%sp]8
8000f688:	d9 a5 24 00 	lea %a5,[%sp]36
8000f68c:	6d ff 3e e5 	call 8000c108 <__unpack_d>
8000f690:	39 af 10 00 	ld.bu %d15,[%sp]16
8000f694:	82 f2       	mov %d2,-1
8000f696:	bf 2f 0c 80 	jlt.u %d15,2,8000f6ae <__gtdf2+0x3e>
8000f69a:	39 af 24 00 	ld.bu %d15,[%sp]36
8000f69e:	bf 2f 08 80 	jlt.u %d15,2,8000f6ae <__gtdf2+0x3e>
8000f6a2:	d9 a4 10 00 	lea %a4,[%sp]16
8000f6a6:	d9 a5 24 00 	lea %a5,[%sp]36
8000f6aa:	6d 00 cd 00 	call 8000f844 <__fpcmp_parts_d>
8000f6ae:	00 90       	ret 

8000f6b0 <__gedf2>:
8000f6b0:	20 38       	sub.a %sp,56
8000f6b2:	40 a4       	mov.aa %a4,%sp
8000f6b4:	d9 a5 10 00 	lea %a5,[%sp]16
8000f6b8:	89 a4 40 09 	st.d [%sp],%e4
8000f6bc:	89 a6 48 09 	st.d [%sp]8,%e6
8000f6c0:	6d ff 24 e5 	call 8000c108 <__unpack_d>
8000f6c4:	d9 a4 08 00 	lea %a4,[%sp]8
8000f6c8:	d9 a5 24 00 	lea %a5,[%sp]36
8000f6cc:	6d ff 1e e5 	call 8000c108 <__unpack_d>
8000f6d0:	39 af 10 00 	ld.bu %d15,[%sp]16
8000f6d4:	82 f2       	mov %d2,-1
8000f6d6:	bf 2f 0c 80 	jlt.u %d15,2,8000f6ee <__gedf2+0x3e>
8000f6da:	39 af 24 00 	ld.bu %d15,[%sp]36
8000f6de:	bf 2f 08 80 	jlt.u %d15,2,8000f6ee <__gedf2+0x3e>
8000f6e2:	d9 a4 10 00 	lea %a4,[%sp]16
8000f6e6:	d9 a5 24 00 	lea %a5,[%sp]36
8000f6ea:	6d 00 ad 00 	call 8000f844 <__fpcmp_parts_d>
8000f6ee:	00 90       	ret 

8000f6f0 <__ltdf2>:
8000f6f0:	20 38       	sub.a %sp,56
8000f6f2:	40 a4       	mov.aa %a4,%sp
8000f6f4:	d9 a5 10 00 	lea %a5,[%sp]16
8000f6f8:	89 a4 40 09 	st.d [%sp],%e4
8000f6fc:	89 a6 48 09 	st.d [%sp]8,%e6
8000f700:	6d ff 04 e5 	call 8000c108 <__unpack_d>
8000f704:	d9 a4 08 00 	lea %a4,[%sp]8
8000f708:	d9 a5 24 00 	lea %a5,[%sp]36
8000f70c:	6d ff fe e4 	call 8000c108 <__unpack_d>
8000f710:	39 af 10 00 	ld.bu %d15,[%sp]16
8000f714:	82 12       	mov %d2,1
8000f716:	bf 2f 0c 80 	jlt.u %d15,2,8000f72e <__ltdf2+0x3e>
8000f71a:	39 af 24 00 	ld.bu %d15,[%sp]36
8000f71e:	bf 2f 08 80 	jlt.u %d15,2,8000f72e <__ltdf2+0x3e>
8000f722:	d9 a4 10 00 	lea %a4,[%sp]16
8000f726:	d9 a5 24 00 	lea %a5,[%sp]36
8000f72a:	6d 00 8d 00 	call 8000f844 <__fpcmp_parts_d>
8000f72e:	00 90       	ret 

8000f730 <__fixdfsi>:
8000f730:	20 20       	sub.a %sp,32
8000f732:	d9 a4 20 00 	lea %a4,[%sp]32
8000f736:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000f73a:	d9 a5 0c 00 	lea %a5,[%sp]12
8000f73e:	6d ff e5 e4 	call 8000c108 <__unpack_d>
8000f742:	0c ac       	ld.bu %d15,[%sp]12
8000f744:	82 02       	mov %d2,0
8000f746:	bf 3f 1b 80 	jlt.u %d15,3,8000f77c <__fixdfsi+0x4c>
8000f74a:	5e 48       	jne %d15,4,8000f75a <__fixdfsi+0x2a>
8000f74c:	7b 00 00 28 	movh %d2,32768
8000f750:	58 04       	ld.w %d15,[%sp]16
8000f752:	1b f2 ff 3f 	addi %d3,%d2,-1
8000f756:	6a 32       	cmovn %d2,%d15,%d3
8000f758:	00 90       	ret 
8000f75a:	19 a6 14 00 	ld.w %d6,[%sp]20
8000f75e:	82 02       	mov %d2,0
8000f760:	0e 6e       	jltz %d6,8000f77c <__fixdfsi+0x4c>
8000f762:	8b f6 81 f2 	ge %d15,%d6,31
8000f766:	ee f3       	jnz %d15,8000f74c <__fixdfsi+0x1c>
8000f768:	09 a4 58 09 	ld.d %e4,[%sp]24
8000f76c:	8b c6 03 61 	rsub %d6,%d6,60
8000f770:	6d ff ca e0 	call 8000b904 <__lshrdi3>
8000f774:	58 04       	ld.w %d15,[%sp]16
8000f776:	8b 02 00 41 	rsub %d4,%d2,0
8000f77a:	2a 42       	cmov %d2,%d15,%d4
8000f77c:	00 90       	ret 

8000f77e <__udivdi3>:
8000f77e:	0f 67 a0 20 	or %d2,%d7,%d6
8000f782:	0b 45 10 a8 	mov %e10,%d5,%d4
8000f786:	02 6f       	mov %d15,%d6
8000f788:	02 7c       	mov %d12,%d7
8000f78a:	d2 f8       	mov %e8,-1
8000f78c:	df 02 46 00 	jeq %d2,0,8000f818 <__udivdi3+0x9a>
8000f790:	8f 07 40 21 	or %d2,%d7,0
8000f794:	f6 2d       	jnz %d2,8000f7ae <__udivdi3+0x30>
8000f796:	4b 6b 11 82 	div.u %e8,%d11,%d6
8000f79a:	d2 04       	mov %e4,0
8000f79c:	02 a4       	mov %d4,%d10
8000f79e:	42 95       	add %d5,%d9
8000f7a0:	6d 00 a5 00 	call 8000f8ea <__udiv6432>
8000f7a4:	82 04       	mov %d4,0
8000f7a6:	02 85       	mov %d5,%d8
8000f7a8:	13 12 40 84 	madd.u %e8,%e4,%d2,1
8000f7ac:	3c 36       	j 8000f818 <__udivdi3+0x9a>
8000f7ae:	0b 7b 00 21 	eq %d2,%d11,%d7
8000f7b2:	0b 64 30 22 	and.lt.u %d2,%d4,%d6
8000f7b6:	0b 7b a0 22 	or.lt.u %d2,%d11,%d7
8000f7ba:	d2 08       	mov %e8,0
8000f7bc:	df 02 2e 80 	jne %d2,0,8000f818 <__udivdi3+0x9a>
8000f7c0:	77 4b 80 5f 	dextr %d5,%d11,%d4,31
8000f7c4:	0f 07 b0 d1 	clz %d13,%d7
8000f7c8:	60 5f       	mov.a %a15,%d5
8000f7ca:	0b 67 10 48 	mov %e4,%d7,%d6
8000f7ce:	02 d6       	mov %d6,%d13
8000f7d0:	6d ff be e3 	call 8000bf4c <__ashldi3>
8000f7d4:	8f fb 1f e0 	sh %d14,%d11,-1
8000f7d8:	80 f4       	mov.d %d4,%a15
8000f7da:	02 36       	mov %d6,%d3
8000f7dc:	02 e5       	mov %d5,%d14
8000f7de:	6d 00 86 00 	call 8000f8ea <__udiv6432>
8000f7e2:	8b fd 01 d1 	rsub %d13,%d13,31
8000f7e6:	8b 0d 00 31 	rsub %d3,%d13,0
8000f7ea:	0f 32 00 30 	sh %d3,%d2,%d3
8000f7ee:	02 32       	mov %d2,%d3
8000f7f0:	8b f2 9f 80 	addx %d8,%d2,-1
8000f7f4:	23 f8 68 aa 	msub.u %e10,%e10,%d8,%d15
8000f7f8:	82 03       	mov %d3,0
8000f7fa:	8b f3 bf 90 	addc %d9,%d3,-1
8000f7fe:	23 c8 0a bb 	msub %d11,%d11,%d8,%d12
8000f802:	23 f9 0a bb 	msub %d11,%d11,%d9,%d15
8000f806:	0b cb 00 41 	eq %d4,%d11,%d12
8000f80a:	0b fa 30 42 	and.lt.u %d4,%d10,%d15
8000f80e:	0b cb a0 42 	or.lt.u %d4,%d11,%d12
8000f812:	f6 43       	jnz %d4,8000f818 <__udivdi3+0x9a>
8000f814:	0b 23 10 88 	mov %e8,%d3,%d2
8000f818:	0b 89 10 28 	mov %e2,%d9,%d8
8000f81c:	00 90       	ret 

8000f81e <__umoddi3>:
8000f81e:	0f 67 a0 90 	or %d9,%d7,%d6
8000f822:	02 6f       	mov %d15,%d6
8000f824:	d2 00       	mov %e0,0
8000f826:	76 9c       	jz %d9,8000f83e <__umoddi3+0x20>
8000f828:	02 7a       	mov %d10,%d7
8000f82a:	0b 45 10 88 	mov %e8,%d5,%d4
8000f82e:	6d ff a8 ff 	call 8000f77e <__udivdi3>
8000f832:	23 f2 68 08 	msub.u %e0,%e8,%d2,%d15
8000f836:	23 a2 0a 11 	msub %d1,%d1,%d2,%d10
8000f83a:	23 f3 0a 11 	msub %d1,%d1,%d3,%d15
8000f83e:	0b 01 10 28 	mov %e2,%d1,%d0
8000f842:	00 90       	ret 

8000f844 <__fpcmp_parts_d>:
8000f844:	14 43       	ld.bu %d3,[%a4]
8000f846:	82 12       	mov %d2,1
8000f848:	bf 23 50 80 	jlt.u %d3,2,8000f8e8 <__fpcmp_parts_d+0xa4>
8000f84c:	0c 50       	ld.bu %d15,[%a5]0
8000f84e:	bf 2f 4d 80 	jlt.u %d15,2,8000f8e8 <__fpcmp_parts_d+0xa4>
8000f852:	8b 43 00 42 	eq %d4,%d3,4
8000f856:	8b 4f 00 22 	eq %d2,%d15,4
8000f85a:	0f 24 80 50 	and %d5,%d4,%d2
8000f85e:	76 56       	jz %d5,8000f86a <__fpcmp_parts_d+0x26>
8000f860:	19 52 04 00 	ld.w %d2,[%a5]4
8000f864:	4c 41       	ld.w %d15,[%a4]4
8000f866:	a2 f2       	sub %d2,%d15
8000f868:	00 90       	ret 
8000f86a:	76 47       	jz %d4,8000f878 <__fpcmp_parts_d+0x34>
8000f86c:	19 42 04 00 	ld.w %d2,[%a4]4
8000f870:	82 1f       	mov %d15,1
8000f872:	ab ff bf 22 	seln %d2,%d2,%d15,-1
8000f876:	00 90       	ret 
8000f878:	76 27       	jz %d2,8000f886 <__fpcmp_parts_d+0x42>
8000f87a:	19 52 04 00 	ld.w %d2,[%a5]4
8000f87e:	82 ff       	mov %d15,-1
8000f880:	ab 1f a0 22 	seln %d2,%d2,%d15,1
8000f884:	00 90       	ret 
8000f886:	df 23 06 80 	jne %d3,2,8000f892 <__fpcmp_parts_d+0x4e>
8000f88a:	82 02       	mov %d2,0
8000f88c:	df 2f f7 ff 	jne %d15,2,8000f87a <__fpcmp_parts_d+0x36>
8000f890:	00 90       	ret 
8000f892:	df 2f ed 7f 	jeq %d15,2,8000f86c <__fpcmp_parts_d+0x28>
8000f896:	19 45 04 00 	ld.w %d5,[%a4]4
8000f89a:	4c 51       	ld.w %d15,[%a5]4
8000f89c:	5f f5 19 80 	jne %d5,%d15,8000f8ce <__fpcmp_parts_d+0x8a>
8000f8a0:	19 42 08 00 	ld.w %d2,[%a4]8
8000f8a4:	4c 52       	ld.w %d15,[%a5]8
8000f8a6:	3f 2f 14 00 	jlt %d15,%d2,8000f8ce <__fpcmp_parts_d+0x8a>
8000f8aa:	3f f2 1c 00 	jlt %d2,%d15,8000f8e2 <__fpcmp_parts_d+0x9e>
8000f8ae:	19 43 10 00 	ld.w %d3,[%a4]16
8000f8b2:	19 54 10 00 	ld.w %d4,[%a5]16
8000f8b6:	19 47 0c 00 	ld.w %d7,[%a4]12
8000f8ba:	19 56 0c 00 	ld.w %d6,[%a5]12
8000f8be:	0b 43 00 21 	eq %d2,%d3,%d4
8000f8c2:	0b 76 50 22 	and.ge.u %d2,%d6,%d7
8000f8c6:	0b 43 a0 22 	or.lt.u %d2,%d3,%d4
8000f8ca:	3a 43       	eq %d15,%d3,%d4
8000f8cc:	f6 25       	jnz %d2,8000f8d6 <__fpcmp_parts_d+0x92>
8000f8ce:	82 12       	mov %d2,1
8000f8d0:	ab f2 bf 25 	seln %d2,%d5,%d2,-1
8000f8d4:	00 90       	ret 
8000f8d6:	0b 67 50 f2 	and.ge.u %d15,%d7,%d6
8000f8da:	0b 34 a0 f2 	or.lt.u %d15,%d4,%d3
8000f8de:	82 02       	mov %d2,0
8000f8e0:	ee 04       	jnz %d15,8000f8e8 <__fpcmp_parts_d+0xa4>
8000f8e2:	82 f2       	mov %d2,-1
8000f8e4:	ab 12 a0 25 	seln %d2,%d5,%d2,1
8000f8e8:	00 90       	ret 

8000f8ea <__udiv6432>:
8000f8ea:	02 53       	mov %d3,%d5
8000f8ec:	82 f2       	mov %d2,-1
8000f8ee:	7f 65 4b 80 	jge.u %d5,%d6,8000f984 <__udiv6432+0x9a>
8000f8f2:	0f 06 b0 21 	clz %d2,%d6
8000f8f6:	0f 26 00 60 	sh %d6,%d6,%d2
8000f8fa:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000f8fe:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000f902:	8f 06 1f 70 	sh %d7,%d6,-16
8000f906:	4b 73 11 02 	div.u %e0,%d3,%d7
8000f90a:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000f90e:	0f 24 00 20 	sh %d2,%d4,%d2
8000f912:	02 05       	mov %d5,%d0
8000f914:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000f918:	e2 80       	mul %d0,%d8
8000f91a:	8f 02 1f b0 	sh %d11,%d2,-16
8000f91e:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000f922:	82 0c       	mov %d12,0
8000f924:	7b 10 00 90 	movh %d9,1
8000f928:	7f 95 09 80 	jge.u %d5,%d9,8000f93a <__udiv6432+0x50>
8000f92c:	8f 01 01 f0 	sh %d15,%d1,16
8000f930:	0b 0c 00 a0 	add %d10,%d12,%d0
8000f934:	42 bf       	add %d15,%d11
8000f936:	7f af 07 80 	jge.u %d15,%d10,8000f944 <__udiv6432+0x5a>
8000f93a:	42 71       	add %d1,%d7
8000f93c:	c2 f5       	add %d5,-1
8000f93e:	a2 8c       	sub %d12,%d8
8000f940:	3f 91 f4 ff 	jlt.u %d1,%d9,8000f928 <__udiv6432+0x3e>
8000f944:	8f 03 01 30 	sh %d3,%d3,16
8000f948:	42 3b       	add %d11,%d3
8000f94a:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000f94e:	82 0a       	mov %d10,0
8000f950:	4b 76 11 02 	div.u %e0,%d6,%d7
8000f954:	7b 10 00 10 	movh %d1,1
8000f958:	02 03       	mov %d3,%d0
8000f95a:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000f95e:	e2 80       	mul %d0,%d8
8000f960:	7f 13 09 80 	jge.u %d3,%d1,8000f972 <__udiv6432+0x88>
8000f964:	8f 06 01 f0 	sh %d15,%d6,16
8000f968:	0b 0a 00 90 	add %d9,%d10,%d0
8000f96c:	42 2f       	add %d15,%d2
8000f96e:	7f 9f 07 80 	jge.u %d15,%d9,8000f97c <__udiv6432+0x92>
8000f972:	42 76       	add %d6,%d7
8000f974:	c2 f3       	add %d3,-1
8000f976:	a2 8a       	sub %d10,%d8
8000f978:	3f 16 f4 ff 	jlt.u %d6,%d1,8000f960 <__udiv6432+0x76>
8000f97c:	8f 05 01 50 	sh %d5,%d5,16
8000f980:	0b 53 00 20 	add %d2,%d3,%d5
8000f984:	00 90       	ret 
	...

Disassembly of section .inttab_cpu1:

80010000 <__INTTAB1>:
	...

80010020 <osEE_tc_core1_isr2_entry_1>:
80010020:	0d 00 00 02 	svlcx 
80010024:	82 f4       	mov %d4,-1
80010026:	1d ff dc ca 	j 800095de <osEE_tc_isr2_wrapper>
	...

80010040 <osEE_tc_core1_isr_dummy_entry_2>:
80010040:	3c 00       	j 80010040 <osEE_tc_core1_isr_dummy_entry_2>
	...

80010060 <osEE_tc_core1_isr_dummy_entry_3>:
80010060:	3c 00       	j 80010060 <osEE_tc_core1_isr_dummy_entry_3>
	...

80010080 <osEE_tc_core1_isr_dummy_entry_4>:
80010080:	3c 00       	j 80010080 <osEE_tc_core1_isr_dummy_entry_4>
	...

800100a0 <osEE_tc_core1_isr_dummy_entry_5>:
800100a0:	3c 00       	j 800100a0 <osEE_tc_core1_isr_dummy_entry_5>
	...

800100c0 <osEE_tc_core1_isr_dummy_entry_6>:
800100c0:	3c 00       	j 800100c0 <osEE_tc_core1_isr_dummy_entry_6>
	...

800100e0 <osEE_tc_core1_isr_dummy_entry_7>:
800100e0:	3c 00       	j 800100e0 <osEE_tc_core1_isr_dummy_entry_7>
	...

80010100 <osEE_tc_core1_isr_dummy_entry_8>:
80010100:	3c 00       	j 80010100 <osEE_tc_core1_isr_dummy_entry_8>
	...

80010120 <osEE_tc_core1_isr_dummy_entry_9>:
80010120:	3c 00       	j 80010120 <osEE_tc_core1_isr_dummy_entry_9>
	...

80010140 <osEE_tc_core1_isr_dummy_entry_10>:
80010140:	3c 00       	j 80010140 <osEE_tc_core1_isr_dummy_entry_10>
	...

80010160 <osEE_tc_core1_isr_dummy_entry_11>:
80010160:	3c 00       	j 80010160 <osEE_tc_core1_isr_dummy_entry_11>
	...

80010180 <osEE_tc_core1_isr_dummy_entry_12>:
80010180:	3c 00       	j 80010180 <osEE_tc_core1_isr_dummy_entry_12>
	...

800101a0 <osEE_tc_core1_isr_dummy_entry_13>:
800101a0:	3c 00       	j 800101a0 <osEE_tc_core1_isr_dummy_entry_13>
	...

800101c0 <osEE_tc_core1_isr_dummy_entry_14>:
800101c0:	3c 00       	j 800101c0 <osEE_tc_core1_isr_dummy_entry_14>
	...

800101e0 <osEE_tc_core1_isr_dummy_entry_15>:
800101e0:	3c 00       	j 800101e0 <osEE_tc_core1_isr_dummy_entry_15>
	...

80010200 <osEE_tc_core1_isr_dummy_entry_16>:
80010200:	3c 00       	j 80010200 <osEE_tc_core1_isr_dummy_entry_16>
	...

80010220 <osEE_tc_core1_isr_dummy_entry_17>:
80010220:	3c 00       	j 80010220 <osEE_tc_core1_isr_dummy_entry_17>
	...

80010240 <osEE_tc_core1_isr_dummy_entry_18>:
80010240:	3c 00       	j 80010240 <osEE_tc_core1_isr_dummy_entry_18>
	...

80010260 <osEE_tc_core1_isr_dummy_entry_19>:
80010260:	3c 00       	j 80010260 <osEE_tc_core1_isr_dummy_entry_19>
	...

80010280 <osEE_tc_core1_isr_dummy_entry_20>:
80010280:	3c 00       	j 80010280 <osEE_tc_core1_isr_dummy_entry_20>
	...

800102a0 <osEE_tc_core1_isr_dummy_entry_21>:
800102a0:	3c 00       	j 800102a0 <osEE_tc_core1_isr_dummy_entry_21>
	...

800102c0 <osEE_tc_core1_isr_dummy_entry_22>:
800102c0:	3c 00       	j 800102c0 <osEE_tc_core1_isr_dummy_entry_22>
	...

800102e0 <osEE_tc_core1_isr_dummy_entry_23>:
800102e0:	3c 00       	j 800102e0 <osEE_tc_core1_isr_dummy_entry_23>
	...

80010300 <osEE_tc_core1_isr_dummy_entry_24>:
80010300:	3c 00       	j 80010300 <osEE_tc_core1_isr_dummy_entry_24>
	...

80010320 <osEE_tc_core1_isr_dummy_entry_25>:
80010320:	3c 00       	j 80010320 <osEE_tc_core1_isr_dummy_entry_25>
	...

80010340 <osEE_tc_core1_isr_dummy_entry_26>:
80010340:	3c 00       	j 80010340 <osEE_tc_core1_isr_dummy_entry_26>
	...

80010360 <osEE_tc_core1_isr_dummy_entry_27>:
80010360:	3c 00       	j 80010360 <osEE_tc_core1_isr_dummy_entry_27>
	...

80010380 <osEE_tc_core1_isr_dummy_entry_28>:
80010380:	3c 00       	j 80010380 <osEE_tc_core1_isr_dummy_entry_28>
	...

800103a0 <osEE_tc_core1_isr_dummy_entry_29>:
800103a0:	3c 00       	j 800103a0 <osEE_tc_core1_isr_dummy_entry_29>
	...

800103c0 <osEE_tc_core1_isr_dummy_entry_30>:
800103c0:	3c 00       	j 800103c0 <osEE_tc_core1_isr_dummy_entry_30>
	...

800103e0 <osEE_tc_core1_isr_dummy_entry_31>:
800103e0:	3c 00       	j 800103e0 <osEE_tc_core1_isr_dummy_entry_31>
	...

80010400 <osEE_tc_core1_isr_dummy_entry_32>:
80010400:	3c 00       	j 80010400 <osEE_tc_core1_isr_dummy_entry_32>
	...

80010420 <osEE_tc_core1_isr_dummy_entry_33>:
80010420:	3c 00       	j 80010420 <osEE_tc_core1_isr_dummy_entry_33>
	...

80010440 <osEE_tc_core1_isr_dummy_entry_34>:
80010440:	3c 00       	j 80010440 <osEE_tc_core1_isr_dummy_entry_34>
	...

80010460 <osEE_tc_core1_isr_dummy_entry_35>:
80010460:	3c 00       	j 80010460 <osEE_tc_core1_isr_dummy_entry_35>
	...

80010480 <osEE_tc_core1_isr_dummy_entry_36>:
80010480:	3c 00       	j 80010480 <osEE_tc_core1_isr_dummy_entry_36>
	...

800104a0 <osEE_tc_core1_isr_dummy_entry_37>:
800104a0:	3c 00       	j 800104a0 <osEE_tc_core1_isr_dummy_entry_37>
	...

800104c0 <osEE_tc_core1_isr_dummy_entry_38>:
800104c0:	3c 00       	j 800104c0 <osEE_tc_core1_isr_dummy_entry_38>
	...

800104e0 <osEE_tc_core1_isr_dummy_entry_39>:
800104e0:	3c 00       	j 800104e0 <osEE_tc_core1_isr_dummy_entry_39>
	...

80010500 <osEE_tc_core1_isr_dummy_entry_40>:
80010500:	3c 00       	j 80010500 <osEE_tc_core1_isr_dummy_entry_40>
	...

80010520 <osEE_tc_core1_isr_dummy_entry_41>:
80010520:	3c 00       	j 80010520 <osEE_tc_core1_isr_dummy_entry_41>
	...

80010540 <osEE_tc_core1_isr_dummy_entry_42>:
80010540:	3c 00       	j 80010540 <osEE_tc_core1_isr_dummy_entry_42>
	...

80010560 <osEE_tc_core1_isr_dummy_entry_43>:
80010560:	3c 00       	j 80010560 <osEE_tc_core1_isr_dummy_entry_43>
	...

80010580 <osEE_tc_core1_isr_dummy_entry_44>:
80010580:	3c 00       	j 80010580 <osEE_tc_core1_isr_dummy_entry_44>
	...

800105a0 <osEE_tc_core1_isr_dummy_entry_45>:
800105a0:	3c 00       	j 800105a0 <osEE_tc_core1_isr_dummy_entry_45>
	...

800105c0 <osEE_tc_core1_isr_dummy_entry_46>:
800105c0:	3c 00       	j 800105c0 <osEE_tc_core1_isr_dummy_entry_46>
	...

800105e0 <osEE_tc_core1_isr_dummy_entry_47>:
800105e0:	3c 00       	j 800105e0 <osEE_tc_core1_isr_dummy_entry_47>
	...

80010600 <osEE_tc_core1_isr_dummy_entry_48>:
80010600:	3c 00       	j 80010600 <osEE_tc_core1_isr_dummy_entry_48>
	...

80010620 <osEE_tc_core1_isr_dummy_entry_49>:
80010620:	3c 00       	j 80010620 <osEE_tc_core1_isr_dummy_entry_49>
	...

80010640 <osEE_tc_core1_isr_dummy_entry_50>:
80010640:	3c 00       	j 80010640 <osEE_tc_core1_isr_dummy_entry_50>
	...

80010660 <osEE_tc_core1_isr_dummy_entry_51>:
80010660:	3c 00       	j 80010660 <osEE_tc_core1_isr_dummy_entry_51>
	...

80010680 <osEE_tc_core1_isr_dummy_entry_52>:
80010680:	3c 00       	j 80010680 <osEE_tc_core1_isr_dummy_entry_52>
	...

800106a0 <osEE_tc_core1_isr_dummy_entry_53>:
800106a0:	3c 00       	j 800106a0 <osEE_tc_core1_isr_dummy_entry_53>
	...

800106c0 <osEE_tc_core1_isr_dummy_entry_54>:
800106c0:	3c 00       	j 800106c0 <osEE_tc_core1_isr_dummy_entry_54>
	...

800106e0 <osEE_tc_core1_isr_dummy_entry_55>:
800106e0:	3c 00       	j 800106e0 <osEE_tc_core1_isr_dummy_entry_55>
	...

80010700 <osEE_tc_core1_isr_dummy_entry_56>:
80010700:	3c 00       	j 80010700 <osEE_tc_core1_isr_dummy_entry_56>
	...

80010720 <osEE_tc_core1_isr_dummy_entry_57>:
80010720:	3c 00       	j 80010720 <osEE_tc_core1_isr_dummy_entry_57>
	...

80010740 <osEE_tc_core1_isr_dummy_entry_58>:
80010740:	3c 00       	j 80010740 <osEE_tc_core1_isr_dummy_entry_58>
	...

80010760 <osEE_tc_core1_isr_dummy_entry_59>:
80010760:	3c 00       	j 80010760 <osEE_tc_core1_isr_dummy_entry_59>
	...

80010780 <osEE_tc_core1_isr_dummy_entry_60>:
80010780:	3c 00       	j 80010780 <osEE_tc_core1_isr_dummy_entry_60>
	...

800107a0 <osEE_tc_core1_isr_dummy_entry_61>:
800107a0:	3c 00       	j 800107a0 <osEE_tc_core1_isr_dummy_entry_61>
	...

800107c0 <osEE_tc_core1_isr_dummy_entry_62>:
800107c0:	3c 00       	j 800107c0 <osEE_tc_core1_isr_dummy_entry_62>
	...

800107e0 <osEE_tc_core1_isr_dummy_entry_63>:
800107e0:	3c 00       	j 800107e0 <osEE_tc_core1_isr_dummy_entry_63>
	...

80010800 <osEE_tc_core1_isr_dummy_entry_64>:
80010800:	3c 00       	j 80010800 <osEE_tc_core1_isr_dummy_entry_64>
	...

80010820 <osEE_tc_core1_isr_dummy_entry_65>:
80010820:	3c 00       	j 80010820 <osEE_tc_core1_isr_dummy_entry_65>
	...

80010840 <osEE_tc_core1_isr_dummy_entry_66>:
80010840:	3c 00       	j 80010840 <osEE_tc_core1_isr_dummy_entry_66>
	...

80010860 <osEE_tc_core1_isr_dummy_entry_67>:
80010860:	3c 00       	j 80010860 <osEE_tc_core1_isr_dummy_entry_67>
	...

80010880 <osEE_tc_core1_isr_dummy_entry_68>:
80010880:	3c 00       	j 80010880 <osEE_tc_core1_isr_dummy_entry_68>
	...

800108a0 <osEE_tc_core1_isr_dummy_entry_69>:
800108a0:	3c 00       	j 800108a0 <osEE_tc_core1_isr_dummy_entry_69>
	...

800108c0 <osEE_tc_core1_isr_dummy_entry_70>:
800108c0:	3c 00       	j 800108c0 <osEE_tc_core1_isr_dummy_entry_70>
	...

800108e0 <osEE_tc_core1_isr_dummy_entry_71>:
800108e0:	3c 00       	j 800108e0 <osEE_tc_core1_isr_dummy_entry_71>
	...

80010900 <osEE_tc_core1_isr_dummy_entry_72>:
80010900:	3c 00       	j 80010900 <osEE_tc_core1_isr_dummy_entry_72>
	...

80010920 <osEE_tc_core1_isr_dummy_entry_73>:
80010920:	3c 00       	j 80010920 <osEE_tc_core1_isr_dummy_entry_73>
	...

80010940 <osEE_tc_core1_isr_dummy_entry_74>:
80010940:	3c 00       	j 80010940 <osEE_tc_core1_isr_dummy_entry_74>
	...

80010960 <osEE_tc_core1_isr_dummy_entry_75>:
80010960:	3c 00       	j 80010960 <osEE_tc_core1_isr_dummy_entry_75>
	...

80010980 <osEE_tc_core1_isr_dummy_entry_76>:
80010980:	3c 00       	j 80010980 <osEE_tc_core1_isr_dummy_entry_76>
	...

800109a0 <osEE_tc_core1_isr_dummy_entry_77>:
800109a0:	3c 00       	j 800109a0 <osEE_tc_core1_isr_dummy_entry_77>
	...

800109c0 <osEE_tc_core1_isr_dummy_entry_78>:
800109c0:	3c 00       	j 800109c0 <osEE_tc_core1_isr_dummy_entry_78>
	...

800109e0 <osEE_tc_core1_isr_dummy_entry_79>:
800109e0:	3c 00       	j 800109e0 <osEE_tc_core1_isr_dummy_entry_79>
	...

80010a00 <osEE_tc_core1_isr_dummy_entry_80>:
80010a00:	3c 00       	j 80010a00 <osEE_tc_core1_isr_dummy_entry_80>
	...

80010a20 <osEE_tc_core1_isr_dummy_entry_81>:
80010a20:	3c 00       	j 80010a20 <osEE_tc_core1_isr_dummy_entry_81>
	...

80010a40 <osEE_tc_core1_isr_dummy_entry_82>:
80010a40:	3c 00       	j 80010a40 <osEE_tc_core1_isr_dummy_entry_82>
	...

80010a60 <osEE_tc_core1_isr_dummy_entry_83>:
80010a60:	3c 00       	j 80010a60 <osEE_tc_core1_isr_dummy_entry_83>
	...

80010a80 <osEE_tc_core1_isr_dummy_entry_84>:
80010a80:	3c 00       	j 80010a80 <osEE_tc_core1_isr_dummy_entry_84>
	...

80010aa0 <osEE_tc_core1_isr_dummy_entry_85>:
80010aa0:	3c 00       	j 80010aa0 <osEE_tc_core1_isr_dummy_entry_85>
	...

80010ac0 <osEE_tc_core1_isr_dummy_entry_86>:
80010ac0:	3c 00       	j 80010ac0 <osEE_tc_core1_isr_dummy_entry_86>
	...

80010ae0 <osEE_tc_core1_isr_dummy_entry_87>:
80010ae0:	3c 00       	j 80010ae0 <osEE_tc_core1_isr_dummy_entry_87>
	...

80010b00 <osEE_tc_core1_isr_dummy_entry_88>:
80010b00:	3c 00       	j 80010b00 <osEE_tc_core1_isr_dummy_entry_88>
	...

80010b20 <osEE_tc_core1_isr_dummy_entry_89>:
80010b20:	3c 00       	j 80010b20 <osEE_tc_core1_isr_dummy_entry_89>
	...

80010b40 <osEE_tc_core1_isr_dummy_entry_90>:
80010b40:	3c 00       	j 80010b40 <osEE_tc_core1_isr_dummy_entry_90>
	...

80010b60 <osEE_tc_core1_isr_dummy_entry_91>:
80010b60:	3c 00       	j 80010b60 <osEE_tc_core1_isr_dummy_entry_91>
	...

80010b80 <osEE_tc_core1_isr_dummy_entry_92>:
80010b80:	3c 00       	j 80010b80 <osEE_tc_core1_isr_dummy_entry_92>
	...

80010ba0 <osEE_tc_core1_isr_dummy_entry_93>:
80010ba0:	3c 00       	j 80010ba0 <osEE_tc_core1_isr_dummy_entry_93>
	...

80010bc0 <osEE_tc_core1_isr_dummy_entry_94>:
80010bc0:	3c 00       	j 80010bc0 <osEE_tc_core1_isr_dummy_entry_94>
	...

80010be0 <osEE_tc_core1_isr_dummy_entry_95>:
80010be0:	3c 00       	j 80010be0 <osEE_tc_core1_isr_dummy_entry_95>
	...

80010c00 <osEE_tc_core1_isr_dummy_entry_96>:
80010c00:	3c 00       	j 80010c00 <osEE_tc_core1_isr_dummy_entry_96>
	...

80010c20 <osEE_tc_core1_isr_dummy_entry_97>:
80010c20:	3c 00       	j 80010c20 <osEE_tc_core1_isr_dummy_entry_97>
	...

80010c40 <osEE_tc_core1_isr_dummy_entry_98>:
80010c40:	3c 00       	j 80010c40 <osEE_tc_core1_isr_dummy_entry_98>
	...

80010c60 <osEE_tc_core1_isr_dummy_entry_99>:
80010c60:	3c 00       	j 80010c60 <osEE_tc_core1_isr_dummy_entry_99>
	...

80010c80 <osEE_tc_core1_isr_dummy_entry_100>:
80010c80:	3c 00       	j 80010c80 <osEE_tc_core1_isr_dummy_entry_100>
	...

80010ca0 <osEE_tc_core1_isr_dummy_entry_101>:
80010ca0:	3c 00       	j 80010ca0 <osEE_tc_core1_isr_dummy_entry_101>
	...

80010cc0 <osEE_tc_core1_isr_dummy_entry_102>:
80010cc0:	3c 00       	j 80010cc0 <osEE_tc_core1_isr_dummy_entry_102>
	...

80010ce0 <osEE_tc_core1_isr_dummy_entry_103>:
80010ce0:	3c 00       	j 80010ce0 <osEE_tc_core1_isr_dummy_entry_103>
	...

80010d00 <osEE_tc_core1_isr_dummy_entry_104>:
80010d00:	3c 00       	j 80010d00 <osEE_tc_core1_isr_dummy_entry_104>
	...

80010d20 <osEE_tc_core1_isr_dummy_entry_105>:
80010d20:	3c 00       	j 80010d20 <osEE_tc_core1_isr_dummy_entry_105>
	...

80010d40 <osEE_tc_core1_isr_dummy_entry_106>:
80010d40:	3c 00       	j 80010d40 <osEE_tc_core1_isr_dummy_entry_106>
	...

80010d60 <osEE_tc_core1_isr_dummy_entry_107>:
80010d60:	3c 00       	j 80010d60 <osEE_tc_core1_isr_dummy_entry_107>
	...

80010d80 <osEE_tc_core1_isr_dummy_entry_108>:
80010d80:	3c 00       	j 80010d80 <osEE_tc_core1_isr_dummy_entry_108>
	...

80010da0 <osEE_tc_core1_isr_dummy_entry_109>:
80010da0:	3c 00       	j 80010da0 <osEE_tc_core1_isr_dummy_entry_109>
	...

80010dc0 <osEE_tc_core1_isr_dummy_entry_110>:
80010dc0:	3c 00       	j 80010dc0 <osEE_tc_core1_isr_dummy_entry_110>
	...

80010de0 <osEE_tc_core1_isr_dummy_entry_111>:
80010de0:	3c 00       	j 80010de0 <osEE_tc_core1_isr_dummy_entry_111>
	...

80010e00 <osEE_tc_core1_isr_dummy_entry_112>:
80010e00:	3c 00       	j 80010e00 <osEE_tc_core1_isr_dummy_entry_112>
	...

80010e20 <osEE_tc_core1_isr_dummy_entry_113>:
80010e20:	3c 00       	j 80010e20 <osEE_tc_core1_isr_dummy_entry_113>
	...

80010e40 <osEE_tc_core1_isr_dummy_entry_114>:
80010e40:	3c 00       	j 80010e40 <osEE_tc_core1_isr_dummy_entry_114>
	...

80010e60 <osEE_tc_core1_isr_dummy_entry_115>:
80010e60:	3c 00       	j 80010e60 <osEE_tc_core1_isr_dummy_entry_115>
	...

80010e80 <osEE_tc_core1_isr_dummy_entry_116>:
80010e80:	3c 00       	j 80010e80 <osEE_tc_core1_isr_dummy_entry_116>
	...

80010ea0 <osEE_tc_core1_isr_dummy_entry_117>:
80010ea0:	3c 00       	j 80010ea0 <osEE_tc_core1_isr_dummy_entry_117>
	...

80010ec0 <osEE_tc_core1_isr_dummy_entry_118>:
80010ec0:	3c 00       	j 80010ec0 <osEE_tc_core1_isr_dummy_entry_118>
	...

80010ee0 <osEE_tc_core1_isr_dummy_entry_119>:
80010ee0:	3c 00       	j 80010ee0 <osEE_tc_core1_isr_dummy_entry_119>
	...

80010f00 <osEE_tc_core1_isr_dummy_entry_120>:
80010f00:	3c 00       	j 80010f00 <osEE_tc_core1_isr_dummy_entry_120>
	...

80010f20 <osEE_tc_core1_isr_dummy_entry_121>:
80010f20:	3c 00       	j 80010f20 <osEE_tc_core1_isr_dummy_entry_121>
	...

80010f40 <osEE_tc_core1_isr_dummy_entry_122>:
80010f40:	3c 00       	j 80010f40 <osEE_tc_core1_isr_dummy_entry_122>
	...

80010f60 <osEE_tc_core1_isr_dummy_entry_123>:
80010f60:	3c 00       	j 80010f60 <osEE_tc_core1_isr_dummy_entry_123>
	...

80010f80 <osEE_tc_core1_isr_dummy_entry_124>:
80010f80:	3c 00       	j 80010f80 <osEE_tc_core1_isr_dummy_entry_124>
	...

80010fa0 <osEE_tc_core1_isr_dummy_entry_125>:
80010fa0:	3c 00       	j 80010fa0 <osEE_tc_core1_isr_dummy_entry_125>
	...

80010fc0 <osEE_tc_core1_isr_dummy_entry_126>:
80010fc0:	3c 00       	j 80010fc0 <osEE_tc_core1_isr_dummy_entry_126>
	...

80010fe0 <osEE_tc_core1_isr_dummy_entry_127>:
80010fe0:	3c 00       	j 80010fe0 <osEE_tc_core1_isr_dummy_entry_127>
	...

80011000 <osEE_tc_core1_isr_dummy_entry_128>:
80011000:	3c 00       	j 80011000 <osEE_tc_core1_isr_dummy_entry_128>
	...

80011020 <osEE_tc_core1_isr_dummy_entry_129>:
80011020:	3c 00       	j 80011020 <osEE_tc_core1_isr_dummy_entry_129>
	...

80011040 <osEE_tc_core1_isr_dummy_entry_130>:
80011040:	3c 00       	j 80011040 <osEE_tc_core1_isr_dummy_entry_130>
	...

80011060 <osEE_tc_core1_isr_dummy_entry_131>:
80011060:	3c 00       	j 80011060 <osEE_tc_core1_isr_dummy_entry_131>
	...

80011080 <osEE_tc_core1_isr_dummy_entry_132>:
80011080:	3c 00       	j 80011080 <osEE_tc_core1_isr_dummy_entry_132>
	...

800110a0 <osEE_tc_core1_isr_dummy_entry_133>:
800110a0:	3c 00       	j 800110a0 <osEE_tc_core1_isr_dummy_entry_133>
	...

800110c0 <osEE_tc_core1_isr_dummy_entry_134>:
800110c0:	3c 00       	j 800110c0 <osEE_tc_core1_isr_dummy_entry_134>
	...

800110e0 <osEE_tc_core1_isr_dummy_entry_135>:
800110e0:	3c 00       	j 800110e0 <osEE_tc_core1_isr_dummy_entry_135>
	...

80011100 <osEE_tc_core1_isr_dummy_entry_136>:
80011100:	3c 00       	j 80011100 <osEE_tc_core1_isr_dummy_entry_136>
	...

80011120 <osEE_tc_core1_isr_dummy_entry_137>:
80011120:	3c 00       	j 80011120 <osEE_tc_core1_isr_dummy_entry_137>
	...

80011140 <osEE_tc_core1_isr_dummy_entry_138>:
80011140:	3c 00       	j 80011140 <osEE_tc_core1_isr_dummy_entry_138>
	...

80011160 <osEE_tc_core1_isr_dummy_entry_139>:
80011160:	3c 00       	j 80011160 <osEE_tc_core1_isr_dummy_entry_139>
	...

80011180 <osEE_tc_core1_isr_dummy_entry_140>:
80011180:	3c 00       	j 80011180 <osEE_tc_core1_isr_dummy_entry_140>
	...

800111a0 <osEE_tc_core1_isr_dummy_entry_141>:
800111a0:	3c 00       	j 800111a0 <osEE_tc_core1_isr_dummy_entry_141>
	...

800111c0 <osEE_tc_core1_isr_dummy_entry_142>:
800111c0:	3c 00       	j 800111c0 <osEE_tc_core1_isr_dummy_entry_142>
	...

800111e0 <osEE_tc_core1_isr_dummy_entry_143>:
800111e0:	3c 00       	j 800111e0 <osEE_tc_core1_isr_dummy_entry_143>
	...

80011200 <osEE_tc_core1_isr_dummy_entry_144>:
80011200:	3c 00       	j 80011200 <osEE_tc_core1_isr_dummy_entry_144>
	...

80011220 <osEE_tc_core1_isr_dummy_entry_145>:
80011220:	3c 00       	j 80011220 <osEE_tc_core1_isr_dummy_entry_145>
	...

80011240 <osEE_tc_core1_isr_dummy_entry_146>:
80011240:	3c 00       	j 80011240 <osEE_tc_core1_isr_dummy_entry_146>
	...

80011260 <osEE_tc_core1_isr_dummy_entry_147>:
80011260:	3c 00       	j 80011260 <osEE_tc_core1_isr_dummy_entry_147>
	...

80011280 <osEE_tc_core1_isr_dummy_entry_148>:
80011280:	3c 00       	j 80011280 <osEE_tc_core1_isr_dummy_entry_148>
	...

800112a0 <osEE_tc_core1_isr_dummy_entry_149>:
800112a0:	3c 00       	j 800112a0 <osEE_tc_core1_isr_dummy_entry_149>
	...

800112c0 <osEE_tc_core1_isr_dummy_entry_150>:
800112c0:	3c 00       	j 800112c0 <osEE_tc_core1_isr_dummy_entry_150>
	...

800112e0 <osEE_tc_core1_isr_dummy_entry_151>:
800112e0:	3c 00       	j 800112e0 <osEE_tc_core1_isr_dummy_entry_151>
	...

80011300 <osEE_tc_core1_isr_dummy_entry_152>:
80011300:	3c 00       	j 80011300 <osEE_tc_core1_isr_dummy_entry_152>
	...

80011320 <osEE_tc_core1_isr_dummy_entry_153>:
80011320:	3c 00       	j 80011320 <osEE_tc_core1_isr_dummy_entry_153>
	...

80011340 <osEE_tc_core1_isr_dummy_entry_154>:
80011340:	3c 00       	j 80011340 <osEE_tc_core1_isr_dummy_entry_154>
	...

80011360 <osEE_tc_core1_isr_dummy_entry_155>:
80011360:	3c 00       	j 80011360 <osEE_tc_core1_isr_dummy_entry_155>
	...

80011380 <osEE_tc_core1_isr_dummy_entry_156>:
80011380:	3c 00       	j 80011380 <osEE_tc_core1_isr_dummy_entry_156>
	...

800113a0 <osEE_tc_core1_isr_dummy_entry_157>:
800113a0:	3c 00       	j 800113a0 <osEE_tc_core1_isr_dummy_entry_157>
	...

800113c0 <osEE_tc_core1_isr_dummy_entry_158>:
800113c0:	3c 00       	j 800113c0 <osEE_tc_core1_isr_dummy_entry_158>
	...

800113e0 <osEE_tc_core1_isr_dummy_entry_159>:
800113e0:	3c 00       	j 800113e0 <osEE_tc_core1_isr_dummy_entry_159>
	...

80011400 <osEE_tc_core1_isr_dummy_entry_160>:
80011400:	3c 00       	j 80011400 <osEE_tc_core1_isr_dummy_entry_160>
	...

80011420 <osEE_tc_core1_isr_dummy_entry_161>:
80011420:	3c 00       	j 80011420 <osEE_tc_core1_isr_dummy_entry_161>
	...

80011440 <osEE_tc_core1_isr_dummy_entry_162>:
80011440:	3c 00       	j 80011440 <osEE_tc_core1_isr_dummy_entry_162>
	...

80011460 <osEE_tc_core1_isr_dummy_entry_163>:
80011460:	3c 00       	j 80011460 <osEE_tc_core1_isr_dummy_entry_163>
	...

80011480 <osEE_tc_core1_isr_dummy_entry_164>:
80011480:	3c 00       	j 80011480 <osEE_tc_core1_isr_dummy_entry_164>
	...

800114a0 <osEE_tc_core1_isr_dummy_entry_165>:
800114a0:	3c 00       	j 800114a0 <osEE_tc_core1_isr_dummy_entry_165>
	...

800114c0 <osEE_tc_core1_isr_dummy_entry_166>:
800114c0:	3c 00       	j 800114c0 <osEE_tc_core1_isr_dummy_entry_166>
	...

800114e0 <osEE_tc_core1_isr_dummy_entry_167>:
800114e0:	3c 00       	j 800114e0 <osEE_tc_core1_isr_dummy_entry_167>
	...

80011500 <osEE_tc_core1_isr_dummy_entry_168>:
80011500:	3c 00       	j 80011500 <osEE_tc_core1_isr_dummy_entry_168>
	...

80011520 <osEE_tc_core1_isr_dummy_entry_169>:
80011520:	3c 00       	j 80011520 <osEE_tc_core1_isr_dummy_entry_169>
	...

80011540 <osEE_tc_core1_isr_dummy_entry_170>:
80011540:	3c 00       	j 80011540 <osEE_tc_core1_isr_dummy_entry_170>
	...

80011560 <osEE_tc_core1_isr_dummy_entry_171>:
80011560:	3c 00       	j 80011560 <osEE_tc_core1_isr_dummy_entry_171>
	...

80011580 <osEE_tc_core1_isr_dummy_entry_172>:
80011580:	3c 00       	j 80011580 <osEE_tc_core1_isr_dummy_entry_172>
	...

800115a0 <osEE_tc_core1_isr_dummy_entry_173>:
800115a0:	3c 00       	j 800115a0 <osEE_tc_core1_isr_dummy_entry_173>
	...

800115c0 <osEE_tc_core1_isr_dummy_entry_174>:
800115c0:	3c 00       	j 800115c0 <osEE_tc_core1_isr_dummy_entry_174>
	...

800115e0 <osEE_tc_core1_isr_dummy_entry_175>:
800115e0:	3c 00       	j 800115e0 <osEE_tc_core1_isr_dummy_entry_175>
	...

80011600 <osEE_tc_core1_isr_dummy_entry_176>:
80011600:	3c 00       	j 80011600 <osEE_tc_core1_isr_dummy_entry_176>
	...

80011620 <osEE_tc_core1_isr_dummy_entry_177>:
80011620:	3c 00       	j 80011620 <osEE_tc_core1_isr_dummy_entry_177>
	...

80011640 <osEE_tc_core1_isr_dummy_entry_178>:
80011640:	3c 00       	j 80011640 <osEE_tc_core1_isr_dummy_entry_178>
	...

80011660 <osEE_tc_core1_isr_dummy_entry_179>:
80011660:	3c 00       	j 80011660 <osEE_tc_core1_isr_dummy_entry_179>
	...

80011680 <osEE_tc_core1_isr_dummy_entry_180>:
80011680:	3c 00       	j 80011680 <osEE_tc_core1_isr_dummy_entry_180>
	...

800116a0 <osEE_tc_core1_isr_dummy_entry_181>:
800116a0:	3c 00       	j 800116a0 <osEE_tc_core1_isr_dummy_entry_181>
	...

800116c0 <osEE_tc_core1_isr_dummy_entry_182>:
800116c0:	3c 00       	j 800116c0 <osEE_tc_core1_isr_dummy_entry_182>
	...

800116e0 <osEE_tc_core1_isr_dummy_entry_183>:
800116e0:	3c 00       	j 800116e0 <osEE_tc_core1_isr_dummy_entry_183>
	...

80011700 <osEE_tc_core1_isr_dummy_entry_184>:
80011700:	3c 00       	j 80011700 <osEE_tc_core1_isr_dummy_entry_184>
	...

80011720 <osEE_tc_core1_isr_dummy_entry_185>:
80011720:	3c 00       	j 80011720 <osEE_tc_core1_isr_dummy_entry_185>
	...

80011740 <osEE_tc_core1_isr_dummy_entry_186>:
80011740:	3c 00       	j 80011740 <osEE_tc_core1_isr_dummy_entry_186>
	...

80011760 <osEE_tc_core1_isr_dummy_entry_187>:
80011760:	3c 00       	j 80011760 <osEE_tc_core1_isr_dummy_entry_187>
	...

80011780 <osEE_tc_core1_isr_dummy_entry_188>:
80011780:	3c 00       	j 80011780 <osEE_tc_core1_isr_dummy_entry_188>
	...

800117a0 <osEE_tc_core1_isr_dummy_entry_189>:
800117a0:	3c 00       	j 800117a0 <osEE_tc_core1_isr_dummy_entry_189>
	...

800117c0 <osEE_tc_core1_isr_dummy_entry_190>:
800117c0:	3c 00       	j 800117c0 <osEE_tc_core1_isr_dummy_entry_190>
	...

800117e0 <osEE_tc_core1_isr_dummy_entry_191>:
800117e0:	3c 00       	j 800117e0 <osEE_tc_core1_isr_dummy_entry_191>
	...

80011800 <osEE_tc_core1_isr_dummy_entry_192>:
80011800:	3c 00       	j 80011800 <osEE_tc_core1_isr_dummy_entry_192>
	...

80011820 <osEE_tc_core1_isr_dummy_entry_193>:
80011820:	3c 00       	j 80011820 <osEE_tc_core1_isr_dummy_entry_193>
	...

80011840 <osEE_tc_core1_isr_dummy_entry_194>:
80011840:	3c 00       	j 80011840 <osEE_tc_core1_isr_dummy_entry_194>
	...

80011860 <osEE_tc_core1_isr_dummy_entry_195>:
80011860:	3c 00       	j 80011860 <osEE_tc_core1_isr_dummy_entry_195>
	...

80011880 <osEE_tc_core1_isr_dummy_entry_196>:
80011880:	3c 00       	j 80011880 <osEE_tc_core1_isr_dummy_entry_196>
	...

800118a0 <osEE_tc_core1_isr_dummy_entry_197>:
800118a0:	3c 00       	j 800118a0 <osEE_tc_core1_isr_dummy_entry_197>
	...

800118c0 <osEE_tc_core1_isr_dummy_entry_198>:
800118c0:	3c 00       	j 800118c0 <osEE_tc_core1_isr_dummy_entry_198>
	...

800118e0 <osEE_tc_core1_isr_dummy_entry_199>:
800118e0:	3c 00       	j 800118e0 <osEE_tc_core1_isr_dummy_entry_199>
	...

80011900 <osEE_tc_core1_isr_dummy_entry_200>:
80011900:	3c 00       	j 80011900 <osEE_tc_core1_isr_dummy_entry_200>
	...

80011920 <osEE_tc_core1_isr_dummy_entry_201>:
80011920:	3c 00       	j 80011920 <osEE_tc_core1_isr_dummy_entry_201>
	...

80011940 <osEE_tc_core1_isr_dummy_entry_202>:
80011940:	3c 00       	j 80011940 <osEE_tc_core1_isr_dummy_entry_202>
	...

80011960 <osEE_tc_core1_isr_dummy_entry_203>:
80011960:	3c 00       	j 80011960 <osEE_tc_core1_isr_dummy_entry_203>
	...

80011980 <osEE_tc_core1_isr_dummy_entry_204>:
80011980:	3c 00       	j 80011980 <osEE_tc_core1_isr_dummy_entry_204>
	...

800119a0 <osEE_tc_core1_isr_dummy_entry_205>:
800119a0:	3c 00       	j 800119a0 <osEE_tc_core1_isr_dummy_entry_205>
	...

800119c0 <osEE_tc_core1_isr_dummy_entry_206>:
800119c0:	3c 00       	j 800119c0 <osEE_tc_core1_isr_dummy_entry_206>
	...

800119e0 <osEE_tc_core1_isr_dummy_entry_207>:
800119e0:	3c 00       	j 800119e0 <osEE_tc_core1_isr_dummy_entry_207>
	...

80011a00 <osEE_tc_core1_isr_dummy_entry_208>:
80011a00:	3c 00       	j 80011a00 <osEE_tc_core1_isr_dummy_entry_208>
	...

80011a20 <osEE_tc_core1_isr_dummy_entry_209>:
80011a20:	3c 00       	j 80011a20 <osEE_tc_core1_isr_dummy_entry_209>
	...

80011a40 <osEE_tc_core1_isr_dummy_entry_210>:
80011a40:	3c 00       	j 80011a40 <osEE_tc_core1_isr_dummy_entry_210>
	...

80011a60 <osEE_tc_core1_isr_dummy_entry_211>:
80011a60:	3c 00       	j 80011a60 <osEE_tc_core1_isr_dummy_entry_211>
	...

80011a80 <osEE_tc_core1_isr_dummy_entry_212>:
80011a80:	3c 00       	j 80011a80 <osEE_tc_core1_isr_dummy_entry_212>
	...

80011aa0 <osEE_tc_core1_isr_dummy_entry_213>:
80011aa0:	3c 00       	j 80011aa0 <osEE_tc_core1_isr_dummy_entry_213>
	...

80011ac0 <osEE_tc_core1_isr_dummy_entry_214>:
80011ac0:	3c 00       	j 80011ac0 <osEE_tc_core1_isr_dummy_entry_214>
	...

80011ae0 <osEE_tc_core1_isr_dummy_entry_215>:
80011ae0:	3c 00       	j 80011ae0 <osEE_tc_core1_isr_dummy_entry_215>
	...

80011b00 <osEE_tc_core1_isr_dummy_entry_216>:
80011b00:	3c 00       	j 80011b00 <osEE_tc_core1_isr_dummy_entry_216>
	...

80011b20 <osEE_tc_core1_isr_dummy_entry_217>:
80011b20:	3c 00       	j 80011b20 <osEE_tc_core1_isr_dummy_entry_217>
	...

80011b40 <osEE_tc_core1_isr_dummy_entry_218>:
80011b40:	3c 00       	j 80011b40 <osEE_tc_core1_isr_dummy_entry_218>
	...

80011b60 <osEE_tc_core1_isr_dummy_entry_219>:
80011b60:	3c 00       	j 80011b60 <osEE_tc_core1_isr_dummy_entry_219>
	...

80011b80 <osEE_tc_core1_isr_dummy_entry_220>:
80011b80:	3c 00       	j 80011b80 <osEE_tc_core1_isr_dummy_entry_220>
	...

80011ba0 <osEE_tc_core1_isr_dummy_entry_221>:
80011ba0:	3c 00       	j 80011ba0 <osEE_tc_core1_isr_dummy_entry_221>
	...

80011bc0 <osEE_tc_core1_isr_dummy_entry_222>:
80011bc0:	3c 00       	j 80011bc0 <osEE_tc_core1_isr_dummy_entry_222>
	...

80011be0 <osEE_tc_core1_isr_dummy_entry_223>:
80011be0:	3c 00       	j 80011be0 <osEE_tc_core1_isr_dummy_entry_223>
	...

80011c00 <osEE_tc_core1_isr_dummy_entry_224>:
80011c00:	3c 00       	j 80011c00 <osEE_tc_core1_isr_dummy_entry_224>
	...

80011c20 <osEE_tc_core1_isr_dummy_entry_225>:
80011c20:	3c 00       	j 80011c20 <osEE_tc_core1_isr_dummy_entry_225>
	...

80011c40 <osEE_tc_core1_isr_dummy_entry_226>:
80011c40:	3c 00       	j 80011c40 <osEE_tc_core1_isr_dummy_entry_226>
	...

80011c60 <osEE_tc_core1_isr_dummy_entry_227>:
80011c60:	3c 00       	j 80011c60 <osEE_tc_core1_isr_dummy_entry_227>
	...

80011c80 <osEE_tc_core1_isr_dummy_entry_228>:
80011c80:	3c 00       	j 80011c80 <osEE_tc_core1_isr_dummy_entry_228>
	...

80011ca0 <osEE_tc_core1_isr_dummy_entry_229>:
80011ca0:	3c 00       	j 80011ca0 <osEE_tc_core1_isr_dummy_entry_229>
	...

80011cc0 <osEE_tc_core1_isr_dummy_entry_230>:
80011cc0:	3c 00       	j 80011cc0 <osEE_tc_core1_isr_dummy_entry_230>
	...

80011ce0 <osEE_tc_core1_isr_dummy_entry_231>:
80011ce0:	3c 00       	j 80011ce0 <osEE_tc_core1_isr_dummy_entry_231>
	...

80011d00 <osEE_tc_core1_isr_dummy_entry_232>:
80011d00:	3c 00       	j 80011d00 <osEE_tc_core1_isr_dummy_entry_232>
	...

80011d20 <osEE_tc_core1_isr_dummy_entry_233>:
80011d20:	3c 00       	j 80011d20 <osEE_tc_core1_isr_dummy_entry_233>
	...

80011d40 <osEE_tc_core1_isr_dummy_entry_234>:
80011d40:	3c 00       	j 80011d40 <osEE_tc_core1_isr_dummy_entry_234>
	...

80011d60 <osEE_tc_core1_isr_dummy_entry_235>:
80011d60:	3c 00       	j 80011d60 <osEE_tc_core1_isr_dummy_entry_235>
	...

80011d80 <osEE_tc_core1_isr_dummy_entry_236>:
80011d80:	3c 00       	j 80011d80 <osEE_tc_core1_isr_dummy_entry_236>
	...

80011da0 <osEE_tc_core1_isr_dummy_entry_237>:
80011da0:	3c 00       	j 80011da0 <osEE_tc_core1_isr_dummy_entry_237>
	...

80011dc0 <osEE_tc_core1_isr_dummy_entry_238>:
80011dc0:	3c 00       	j 80011dc0 <osEE_tc_core1_isr_dummy_entry_238>
	...

80011de0 <osEE_tc_core1_isr_dummy_entry_239>:
80011de0:	3c 00       	j 80011de0 <osEE_tc_core1_isr_dummy_entry_239>
	...

80011e00 <osEE_tc_core1_isr_dummy_entry_240>:
80011e00:	3c 00       	j 80011e00 <osEE_tc_core1_isr_dummy_entry_240>
	...

80011e20 <osEE_tc_core1_isr_dummy_entry_241>:
80011e20:	3c 00       	j 80011e20 <osEE_tc_core1_isr_dummy_entry_241>
	...

80011e40 <osEE_tc_core1_isr_dummy_entry_242>:
80011e40:	3c 00       	j 80011e40 <osEE_tc_core1_isr_dummy_entry_242>
	...

80011e60 <osEE_tc_core1_isr_dummy_entry_243>:
80011e60:	3c 00       	j 80011e60 <osEE_tc_core1_isr_dummy_entry_243>
	...

80011e80 <osEE_tc_core1_isr_dummy_entry_244>:
80011e80:	3c 00       	j 80011e80 <osEE_tc_core1_isr_dummy_entry_244>
	...

80011ea0 <osEE_tc_core1_isr_dummy_entry_245>:
80011ea0:	3c 00       	j 80011ea0 <osEE_tc_core1_isr_dummy_entry_245>
	...

80011ec0 <osEE_tc_core1_isr_dummy_entry_246>:
80011ec0:	3c 00       	j 80011ec0 <osEE_tc_core1_isr_dummy_entry_246>
	...

80011ee0 <osEE_tc_core1_isr_dummy_entry_247>:
80011ee0:	3c 00       	j 80011ee0 <osEE_tc_core1_isr_dummy_entry_247>
	...

80011f00 <osEE_tc_core1_isr_dummy_entry_248>:
80011f00:	3c 00       	j 80011f00 <osEE_tc_core1_isr_dummy_entry_248>
	...

80011f20 <osEE_tc_core1_isr_dummy_entry_249>:
80011f20:	3c 00       	j 80011f20 <osEE_tc_core1_isr_dummy_entry_249>
	...

80011f40 <osEE_tc_core1_isr_dummy_entry_250>:
80011f40:	3c 00       	j 80011f40 <osEE_tc_core1_isr_dummy_entry_250>
	...

80011f60 <osEE_tc_core1_isr_dummy_entry_251>:
80011f60:	3c 00       	j 80011f60 <osEE_tc_core1_isr_dummy_entry_251>
	...

80011f80 <osEE_tc_core1_isr_dummy_entry_252>:
80011f80:	3c 00       	j 80011f80 <osEE_tc_core1_isr_dummy_entry_252>
	...

80011fa0 <osEE_tc_core1_isr_dummy_entry_253>:
80011fa0:	3c 00       	j 80011fa0 <osEE_tc_core1_isr_dummy_entry_253>
	...

80011fc0 <osEE_tc_core1_isr_dummy_entry_254>:
80011fc0:	3c 00       	j 80011fc0 <osEE_tc_core1_isr_dummy_entry_254>
	...

80011fe0 <osEE_tc_core1_isr_dummy_entry_255>:
80011fe0:	3c 00       	j 80011fe0 <osEE_tc_core1_isr_dummy_entry_255>
	...

Disassembly of section .inttab_cpu2:

80012000 <__INTTAB2>:
	...

80012020 <osEE_tc_core2_isr2_entry_1>:
80012020:	0d 00 00 02 	svlcx 
80012024:	82 f4       	mov %d4,-1
80012026:	1d ff dc ba 	j 800095de <osEE_tc_isr2_wrapper>
	...

80012040 <osEE_tc_core2_isr_dummy_entry_2>:
80012040:	3c 00       	j 80012040 <osEE_tc_core2_isr_dummy_entry_2>
	...

80012060 <osEE_tc_core2_isr_dummy_entry_3>:
80012060:	3c 00       	j 80012060 <osEE_tc_core2_isr_dummy_entry_3>
	...

80012080 <osEE_tc_core2_isr_dummy_entry_4>:
80012080:	3c 00       	j 80012080 <osEE_tc_core2_isr_dummy_entry_4>
	...

800120a0 <osEE_tc_core2_isr_dummy_entry_5>:
800120a0:	3c 00       	j 800120a0 <osEE_tc_core2_isr_dummy_entry_5>
	...

800120c0 <osEE_tc_core2_isr_dummy_entry_6>:
800120c0:	3c 00       	j 800120c0 <osEE_tc_core2_isr_dummy_entry_6>
	...

800120e0 <osEE_tc_core2_isr_dummy_entry_7>:
800120e0:	3c 00       	j 800120e0 <osEE_tc_core2_isr_dummy_entry_7>
	...

80012100 <osEE_tc_core2_isr_dummy_entry_8>:
80012100:	3c 00       	j 80012100 <osEE_tc_core2_isr_dummy_entry_8>
	...

80012120 <osEE_tc_core2_isr_dummy_entry_9>:
80012120:	3c 00       	j 80012120 <osEE_tc_core2_isr_dummy_entry_9>
	...

80012140 <osEE_tc_core2_isr_dummy_entry_10>:
80012140:	3c 00       	j 80012140 <osEE_tc_core2_isr_dummy_entry_10>
	...

80012160 <osEE_tc_core2_isr_dummy_entry_11>:
80012160:	3c 00       	j 80012160 <osEE_tc_core2_isr_dummy_entry_11>
	...

80012180 <osEE_tc_core2_isr_dummy_entry_12>:
80012180:	3c 00       	j 80012180 <osEE_tc_core2_isr_dummy_entry_12>
	...

800121a0 <osEE_tc_core2_isr_dummy_entry_13>:
800121a0:	3c 00       	j 800121a0 <osEE_tc_core2_isr_dummy_entry_13>
	...

800121c0 <osEE_tc_core2_isr_dummy_entry_14>:
800121c0:	3c 00       	j 800121c0 <osEE_tc_core2_isr_dummy_entry_14>
	...

800121e0 <osEE_tc_core2_isr_dummy_entry_15>:
800121e0:	3c 00       	j 800121e0 <osEE_tc_core2_isr_dummy_entry_15>
	...

80012200 <osEE_tc_core2_isr_dummy_entry_16>:
80012200:	3c 00       	j 80012200 <osEE_tc_core2_isr_dummy_entry_16>
	...

80012220 <osEE_tc_core2_isr_dummy_entry_17>:
80012220:	3c 00       	j 80012220 <osEE_tc_core2_isr_dummy_entry_17>
	...

80012240 <osEE_tc_core2_isr_dummy_entry_18>:
80012240:	3c 00       	j 80012240 <osEE_tc_core2_isr_dummy_entry_18>
	...

80012260 <osEE_tc_core2_isr_dummy_entry_19>:
80012260:	3c 00       	j 80012260 <osEE_tc_core2_isr_dummy_entry_19>
	...

80012280 <osEE_tc_core2_isr_dummy_entry_20>:
80012280:	3c 00       	j 80012280 <osEE_tc_core2_isr_dummy_entry_20>
	...

800122a0 <osEE_tc_core2_isr_dummy_entry_21>:
800122a0:	3c 00       	j 800122a0 <osEE_tc_core2_isr_dummy_entry_21>
	...

800122c0 <osEE_tc_core2_isr_dummy_entry_22>:
800122c0:	3c 00       	j 800122c0 <osEE_tc_core2_isr_dummy_entry_22>
	...

800122e0 <osEE_tc_core2_isr_dummy_entry_23>:
800122e0:	3c 00       	j 800122e0 <osEE_tc_core2_isr_dummy_entry_23>
	...

80012300 <osEE_tc_core2_isr_dummy_entry_24>:
80012300:	3c 00       	j 80012300 <osEE_tc_core2_isr_dummy_entry_24>
	...

80012320 <osEE_tc_core2_isr_dummy_entry_25>:
80012320:	3c 00       	j 80012320 <osEE_tc_core2_isr_dummy_entry_25>
	...

80012340 <osEE_tc_core2_isr_dummy_entry_26>:
80012340:	3c 00       	j 80012340 <osEE_tc_core2_isr_dummy_entry_26>
	...

80012360 <osEE_tc_core2_isr_dummy_entry_27>:
80012360:	3c 00       	j 80012360 <osEE_tc_core2_isr_dummy_entry_27>
	...

80012380 <osEE_tc_core2_isr_dummy_entry_28>:
80012380:	3c 00       	j 80012380 <osEE_tc_core2_isr_dummy_entry_28>
	...

800123a0 <osEE_tc_core2_isr_dummy_entry_29>:
800123a0:	3c 00       	j 800123a0 <osEE_tc_core2_isr_dummy_entry_29>
	...

800123c0 <osEE_tc_core2_isr_dummy_entry_30>:
800123c0:	3c 00       	j 800123c0 <osEE_tc_core2_isr_dummy_entry_30>
	...

800123e0 <osEE_tc_core2_isr_dummy_entry_31>:
800123e0:	3c 00       	j 800123e0 <osEE_tc_core2_isr_dummy_entry_31>
	...

80012400 <osEE_tc_core2_isr_dummy_entry_32>:
80012400:	3c 00       	j 80012400 <osEE_tc_core2_isr_dummy_entry_32>
	...

80012420 <osEE_tc_core2_isr_dummy_entry_33>:
80012420:	3c 00       	j 80012420 <osEE_tc_core2_isr_dummy_entry_33>
	...

80012440 <osEE_tc_core2_isr_dummy_entry_34>:
80012440:	3c 00       	j 80012440 <osEE_tc_core2_isr_dummy_entry_34>
	...

80012460 <osEE_tc_core2_isr_dummy_entry_35>:
80012460:	3c 00       	j 80012460 <osEE_tc_core2_isr_dummy_entry_35>
	...

80012480 <osEE_tc_core2_isr_dummy_entry_36>:
80012480:	3c 00       	j 80012480 <osEE_tc_core2_isr_dummy_entry_36>
	...

800124a0 <osEE_tc_core2_isr_dummy_entry_37>:
800124a0:	3c 00       	j 800124a0 <osEE_tc_core2_isr_dummy_entry_37>
	...

800124c0 <osEE_tc_core2_isr_dummy_entry_38>:
800124c0:	3c 00       	j 800124c0 <osEE_tc_core2_isr_dummy_entry_38>
	...

800124e0 <osEE_tc_core2_isr_dummy_entry_39>:
800124e0:	3c 00       	j 800124e0 <osEE_tc_core2_isr_dummy_entry_39>
	...

80012500 <osEE_tc_core2_isr_dummy_entry_40>:
80012500:	3c 00       	j 80012500 <osEE_tc_core2_isr_dummy_entry_40>
	...

80012520 <osEE_tc_core2_isr_dummy_entry_41>:
80012520:	3c 00       	j 80012520 <osEE_tc_core2_isr_dummy_entry_41>
	...

80012540 <osEE_tc_core2_isr_dummy_entry_42>:
80012540:	3c 00       	j 80012540 <osEE_tc_core2_isr_dummy_entry_42>
	...

80012560 <osEE_tc_core2_isr_dummy_entry_43>:
80012560:	3c 00       	j 80012560 <osEE_tc_core2_isr_dummy_entry_43>
	...

80012580 <osEE_tc_core2_isr_dummy_entry_44>:
80012580:	3c 00       	j 80012580 <osEE_tc_core2_isr_dummy_entry_44>
	...

800125a0 <osEE_tc_core2_isr_dummy_entry_45>:
800125a0:	3c 00       	j 800125a0 <osEE_tc_core2_isr_dummy_entry_45>
	...

800125c0 <osEE_tc_core2_isr_dummy_entry_46>:
800125c0:	3c 00       	j 800125c0 <osEE_tc_core2_isr_dummy_entry_46>
	...

800125e0 <osEE_tc_core2_isr_dummy_entry_47>:
800125e0:	3c 00       	j 800125e0 <osEE_tc_core2_isr_dummy_entry_47>
	...

80012600 <osEE_tc_core2_isr_dummy_entry_48>:
80012600:	3c 00       	j 80012600 <osEE_tc_core2_isr_dummy_entry_48>
	...

80012620 <osEE_tc_core2_isr_dummy_entry_49>:
80012620:	3c 00       	j 80012620 <osEE_tc_core2_isr_dummy_entry_49>
	...

80012640 <osEE_tc_core2_isr_dummy_entry_50>:
80012640:	3c 00       	j 80012640 <osEE_tc_core2_isr_dummy_entry_50>
	...

80012660 <osEE_tc_core2_isr_dummy_entry_51>:
80012660:	3c 00       	j 80012660 <osEE_tc_core2_isr_dummy_entry_51>
	...

80012680 <osEE_tc_core2_isr_dummy_entry_52>:
80012680:	3c 00       	j 80012680 <osEE_tc_core2_isr_dummy_entry_52>
	...

800126a0 <osEE_tc_core2_isr_dummy_entry_53>:
800126a0:	3c 00       	j 800126a0 <osEE_tc_core2_isr_dummy_entry_53>
	...

800126c0 <osEE_tc_core2_isr_dummy_entry_54>:
800126c0:	3c 00       	j 800126c0 <osEE_tc_core2_isr_dummy_entry_54>
	...

800126e0 <osEE_tc_core2_isr_dummy_entry_55>:
800126e0:	3c 00       	j 800126e0 <osEE_tc_core2_isr_dummy_entry_55>
	...

80012700 <osEE_tc_core2_isr_dummy_entry_56>:
80012700:	3c 00       	j 80012700 <osEE_tc_core2_isr_dummy_entry_56>
	...

80012720 <osEE_tc_core2_isr_dummy_entry_57>:
80012720:	3c 00       	j 80012720 <osEE_tc_core2_isr_dummy_entry_57>
	...

80012740 <osEE_tc_core2_isr_dummy_entry_58>:
80012740:	3c 00       	j 80012740 <osEE_tc_core2_isr_dummy_entry_58>
	...

80012760 <osEE_tc_core2_isr_dummy_entry_59>:
80012760:	3c 00       	j 80012760 <osEE_tc_core2_isr_dummy_entry_59>
	...

80012780 <osEE_tc_core2_isr_dummy_entry_60>:
80012780:	3c 00       	j 80012780 <osEE_tc_core2_isr_dummy_entry_60>
	...

800127a0 <osEE_tc_core2_isr_dummy_entry_61>:
800127a0:	3c 00       	j 800127a0 <osEE_tc_core2_isr_dummy_entry_61>
	...

800127c0 <osEE_tc_core2_isr_dummy_entry_62>:
800127c0:	3c 00       	j 800127c0 <osEE_tc_core2_isr_dummy_entry_62>
	...

800127e0 <osEE_tc_core2_isr_dummy_entry_63>:
800127e0:	3c 00       	j 800127e0 <osEE_tc_core2_isr_dummy_entry_63>
	...

80012800 <osEE_tc_core2_isr_dummy_entry_64>:
80012800:	3c 00       	j 80012800 <osEE_tc_core2_isr_dummy_entry_64>
	...

80012820 <osEE_tc_core2_isr_dummy_entry_65>:
80012820:	3c 00       	j 80012820 <osEE_tc_core2_isr_dummy_entry_65>
	...

80012840 <osEE_tc_core2_isr_dummy_entry_66>:
80012840:	3c 00       	j 80012840 <osEE_tc_core2_isr_dummy_entry_66>
	...

80012860 <osEE_tc_core2_isr_dummy_entry_67>:
80012860:	3c 00       	j 80012860 <osEE_tc_core2_isr_dummy_entry_67>
	...

80012880 <osEE_tc_core2_isr_dummy_entry_68>:
80012880:	3c 00       	j 80012880 <osEE_tc_core2_isr_dummy_entry_68>
	...

800128a0 <osEE_tc_core2_isr_dummy_entry_69>:
800128a0:	3c 00       	j 800128a0 <osEE_tc_core2_isr_dummy_entry_69>
	...

800128c0 <osEE_tc_core2_isr_dummy_entry_70>:
800128c0:	3c 00       	j 800128c0 <osEE_tc_core2_isr_dummy_entry_70>
	...

800128e0 <osEE_tc_core2_isr_dummy_entry_71>:
800128e0:	3c 00       	j 800128e0 <osEE_tc_core2_isr_dummy_entry_71>
	...

80012900 <osEE_tc_core2_isr_dummy_entry_72>:
80012900:	3c 00       	j 80012900 <osEE_tc_core2_isr_dummy_entry_72>
	...

80012920 <osEE_tc_core2_isr_dummy_entry_73>:
80012920:	3c 00       	j 80012920 <osEE_tc_core2_isr_dummy_entry_73>
	...

80012940 <osEE_tc_core2_isr_dummy_entry_74>:
80012940:	3c 00       	j 80012940 <osEE_tc_core2_isr_dummy_entry_74>
	...

80012960 <osEE_tc_core2_isr_dummy_entry_75>:
80012960:	3c 00       	j 80012960 <osEE_tc_core2_isr_dummy_entry_75>
	...

80012980 <osEE_tc_core2_isr_dummy_entry_76>:
80012980:	3c 00       	j 80012980 <osEE_tc_core2_isr_dummy_entry_76>
	...

800129a0 <osEE_tc_core2_isr_dummy_entry_77>:
800129a0:	3c 00       	j 800129a0 <osEE_tc_core2_isr_dummy_entry_77>
	...

800129c0 <osEE_tc_core2_isr_dummy_entry_78>:
800129c0:	3c 00       	j 800129c0 <osEE_tc_core2_isr_dummy_entry_78>
	...

800129e0 <osEE_tc_core2_isr_dummy_entry_79>:
800129e0:	3c 00       	j 800129e0 <osEE_tc_core2_isr_dummy_entry_79>
	...

80012a00 <osEE_tc_core2_isr_dummy_entry_80>:
80012a00:	3c 00       	j 80012a00 <osEE_tc_core2_isr_dummy_entry_80>
	...

80012a20 <osEE_tc_core2_isr_dummy_entry_81>:
80012a20:	3c 00       	j 80012a20 <osEE_tc_core2_isr_dummy_entry_81>
	...

80012a40 <osEE_tc_core2_isr_dummy_entry_82>:
80012a40:	3c 00       	j 80012a40 <osEE_tc_core2_isr_dummy_entry_82>
	...

80012a60 <osEE_tc_core2_isr_dummy_entry_83>:
80012a60:	3c 00       	j 80012a60 <osEE_tc_core2_isr_dummy_entry_83>
	...

80012a80 <osEE_tc_core2_isr_dummy_entry_84>:
80012a80:	3c 00       	j 80012a80 <osEE_tc_core2_isr_dummy_entry_84>
	...

80012aa0 <osEE_tc_core2_isr_dummy_entry_85>:
80012aa0:	3c 00       	j 80012aa0 <osEE_tc_core2_isr_dummy_entry_85>
	...

80012ac0 <osEE_tc_core2_isr_dummy_entry_86>:
80012ac0:	3c 00       	j 80012ac0 <osEE_tc_core2_isr_dummy_entry_86>
	...

80012ae0 <osEE_tc_core2_isr_dummy_entry_87>:
80012ae0:	3c 00       	j 80012ae0 <osEE_tc_core2_isr_dummy_entry_87>
	...

80012b00 <osEE_tc_core2_isr_dummy_entry_88>:
80012b00:	3c 00       	j 80012b00 <osEE_tc_core2_isr_dummy_entry_88>
	...

80012b20 <osEE_tc_core2_isr_dummy_entry_89>:
80012b20:	3c 00       	j 80012b20 <osEE_tc_core2_isr_dummy_entry_89>
	...

80012b40 <osEE_tc_core2_isr_dummy_entry_90>:
80012b40:	3c 00       	j 80012b40 <osEE_tc_core2_isr_dummy_entry_90>
	...

80012b60 <osEE_tc_core2_isr_dummy_entry_91>:
80012b60:	3c 00       	j 80012b60 <osEE_tc_core2_isr_dummy_entry_91>
	...

80012b80 <osEE_tc_core2_isr_dummy_entry_92>:
80012b80:	3c 00       	j 80012b80 <osEE_tc_core2_isr_dummy_entry_92>
	...

80012ba0 <osEE_tc_core2_isr_dummy_entry_93>:
80012ba0:	3c 00       	j 80012ba0 <osEE_tc_core2_isr_dummy_entry_93>
	...

80012bc0 <osEE_tc_core2_isr_dummy_entry_94>:
80012bc0:	3c 00       	j 80012bc0 <osEE_tc_core2_isr_dummy_entry_94>
	...

80012be0 <osEE_tc_core2_isr_dummy_entry_95>:
80012be0:	3c 00       	j 80012be0 <osEE_tc_core2_isr_dummy_entry_95>
	...

80012c00 <osEE_tc_core2_isr_dummy_entry_96>:
80012c00:	3c 00       	j 80012c00 <osEE_tc_core2_isr_dummy_entry_96>
	...

80012c20 <osEE_tc_core2_isr_dummy_entry_97>:
80012c20:	3c 00       	j 80012c20 <osEE_tc_core2_isr_dummy_entry_97>
	...

80012c40 <osEE_tc_core2_isr_dummy_entry_98>:
80012c40:	3c 00       	j 80012c40 <osEE_tc_core2_isr_dummy_entry_98>
	...

80012c60 <osEE_tc_core2_isr_dummy_entry_99>:
80012c60:	3c 00       	j 80012c60 <osEE_tc_core2_isr_dummy_entry_99>
	...

80012c80 <osEE_tc_core2_isr_dummy_entry_100>:
80012c80:	3c 00       	j 80012c80 <osEE_tc_core2_isr_dummy_entry_100>
	...

80012ca0 <osEE_tc_core2_isr_dummy_entry_101>:
80012ca0:	3c 00       	j 80012ca0 <osEE_tc_core2_isr_dummy_entry_101>
	...

80012cc0 <osEE_tc_core2_isr_dummy_entry_102>:
80012cc0:	3c 00       	j 80012cc0 <osEE_tc_core2_isr_dummy_entry_102>
	...

80012ce0 <osEE_tc_core2_isr_dummy_entry_103>:
80012ce0:	3c 00       	j 80012ce0 <osEE_tc_core2_isr_dummy_entry_103>
	...

80012d00 <osEE_tc_core2_isr_dummy_entry_104>:
80012d00:	3c 00       	j 80012d00 <osEE_tc_core2_isr_dummy_entry_104>
	...

80012d20 <osEE_tc_core2_isr_dummy_entry_105>:
80012d20:	3c 00       	j 80012d20 <osEE_tc_core2_isr_dummy_entry_105>
	...

80012d40 <osEE_tc_core2_isr_dummy_entry_106>:
80012d40:	3c 00       	j 80012d40 <osEE_tc_core2_isr_dummy_entry_106>
	...

80012d60 <osEE_tc_core2_isr_dummy_entry_107>:
80012d60:	3c 00       	j 80012d60 <osEE_tc_core2_isr_dummy_entry_107>
	...

80012d80 <osEE_tc_core2_isr_dummy_entry_108>:
80012d80:	3c 00       	j 80012d80 <osEE_tc_core2_isr_dummy_entry_108>
	...

80012da0 <osEE_tc_core2_isr_dummy_entry_109>:
80012da0:	3c 00       	j 80012da0 <osEE_tc_core2_isr_dummy_entry_109>
	...

80012dc0 <osEE_tc_core2_isr_dummy_entry_110>:
80012dc0:	3c 00       	j 80012dc0 <osEE_tc_core2_isr_dummy_entry_110>
	...

80012de0 <osEE_tc_core2_isr_dummy_entry_111>:
80012de0:	3c 00       	j 80012de0 <osEE_tc_core2_isr_dummy_entry_111>
	...

80012e00 <osEE_tc_core2_isr_dummy_entry_112>:
80012e00:	3c 00       	j 80012e00 <osEE_tc_core2_isr_dummy_entry_112>
	...

80012e20 <osEE_tc_core2_isr_dummy_entry_113>:
80012e20:	3c 00       	j 80012e20 <osEE_tc_core2_isr_dummy_entry_113>
	...

80012e40 <osEE_tc_core2_isr_dummy_entry_114>:
80012e40:	3c 00       	j 80012e40 <osEE_tc_core2_isr_dummy_entry_114>
	...

80012e60 <osEE_tc_core2_isr_dummy_entry_115>:
80012e60:	3c 00       	j 80012e60 <osEE_tc_core2_isr_dummy_entry_115>
	...

80012e80 <osEE_tc_core2_isr_dummy_entry_116>:
80012e80:	3c 00       	j 80012e80 <osEE_tc_core2_isr_dummy_entry_116>
	...

80012ea0 <osEE_tc_core2_isr_dummy_entry_117>:
80012ea0:	3c 00       	j 80012ea0 <osEE_tc_core2_isr_dummy_entry_117>
	...

80012ec0 <osEE_tc_core2_isr_dummy_entry_118>:
80012ec0:	3c 00       	j 80012ec0 <osEE_tc_core2_isr_dummy_entry_118>
	...

80012ee0 <osEE_tc_core2_isr_dummy_entry_119>:
80012ee0:	3c 00       	j 80012ee0 <osEE_tc_core2_isr_dummy_entry_119>
	...

80012f00 <osEE_tc_core2_isr_dummy_entry_120>:
80012f00:	3c 00       	j 80012f00 <osEE_tc_core2_isr_dummy_entry_120>
	...

80012f20 <osEE_tc_core2_isr_dummy_entry_121>:
80012f20:	3c 00       	j 80012f20 <osEE_tc_core2_isr_dummy_entry_121>
	...

80012f40 <osEE_tc_core2_isr_dummy_entry_122>:
80012f40:	3c 00       	j 80012f40 <osEE_tc_core2_isr_dummy_entry_122>
	...

80012f60 <osEE_tc_core2_isr_dummy_entry_123>:
80012f60:	3c 00       	j 80012f60 <osEE_tc_core2_isr_dummy_entry_123>
	...

80012f80 <osEE_tc_core2_isr_dummy_entry_124>:
80012f80:	3c 00       	j 80012f80 <osEE_tc_core2_isr_dummy_entry_124>
	...

80012fa0 <osEE_tc_core2_isr_dummy_entry_125>:
80012fa0:	3c 00       	j 80012fa0 <osEE_tc_core2_isr_dummy_entry_125>
	...

80012fc0 <osEE_tc_core2_isr_dummy_entry_126>:
80012fc0:	3c 00       	j 80012fc0 <osEE_tc_core2_isr_dummy_entry_126>
	...

80012fe0 <osEE_tc_core2_isr_dummy_entry_127>:
80012fe0:	3c 00       	j 80012fe0 <osEE_tc_core2_isr_dummy_entry_127>
	...

80013000 <osEE_tc_core2_isr_dummy_entry_128>:
80013000:	3c 00       	j 80013000 <osEE_tc_core2_isr_dummy_entry_128>
	...

80013020 <osEE_tc_core2_isr_dummy_entry_129>:
80013020:	3c 00       	j 80013020 <osEE_tc_core2_isr_dummy_entry_129>
	...

80013040 <osEE_tc_core2_isr_dummy_entry_130>:
80013040:	3c 00       	j 80013040 <osEE_tc_core2_isr_dummy_entry_130>
	...

80013060 <osEE_tc_core2_isr_dummy_entry_131>:
80013060:	3c 00       	j 80013060 <osEE_tc_core2_isr_dummy_entry_131>
	...

80013080 <osEE_tc_core2_isr_dummy_entry_132>:
80013080:	3c 00       	j 80013080 <osEE_tc_core2_isr_dummy_entry_132>
	...

800130a0 <osEE_tc_core2_isr_dummy_entry_133>:
800130a0:	3c 00       	j 800130a0 <osEE_tc_core2_isr_dummy_entry_133>
	...

800130c0 <osEE_tc_core2_isr_dummy_entry_134>:
800130c0:	3c 00       	j 800130c0 <osEE_tc_core2_isr_dummy_entry_134>
	...

800130e0 <osEE_tc_core2_isr_dummy_entry_135>:
800130e0:	3c 00       	j 800130e0 <osEE_tc_core2_isr_dummy_entry_135>
	...

80013100 <osEE_tc_core2_isr_dummy_entry_136>:
80013100:	3c 00       	j 80013100 <osEE_tc_core2_isr_dummy_entry_136>
	...

80013120 <osEE_tc_core2_isr_dummy_entry_137>:
80013120:	3c 00       	j 80013120 <osEE_tc_core2_isr_dummy_entry_137>
	...

80013140 <osEE_tc_core2_isr_dummy_entry_138>:
80013140:	3c 00       	j 80013140 <osEE_tc_core2_isr_dummy_entry_138>
	...

80013160 <osEE_tc_core2_isr_dummy_entry_139>:
80013160:	3c 00       	j 80013160 <osEE_tc_core2_isr_dummy_entry_139>
	...

80013180 <osEE_tc_core2_isr_dummy_entry_140>:
80013180:	3c 00       	j 80013180 <osEE_tc_core2_isr_dummy_entry_140>
	...

800131a0 <osEE_tc_core2_isr_dummy_entry_141>:
800131a0:	3c 00       	j 800131a0 <osEE_tc_core2_isr_dummy_entry_141>
	...

800131c0 <osEE_tc_core2_isr_dummy_entry_142>:
800131c0:	3c 00       	j 800131c0 <osEE_tc_core2_isr_dummy_entry_142>
	...

800131e0 <osEE_tc_core2_isr_dummy_entry_143>:
800131e0:	3c 00       	j 800131e0 <osEE_tc_core2_isr_dummy_entry_143>
	...

80013200 <osEE_tc_core2_isr_dummy_entry_144>:
80013200:	3c 00       	j 80013200 <osEE_tc_core2_isr_dummy_entry_144>
	...

80013220 <osEE_tc_core2_isr_dummy_entry_145>:
80013220:	3c 00       	j 80013220 <osEE_tc_core2_isr_dummy_entry_145>
	...

80013240 <osEE_tc_core2_isr_dummy_entry_146>:
80013240:	3c 00       	j 80013240 <osEE_tc_core2_isr_dummy_entry_146>
	...

80013260 <osEE_tc_core2_isr_dummy_entry_147>:
80013260:	3c 00       	j 80013260 <osEE_tc_core2_isr_dummy_entry_147>
	...

80013280 <osEE_tc_core2_isr_dummy_entry_148>:
80013280:	3c 00       	j 80013280 <osEE_tc_core2_isr_dummy_entry_148>
	...

800132a0 <osEE_tc_core2_isr_dummy_entry_149>:
800132a0:	3c 00       	j 800132a0 <osEE_tc_core2_isr_dummy_entry_149>
	...

800132c0 <osEE_tc_core2_isr_dummy_entry_150>:
800132c0:	3c 00       	j 800132c0 <osEE_tc_core2_isr_dummy_entry_150>
	...

800132e0 <osEE_tc_core2_isr_dummy_entry_151>:
800132e0:	3c 00       	j 800132e0 <osEE_tc_core2_isr_dummy_entry_151>
	...

80013300 <osEE_tc_core2_isr_dummy_entry_152>:
80013300:	3c 00       	j 80013300 <osEE_tc_core2_isr_dummy_entry_152>
	...

80013320 <osEE_tc_core2_isr_dummy_entry_153>:
80013320:	3c 00       	j 80013320 <osEE_tc_core2_isr_dummy_entry_153>
	...

80013340 <osEE_tc_core2_isr_dummy_entry_154>:
80013340:	3c 00       	j 80013340 <osEE_tc_core2_isr_dummy_entry_154>
	...

80013360 <osEE_tc_core2_isr_dummy_entry_155>:
80013360:	3c 00       	j 80013360 <osEE_tc_core2_isr_dummy_entry_155>
	...

80013380 <osEE_tc_core2_isr_dummy_entry_156>:
80013380:	3c 00       	j 80013380 <osEE_tc_core2_isr_dummy_entry_156>
	...

800133a0 <osEE_tc_core2_isr_dummy_entry_157>:
800133a0:	3c 00       	j 800133a0 <osEE_tc_core2_isr_dummy_entry_157>
	...

800133c0 <osEE_tc_core2_isr_dummy_entry_158>:
800133c0:	3c 00       	j 800133c0 <osEE_tc_core2_isr_dummy_entry_158>
	...

800133e0 <osEE_tc_core2_isr_dummy_entry_159>:
800133e0:	3c 00       	j 800133e0 <osEE_tc_core2_isr_dummy_entry_159>
	...

80013400 <osEE_tc_core2_isr_dummy_entry_160>:
80013400:	3c 00       	j 80013400 <osEE_tc_core2_isr_dummy_entry_160>
	...

80013420 <osEE_tc_core2_isr_dummy_entry_161>:
80013420:	3c 00       	j 80013420 <osEE_tc_core2_isr_dummy_entry_161>
	...

80013440 <osEE_tc_core2_isr_dummy_entry_162>:
80013440:	3c 00       	j 80013440 <osEE_tc_core2_isr_dummy_entry_162>
	...

80013460 <osEE_tc_core2_isr_dummy_entry_163>:
80013460:	3c 00       	j 80013460 <osEE_tc_core2_isr_dummy_entry_163>
	...

80013480 <osEE_tc_core2_isr_dummy_entry_164>:
80013480:	3c 00       	j 80013480 <osEE_tc_core2_isr_dummy_entry_164>
	...

800134a0 <osEE_tc_core2_isr_dummy_entry_165>:
800134a0:	3c 00       	j 800134a0 <osEE_tc_core2_isr_dummy_entry_165>
	...

800134c0 <osEE_tc_core2_isr_dummy_entry_166>:
800134c0:	3c 00       	j 800134c0 <osEE_tc_core2_isr_dummy_entry_166>
	...

800134e0 <osEE_tc_core2_isr_dummy_entry_167>:
800134e0:	3c 00       	j 800134e0 <osEE_tc_core2_isr_dummy_entry_167>
	...

80013500 <osEE_tc_core2_isr_dummy_entry_168>:
80013500:	3c 00       	j 80013500 <osEE_tc_core2_isr_dummy_entry_168>
	...

80013520 <osEE_tc_core2_isr_dummy_entry_169>:
80013520:	3c 00       	j 80013520 <osEE_tc_core2_isr_dummy_entry_169>
	...

80013540 <osEE_tc_core2_isr_dummy_entry_170>:
80013540:	3c 00       	j 80013540 <osEE_tc_core2_isr_dummy_entry_170>
	...

80013560 <osEE_tc_core2_isr_dummy_entry_171>:
80013560:	3c 00       	j 80013560 <osEE_tc_core2_isr_dummy_entry_171>
	...

80013580 <osEE_tc_core2_isr_dummy_entry_172>:
80013580:	3c 00       	j 80013580 <osEE_tc_core2_isr_dummy_entry_172>
	...

800135a0 <osEE_tc_core2_isr_dummy_entry_173>:
800135a0:	3c 00       	j 800135a0 <osEE_tc_core2_isr_dummy_entry_173>
	...

800135c0 <osEE_tc_core2_isr_dummy_entry_174>:
800135c0:	3c 00       	j 800135c0 <osEE_tc_core2_isr_dummy_entry_174>
	...

800135e0 <osEE_tc_core2_isr_dummy_entry_175>:
800135e0:	3c 00       	j 800135e0 <osEE_tc_core2_isr_dummy_entry_175>
	...

80013600 <osEE_tc_core2_isr_dummy_entry_176>:
80013600:	3c 00       	j 80013600 <osEE_tc_core2_isr_dummy_entry_176>
	...

80013620 <osEE_tc_core2_isr_dummy_entry_177>:
80013620:	3c 00       	j 80013620 <osEE_tc_core2_isr_dummy_entry_177>
	...

80013640 <osEE_tc_core2_isr_dummy_entry_178>:
80013640:	3c 00       	j 80013640 <osEE_tc_core2_isr_dummy_entry_178>
	...

80013660 <osEE_tc_core2_isr_dummy_entry_179>:
80013660:	3c 00       	j 80013660 <osEE_tc_core2_isr_dummy_entry_179>
	...

80013680 <osEE_tc_core2_isr_dummy_entry_180>:
80013680:	3c 00       	j 80013680 <osEE_tc_core2_isr_dummy_entry_180>
	...

800136a0 <osEE_tc_core2_isr_dummy_entry_181>:
800136a0:	3c 00       	j 800136a0 <osEE_tc_core2_isr_dummy_entry_181>
	...

800136c0 <osEE_tc_core2_isr_dummy_entry_182>:
800136c0:	3c 00       	j 800136c0 <osEE_tc_core2_isr_dummy_entry_182>
	...

800136e0 <osEE_tc_core2_isr_dummy_entry_183>:
800136e0:	3c 00       	j 800136e0 <osEE_tc_core2_isr_dummy_entry_183>
	...

80013700 <osEE_tc_core2_isr_dummy_entry_184>:
80013700:	3c 00       	j 80013700 <osEE_tc_core2_isr_dummy_entry_184>
	...

80013720 <osEE_tc_core2_isr_dummy_entry_185>:
80013720:	3c 00       	j 80013720 <osEE_tc_core2_isr_dummy_entry_185>
	...

80013740 <osEE_tc_core2_isr_dummy_entry_186>:
80013740:	3c 00       	j 80013740 <osEE_tc_core2_isr_dummy_entry_186>
	...

80013760 <osEE_tc_core2_isr_dummy_entry_187>:
80013760:	3c 00       	j 80013760 <osEE_tc_core2_isr_dummy_entry_187>
	...

80013780 <osEE_tc_core2_isr_dummy_entry_188>:
80013780:	3c 00       	j 80013780 <osEE_tc_core2_isr_dummy_entry_188>
	...

800137a0 <osEE_tc_core2_isr_dummy_entry_189>:
800137a0:	3c 00       	j 800137a0 <osEE_tc_core2_isr_dummy_entry_189>
	...

800137c0 <osEE_tc_core2_isr_dummy_entry_190>:
800137c0:	3c 00       	j 800137c0 <osEE_tc_core2_isr_dummy_entry_190>
	...

800137e0 <osEE_tc_core2_isr_dummy_entry_191>:
800137e0:	3c 00       	j 800137e0 <osEE_tc_core2_isr_dummy_entry_191>
	...

80013800 <osEE_tc_core2_isr_dummy_entry_192>:
80013800:	3c 00       	j 80013800 <osEE_tc_core2_isr_dummy_entry_192>
	...

80013820 <osEE_tc_core2_isr_dummy_entry_193>:
80013820:	3c 00       	j 80013820 <osEE_tc_core2_isr_dummy_entry_193>
	...

80013840 <osEE_tc_core2_isr_dummy_entry_194>:
80013840:	3c 00       	j 80013840 <osEE_tc_core2_isr_dummy_entry_194>
	...

80013860 <osEE_tc_core2_isr_dummy_entry_195>:
80013860:	3c 00       	j 80013860 <osEE_tc_core2_isr_dummy_entry_195>
	...

80013880 <osEE_tc_core2_isr_dummy_entry_196>:
80013880:	3c 00       	j 80013880 <osEE_tc_core2_isr_dummy_entry_196>
	...

800138a0 <osEE_tc_core2_isr_dummy_entry_197>:
800138a0:	3c 00       	j 800138a0 <osEE_tc_core2_isr_dummy_entry_197>
	...

800138c0 <osEE_tc_core2_isr_dummy_entry_198>:
800138c0:	3c 00       	j 800138c0 <osEE_tc_core2_isr_dummy_entry_198>
	...

800138e0 <osEE_tc_core2_isr_dummy_entry_199>:
800138e0:	3c 00       	j 800138e0 <osEE_tc_core2_isr_dummy_entry_199>
	...

80013900 <osEE_tc_core2_isr_dummy_entry_200>:
80013900:	3c 00       	j 80013900 <osEE_tc_core2_isr_dummy_entry_200>
	...

80013920 <osEE_tc_core2_isr_dummy_entry_201>:
80013920:	3c 00       	j 80013920 <osEE_tc_core2_isr_dummy_entry_201>
	...

80013940 <osEE_tc_core2_isr_dummy_entry_202>:
80013940:	3c 00       	j 80013940 <osEE_tc_core2_isr_dummy_entry_202>
	...

80013960 <osEE_tc_core2_isr_dummy_entry_203>:
80013960:	3c 00       	j 80013960 <osEE_tc_core2_isr_dummy_entry_203>
	...

80013980 <osEE_tc_core2_isr_dummy_entry_204>:
80013980:	3c 00       	j 80013980 <osEE_tc_core2_isr_dummy_entry_204>
	...

800139a0 <osEE_tc_core2_isr_dummy_entry_205>:
800139a0:	3c 00       	j 800139a0 <osEE_tc_core2_isr_dummy_entry_205>
	...

800139c0 <osEE_tc_core2_isr_dummy_entry_206>:
800139c0:	3c 00       	j 800139c0 <osEE_tc_core2_isr_dummy_entry_206>
	...

800139e0 <osEE_tc_core2_isr_dummy_entry_207>:
800139e0:	3c 00       	j 800139e0 <osEE_tc_core2_isr_dummy_entry_207>
	...

80013a00 <osEE_tc_core2_isr_dummy_entry_208>:
80013a00:	3c 00       	j 80013a00 <osEE_tc_core2_isr_dummy_entry_208>
	...

80013a20 <osEE_tc_core2_isr_dummy_entry_209>:
80013a20:	3c 00       	j 80013a20 <osEE_tc_core2_isr_dummy_entry_209>
	...

80013a40 <osEE_tc_core2_isr_dummy_entry_210>:
80013a40:	3c 00       	j 80013a40 <osEE_tc_core2_isr_dummy_entry_210>
	...

80013a60 <osEE_tc_core2_isr_dummy_entry_211>:
80013a60:	3c 00       	j 80013a60 <osEE_tc_core2_isr_dummy_entry_211>
	...

80013a80 <osEE_tc_core2_isr_dummy_entry_212>:
80013a80:	3c 00       	j 80013a80 <osEE_tc_core2_isr_dummy_entry_212>
	...

80013aa0 <osEE_tc_core2_isr_dummy_entry_213>:
80013aa0:	3c 00       	j 80013aa0 <osEE_tc_core2_isr_dummy_entry_213>
	...

80013ac0 <osEE_tc_core2_isr_dummy_entry_214>:
80013ac0:	3c 00       	j 80013ac0 <osEE_tc_core2_isr_dummy_entry_214>
	...

80013ae0 <osEE_tc_core2_isr_dummy_entry_215>:
80013ae0:	3c 00       	j 80013ae0 <osEE_tc_core2_isr_dummy_entry_215>
	...

80013b00 <osEE_tc_core2_isr_dummy_entry_216>:
80013b00:	3c 00       	j 80013b00 <osEE_tc_core2_isr_dummy_entry_216>
	...

80013b20 <osEE_tc_core2_isr_dummy_entry_217>:
80013b20:	3c 00       	j 80013b20 <osEE_tc_core2_isr_dummy_entry_217>
	...

80013b40 <osEE_tc_core2_isr_dummy_entry_218>:
80013b40:	3c 00       	j 80013b40 <osEE_tc_core2_isr_dummy_entry_218>
	...

80013b60 <osEE_tc_core2_isr_dummy_entry_219>:
80013b60:	3c 00       	j 80013b60 <osEE_tc_core2_isr_dummy_entry_219>
	...

80013b80 <osEE_tc_core2_isr_dummy_entry_220>:
80013b80:	3c 00       	j 80013b80 <osEE_tc_core2_isr_dummy_entry_220>
	...

80013ba0 <osEE_tc_core2_isr_dummy_entry_221>:
80013ba0:	3c 00       	j 80013ba0 <osEE_tc_core2_isr_dummy_entry_221>
	...

80013bc0 <osEE_tc_core2_isr_dummy_entry_222>:
80013bc0:	3c 00       	j 80013bc0 <osEE_tc_core2_isr_dummy_entry_222>
	...

80013be0 <osEE_tc_core2_isr_dummy_entry_223>:
80013be0:	3c 00       	j 80013be0 <osEE_tc_core2_isr_dummy_entry_223>
	...

80013c00 <osEE_tc_core2_isr_dummy_entry_224>:
80013c00:	3c 00       	j 80013c00 <osEE_tc_core2_isr_dummy_entry_224>
	...

80013c20 <osEE_tc_core2_isr_dummy_entry_225>:
80013c20:	3c 00       	j 80013c20 <osEE_tc_core2_isr_dummy_entry_225>
	...

80013c40 <osEE_tc_core2_isr_dummy_entry_226>:
80013c40:	3c 00       	j 80013c40 <osEE_tc_core2_isr_dummy_entry_226>
	...

80013c60 <osEE_tc_core2_isr_dummy_entry_227>:
80013c60:	3c 00       	j 80013c60 <osEE_tc_core2_isr_dummy_entry_227>
	...

80013c80 <osEE_tc_core2_isr_dummy_entry_228>:
80013c80:	3c 00       	j 80013c80 <osEE_tc_core2_isr_dummy_entry_228>
	...

80013ca0 <osEE_tc_core2_isr_dummy_entry_229>:
80013ca0:	3c 00       	j 80013ca0 <osEE_tc_core2_isr_dummy_entry_229>
	...

80013cc0 <osEE_tc_core2_isr_dummy_entry_230>:
80013cc0:	3c 00       	j 80013cc0 <osEE_tc_core2_isr_dummy_entry_230>
	...

80013ce0 <osEE_tc_core2_isr_dummy_entry_231>:
80013ce0:	3c 00       	j 80013ce0 <osEE_tc_core2_isr_dummy_entry_231>
	...

80013d00 <osEE_tc_core2_isr_dummy_entry_232>:
80013d00:	3c 00       	j 80013d00 <osEE_tc_core2_isr_dummy_entry_232>
	...

80013d20 <osEE_tc_core2_isr_dummy_entry_233>:
80013d20:	3c 00       	j 80013d20 <osEE_tc_core2_isr_dummy_entry_233>
	...

80013d40 <osEE_tc_core2_isr_dummy_entry_234>:
80013d40:	3c 00       	j 80013d40 <osEE_tc_core2_isr_dummy_entry_234>
	...

80013d60 <osEE_tc_core2_isr_dummy_entry_235>:
80013d60:	3c 00       	j 80013d60 <osEE_tc_core2_isr_dummy_entry_235>
	...

80013d80 <osEE_tc_core2_isr_dummy_entry_236>:
80013d80:	3c 00       	j 80013d80 <osEE_tc_core2_isr_dummy_entry_236>
	...

80013da0 <osEE_tc_core2_isr_dummy_entry_237>:
80013da0:	3c 00       	j 80013da0 <osEE_tc_core2_isr_dummy_entry_237>
	...

80013dc0 <osEE_tc_core2_isr_dummy_entry_238>:
80013dc0:	3c 00       	j 80013dc0 <osEE_tc_core2_isr_dummy_entry_238>
	...

80013de0 <osEE_tc_core2_isr_dummy_entry_239>:
80013de0:	3c 00       	j 80013de0 <osEE_tc_core2_isr_dummy_entry_239>
	...

80013e00 <osEE_tc_core2_isr_dummy_entry_240>:
80013e00:	3c 00       	j 80013e00 <osEE_tc_core2_isr_dummy_entry_240>
	...

80013e20 <osEE_tc_core2_isr_dummy_entry_241>:
80013e20:	3c 00       	j 80013e20 <osEE_tc_core2_isr_dummy_entry_241>
	...

80013e40 <osEE_tc_core2_isr_dummy_entry_242>:
80013e40:	3c 00       	j 80013e40 <osEE_tc_core2_isr_dummy_entry_242>
	...

80013e60 <osEE_tc_core2_isr_dummy_entry_243>:
80013e60:	3c 00       	j 80013e60 <osEE_tc_core2_isr_dummy_entry_243>
	...

80013e80 <osEE_tc_core2_isr_dummy_entry_244>:
80013e80:	3c 00       	j 80013e80 <osEE_tc_core2_isr_dummy_entry_244>
	...

80013ea0 <osEE_tc_core2_isr_dummy_entry_245>:
80013ea0:	3c 00       	j 80013ea0 <osEE_tc_core2_isr_dummy_entry_245>
	...

80013ec0 <osEE_tc_core2_isr_dummy_entry_246>:
80013ec0:	3c 00       	j 80013ec0 <osEE_tc_core2_isr_dummy_entry_246>
	...

80013ee0 <osEE_tc_core2_isr_dummy_entry_247>:
80013ee0:	3c 00       	j 80013ee0 <osEE_tc_core2_isr_dummy_entry_247>
	...

80013f00 <osEE_tc_core2_isr_dummy_entry_248>:
80013f00:	3c 00       	j 80013f00 <osEE_tc_core2_isr_dummy_entry_248>
	...

80013f20 <osEE_tc_core2_isr_dummy_entry_249>:
80013f20:	3c 00       	j 80013f20 <osEE_tc_core2_isr_dummy_entry_249>
	...

80013f40 <osEE_tc_core2_isr_dummy_entry_250>:
80013f40:	3c 00       	j 80013f40 <osEE_tc_core2_isr_dummy_entry_250>
	...

80013f60 <osEE_tc_core2_isr_dummy_entry_251>:
80013f60:	3c 00       	j 80013f60 <osEE_tc_core2_isr_dummy_entry_251>
	...

80013f80 <osEE_tc_core2_isr_dummy_entry_252>:
80013f80:	3c 00       	j 80013f80 <osEE_tc_core2_isr_dummy_entry_252>
	...

80013fa0 <osEE_tc_core2_isr_dummy_entry_253>:
80013fa0:	3c 00       	j 80013fa0 <osEE_tc_core2_isr_dummy_entry_253>
	...

80013fc0 <osEE_tc_core2_isr_dummy_entry_254>:
80013fc0:	3c 00       	j 80013fc0 <osEE_tc_core2_isr_dummy_entry_254>
	...

80013fe0 <osEE_tc_core2_isr_dummy_entry_255>:
80013fe0:	3c 00       	j 80013fe0 <osEE_tc_core2_isr_dummy_entry_255>
	...
