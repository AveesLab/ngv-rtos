
erika3app.elf:     file format elf32-tricore
erika3app.elf
architecture: TriCore:V1_6_1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000020

Program Header:
    LOAD off    0x00004020 vaddr 0x80000020 paddr 0x80000020 align 2**14
         filesz 0x00013fe0 memsz 0x00013fe0 flags r-x
    LOAD off    0x00018000 vaddr 0x70000000 paddr 0x80014000 align 2**14
         filesz 0x00000860 memsz 0x00000860 flags rw-
    LOAD off    0x0001c000 vaddr 0x50000000 paddr 0x80014860 align 2**14
         filesz 0x00000058 memsz 0x00000058 flags rw-
    LOAD off    0x0001c860 vaddr 0x70000860 paddr 0x80014860 align 2**14
         filesz 0x00000000 memsz 0x00000310 flags rw-
    LOAD off    0x0001c058 vaddr 0x50000058 paddr 0x800148b8 align 2**14
         filesz 0x00000000 memsz 0x00000004 flags rw-
    LOAD off    0x0001e600 vaddr 0x5001a600 paddr 0x800148b8 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x0001f700 vaddr 0x5001b700 paddr 0x800148b8 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00020000 vaddr 0x60000000 paddr 0x800148b8 align 2**14
         filesz 0x00000058 memsz 0x00000058 flags rw-
    LOAD off    0x00023c00 vaddr 0x5001bc00 paddr 0x800148c0 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00020058 vaddr 0x60000058 paddr 0x80014910 align 2**14
         filesz 0x00000000 memsz 0x00000004 flags rw-
    LOAD off    0x00022600 vaddr 0x6001a600 paddr 0x80014910 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00023700 vaddr 0x6001b700 paddr 0x80014910 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00020b70 vaddr 0x70000b70 paddr 0x80014910 align 2**14
         filesz 0x00000074 memsz 0x00000074 flags rw-
    LOAD off    0x00023c00 vaddr 0x6001bc00 paddr 0x80014940 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00020be4 vaddr 0x70000be4 paddr 0x80014984 align 2**14
         filesz 0x00000000 memsz 0x0000001c flags rw-
    LOAD off    0x00024000 vaddr 0xb0000000 paddr 0x80014984 align 2**14
         filesz 0x00000000 memsz 0x00000028 flags rw-
    LOAD off    0x00024600 vaddr 0x70018600 paddr 0x80014988 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00021700 vaddr 0x70019700 paddr 0x80014988 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00021c00 vaddr 0x70019c00 paddr 0x800149c0 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .startup      00000006  80000020  80000020  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000011f0  80000028  80000028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .CPU2.bss     00000004  50000058  800148b8  0001c058  2**2
                  ALLOC, CPU2
  3 .CPU1.bss     00000004  60000058  80014910  00020058  2**2
                  ALLOC, CPU1
  4 .CPU0.bss     0000001c  70000be4  80014984  00020be4  2**2
                  ALLOC, CPU0
  5 .bss          00000310  70000860  80014860  0001c860  2**3
                  ALLOC
  6 .lmu_bss      00000028  b0000000  80014984  00024000  2**2
                  ALLOC
  7 .CPU2.data    00000058  50000000  80014860  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, CPU2
  8 .CPU1.data    00000058  60000000  800148b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, CPU1
  9 .CPU0.data    00000074  70000b70  80014910  00020b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA, CPU0
 10 .data         00000860  70000000  80014000  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 11 .traptab      00000100  80001300  80001300  00005300  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .ctors        00000008  80001400  80001400  00005400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .dtors        00000008  80001408  80001408  00005408  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .inttab_cpu0  00002000  80002000  80002000  00006000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text         0000b9a0  80004000  80004000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .inttab_cpu1  00002000  80010000  80010000  00014000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .inttab_cpu2  00002000  80012000  80012000  00016000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .CPU2.ustack  00001000  5001a600  800148b8  0001e600  2**3
                  ALLOC, CPU2
 19 .CPU2.istack  00000400  5001b700  800148b8  0001f700  2**3
                  ALLOC, CPU2
 20 .CPU2.csa     00002000  5001bc00  800148c0  00023c00  2**6
                  ALLOC, CPU2
 21 .CPU1.ustack  00001000  6001a600  80014910  00022600  2**3
                  ALLOC, CPU1
 22 .CPU1.istack  00000400  6001b700  80014910  00023700  2**3
                  ALLOC, CPU1
 23 .CPU1.csa     00002000  6001bc00  80014940  00023c00  2**6
                  ALLOC, CPU1
 24 .CPU0.ustack  00001000  70018600  80014988  00024600  2**3
                  ALLOC, CPU0
 25 .CPU0.istack  00000400  70019700  80014988  00021700  2**3
                  ALLOC, CPU0
 26 .CPU0.csa     00002000  70019c00  800149c0  00021c00  2**6
                  ALLOC, CPU0
 27 .comment      00000053  00000000  00000000  00020be4  2**0
                  CONTENTS, READONLY
 28 .debug_aranges 00000d08  00000000  00000000  00020c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_info   000cf65b  00000000  00000000  00021940  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_abbrev 0000c560  00000000  00000000  000f0f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_line   0000f206  00000000  00000000  000fd4fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 32 .debug_frame  00002350  00000000  00000000  0010c704  2**2
                  CONTENTS, READONLY, DEBUGGING
 33 .debug_str    00002373  00000000  00000000  0010ea54  2**0
                  CONTENTS, READONLY, DEBUGGING
 34 .debug_loc    000173c7  00000000  00000000  00110dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 35 .debug_ranges 000017a8  00000000  00000000  0012818e  2**0
                  CONTENTS, READONLY, DEBUGGING
 36 .version_info 0004c67a  00000000  00000000  00129936  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80000020 l    d  .startup	00000000 .startup
80000028 l    d  .rodata	00000000 .rodata
50000058 l    d  .CPU2.bss	00000000 .CPU2.bss
60000058 l    d  .CPU1.bss	00000000 .CPU1.bss
70000be4 l    d  .CPU0.bss	00000000 .CPU0.bss
70000860 l    d  .bss	00000000 .bss
b0000000 l    d  .lmu_bss	00000000 .lmu_bss
50000000 l    d  .CPU2.data	00000000 .CPU2.data
60000000 l    d  .CPU1.data	00000000 .CPU1.data
70000b70 l    d  .CPU0.data	00000000 .CPU0.data
70000000 l    d  .data	00000000 .data
80001300 l    d  .traptab	00000000 .traptab
80001400 l    d  .ctors	00000000 .ctors
80001408 l    d  .dtors	00000000 .dtors
80002000 l    d  .inttab_cpu0	00000000 .inttab_cpu0
80004000 l    d  .text	00000000 .text
80010000 l    d  .inttab_cpu1	00000000 .inttab_cpu1
80012000 l    d  .inttab_cpu2	00000000 .inttab_cpu2
5001a600 l    d  .CPU2.ustack	00000000 .CPU2.ustack
5001b700 l    d  .CPU2.istack	00000000 .CPU2.istack
5001bc00 l    d  .CPU2.csa	00000000 .CPU2.csa
6001a600 l    d  .CPU1.ustack	00000000 .CPU1.ustack
6001b700 l    d  .CPU1.istack	00000000 .CPU1.istack
6001bc00 l    d  .CPU1.csa	00000000 .CPU1.csa
70018600 l    d  .CPU0.ustack	00000000 .CPU0.ustack
70019700 l    d  .CPU0.istack	00000000 .CPU0.istack
70019c00 l    d  .CPU0.csa	00000000 .CPU0.csa
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .version_info	00000000 .version_info
00000000 l    df *ABS*	00000000 ee_tc_cstart.c
00000000 l    df *ABS*	00000000 asw.c
70000860 l     O .bss	00000004 i.15855
00000000 l    df *ABS*	00000000 bsw.c
00000000 l    df *ABS*	00000000 ee_applcfg.c
b0000004 l     O .lmu_bss	00000004 osEE_kernel_lock
b0000000 l     O .lmu_bss	00000004 osEE_kernel_barrier
80000240 l     O .rodata	0000001c osEE_tdb_ptr_array
8000020c l     O .rodata	00000004 osEE_counter_db_ptr_array
800001ec l     O .rodata	00000004 osEE_alarm_db_ptr_array
800001b0 l     O .rodata	00000018 osEE_spinlock_db_array
8000033c l     O .rodata	00000008 osEE_sdb_array_core2
50000054 l     O .CPU2.data	00000004 0x60 osEE_scb_array_core2
50000058 l     O .CPU2.bss	00000004 0x60 osEE_lock_core2
8000025c l     O .rodata	00000040 osEE_tdb_array_core2
80000220 l     O .rodata	00000008 osEE_autostart_tdb_array_core2
800001c8 l     O .rodata	00000008 osEE_autostart_trigger_db_core2
50000024 l     O .CPU2.data	00000008 0x60 osEE_sn_array_core2
80000344 l     O .rodata	00000008 osEE_sdb_array_core1
60000054 l     O .CPU1.data	00000004 0x40 osEE_scb_array_core1
60000058 l     O .CPU1.bss	00000004 0x40 osEE_lock_core1
8000029c l     O .rodata	00000040 osEE_tdb_array_core1
8000022c l     O .rodata	00000008 osEE_autostart_tdb_array_core1
800001d0 l     O .rodata	00000008 osEE_autostart_trigger_db_core1
60000024 l     O .CPU1.data	00000008 0x40 osEE_sn_array_core1
8000034c l     O .rodata	00000008 osEE_sdb_array_core0
70000be0 l     O .CPU0.data	00000004 0x20 osEE_scb_array_core0
70000be4 l     O .CPU0.bss	00000004 0x20 osEE_lock_core0
800002dc l     O .rodata	00000060 osEE_tdb_array_core0
80000238 l     O .rodata	00000008 osEE_autostart_tdb_array_core0
800001d8 l     O .rodata	00000008 osEE_autostart_trigger_db_core0
70000b94 l     O .CPU0.data	00000010 0x20 osEE_sn_array_core0
b0000010 l     O .lmu_bss	00000018 osEE_spinlock_cb_array
b000000c l     O .lmu_bss	00000004 osEE_spinlock_S1
b0000008 l     O .lmu_bss	00000004 osEE_spinlock_S2
800001e0 l     O .rodata	0000000c osEE_trigger_autostart_info_core0_OSDEFAULTAPPMODE
800001f0 l     O .rodata	0000001c osEE_alarm_db_array_core0
70000be8 l     O .CPU0.bss	00000010 0x20 osEE_alarm_cb_array_core0
80000210 l     O .rodata	00000010 osEE_counter_db_array_core0
70000bf8 l     O .CPU0.bss	00000008 0x20 osEE_counter_cb_array_core0
80000228 l     O .rodata	00000004 osEE_tdb_ptr_autostart_core2_OSDEFAULTAPPMODE
80000234 l     O .rodata	00000004 osEE_tdb_ptr_autostart_core1_OSDEFAULTAPPMODE
5000002c l     O .CPU2.data	00000028 0x60 osEE_tcb_array_core2
6000002c l     O .CPU1.data	00000028 0x40 osEE_tcb_array_core1
70000ba4 l     O .CPU0.data	0000003c 0x20 osEE_tcb_array_core0
00000000 l    df *ABS*	00000000 IfxVadc.c
80000354 l     O .rodata	00000006 CSWTCH.25
00000000 l    df *ABS*	00000000 IfxVadc_cfg.c
00000000 l    df *ABS*	00000000 IfxAsclin_PinMap.c
00000000 l    df *ABS*	00000000 IfxAsclin_cfg.c
00000000 l    df *ABS*	00000000 IfxPort_cfg.c
00000000 l    df *ABS*	00000000 IfxScuCcu.c
70000018 l     O .data	00000004 IfxScuCcu_xtalFrequency
80005e88 l     F .text	00000034 IfxScuCcu_wait
80000c28 l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
00000000 l    df *ABS*	00000000 IfxScu_PinMap.c
00000000 l    df *ABS*	00000000 IfxVadc_Adc.c
80000ec4 l     O .rodata	00000040 IfxVadc_Adc_masterIndex
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 impure.c
70000434 l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 vfprintf.c
80000f64 l     O .rodata	00000010 blanks.4035
80000f54 l     O .rodata	00000010 zeroes.4036
00000000 l    df *ABS*	00000000 dtoa.c
8000dbe8 l     F .text	0000011a quorem
00000000 l    df *ABS*	00000000 locale.c
80000f90 l     O .rodata	00000038 lconv
00000000 l    df *ABS*	00000000 mprec.c
80000fc8 l     O .rodata	0000000c p05.2553
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_sbrk.c
70000858 l     O .data	00000004 heap_top.2289
00000000 l    df *ABS*	00000000 ee_tc_trapvec.c
00000000 l    df *ABS*	00000000 ee_tc_intvec.c
800095f6 l     F .text	000000c6 osEE_tc_isr2_wrapper
00000000 l    df *ABS*	00000000 IfxAsclin.c
00000000 l    df *ABS*	00000000 IfxAsclin_Asc.c
00000000 l    df *ABS*	00000000 IfxPort.c
00000000 l    df *ABS*	00000000 IfxScuEru.c
00000000 l    df *ABS*	00000000 IfxScuWdt.c
00000000 l    df *ABS*	00000000 Ifx_CircularBuffer.c
00000000 l    df *ABS*	00000000 Ifx_Fifo.c
00000000 l    df *ABS*	00000000 ee_tc_system.c
80009126 l     F .text	00000054 osEE_tc_stm_us_ticks
70000b20 l     O .bss	00000004 osEE_tc_stm_freq_khz
00000000 l    df *ABS*	00000000 ee_oo_api_osek.c
800096bc l     F .text	0000001e osEE_shutdown_os
00000000 l    df *ABS*	00000000 ee_oo_sched_entry_points.c
8000ab28 l     F .text	0000004c osEE_release_all_m
00000000 l    df *ABS*	00000000 ee_oo_scheduler.c
00000000 l    df *ABS*	00000000 ee_oo_kernel.c
00000000 l    df *ABS*	00000000 ee_oo_sched_partitioned.c
8000ae66 l     F .text	00000026 osEE_scheduler_task_insert_rq
00000000 l    df *ABS*	00000000 ee_oo_counter.c
00000000 l    df *ABS*	00000000 ee_oo_alarm.c
00000000 l    df *ABS*	00000000 ee_std_change_context.c
00000000 l    df *ABS*	00000000 ee_tc_hal.c
00000000 l    df *ABS*	00000000 ee_tc_hal_mc.c
00000000 l    df *ABS*	00000000 ee_tc_ctx.c
8000b7e8 l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
8000b9c0 l     F .text	0000019c _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_exit.c
00000000 l    df *ABS*	00000000 libos.c
00000000 l    df *ABS*	00000000 libos_abort.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udivdi3.c
00000000 l    df *ABS*	00000000 umoddi3.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udiv6432.c
00000000 l    df *ABS*	00000000 Bsp.c
00000000 l    df *ABS*	00000000 CompilerGnuc.c
00000000 l    df *ABS*	00000000 IfxCpu.c
00000000 l    df *ABS*	00000000 IfxCpu_Irq.c
00000000 l    df *ABS*	00000000 IfxCpu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc.c
00000000 l    df *ABS*	00000000 IfxStdIf_DPipe.c
00000000 l    df *ABS*	00000000 IfxStm.c
00000000 l    df *ABS*	00000000 IfxStm_cfg.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 IfxScu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc_cfg.c
8000055c g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
70000b70 g     O .inttab_cpu2	00000001 __HEAP
8000567c g     F .text	00000062 IfxAsclin_Asc_write
80004f1a g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
80006fa4 g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
80013bc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_222
80012000 g     F .inttab_cpu2	00002000 __INTTAB2
800071d8 g     F .text	00000036 IfxScuWdt_setCpuEndinit
80000fd4 g     O .rodata	00000028 __mprec_tinytens
80011820 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_193
80000c6c g     O .rodata	00000010 IfxScu_WDT1LCK_P20_7_OUT
80003260 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_147
800041a4 g     F .text	000000e8 mdelay
800021c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_14
80012fa0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_125
800103a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_29
80002200 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_16
8000bf64 g     F .text	0000001a .hidden __ashldi3
80011ae0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_215
80011460 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_163
80006f3a g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogReload
80010c40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_98
800106a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_53
800028e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_71
80009d2a g     F .text	00000062 TerminateTask
80010d00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_104
80004f96 g     F .text	00000006 IfxAsclin_Asc_resetSendCount
8000035c g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
80011380 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_156
70000008 g     O .data	00000010 osEE_kcb_var
80011560 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_171
8000050c g     O .rodata	00000010 IfxAsclin2_TX_P14_2_OUT
80003000 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_128
80010e00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_112
800116e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_183
800038e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_199
80011180 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_140
80007f82 g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80002fe0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_127
80002e80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_116
800037c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_190
80004a46 g     F .text	00000014 IfxVadc_setScan
8000f608 g     F .text	00000040 .hidden __eqdf2
800055ac g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
80006ece g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
800046b8 g     F .text	00000010 IfxVadc_getQueueStatus
800102a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_21
80013320 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_153
80012e80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_116
80011280 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_148
800136c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_182
00000000 g       *ABS*	00000000 __HEAP_SIZE
80008238 g     F .text	00000176 Ifx_Fifo_read
8000b524 g     F .text	00000066 osEE_alarm_get
80004aa0 g     F .text	0000001c IfxAsclin_disableModule
800035e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_175
800008ac g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
8000ac46 g     F .text	00000062 osEE_idle_hook_wrapper
6001a600 g       .CPU1.ustack	00000000 __USTACK1_AREA_END
80010220 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_17
8000865a g     F .text	0000046c osEE_tc_core0_start
800027e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_63
800125c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_46
80002380 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_28
80012600 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_48
800080fe g     F .text	00000004 Ifx_Fifo_destroy
80012560 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_43
80003320 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_153
70019b00 g     O .CPU0.istack	00000000 __ISTACK0
80007412 g     F .text	00000108 IfxVadc_Adc_getChannelConfig
80012ac0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_86
80010800 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_64
80004668 g     F .text	00000018 IfxVadc_getAdcAnalogFrequency
70000000 g       *ABS*	00000000 __DSPR0_START
8000b45c g     F .text	0000006a osEE_alarm_set_abs
80012b20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_89
80003920 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_201
8000b848 g     F .text	00000024 osEE_hal_save_ctx_and_ready2stacked
80012100 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_8
80010740 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_58
80003f80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_252
80006744 g     F .text	00000012 IfxScuCcu_initErayPllConfig
8000b58a g     F .text	00000028 osEE_change_context_from_running
80003b00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_216
80003c80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_228
80004f0c g     F .text	0000000e IfxAsclin_Asc_getWriteCount
80002080 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_4
800008cc g     O .rodata	00000010 IfxAsclin3_RXA_P15_7_IN
70000b70 g     O .CPU0.data	00000024 0x20 osEE_ccb_var_core0
80013140 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_138
80003580 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_172
800115a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_173
80010b60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_91
80013f00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_248
80011540 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_170
80006e64 g     F .text	00000032 IfxScuEru_setInterruptGatingPattern
80005058 g     F .text	00000014 IfxAsclin_Asc_clearTx
800056fa g     F .text	000000c6 IfxAsclin_Asc_stdIfDPipeInit
80002840 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_66
80013ae0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_215
8000c748 g     F .text	00000002 __malloc_unlock
80004ef6 g     F .text	0000000a IfxAsclin_Asc_getReadEvent
80013600 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_176
80004000 g     F .text	0000000e TimerISR
800083e4 g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007d4a g     F .text	000000e8 IfxVadc_Adc_initModule
80009fa0 g     F .text	00000092 SetRelAlarm
80002280 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_20
80011e20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_241
80004582 g     F .text	0000003c IfxVadc_disablePostCalibration
80004766 g     F .text	00000028 IfxVadc_getSrcAddress
800047b2 g     F .text	00000024 IfxVadc_initialiseAdcConverterClock
80004bca g     F .text	00000024 IfxAsclin_getOvsFrequency
80013f60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_251
80012940 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_74
8000a312 g     F .text	000000ba SetEvent
800132c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_150
80012e20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_113
8000751a g     F .text	00000038 IfxVadc_Adc_getChannelConversionTime
80010240 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_18
80002d00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_104
800130c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_134
8000a686 g     F .text	0000000e GetNumberOfActivatedCores
80006e26 g     F .text	00000012 IfxScuEru_setEventFlag
80010600 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_48
80002800 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_64
50000000 g     O .CPU2.data	00000024 0x60 osEE_ccb_var_core2
80003ba0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_221
800030c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_134
8000ab74 g     F .text	00000026 osEE_scheduler_task_wrapper_restore
80003e60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_243
80000e74 g     O .rodata	00000010 IfxScu_EVRWUPA_P14_1_IN
8000067c g     O .rodata	00000010 IfxAsclin3_SLSO_P12_1_OUT
70019600 g     O .CPU0.ustack	00000000 __USTACK0
8000f150 g     F .text	00000050 memmove
800023a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_29
80002fa0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_125
80002e60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_115
70018600 g       .CPU0.ustack	00000000 __USTACK0_AREA_END
80013c20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_225
80010000 g     F .inttab_cpu1	00002000 __INTTAB1
800139c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_206
80012cc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_102
8000ea16 g     F .text	00000056 _Balloc
80000e54 g     O .rodata	00000010 IfxScu_EXTCLK0_P23_1_OUT
80011400 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_160
80010d40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_106
800138e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_199
80002980 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_76
8000096c g     O .rodata	00000010 IfxAsclin1_RXE_P11_10_IN
8000074c g     O .rodata	00000010 IfxAsclin3_SCLK_P15_8_OUT
80010b80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_92
8000605e g     F .text	0000004a IfxScuCcu_getModuleFrequency
80003040 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_130
800061d0 g     F .text	000003be IfxScuCcu_init
800100a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_5
8000f688 g     F .text	00000040 .hidden __gtdf2
80002700 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_56
8000f5ec  w    F .text	0000000a __errno
800022a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_21
8000972e g     F .text	00000056 SuspendAllInterrupts
80004f9c g     F .text	00000008 IfxAsclin_Asc_canReadCount
80011600 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_176
00001000 g       *ABS*	00000000 __USTACK0_SIZE
80002ba0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_93
80011ca0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_229
80011c80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_228
8000094c g     O .rodata	00000010 IfxAsclin1_RXG_P02_3_IN
80011be0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_223
8000b8b6 g     F .text	00000066 osEE_hal_terminate_ctx
800003fc g     O .rodata	00000010 IfxAsclin3_TX_P32_3_OUT
8000ad1a g     F .text	00000048 osEE_sn_priority_insert
80003ca0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_229
80012920 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_73
8000aa5c g     F .text	000000cc TryToGetSpinlock
80009f06 g     F .text	0000009a GetTaskState
80003120 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_137
80007f40 g     F .text	00000020 Ifx_CircularBuffer_get32
8000adf6 g     F .text	0000004e osEE_task_event_set_mask
800126a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_53
8000048c g     O .rodata	00000010 IfxAsclin3_TX_P11_1_OUT
800008bc g     O .rodata	00000010 IfxAsclin3_RXB_P11_0_IN
8000720e g     F .text	0000009e IfxScuWdt_initCpuWatchdog
800134c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_166
80005960 g     F .text	00000092 IfxPort_setGroupModeOutput
80012700 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_56
80012c40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_98
80012ba0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_93
80012260 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_19
80013260 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_147
80003440 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_162
80010a80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_84
80010520 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_41
5001dc00 g     O .CPU2.csa	00000000 __CSA2_END
00000400 g       *ABS*	00000000 __ISTACK1_SIZE
80010f20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_121
80005dae g     F .text	00000072 IfxScuCcu_getPllFrequency
70000b60 g     O .bss	00000004 errno
8000bed8 g     F .text	0000001e .hidden __make_dp
80003400 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_160
8000a14e g     F .text	0000009a GetAlarm
0001a600 g       *ABS*	00000000 __USTACK1_OFFSET
800112c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_150
80001360 g       .traptab	00000000 osEE_tc_trap_context
800124a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_37
80007390 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
8000085c g     O .rodata	00000010 IfxAsclin3_RXG_P21_3_IN
800009fc g     O .rodata	00000010 IfxAsclin2_RTS_P33_4_OUT
800136e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_183
80013700 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_184
80010300 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_24
80011140 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_138
800006bc g     O .rodata	00000010 IfxAsclin2_SLSO_P02_3_OUT
80003f60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_251
8000bff8 g     F .text	00000016 .hidden __make_fp
800127a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_61
800042dc g     F .text	0000007e initVADCChannels
800029a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_77
8000042c g     O .rodata	00000010 IfxAsclin3_TX_P22_0_OUT
80010c20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_97
80010680 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_52
80003d40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_234
80012da0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_109
80000d54 g     O .rodata	00000014 IfxScu_REQ15_P14_1_IN
80002420 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_33
80002f40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_122
80002460 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_35
80000dcc g     O .rodata	00000014 IfxScu_REQ0_P15_4_IN
8000a694 g     F .text	000000b8 StartCore
80013d00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_232
80006e96 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
80013200 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_144
800135c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_174
800039a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_205
8000a428 g     F .text	00000092 ClearEvent
80006122 g     F .text	00000042 IfxScuCcu_getCpuFrequency
80002c40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_98
80010860 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_67
80011b40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_218
800035c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_174
8000ab9a g     F .text	000000ac osEE_scheduler_task_wrapper_run
80011b20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_217
80010ce0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_103
800034e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_167
8000079c g     O .rodata	00000010 IfxAsclin3_SCLK_P00_0_OUT
80013280 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_148
80012d80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_108
800131e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_143
80000acc g     O .rodata	00000080 IfxPort_cfg_indexMap
800051fe g     F .text	000003ae IfxAsclin_Asc_initModule
80003e40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_242
800135a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_173
800130a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_133
80010480 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_36
80010140 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_10
80011640 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_178
80003380 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_156
8000b138 g     F .text	0000003e osEE_scheduler_task_preemption_point
80011680 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_180
8000e9fa g     F .text	0000001c memcpy
80002b00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_88
80003240 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_146
80011d20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_233
800136a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_181
80002560 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_43
80011220 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_145
8000400e g     F .text	00000064 FuncTask1
800110e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_135
8000a4ba g     F .text	00000070 GetCounterValue
80013c60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_227
80002480 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_36
8000ca44 g     F .text	000011a4 _svfprintf_r
80003bc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_222
8000be90 g     F .text	00000048 .hidden __floatsidf
80007552 g     F .text	0000023e IfxVadc_Adc_getGroupConfig
80006cf8 g     F .text	00000026 IfxScuEru_enablePatternDetectionTrigger
8000ad62 g     F .text	0000000e osEE_scheduler_rq_insert
80003020 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_129
8000f708 g     F .text	00000040 .hidden __ltdf2
8000475c g     F .text	0000000a IfxVadc_getScanStatus
80001410 g       .dtors	00000000 __DTOR_END__
80006756 g     F .text	00000076 IfxScuCcu_setCpuFrequency
80006e38 g     F .text	0000002c IfxScuEru_setFlagPatternDetection
8000b5d2 g     F .text	00000026 osEE_idle_task_terminate
80010d60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_107
80000db8 g     O .rodata	00000014 IfxScu_REQ10_P14_3_IN
800009ec g     O .rodata	00000010 IfxAsclin3_RTS_P00_9_OUT
80011da0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_237
80012340 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_26
80012060 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_3
80010c80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_100
80003620 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_177
800128a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_69
80012860 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_67
80003c60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_227
8000081c g     O .rodata	00000010 IfxAsclin1_SCLK_P20_10_OUT
80012300 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_24
800130e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_135
800123a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_29
8000efbc g     F .text	00000042 __fpclassifyd
800035a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_173
800105e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_47
80006f06 g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogPassword
800110c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_134
800114c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_166
800070a0 g     F .text	0000005c IfxScuWdt_enableCpuWatchdog
80010920 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_73
8000aff2 g     F .text	000000a4 osEE_scheduler_task_unblocked
80011fe0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_255
80013a60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_211
8000c292 g     F .text	0000000c malloc
80003700 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_184
80002340 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_26
80006b68 g     F .text	00000028 IfxScuEru_clearInputChannelConfiguration
800104a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_37
00000000 g       *ABS*	00000000 NULL
8000087c g     O .rodata	00000010 IfxAsclin3_RXF_P21_6_IN
80009504 g     F .text	0000001e osEE_tc_stm_set_sr0_next_match
800036c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_182
80002a60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_83
80002600 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_48
80002b20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_89
800031a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_141
80001340 g       .traptab	00000000 osEE_tc_trap_instruction
80001024 g     O .rodata	000000c8 __mprec_tens
70000000 g     O .data	00000004 g_vadcChannelIDs
80002d80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_108
80002580 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_44
80003280 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_148
800138c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_198
80005040 g     F .text	00000008 IfxAsclin_Asc_canWriteCount
8000051c g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
8000060c g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
80002120 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_9
80012e00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_112
8000c7c6 g     F .text	00000016 vsnprintf
80003da0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_237
80000a4c g     O .rodata	00000010 IfxAsclin3_CTSA_P00_12_IN
80013b00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_216
80011940 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_202
80013b60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_219
70000b58 g     O .bss	00000004 __malloc_top_pad
8000437c g     F .text	00000026 readADCValue
80013d20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_233
80003780 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_188
8000b770 g     F .text	0000002a osEE_get_core
80012020 g       .inttab_cpu2	00000000 osEE_tc_core2_isr2_entry_1
80013300 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_152
80012e60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_115
800067cc g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005aec g     F .text	00000064 IfxPort_setPinModeLvdsHigh
8000b86c g     F .text	0000002c osEE_hal_ready2stacked
80000d2c g     O .rodata	00000014 IfxScu_REQ1_P15_8_IN
80002de0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_111
80011200 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_144
800080ae g     F .text	00000050 Ifx_CircularBuffer_write32
8000e9d8 g     F .text	0000000a _localeconv_r
80013160 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_139
80002ce0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_103
80004072 g     F .text	0000004a FuncTask2
80004b90 g     F .text	00000022 IfxAsclin_getIndex
8000eba8 g     F .text	00000010 __i2b
80009d8c g     F .text	00000090 Schedule
80004bee g     F .text	00000016 IfxAsclin_getShiftFrequency
80007790 g     F .text	000001ec IfxVadc_Adc_initChannel
80002060 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_3
8000041c g     O .rodata	00000010 IfxAsclin3_TX_P22_1_OUT
80006a2e g     F .text	00000112 IfxScuCcu_switchToBackupClock
80012660 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_51
8000083c g     O .rodata	00000010 IfxAsclin0_SCLK_P15_2_OUT
800070fc g     F .text	00000072 IfxScuWdt_enableSafetyWatchdog
80011720 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_185
8000c74a g     F .text	0000001e _sbrk_r
80010940 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_74
800111c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_142
800005cc g     O .rodata	00000010 IfxAsclin1_TX_P11_12_OUT
800114a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_165
80000dec g     O .rodata	0000000c IfxScu_HWCFG5_P10_6_IN
80012c00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_96
800005dc g     O .rodata	00000010 IfxAsclin1_TX_P02_2_OUT
80002740 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_58
80011860 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_195
80013a20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_209
80002ec0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_118
80003800 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_192
80011ea0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_245
70000888 g     O .bss	0000000c g_vadcGroup
80006cac g     F .text	00000026 IfxScuEru_enableAutoClear
80013c80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_228
80010d80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_108
80002be0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_95
800124e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_39
800102e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_23
80013680 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_180
8000082c g     O .rodata	00000010 IfxAsclin1_SCLK_P15_0_OUT
800113c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_158
8000c120 g     F .text	000000ac .hidden __unpack_d
00002700 g     O *ABS*	00000000 __TRICORE_DERIVATE_NAME__
8000a9b0 g     F .text	000000ac ReleaseSpinlock
80005b92 g     F .text	0000003c IfxPort_setPinPadDriver
80013220 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_145
80013e60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_243
80010100 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_8
80011a20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_209
80013de0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_239
8000058c g     O .rodata	00000010 IfxAsclin1_TX_P15_4_OUT
800116a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_181
70000b54 g     O .bss	00000004 __malloc_max_sbrked_mem
80013620 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_177
80003e80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_244
80002020 g       .inttab_cpu0	00000000 osEE_tc_core0_isr2_entry_1
80003f20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_249
800013a0 g       .traptab	00000000 osEE_tc_trap_assertion
80003360 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_155
80010840 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_66
80012440 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_34
800123e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_31
80011040 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_130
80008000 g       *ABS*	00000000 __A1_MEM
8000b98e g     F .text	00000032 .hidden __extendsfdf2
80012980 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_76
800129e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_79
80011240 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_146
80004b06 g     F .text	00000016 IfxAsclin_getAddress
80002940 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_74
8000bb5c g     F .text	00000038 .hidden __adddf3
80009b76 g     F .text	00000022 GetActiveApplicationMode
80002d20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_105
800060a8 g     F .text	0000007a IfxScuCcu_getSriFrequency
80009784 g     F .text	00000040 ResumeAllInterrupts
800119a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_205
80012740 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_58
80012640 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_50
800069ae g     F .text	00000080 IfxScuCcu_setSriFrequency
800121e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_15
80003860 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_195
8000f836 g     F .text	00000026 .hidden __umoddi3
80012be0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_95
70019c00 g     O .CPU0.csa	00000000 __CSA0
80002760 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_59
80000a1c g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80002c00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_96
80000f18 g     O .rodata	00000004 _global_impure_ptr
80006bb8 g     F .text	00000036 IfxScuEru_connectTrigger
70000868 g     O .bss	00000020 g_vadcChannel
80003fc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_254
80006164 g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000f1b0 g     F .text	000003f0 _realloc_r
800007fc g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80013020 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_129
80013fa0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_253
80004c40 g     F .text	00000012 IfxAsclin_read16
80005894 g     F .text	0000003c IfxPort_enableEmergencyStop
8000044c g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
80013880 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_196
80011a60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_211
8000f796 g     F .text	000000a0 .hidden __udivdi3
80013ee0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_247
800009cc g     O .rodata	00000010 IfxAsclin0_RXB_P15_3_IN
8000045c g     O .rodata	00000010 IfxAsclin3_TX_P20_0_OUT
70008000 g       *ABS*	00000000 __A0_MEM
80003c00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_224
8000aca8 g     F .text	00000072 osEE_scheduler_core_rq_preempt_stk
80013420 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_161
6001dc00 g     O .CPU1.csa	00000000 __CSA1_END
8000061c g     O .rodata	00000010 IfxAsclin0_TX_P14_1_OUT
80000ffc g     O .rodata	00000028 __mprec_bigtens
80013440 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_162
8000f5f6 g     F .text	00000012 abort
80012f20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_121
8000bf32 g     F .text	00000032 .hidden __floatunsidf
80010040 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_2
80012500 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_40
8000ee08 g     F .text	00000042 __mcmp
800037a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_189
80009b98 g     F .text	000000a4 ActivateTask
8000506c g     F .text	0000001c IfxAsclin_Asc_read
80000d68 g     O .rodata	00000014 IfxScu_REQ14_P02_1_IN
800118a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_197
80012a60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_83
80012a20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_81
80002140 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_10
80006c14 g     F .text	00000026 IfxScuEru_disableFallingEdgeDetection
80012fc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_126
80002180 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_12
80011d80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_236
80013f40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_250
80011160 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_139
80008102 g     F .text	0000003a Ifx_Fifo_init
80011f80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_252
80011d60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_235
70000b68  w    O .bss	00000004 _my_errno
800138a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_197
80010bc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_94
8000065c g     O .rodata	00000010 IfxAsclin3_SLSO_P21_2_OUT
800057c0 g     F .text	00000030 IfxPort_getAddress
80010e20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_113
800028a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_69
00019c00 g       *ABS*	00000000 __CSA0_OFFSET
8000a7f0 g     F .text	00000100 ShutdownAllCores
80003080 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_132
80000a7c g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
80009e8e g     F .text	00000078 GetTaskID
80010aa0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_85
80010540 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_42
800065a2 g     F .text	000001a2 IfxScuCcu_initErayPll
800004fc g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
80010f00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_120
80010060 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_3
80002f80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_124
80003980 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_204
8000049c g     O .rodata	00000010 IfxAsclin3_TX_P11_0_OUT
80000bd4 g     O .rodata	00000054 IfxScuCcu_defaultClockConfig
80002dc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_110
80010fa0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_125
0001bc00 g       *ABS*	00000000 __CSA1_OFFSET
800020c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_6
80006d6a g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80003140 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_138
80000e10 g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
800097c4 g     F .text	00000070 SuspendOSInterrupts
80013520 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_169
80006fd6 g     F .text	0000005a IfxScuWdt_disableCpuWatchdog
8000bf7e g     F .text	0000007a .hidden __unpack_f
8000944c g     F .text	00000034 osEE_tc_stm_set_clockpersec
80013b40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_218
8000435a g     F .text	00000022 initADC
800027a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_61
8000b176 g     F .text	00000058 osEE_scheduler_task_set_running
800125a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_45
b0008000 g       *ABS*	00000000 _SMALL_DATA4_
80009522 g     F .text	0000008e osEE_tc_stm_set_sr1
80012b00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_88
80012a00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_80
80003a20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_209
800032e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_151
8000089c g     O .rodata	00000010 IfxAsclin3_RXD_P32_2_IN
80004444 g     F .text	0000000c asclin0TxISR
8000077c g     O .rodata	00000010 IfxAsclin3_SCLK_P11_1_OUT
80007030 g     F .text	00000070 IfxScuWdt_disableSafetyWatchdog
80003720 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_185
8000738c g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
800008fc g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
800007ac g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000eb00 g     F .text	00000042 __hi0bits
8000099c g     O .rodata	00000010 IfxAsclin1_RXB_P15_5_IN
80013ea0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_245
8000056c g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
8000b284 g     F .text	00000152 osEE_counter_increment
8000057c g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
80003a60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_211
8000f748 g     F .text	0000004e .hidden __fixdfsi
80010340 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_26
80011d00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_232
80010c60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_99
800106c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_54
8000ae8c g     F .text	000000d6 osEE_scheduler_task_activated
80005ebc g     F .text	00000078 IfxScuCcu_getBbbFrequency
800120c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_6
80011b60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_219
0001bc00 g       *ABS*	00000000 __CSA2_OFFSET
0001e000 g       *ABS*	00000000 __DSPR2_SIZE
80003b20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_217
800004ac g     O .rodata	00000010 IfxAsclin3_TX_P00_1_OUT
8000062c g     O .rodata	00000010 IfxAsclin0_TX_P14_0_OUT
6001a600 g     O .CPU1.ustack	00000000 __USTACK1_END
8000619a g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000c7c g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
80006f6e g     F .text	00000036 IfxScuWdt_clearCpuEndinit
80013580 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_172
80011660 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_179
800108a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_69
80011020 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_129
80003e20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_241
800007cc g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004d36 g     F .text	00000182 IfxAsclin_setBitTiming
80013180 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_140
80013740 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_186
80011b80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_220
80000e34 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
8000063c g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
80012d20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_105
8000046c g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
80010f40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_122
8000097c g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000df8 g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80013100 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_136
800101c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_14
800073d0 g     F .text	00000026 IfxVadc_Adc_deInitGroup
8000b91c g     F .text	00000026 .hidden __lshrdi3
80012140 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_10
80011980 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_204
8000088c g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
80003be0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_223
80012b40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_90
80012200 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_16
80013ce0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_231
800027c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_62
800009bc g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
800116c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_182
80002360 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_27
8000071c g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
80007992 g     F .text	0000038a IfxVadc_Adc_initGroup
800033c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_158
800039c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_206
800133a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_157
80003340 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_154
80011840 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_194
8000ecd2 g     F .text	0000007c __pow5mult
80011e40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_242
80013060 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_131
80013b80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_220
80011e80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_244
70000898 g     O .bss	0000000c g_ERUconfig
800117a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_189
80003fe0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_255
80002d60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_107
800107a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_61
800036a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_181
80011440 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_162
80011260 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_147
800106e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_55
800113a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_157
80003640 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_178
80006c60 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
80003160 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_139
800006dc g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
80010ca0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_101
800137e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_191
8000b096 g     F .text	000000a2 osEE_scheduler_task_terminated
800004bc g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
800034c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_166
8000c1cc g     F .text	000000c6 .hidden __pack_f
800026c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_54
8000a0c4 g     F .text	0000008a CancelAlarm
80007fa2 g     F .text	0000005e Ifx_CircularBuffer_read8
80002b60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_91
80011120 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_137
800123c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_30
800031c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_142
80000a0c g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
80011c60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_227
80012960 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_75
80008df6 g     F .text	00000330 osEE_tc_core2_start
00002700 g       *ABS*	00000000 __TRICORE_DERIVATE_MEMORY_MAP__
80010260 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_19
80008ac6 g     F .text	00000330 osEE_tc_core1_start
80010620 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_49
80002260 g       .inttab_cpu0	00000000 osEE_tc_core0_isr2_entry_19
800071be g     F .text	0000001a IfxScuWdt_initConfig
80013ec0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_246
800024e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_39
80003c20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_225
80001400 g       .ctors	00000000 __CTOR_LIST__
800126e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_55
80011500 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_168
800093a8 g     F .text	000000a4 osEE_tc_get_fsource
80004c52 g     F .text	00000012 IfxAsclin_read32
80000d90 g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
800072ac g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
800111e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_143
80000a3c g     O .rodata	00000010 IfxAsclin0_RTS_P14_7_OUT
8000090c g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
80009480 g     F .text	00000084 osEE_tc_stm_set_sr0
80000c8c g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
800007dc g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
800104e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_39
80013980 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_204
80012480 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_36
80011f20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_249
8000b898 g     F .text	0000001e osEE_tc_change_context_from_isr2_end
8000e9e2 g     F .text	00000018 memchr
80013940 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_202
80010760 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_59
80012fe0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_127
8000c896 g     F .text	000001ac _free_r
80005634 g     F .text	00000048 IfxAsclin_Asc_initiateTransmission
80011480 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_164
800127e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_63
80012280 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_20
8000a672 g     F .text	00000014 GetISRID
800118e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_199
80002960 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_75
8000b80a g     F .text	00000024 osEE_hal_save_ctx_and_restore_ctx
80010ba0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_93
80003d80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_236
8000b3d8 g     F .text	00000084 osEE_alarm_set_rel
80013e40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_242
800023e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_31
800103e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_31
800026e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_55
80001380 g       .traptab	00000000 osEE_tc_trap_bus
80013d60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_235
80002040 g       .inttab_cpu0	00000000 osEE_tc_core0_isr2_entry_2
80005bd0 g     F .text	000000f8 IfxScuCcu_calculateSysPllDividers
80002f60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_123
80002f00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_120
80013ca0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_229
8000b79a g     F .text	0000004e osEE_hal_start_core
80000a5c g     O .rodata	00000010 IfxAsclin2_CTSB_P33_5_IN
70000020 g     O .data	00000004 __malloc_sbrk_base
80000020 g     F .startup	00000006 _start
80002b80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_92
80013ba0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_221
800032a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_149
80002e20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_113
80002d40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_106
80012d00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_104
8000813c g     F .text	00000022 Ifx_Fifo_create
8000718e g     F .text	0000001c IfxScuWdt_getCpuWatchdogEndInit
80003680 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_180
00001000 g       *ABS*	00000000 __USTACK2_SIZE
70000864 g     O .bss	00000004 shared
800013e0 g       .traptab	00000000 osEE_tc_trap_nmi
80003a80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_212
80003d00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_232
8000ed4e g     F .text	000000ba __lshift
80010ea0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_117
800132a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_149
800007bc g     O .rodata	00000010 IfxAsclin2_SCLK_P33_7_OUT
80010980 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_76
800073f6 g     F .text	0000001c IfxVadc_Adc_disableModule
80011920 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_201
80010a20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_81
00002000 g       *ABS*	00000000 __CSA_SIZE
8000effe g     F .text	000000f0 __ssprint_r
80013660 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_179
80004680 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
80013040 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_130
5001bc00 g     O .CPU2.csa	00000000 __CSA2
80002a40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_82
800101a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_13
8000b6fa g     F .text	00000076 osEE_hal_sync_barrier
800025e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_47
800032c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_150
80000158 g     O .rodata	0000002c osEE_cdb_var_core1
7001bc00 g     O .CPU0.csa	00000000 __CSA0_END
80002ac0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_86
80004504 g     F .text	00000038 IfxVadc_enableAccess
80002520 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_41
80010320 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_25
800127c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_62
80012780 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_60
80002400 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_32
80003540 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_170
8000ebb8 g     F .text	0000011a __multiply
800100c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_6
8000a8f0 g     F .text	000000c0 GetSpinlock
80002440 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_34
00000001 g       *ABS*	00000000 _.
80006d78 g     F .text	00000012 IfxScuEru_getEventFlagStatus
8000069c g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
800004ec g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
800049cc g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006c3a g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
80003a00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_208
70000b28 g     O .bss	00000028 __malloc_current_mallinfo
800135e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_175
80010880 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_68
8000ef14 g     F .text	000000a8 __d2b
80010d20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_105
80013920 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_201
80011de0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_239
80012ca0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_101
80012380 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_28
80012840 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_66
800122e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_23
80000cc8 g     O .rodata	00000014 IfxScu_REQ6_P02_0_IN
80013800 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_192
80007f60 g     F .text	00000022 Ifx_CircularBuffer_get16
80003560 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_171
80011080 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_132
800005bc g     O .rodata	00000010 IfxAsclin1_TX_P14_10_OUT
80005d6a g     F .text	00000044 IfxScuCcu_getPllErayVcoFrequency
80001400 g       .ctors	00000000 __EH_FRAME_END__
80006bee g     F .text	00000026 IfxScuEru_disableAutoClear
8000685a g     F .text	00000050 IfxScuCcu_setPll2ErayFrequency
6001bb00 g     O .CPU1.istack	00000000 __ISTACK1
80010420 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_33
80005fc4 g     F .text	00000022 IfxScuCcu_getBaud2Frequency
8000075c g     O .rodata	00000010 IfxAsclin3_SCLK_P15_6_OUT
80003ea0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_245
8000f85c g     F .text	000000a6 .hidden __fpcmp_parts_d
800039e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_207
80003760 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_187
80002300 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_24
80004aea g     F .text	0000001c IfxAsclin_enableModule
80013360 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_155
80012ec0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_118
0001a600 g       *ABS*	00000000 __USTACK2_OFFSET
80002ae0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_87
8000ad70 g     F .text	00000028 osEE_scheduler_core_pop_running
80010780 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_60
800128c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_70
80002540 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_42
8000b5f8 g     F .text	00000102 osEE_cpu_startos
80011ac0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_214
800020e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_7
80013840 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_194
80006d1e g     F .text	00000026 IfxScuEru_enableRisingEdgeDetection
8000093c g     O .rodata	00000010 IfxAsclin2_RXA_P14_3_IN
800118c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_198
800030a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_133
80013f20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_249
80003460 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_163
80003de0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_239
800134a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_165
800057f0 g     F .text	00000022 IfxPort_getIndex
8000a3cc g     F .text	0000005c GetEvent
80003d60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_235
800051e2 g     F .text	0000001c IfxAsclin_Asc_disableModule
800109c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_78
800119c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_206
80013ac0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_214
8000b942 g     F .text	0000004c .hidden __floatundisf
6001b600 g     O .CPU1.ustack	00000000 __USTACK1
80013340 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_154
80012ea0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_117
80004c64 g     F .text	00000012 IfxAsclin_read8
8000af62 g     F .text	00000090 osEE_scheduler_task_insert
80011bc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_222
8000bd78 g     F .text	00000118 .hidden __divdf3
80000e94 g     O .rodata	00000010 IfxScu_EMGSTOPA_P33_8_IN
80000e44 g     O .rodata	00000010 IfxScu_EXTCLK1_P11_12_OUT
800056de g     F .text	0000001c IfxAsclin_Asc_blockingWrite
80007e32 g     F .text	0000003a IfxVadc_Adc_initModuleConfig
70000028 g     O .data	00000408 __malloc_av_
80009e1c g     F .text	00000072 ShutdownOS
8000c77c g     F .text	0000004a _vsnprintf_r
70018600 g     O .CPU0.ustack	00000000 __USTACK0_END
80010ae0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_87
80010580 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_44
800137c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_190
80011580 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_172
8000bbd4 g     F .text	000001a4 .hidden __muldf3
80003ce0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_231
8000084c g     O .rodata	00000010 IfxAsclin0_SCLK_P14_0_OUT
80012180 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_12
80010e60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_115
80013480 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_164
80012f40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_122
80002fc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_126
800104c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_38
800033a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_157
800108c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_70
80002320 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_25
80002680 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_52
80000e84 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000c746 g     F .text	00000002 __malloc_lock
8000f5b0 g     F .text	0000003c sbrk
80005cc8 g     F .text	0000000e IfxScuCcu_getOsc0Frequency
800044cc g     F .text	00000038 IfxVadc_disableAccess
80000000 g       .startup	00000000 BootModeHeader0
800120e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_7
800013c0 g       .traptab	00000000 osEE_tc_trap_system
80000e04 g     O .rodata	0000000c IfxScu_HWCFG3_BMI_P14_3_IN
80010f80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_124
80004c2c g     F .text	00000014 IfxAsclin_getSrcPointerTx
80010ec0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_118
800046c8 g     F .text	00000094 IfxVadc_getResultBasedOnRequestSource
8000f0ee g     F .text	00000062 _calloc_r
80003aa0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_213
800115e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_175
00002000 g       *ABS*	00000000 __CSA0_SIZE
80005fe6 g     F .text	00000078 IfxScuCcu_getSpbFrequency
8000092c g     O .rodata	00000010 IfxAsclin2_RXB_P02_1_IN
80010de0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_111
80003500 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_168
800045be g     F .text	000000aa IfxVadc_enableGroupSync
80006dd2 g     F .text	00000012 IfxScuEru_getPatternDetectionResult
80012d60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_107
800131c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_142
800103c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_30
80005088 g     F .text	0000009e IfxAsclin_Asc_isrTransmit
800004dc g     O .rodata	00000010 IfxAsclin2_TX_P33_8_OUT
80012420 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_33
8000f1a0 g     F .text	00000010 memset
80011ec0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_246
80003900 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_200
80004450 g     F .text	0000007c main
8000716e g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
80010380 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_28
800129c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_78
800021e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_15
80002220 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_17
80006d44 g     F .text	00000026 IfxScuEru_enableTriggerPulse
80010f60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_123
80002900 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_72
70000b50 g     O .bss	00000004 __malloc_max_total_mem
80004abc g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000012c g     O .rodata	0000002c osEE_cdb_var_core2
8000f902 g     F .text	0000009c .hidden __udiv6432
00000400 g       *ABS*	00000000 __ISTACK_SIZE
80012680 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_52
80005fa4 g     F .text	00000020 IfxScuCcu_getBaud1Frequency
80012720 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_57
80007eae g     F .text	00000092 IfxVadc_Adc_initExternalMultiplexerMode
80000d40 g     O .rodata	00000014 IfxScu_REQ16_P15_1_IN
80003820 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_193
80010960 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_75
700008a4 g     O .bss	0000027c g_AsclinAsc
80010a00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_80
80012c20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_97
80000de0 g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
8000ad98 g     F .text	00000040 osEE_task_activated
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_119
80002720 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_57
5001bb00 g     O .CPU2.istack	00000000 __ISTACK2
80000100 g     O .rodata	0000002c osEE_kdb_var
800033e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_159
800139a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_205
80010280 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_20
80013c00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_224
80002bc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_94
80003b60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_219
00018600 g       *ABS*	00000000 __USTACK0_OFFSET
800071aa g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
80012ce0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_103
8000bef6 g     F .text	0000003c .hidden __truncdfsf2
80011420 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_161
8000dd04 g     F .text	00000cd2 _dtoa_r
0001b700 g       *ABS*	00000000 __ISTACK1_OFFSET
8000c2ac g     F .text	0000049a _malloc_r
80011f40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_250
80010200 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_16
8000064c g     O .rodata	00000010 IfxAsclin3_SLSO_P21_6_OUT
80005b50 g     F .text	00000042 IfxPort_setPinModeLvdsMedium
8000091c g     O .rodata	00000010 IfxAsclin2_RXC_P02_10_IN
80011aa0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_213
80011ee0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_247
800051bc g     F .text	00000026 IfxAsclin_Asc_blockingRead
8000b1d0 g     F .text	00000062 osEE_counter_insert_abs_trigger
800134e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_167
8000070c g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
80004ef0 g     F .text	00000006 IfxAsclin_Asc_getReadCount
80008000 g       *ABS*	00000000 __A8_MEM
800006fc g     O .rodata	00000010 IfxAsclin3_SCLK_P33_2_OUT
b0008000 g       *ABS*	00000000 __A9_MEM
80012540 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_42
80004ecc g     F .text	00000012 IfxAsclin_write32
80011880 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_196
80012aa0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_85
800112e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_151
800107e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_63
80002240 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_18
80002e00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_112
80013000 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_128
8000412e g     F .text	00000076 printfSerial
80012f60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_123
80002da0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_109
800036e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_183
80010720 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_57
80002920 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_73
80000f04 g     O .rodata	00000014 .hidden __thenan_df
80010ee0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_119
8000c7dc g     F .text	000000ba _malloc_trim_r
80001408 g       .ctors	00000000 __CTOR_END__
80012de0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_111
80008000 g     O *ABS*	00000000 _SMALL_DATA2_
80010b40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_90
8000052c g     O .rodata	00000010 IfxAsclin2_TX_P02_9_OUT
800048d0 g     F .text	000000aa IfxVadc_getChannelConversionTime
50000000 g       *ABS*	00000000 __DSPR2_START
80003100 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_136
8000453c g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
80002860 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_67
80013b20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_217
80013da0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_237
80011fc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_254
80007e6c g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004bb2 g     F .text	00000018 IfxAsclin_getPdFrequency
800113e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_159
8000469e g     F .text	0000001a IfxVadc_getBackgroundScanStatus
80013d40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_234
80001408 g       .dtors	00000000 __DTOR_LIST__
60000000 g       *ABS*	00000000 __DSPR1_START
00001000 g       *ABS*	00000000 __USTACK1_SIZE
8000497a g     F .text	00000052 IfxVadc_resetKernel
80000a2c g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80003200 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_144
80012c80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_100
80000e28 g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
60000000 g     O .CPU1.data	00000024 0x40 osEE_ccb_var_core1
8000f648 g     F .text	00000040 .hidden __nedf2
80004ce4 g     F .text	00000052 IfxAsclin_setBaudrateBitFields
80002820 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_65
80003dc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_238
800114e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_167
80005e20 g     F .text	00000044 IfxScuCcu_getPllVcoFrequency
800068fa g     F .text	000000b4 IfxScuCcu_setSpbFrequency
80012580 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_44
80010dc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_110
800125e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_47
80006dae g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000c5c g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
80012620 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_49
80012520 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_41
80000b4c g     O .rodata	00000080 IfxPort_cfg_esrMasks
800133c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_158
80012ae0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_87
8000086c g     O .rodata	00000010 IfxAsclin3_RXG_P21_2_IN
80012a80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_84
80012a40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_82
80002e40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_114
80005048 g     F .text	00000010 IfxAsclin_Asc_clearRx
80011d40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_234
80000a9c g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80000eb4 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
8000586a g     F .text	0000002a IfxPort_setESR
80013820 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_193
8000066c g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
80010be0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_95
80010640 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_50
800005ac g     O .rodata	00000010 IfxAsclin1_TX_P15_0_OUT
80003480 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_164
80013e80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_244
80010120 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_9
80002880 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_68
80010ac0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_86
80010560 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_43
800111a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_141
80011cc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_230
80000a8c g     O .rodata	00000010 IfxAsclin1_CTSA_P20_7_IN
800022c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_22
80013540 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_170
80013be0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_223
80010fe0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_127
80000d04 g     O .rodata	00000014 IfxScu_REQ3_P10_3_IN
80013760 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_187
8000059c g     O .rodata	00000010 IfxAsclin1_TX_P15_1_OUT
8000a52a g     F .text	0000008c GetElapsedValue
70000430 g     O .data	00000004 _impure_ptr
80011c00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_224
80012900 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_72
80005812 g     F .text	00000028 IfxPort_resetESR
80002100 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_8
80004f24 g     F .text	00000072 IfxAsclin_Asc_isrError
80003ae0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_215
80013120 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_137
8000478e g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
800034a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_165
800119e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_207
80012b80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_92
80012240 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_18
80010e40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_114
80002780 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_60
80010a60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_83
80010500 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_40
80004c18 g     F .text	00000014 IfxAsclin_getSrcPointerRx
8000a1e8 g     F .text	00000062 GetAlarmBase
800005fc g     O .rodata	00000010 IfxAsclin0_TX_P15_3_OUT
800133e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_159
80004c04 g     F .text	00000014 IfxAsclin_getSrcPointerEr
00002000 g       *ABS*	00000000 __CSA1_SIZE
80003fa0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_253
8000054c g     O .rodata	00000010 IfxAsclin1_TX_P33_13_OUT
8000098c g     O .rodata	00000010 IfxAsclin1_RXC_P20_9_IN
80003f40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_250
800096da g     F .text	0000001e DisableAllInterrupts
80010360 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_27
5001a600 g     O .CPU2.ustack	00000000 __USTACK2_END
80008050 g     F .text	0000005e Ifx_CircularBuffer_write8
80005126 g     F .text	00000096 IfxAsclin_Asc_isrReceive
80003220 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_145
800058d0 g     F .text	00000090 IfxPort_setGroupModeInput
8000815e g     F .text	000000da Ifx_Fifo_canReadCount
80012040 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_2
00001000 g       *ABS*	00000000 __USTACK_SIZE
800117e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_191
80003600 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_176
80010cc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_102
80009c3c g     F .text	000000ee ChainTask
80002ca0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_101
800029c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_78
80010c00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_96
80010660 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_51
80011340 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_154
80011060 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_131
80011520 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_169
80006df2 g     F .text	00000034 IfxScuEru_selectExternalInput
80013a40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_210
80013640 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_178
80006cd2 g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
80002c60 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_99
80011ba0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_221
80012080 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_4
80011c40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_226
80000a6c g     O .rodata	00000010 IfxAsclin2_CTSA_P10_7_IN
5001a600 g       .CPU2.ustack	00000000 __USTACK2_AREA_END
80011a40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_210
800008ec g     O .rodata	00000010 IfxAsclin2_RXF_P32_6_IN
80013d80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_236
8000076c g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
8000658e g     F .text	00000014 IfxScuCcu_initConfig
800101e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_15
80003b80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_220
800028c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_70
800126c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_54
8000043c g     O .rodata	00000010 IfxAsclin3_TX_P21_7_OUT
80004800 g     F .text	00000066 IfxVadc_initializeFAdcI
80013900 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_200
80003c40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_226
80012160 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_11
800006ac g     O .rodata	00000010 IfxAsclin2_SLSO_P10_5_OUT
80000ca0 g     O .rodata	00000014 IfxScu_REQ8_P33_7_IN
8000040c g     O .rodata	00000010 IfxAsclin3_TX_P32_2_OUT
80012c60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_99
80001300 g       .traptab	00000000 osEE_tc_trap_mmu
80012b60 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_91
80012220 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_17
80008000 g     F .text	00000050 Ifx_CircularBuffer_read32
80003840 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_194
80004fa4 g     F .text	0000009c IfxAsclin_Asc_flushTx
8000a74c g     F .text	000000a4 StartNonAutosarCore
800095ce g     F .text	00000028 osEE_tc_delay
8000078c g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
800010ec g     O .rodata	00000000 __clear_table
80010460 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_35
80005d06 g     F .text	00000064 IfxScuCcu_getPllErayFrequency
80012460 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_35
800107c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_62
8000095c g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
8000add8 g     F .text	0000001e osEE_task_end
800124c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_38
80003b40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_218
8000073c g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
80012f80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_124
80010700 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_56
80003660 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_179
800009ac g     O .rodata	00000010 IfxAsclin1_RXA_P15_1_IN
80001400 g       .ctors	00000000 __EH_FRAME_BEGIN__
8000068c g     O .rodata	00000010 IfxAsclin3_SLSO_P00_3_OUT
800024a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_37
800110a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_133
8000b232 g     F .text	00000022 osEE_counter_insert_rel_trigger
80013460 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_163
80005e64 g     F .text	00000024 IfxScuCcu_getSourceFrequency
800005ec g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000ea4 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000d7c g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
80003f00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_248
80003cc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_230
800026a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_53
8000b5b2 g     F .text	00000020 osEE_change_context_from_task_end
800037e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_191
80011ce0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_231
80003300 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_152
8000a24a g     F .text	000000c8 WaitEvent
80002ea0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_117
80013a00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_208
800117c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_190
80002b40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_90
8000583a g     F .text	00000030 IfxPort_disableEmergencyStop
800137a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_189
800031e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_143
80011f60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_251
8000047c g     O .rodata	00000010 IfxAsclin3_TX_P15_6_OUT
80003a40 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_210
80007d1c g     F .text	0000002e IfxVadc_Adc_initGroupConfig
80003ac0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_214
80011fa0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_253
80002cc0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_102
80013e00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_240
80003520 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_169
80011320 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_153
00000400 g       *ABS*	00000000 __ISTACK0_SIZE
800115c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_174
80010b20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_89
800105c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_46
8000a5b6 g     F .text	000000bc IncrementCounter
800024c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_38
800038a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_197
800131a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_141
80012f00 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_120
5001b600 g     O .CPU2.ustack	00000000 __USTACK2
80013240 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_146
80012d40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_106
8000b4c6 g     F .text	0000005e osEE_alarm_cancel
80010900 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_72
800095b0 g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
0001e000 g       *ABS*	00000000 __DSPR1_SIZE
80000020 g       .startup	00000000 BootModeIndex
80010160 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_11
70000024 g     O .data	00000004 __malloc_trim_threshold
800025a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_45
80010180 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_12
80000184 g     O .rodata	0000002c osEE_cdb_var_core0
80002a80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_84
8000469a g     F .text	00000004 IfxVadc_getAdcModuleFrequency
80002620 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_49
80002a00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_80
80010fc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_126
80012800 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_64
8000b254 g     F .text	00000030 osEE_counter_cancel_trigger
800084d4 g     F .text	00000186 Ifx_Fifo_write
800122a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_21
8000ee4a g     F .text	000000ca __mdiff
800100e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_7
8000ae44 g     F .text	00000022 osEE_activate_isr2
800023c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_30
80011700 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_184
80013400 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_160
8000797c g     F .text	00000016 IfxVadc_Adc_initChannelConfig
80004b1c g     F .text	00000074 IfxAsclin_getFaFrequency
80010400 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_32
800068aa g     F .text	00000050 IfxScuCcu_setPll2Frequency
80011620 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_177
80013380 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_156
80012ee0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_119
80011300 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_152
80020000 g       .startup	00000000 BootModeHeader1
8000917a g     F .text	0000022e osEE_tc_set_pll_fsource
800047d6 g     F .text	0000002a IfxVadc_initializeFAdcD
800040bc g     F .text	00000072 UART_init
80011800 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_192
800059f2 g     F .text	000000a4 IfxPort_setGroupPadDriver
800112a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_149
0001c000 g       *ABS*	00000000 __DSPR0_SIZE
80013fe0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_255
80012820 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_65
80000e64 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
80013f80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_252
80012360 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_27
80012320 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_25
800120a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_5
800122c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_22
800009dc g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
80012880 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_68
80004ede g     F .text	00000012 IfxAsclin_write8
80006de4 g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
80011360 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_155
80013500 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_168
80001154 g     O .rodata	00000000 __copy_table
00019700 g       *ABS*	00000000 __ISTACK0_OFFSET
80003d20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_233
80004eb8 g     F .text	00000014 IfxAsclin_write16
80011dc0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_238
800109a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_77
80010080 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_4
80013aa0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_213
80010a40 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_82
800083ae g     F .text	00000036 Ifx_Fifo_clear
80003ee0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_247
80000d18 g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
80003740 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_186
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80013c40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_226
800025c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_46
800102c0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_22
80003960 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_203
8000f5a0 g     F .text	00000010 _exit
80002aa0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_85
80011780 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_188
80001320 g       .traptab	00000000 osEE_tc_trap_protection
80001300 g     F .traptab	00000000 __TRAPTAB
80000da4 g     O .rodata	00000014 IfxScu_REQ11_P20_9_IN
80002500 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_40
80002a20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_81
00002000 g       *ABS*	00000000 __CSA2_SIZE
80006b90 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
800020a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_5
80006c86 g     F .text	00000026 IfxScuEru_disableTriggerPulse
80002c80 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_100
80011b00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_216
800072e2 g     F .text	000000aa IfxScuWdt_initSafetyWatchdog
80004f00 g     F .text	00000006 IfxAsclin_Asc_getSendCount
80003060 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_131
8000c768 g     F .text	00000014 strlen
80011900 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_200
0001b700 g       *ABS*	00000000 __ISTACK2_OFFSET
80013dc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_238
80013cc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_230
80004cc2 g     F .text	00000022 IfxAsclin_setClockSource
80013560 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_171
80013080 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_132
8000f6c8 g     F .text	00000040 .hidden __gedf2
80010820 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_65
80000bcc g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
800043a2 g     F .text	000000a2 initPeripheralsAndERU
800008dc g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
80003e00 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_240
80011c20 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_225
80010da0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_109
8000053c g     O .rodata	00000010 IfxAsclin2_TX_P02_0_OUT
80011a80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_212
80013e20 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_241
80000cdc g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
800049f0 g     F .text	00000056 IfxVadc_setArbiterPriority
70000b70 g     O .inttab_cpu2	00000001 __HEAP_END
800121c0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_14
800006cc g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
800038c0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_198
80012bc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_94
80011740 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_186
80002f20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_121
6001bc00 g     O .CPU1.csa	00000000 __CSA1
80005f34 g     F .text	00000070 IfxScuCcu_getMaxFrequency
800096f8 g     F .text	00000036 EnableAllInterrupts
80003420 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_161
800006ec g     O .rodata	00000010 IfxAsclin1_SLSO_P14_3_OUT
800022e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_23
80010440 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_34
80002c20 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_97
80012dc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_110
80002640 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_50
80011e60 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_243
80013780 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_188
800128e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_71
80004a5a g     F .text	00000044 IfxVadc_startupCalibration
70000894 g     O .bss	00000004 g_vadc
80012120 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_9
80005a96 g     F .text	00000056 IfxPort_setPinMode
80010e80 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_116
80000cb4 g     O .rodata	00000014 IfxScu_REQ7_P00_4_IN
8000b82e g     F .text	0000001a osEE_hal_restore_ctx
800042aa g     F .text	00000032 initVADCGroup
80011000 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_128
80011100 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_136
8000072c g     O .rodata	00000010 IfxAsclin3_SCLK_P21_5_OUT
8000bb94 g     F .text	00000040 .hidden __subdf3
80010020 g       .inttab_cpu1	00000000 osEE_tc_core1_isr2_entry_1
800030e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_135
70008000 g     O *ABS*	00000000 _SMALL_DATA_
80004f06 g     F .text	00000006 IfxAsclin_Asc_getTxTimeStamp
80004866 g     F .text	0000006a IfxVadc_isPostCalibration
8000428c g     F .text	0000001e initVADCModule
80006b52 g     F .text	00000016 IfxScuEru_clearEventFlag
800072b0 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000eb42 g     F .text	00000066 __lo0bits
800109e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_79
80013a80 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_212
800139e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_207
80011f00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_248
80012400 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_32
80003940 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_202
80002000 g     F .inttab_cpu0	00002000 __INTTAB0
80002160 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_11
800129a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_77
800021a0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_13
800004cc g     O .rodata	00000010 IfxAsclin2_TX_P33_9_OUT
80003180 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_140
80011960 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_203
80005cd6 g     F .text	00000030 IfxScuCcu_getOscFrequency
80009834 g     F .text	00000056 ResumeOSInterrupts
80011a00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_208
80010b00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_88
800105a0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_45
80012760 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_59
80011e00 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_240
800121a0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_13
80004c76 g     F .text	0000004c IfxAsclin_resetModule
80003880 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_196
800108e0 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_71
80006d8a g     F .text	00000024 IfxScuEru_getInputChannelConfiguration
800007ec g     O .rodata	00000010 IfxAsclin2_SCLK_P02_4_OUT
80006b40 g     F .text	00000012 IfxScuEru_clearAllEventFlags
80013fc0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_254
80003ec0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_246
8000c00e g     F .text	00000112 .hidden __pack_d
80000aac g     O .rodata	00000020 IfxAsclin_cfg_indexMap
80002660 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_51
80013960 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_203
8000a032 g     F .text	00000092 SetAbsAlarm
80013720 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_185
8000988a g     F .text	000002ec StartOS
80000e1c g     O .rodata	0000000c IfxScu_HWCFG1EVR33_P14_5_IN
80000cf0 g     O .rodata	00000014 IfxScu_REQ4_P10_7_IN
80011760 g       .inttab_cpu1	00000000 osEE_tc_core1_isr_dummy_entry_187
800029e0 g       .inttab_cpu0	00000000 osEE_tc_core0_isr_dummy_entry_79
8000c29e g     F .text	0000000e free
80000c4c g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000ea7e g     F .text	00000082 __multadd
80013860 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_195
8000ea6c g     F .text	00000012 _Bfree
800132e0 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_151
80012e40 g       .inttab_cpu2	00000000 osEE_tc_core2_isr_dummy_entry_114
8000080c g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_



Disassembly of section .startup:

80000020 <_start>:
#endif

void _start(void)
{
  /* asm instruction to jump to the core startup */
  osEE_tc_jump_abs(osEE_tc_core0_start);
80000020:	9d 80 2d 43 	ja 8000865a <osEE_tc_core0_start>
80000024:	00 90       	ret 

Disassembly of section .traptab:

80001300 <__TRAPTAB>:
80001300:	00 a0       	debug 
80001302:	1d ff ff ff 	j 80001300 <__TRAPTAB>
	...

80001320 <osEE_tc_trap_protection>:
80001320:	00 a0       	debug 
80001322:	1d ff ff ff 	j 80001320 <osEE_tc_trap_protection>
	...

80001340 <osEE_tc_trap_instruction>:
80001340:	00 a0       	debug 
80001342:	1d ff ff ff 	j 80001340 <osEE_tc_trap_instruction>
	...

80001360 <osEE_tc_trap_context>:
80001360:	00 a0       	debug 
80001362:	1d ff ff ff 	j 80001360 <osEE_tc_trap_context>
	...

80001380 <osEE_tc_trap_bus>:
80001380:	00 a0       	debug 
80001382:	1d ff ff ff 	j 80001380 <osEE_tc_trap_bus>
	...

800013a0 <osEE_tc_trap_assertion>:
800013a0:	00 a0       	debug 
800013a2:	1d ff ff ff 	j 800013a0 <osEE_tc_trap_assertion>
	...

800013c0 <osEE_tc_trap_system>:
800013c0:	00 a0       	debug 
800013c2:	1d ff ff ff 	j 800013c0 <osEE_tc_trap_system>
	...

800013e0 <osEE_tc_trap_nmi>:
800013e0:	00 a0       	debug 
800013e2:	1d ff ff ff 	j 800013e0 <osEE_tc_trap_nmi>
	...

Disassembly of section .ctors:

80001400 <__CTOR_LIST__>:
	...

Disassembly of section .dtors:

80001408 <__DTOR_LIST__>:
	...

Disassembly of section .inttab_cpu0:

80002000 <__INTTAB0>:
	...

80002020 <osEE_tc_core0_isr2_entry_1>:
80002020:	0d 00 00 02 	svlcx 
80002024:	82 f4       	mov %d4,-1
80002026:	1d 00 e8 3a 	j 800095f6 <osEE_tc_isr2_wrapper>
	...

80002040 <osEE_tc_core0_isr2_entry_2>:
80002040:	0d 00 00 02 	svlcx 
80002044:	82 04       	mov %d4,0
80002046:	1d 00 d8 3a 	j 800095f6 <osEE_tc_isr2_wrapper>
	...

80002060 <osEE_tc_core0_isr_dummy_entry_3>:
80002060:	3c 00       	j 80002060 <osEE_tc_core0_isr_dummy_entry_3>
	...

80002080 <osEE_tc_core0_isr_dummy_entry_4>:
80002080:	3c 00       	j 80002080 <osEE_tc_core0_isr_dummy_entry_4>
	...

800020a0 <osEE_tc_core0_isr_dummy_entry_5>:
800020a0:	3c 00       	j 800020a0 <osEE_tc_core0_isr_dummy_entry_5>
	...

800020c0 <osEE_tc_core0_isr_dummy_entry_6>:
800020c0:	3c 00       	j 800020c0 <osEE_tc_core0_isr_dummy_entry_6>
	...

800020e0 <osEE_tc_core0_isr_dummy_entry_7>:
800020e0:	3c 00       	j 800020e0 <osEE_tc_core0_isr_dummy_entry_7>
	...

80002100 <osEE_tc_core0_isr_dummy_entry_8>:
80002100:	3c 00       	j 80002100 <osEE_tc_core0_isr_dummy_entry_8>
	...

80002120 <osEE_tc_core0_isr_dummy_entry_9>:
80002120:	3c 00       	j 80002120 <osEE_tc_core0_isr_dummy_entry_9>
	...

80002140 <osEE_tc_core0_isr_dummy_entry_10>:
80002140:	3c 00       	j 80002140 <osEE_tc_core0_isr_dummy_entry_10>
	...

80002160 <osEE_tc_core0_isr_dummy_entry_11>:
80002160:	3c 00       	j 80002160 <osEE_tc_core0_isr_dummy_entry_11>
	...

80002180 <osEE_tc_core0_isr_dummy_entry_12>:
80002180:	3c 00       	j 80002180 <osEE_tc_core0_isr_dummy_entry_12>
	...

800021a0 <osEE_tc_core0_isr_dummy_entry_13>:
800021a0:	3c 00       	j 800021a0 <osEE_tc_core0_isr_dummy_entry_13>
	...

800021c0 <osEE_tc_core0_isr_dummy_entry_14>:
800021c0:	3c 00       	j 800021c0 <osEE_tc_core0_isr_dummy_entry_14>
	...

800021e0 <osEE_tc_core0_isr_dummy_entry_15>:
800021e0:	3c 00       	j 800021e0 <osEE_tc_core0_isr_dummy_entry_15>
	...

80002200 <osEE_tc_core0_isr_dummy_entry_16>:
80002200:	3c 00       	j 80002200 <osEE_tc_core0_isr_dummy_entry_16>
	...

80002220 <osEE_tc_core0_isr_dummy_entry_17>:
80002220:	3c 00       	j 80002220 <osEE_tc_core0_isr_dummy_entry_17>
	...

80002240 <osEE_tc_core0_isr_dummy_entry_18>:
80002240:	3c 00       	j 80002240 <osEE_tc_core0_isr_dummy_entry_18>
	...

80002260 <osEE_tc_core0_isr2_entry_19>:
80002260:	0d 00 00 02 	svlcx 
80002264:	82 14       	mov %d4,1
80002266:	1d 00 c8 39 	j 800095f6 <osEE_tc_isr2_wrapper>
	...

80002280 <osEE_tc_core0_isr_dummy_entry_20>:
80002280:	3c 00       	j 80002280 <osEE_tc_core0_isr_dummy_entry_20>
	...

800022a0 <osEE_tc_core0_isr_dummy_entry_21>:
800022a0:	3c 00       	j 800022a0 <osEE_tc_core0_isr_dummy_entry_21>
	...

800022c0 <osEE_tc_core0_isr_dummy_entry_22>:
800022c0:	3c 00       	j 800022c0 <osEE_tc_core0_isr_dummy_entry_22>
	...

800022e0 <osEE_tc_core0_isr_dummy_entry_23>:
800022e0:	3c 00       	j 800022e0 <osEE_tc_core0_isr_dummy_entry_23>
	...

80002300 <osEE_tc_core0_isr_dummy_entry_24>:
80002300:	3c 00       	j 80002300 <osEE_tc_core0_isr_dummy_entry_24>
	...

80002320 <osEE_tc_core0_isr_dummy_entry_25>:
80002320:	3c 00       	j 80002320 <osEE_tc_core0_isr_dummy_entry_25>
	...

80002340 <osEE_tc_core0_isr_dummy_entry_26>:
80002340:	3c 00       	j 80002340 <osEE_tc_core0_isr_dummy_entry_26>
	...

80002360 <osEE_tc_core0_isr_dummy_entry_27>:
80002360:	3c 00       	j 80002360 <osEE_tc_core0_isr_dummy_entry_27>
	...

80002380 <osEE_tc_core0_isr_dummy_entry_28>:
80002380:	3c 00       	j 80002380 <osEE_tc_core0_isr_dummy_entry_28>
	...

800023a0 <osEE_tc_core0_isr_dummy_entry_29>:
800023a0:	3c 00       	j 800023a0 <osEE_tc_core0_isr_dummy_entry_29>
	...

800023c0 <osEE_tc_core0_isr_dummy_entry_30>:
800023c0:	3c 00       	j 800023c0 <osEE_tc_core0_isr_dummy_entry_30>
	...

800023e0 <osEE_tc_core0_isr_dummy_entry_31>:
800023e0:	3c 00       	j 800023e0 <osEE_tc_core0_isr_dummy_entry_31>
	...

80002400 <osEE_tc_core0_isr_dummy_entry_32>:
80002400:	3c 00       	j 80002400 <osEE_tc_core0_isr_dummy_entry_32>
	...

80002420 <osEE_tc_core0_isr_dummy_entry_33>:
80002420:	3c 00       	j 80002420 <osEE_tc_core0_isr_dummy_entry_33>
	...

80002440 <osEE_tc_core0_isr_dummy_entry_34>:
80002440:	3c 00       	j 80002440 <osEE_tc_core0_isr_dummy_entry_34>
	...

80002460 <osEE_tc_core0_isr_dummy_entry_35>:
80002460:	3c 00       	j 80002460 <osEE_tc_core0_isr_dummy_entry_35>
	...

80002480 <osEE_tc_core0_isr_dummy_entry_36>:
80002480:	3c 00       	j 80002480 <osEE_tc_core0_isr_dummy_entry_36>
	...

800024a0 <osEE_tc_core0_isr_dummy_entry_37>:
800024a0:	3c 00       	j 800024a0 <osEE_tc_core0_isr_dummy_entry_37>
	...

800024c0 <osEE_tc_core0_isr_dummy_entry_38>:
800024c0:	3c 00       	j 800024c0 <osEE_tc_core0_isr_dummy_entry_38>
	...

800024e0 <osEE_tc_core0_isr_dummy_entry_39>:
800024e0:	3c 00       	j 800024e0 <osEE_tc_core0_isr_dummy_entry_39>
	...

80002500 <osEE_tc_core0_isr_dummy_entry_40>:
80002500:	3c 00       	j 80002500 <osEE_tc_core0_isr_dummy_entry_40>
	...

80002520 <osEE_tc_core0_isr_dummy_entry_41>:
80002520:	3c 00       	j 80002520 <osEE_tc_core0_isr_dummy_entry_41>
	...

80002540 <osEE_tc_core0_isr_dummy_entry_42>:
80002540:	3c 00       	j 80002540 <osEE_tc_core0_isr_dummy_entry_42>
	...

80002560 <osEE_tc_core0_isr_dummy_entry_43>:
80002560:	3c 00       	j 80002560 <osEE_tc_core0_isr_dummy_entry_43>
	...

80002580 <osEE_tc_core0_isr_dummy_entry_44>:
80002580:	3c 00       	j 80002580 <osEE_tc_core0_isr_dummy_entry_44>
	...

800025a0 <osEE_tc_core0_isr_dummy_entry_45>:
800025a0:	3c 00       	j 800025a0 <osEE_tc_core0_isr_dummy_entry_45>
	...

800025c0 <osEE_tc_core0_isr_dummy_entry_46>:
800025c0:	3c 00       	j 800025c0 <osEE_tc_core0_isr_dummy_entry_46>
	...

800025e0 <osEE_tc_core0_isr_dummy_entry_47>:
800025e0:	3c 00       	j 800025e0 <osEE_tc_core0_isr_dummy_entry_47>
	...

80002600 <osEE_tc_core0_isr_dummy_entry_48>:
80002600:	3c 00       	j 80002600 <osEE_tc_core0_isr_dummy_entry_48>
	...

80002620 <osEE_tc_core0_isr_dummy_entry_49>:
80002620:	3c 00       	j 80002620 <osEE_tc_core0_isr_dummy_entry_49>
	...

80002640 <osEE_tc_core0_isr_dummy_entry_50>:
80002640:	3c 00       	j 80002640 <osEE_tc_core0_isr_dummy_entry_50>
	...

80002660 <osEE_tc_core0_isr_dummy_entry_51>:
80002660:	3c 00       	j 80002660 <osEE_tc_core0_isr_dummy_entry_51>
	...

80002680 <osEE_tc_core0_isr_dummy_entry_52>:
80002680:	3c 00       	j 80002680 <osEE_tc_core0_isr_dummy_entry_52>
	...

800026a0 <osEE_tc_core0_isr_dummy_entry_53>:
800026a0:	3c 00       	j 800026a0 <osEE_tc_core0_isr_dummy_entry_53>
	...

800026c0 <osEE_tc_core0_isr_dummy_entry_54>:
800026c0:	3c 00       	j 800026c0 <osEE_tc_core0_isr_dummy_entry_54>
	...

800026e0 <osEE_tc_core0_isr_dummy_entry_55>:
800026e0:	3c 00       	j 800026e0 <osEE_tc_core0_isr_dummy_entry_55>
	...

80002700 <osEE_tc_core0_isr_dummy_entry_56>:
80002700:	3c 00       	j 80002700 <osEE_tc_core0_isr_dummy_entry_56>
	...

80002720 <osEE_tc_core0_isr_dummy_entry_57>:
80002720:	3c 00       	j 80002720 <osEE_tc_core0_isr_dummy_entry_57>
	...

80002740 <osEE_tc_core0_isr_dummy_entry_58>:
80002740:	3c 00       	j 80002740 <osEE_tc_core0_isr_dummy_entry_58>
	...

80002760 <osEE_tc_core0_isr_dummy_entry_59>:
80002760:	3c 00       	j 80002760 <osEE_tc_core0_isr_dummy_entry_59>
	...

80002780 <osEE_tc_core0_isr_dummy_entry_60>:
80002780:	3c 00       	j 80002780 <osEE_tc_core0_isr_dummy_entry_60>
	...

800027a0 <osEE_tc_core0_isr_dummy_entry_61>:
800027a0:	3c 00       	j 800027a0 <osEE_tc_core0_isr_dummy_entry_61>
	...

800027c0 <osEE_tc_core0_isr_dummy_entry_62>:
800027c0:	3c 00       	j 800027c0 <osEE_tc_core0_isr_dummy_entry_62>
	...

800027e0 <osEE_tc_core0_isr_dummy_entry_63>:
800027e0:	3c 00       	j 800027e0 <osEE_tc_core0_isr_dummy_entry_63>
	...

80002800 <osEE_tc_core0_isr_dummy_entry_64>:
80002800:	3c 00       	j 80002800 <osEE_tc_core0_isr_dummy_entry_64>
	...

80002820 <osEE_tc_core0_isr_dummy_entry_65>:
80002820:	3c 00       	j 80002820 <osEE_tc_core0_isr_dummy_entry_65>
	...

80002840 <osEE_tc_core0_isr_dummy_entry_66>:
80002840:	3c 00       	j 80002840 <osEE_tc_core0_isr_dummy_entry_66>
	...

80002860 <osEE_tc_core0_isr_dummy_entry_67>:
80002860:	3c 00       	j 80002860 <osEE_tc_core0_isr_dummy_entry_67>
	...

80002880 <osEE_tc_core0_isr_dummy_entry_68>:
80002880:	3c 00       	j 80002880 <osEE_tc_core0_isr_dummy_entry_68>
	...

800028a0 <osEE_tc_core0_isr_dummy_entry_69>:
800028a0:	3c 00       	j 800028a0 <osEE_tc_core0_isr_dummy_entry_69>
	...

800028c0 <osEE_tc_core0_isr_dummy_entry_70>:
800028c0:	3c 00       	j 800028c0 <osEE_tc_core0_isr_dummy_entry_70>
	...

800028e0 <osEE_tc_core0_isr_dummy_entry_71>:
800028e0:	3c 00       	j 800028e0 <osEE_tc_core0_isr_dummy_entry_71>
	...

80002900 <osEE_tc_core0_isr_dummy_entry_72>:
80002900:	3c 00       	j 80002900 <osEE_tc_core0_isr_dummy_entry_72>
	...

80002920 <osEE_tc_core0_isr_dummy_entry_73>:
80002920:	3c 00       	j 80002920 <osEE_tc_core0_isr_dummy_entry_73>
	...

80002940 <osEE_tc_core0_isr_dummy_entry_74>:
80002940:	3c 00       	j 80002940 <osEE_tc_core0_isr_dummy_entry_74>
	...

80002960 <osEE_tc_core0_isr_dummy_entry_75>:
80002960:	3c 00       	j 80002960 <osEE_tc_core0_isr_dummy_entry_75>
	...

80002980 <osEE_tc_core0_isr_dummy_entry_76>:
80002980:	3c 00       	j 80002980 <osEE_tc_core0_isr_dummy_entry_76>
	...

800029a0 <osEE_tc_core0_isr_dummy_entry_77>:
800029a0:	3c 00       	j 800029a0 <osEE_tc_core0_isr_dummy_entry_77>
	...

800029c0 <osEE_tc_core0_isr_dummy_entry_78>:
800029c0:	3c 00       	j 800029c0 <osEE_tc_core0_isr_dummy_entry_78>
	...

800029e0 <osEE_tc_core0_isr_dummy_entry_79>:
800029e0:	3c 00       	j 800029e0 <osEE_tc_core0_isr_dummy_entry_79>
	...

80002a00 <osEE_tc_core0_isr_dummy_entry_80>:
80002a00:	3c 00       	j 80002a00 <osEE_tc_core0_isr_dummy_entry_80>
	...

80002a20 <osEE_tc_core0_isr_dummy_entry_81>:
80002a20:	3c 00       	j 80002a20 <osEE_tc_core0_isr_dummy_entry_81>
	...

80002a40 <osEE_tc_core0_isr_dummy_entry_82>:
80002a40:	3c 00       	j 80002a40 <osEE_tc_core0_isr_dummy_entry_82>
	...

80002a60 <osEE_tc_core0_isr_dummy_entry_83>:
80002a60:	3c 00       	j 80002a60 <osEE_tc_core0_isr_dummy_entry_83>
	...

80002a80 <osEE_tc_core0_isr_dummy_entry_84>:
80002a80:	3c 00       	j 80002a80 <osEE_tc_core0_isr_dummy_entry_84>
	...

80002aa0 <osEE_tc_core0_isr_dummy_entry_85>:
80002aa0:	3c 00       	j 80002aa0 <osEE_tc_core0_isr_dummy_entry_85>
	...

80002ac0 <osEE_tc_core0_isr_dummy_entry_86>:
80002ac0:	3c 00       	j 80002ac0 <osEE_tc_core0_isr_dummy_entry_86>
	...

80002ae0 <osEE_tc_core0_isr_dummy_entry_87>:
80002ae0:	3c 00       	j 80002ae0 <osEE_tc_core0_isr_dummy_entry_87>
	...

80002b00 <osEE_tc_core0_isr_dummy_entry_88>:
80002b00:	3c 00       	j 80002b00 <osEE_tc_core0_isr_dummy_entry_88>
	...

80002b20 <osEE_tc_core0_isr_dummy_entry_89>:
80002b20:	3c 00       	j 80002b20 <osEE_tc_core0_isr_dummy_entry_89>
	...

80002b40 <osEE_tc_core0_isr_dummy_entry_90>:
80002b40:	3c 00       	j 80002b40 <osEE_tc_core0_isr_dummy_entry_90>
	...

80002b60 <osEE_tc_core0_isr_dummy_entry_91>:
80002b60:	3c 00       	j 80002b60 <osEE_tc_core0_isr_dummy_entry_91>
	...

80002b80 <osEE_tc_core0_isr_dummy_entry_92>:
80002b80:	3c 00       	j 80002b80 <osEE_tc_core0_isr_dummy_entry_92>
	...

80002ba0 <osEE_tc_core0_isr_dummy_entry_93>:
80002ba0:	3c 00       	j 80002ba0 <osEE_tc_core0_isr_dummy_entry_93>
	...

80002bc0 <osEE_tc_core0_isr_dummy_entry_94>:
80002bc0:	3c 00       	j 80002bc0 <osEE_tc_core0_isr_dummy_entry_94>
	...

80002be0 <osEE_tc_core0_isr_dummy_entry_95>:
80002be0:	3c 00       	j 80002be0 <osEE_tc_core0_isr_dummy_entry_95>
	...

80002c00 <osEE_tc_core0_isr_dummy_entry_96>:
80002c00:	3c 00       	j 80002c00 <osEE_tc_core0_isr_dummy_entry_96>
	...

80002c20 <osEE_tc_core0_isr_dummy_entry_97>:
80002c20:	3c 00       	j 80002c20 <osEE_tc_core0_isr_dummy_entry_97>
	...

80002c40 <osEE_tc_core0_isr_dummy_entry_98>:
80002c40:	3c 00       	j 80002c40 <osEE_tc_core0_isr_dummy_entry_98>
	...

80002c60 <osEE_tc_core0_isr_dummy_entry_99>:
80002c60:	3c 00       	j 80002c60 <osEE_tc_core0_isr_dummy_entry_99>
	...

80002c80 <osEE_tc_core0_isr_dummy_entry_100>:
80002c80:	3c 00       	j 80002c80 <osEE_tc_core0_isr_dummy_entry_100>
	...

80002ca0 <osEE_tc_core0_isr_dummy_entry_101>:
80002ca0:	3c 00       	j 80002ca0 <osEE_tc_core0_isr_dummy_entry_101>
	...

80002cc0 <osEE_tc_core0_isr_dummy_entry_102>:
80002cc0:	3c 00       	j 80002cc0 <osEE_tc_core0_isr_dummy_entry_102>
	...

80002ce0 <osEE_tc_core0_isr_dummy_entry_103>:
80002ce0:	3c 00       	j 80002ce0 <osEE_tc_core0_isr_dummy_entry_103>
	...

80002d00 <osEE_tc_core0_isr_dummy_entry_104>:
80002d00:	3c 00       	j 80002d00 <osEE_tc_core0_isr_dummy_entry_104>
	...

80002d20 <osEE_tc_core0_isr_dummy_entry_105>:
80002d20:	3c 00       	j 80002d20 <osEE_tc_core0_isr_dummy_entry_105>
	...

80002d40 <osEE_tc_core0_isr_dummy_entry_106>:
80002d40:	3c 00       	j 80002d40 <osEE_tc_core0_isr_dummy_entry_106>
	...

80002d60 <osEE_tc_core0_isr_dummy_entry_107>:
80002d60:	3c 00       	j 80002d60 <osEE_tc_core0_isr_dummy_entry_107>
	...

80002d80 <osEE_tc_core0_isr_dummy_entry_108>:
80002d80:	3c 00       	j 80002d80 <osEE_tc_core0_isr_dummy_entry_108>
	...

80002da0 <osEE_tc_core0_isr_dummy_entry_109>:
80002da0:	3c 00       	j 80002da0 <osEE_tc_core0_isr_dummy_entry_109>
	...

80002dc0 <osEE_tc_core0_isr_dummy_entry_110>:
80002dc0:	3c 00       	j 80002dc0 <osEE_tc_core0_isr_dummy_entry_110>
	...

80002de0 <osEE_tc_core0_isr_dummy_entry_111>:
80002de0:	3c 00       	j 80002de0 <osEE_tc_core0_isr_dummy_entry_111>
	...

80002e00 <osEE_tc_core0_isr_dummy_entry_112>:
80002e00:	3c 00       	j 80002e00 <osEE_tc_core0_isr_dummy_entry_112>
	...

80002e20 <osEE_tc_core0_isr_dummy_entry_113>:
80002e20:	3c 00       	j 80002e20 <osEE_tc_core0_isr_dummy_entry_113>
	...

80002e40 <osEE_tc_core0_isr_dummy_entry_114>:
80002e40:	3c 00       	j 80002e40 <osEE_tc_core0_isr_dummy_entry_114>
	...

80002e60 <osEE_tc_core0_isr_dummy_entry_115>:
80002e60:	3c 00       	j 80002e60 <osEE_tc_core0_isr_dummy_entry_115>
	...

80002e80 <osEE_tc_core0_isr_dummy_entry_116>:
80002e80:	3c 00       	j 80002e80 <osEE_tc_core0_isr_dummy_entry_116>
	...

80002ea0 <osEE_tc_core0_isr_dummy_entry_117>:
80002ea0:	3c 00       	j 80002ea0 <osEE_tc_core0_isr_dummy_entry_117>
	...

80002ec0 <osEE_tc_core0_isr_dummy_entry_118>:
80002ec0:	3c 00       	j 80002ec0 <osEE_tc_core0_isr_dummy_entry_118>
	...

80002ee0 <osEE_tc_core0_isr_dummy_entry_119>:
80002ee0:	3c 00       	j 80002ee0 <osEE_tc_core0_isr_dummy_entry_119>
	...

80002f00 <osEE_tc_core0_isr_dummy_entry_120>:
80002f00:	3c 00       	j 80002f00 <osEE_tc_core0_isr_dummy_entry_120>
	...

80002f20 <osEE_tc_core0_isr_dummy_entry_121>:
80002f20:	3c 00       	j 80002f20 <osEE_tc_core0_isr_dummy_entry_121>
	...

80002f40 <osEE_tc_core0_isr_dummy_entry_122>:
80002f40:	3c 00       	j 80002f40 <osEE_tc_core0_isr_dummy_entry_122>
	...

80002f60 <osEE_tc_core0_isr_dummy_entry_123>:
80002f60:	3c 00       	j 80002f60 <osEE_tc_core0_isr_dummy_entry_123>
	...

80002f80 <osEE_tc_core0_isr_dummy_entry_124>:
80002f80:	3c 00       	j 80002f80 <osEE_tc_core0_isr_dummy_entry_124>
	...

80002fa0 <osEE_tc_core0_isr_dummy_entry_125>:
80002fa0:	3c 00       	j 80002fa0 <osEE_tc_core0_isr_dummy_entry_125>
	...

80002fc0 <osEE_tc_core0_isr_dummy_entry_126>:
80002fc0:	3c 00       	j 80002fc0 <osEE_tc_core0_isr_dummy_entry_126>
	...

80002fe0 <osEE_tc_core0_isr_dummy_entry_127>:
80002fe0:	3c 00       	j 80002fe0 <osEE_tc_core0_isr_dummy_entry_127>
	...

80003000 <osEE_tc_core0_isr_dummy_entry_128>:
80003000:	3c 00       	j 80003000 <osEE_tc_core0_isr_dummy_entry_128>
	...

80003020 <osEE_tc_core0_isr_dummy_entry_129>:
80003020:	3c 00       	j 80003020 <osEE_tc_core0_isr_dummy_entry_129>
	...

80003040 <osEE_tc_core0_isr_dummy_entry_130>:
80003040:	3c 00       	j 80003040 <osEE_tc_core0_isr_dummy_entry_130>
	...

80003060 <osEE_tc_core0_isr_dummy_entry_131>:
80003060:	3c 00       	j 80003060 <osEE_tc_core0_isr_dummy_entry_131>
	...

80003080 <osEE_tc_core0_isr_dummy_entry_132>:
80003080:	3c 00       	j 80003080 <osEE_tc_core0_isr_dummy_entry_132>
	...

800030a0 <osEE_tc_core0_isr_dummy_entry_133>:
800030a0:	3c 00       	j 800030a0 <osEE_tc_core0_isr_dummy_entry_133>
	...

800030c0 <osEE_tc_core0_isr_dummy_entry_134>:
800030c0:	3c 00       	j 800030c0 <osEE_tc_core0_isr_dummy_entry_134>
	...

800030e0 <osEE_tc_core0_isr_dummy_entry_135>:
800030e0:	3c 00       	j 800030e0 <osEE_tc_core0_isr_dummy_entry_135>
	...

80003100 <osEE_tc_core0_isr_dummy_entry_136>:
80003100:	3c 00       	j 80003100 <osEE_tc_core0_isr_dummy_entry_136>
	...

80003120 <osEE_tc_core0_isr_dummy_entry_137>:
80003120:	3c 00       	j 80003120 <osEE_tc_core0_isr_dummy_entry_137>
	...

80003140 <osEE_tc_core0_isr_dummy_entry_138>:
80003140:	3c 00       	j 80003140 <osEE_tc_core0_isr_dummy_entry_138>
	...

80003160 <osEE_tc_core0_isr_dummy_entry_139>:
80003160:	3c 00       	j 80003160 <osEE_tc_core0_isr_dummy_entry_139>
	...

80003180 <osEE_tc_core0_isr_dummy_entry_140>:
80003180:	3c 00       	j 80003180 <osEE_tc_core0_isr_dummy_entry_140>
	...

800031a0 <osEE_tc_core0_isr_dummy_entry_141>:
800031a0:	3c 00       	j 800031a0 <osEE_tc_core0_isr_dummy_entry_141>
	...

800031c0 <osEE_tc_core0_isr_dummy_entry_142>:
800031c0:	3c 00       	j 800031c0 <osEE_tc_core0_isr_dummy_entry_142>
	...

800031e0 <osEE_tc_core0_isr_dummy_entry_143>:
800031e0:	3c 00       	j 800031e0 <osEE_tc_core0_isr_dummy_entry_143>
	...

80003200 <osEE_tc_core0_isr_dummy_entry_144>:
80003200:	3c 00       	j 80003200 <osEE_tc_core0_isr_dummy_entry_144>
	...

80003220 <osEE_tc_core0_isr_dummy_entry_145>:
80003220:	3c 00       	j 80003220 <osEE_tc_core0_isr_dummy_entry_145>
	...

80003240 <osEE_tc_core0_isr_dummy_entry_146>:
80003240:	3c 00       	j 80003240 <osEE_tc_core0_isr_dummy_entry_146>
	...

80003260 <osEE_tc_core0_isr_dummy_entry_147>:
80003260:	3c 00       	j 80003260 <osEE_tc_core0_isr_dummy_entry_147>
	...

80003280 <osEE_tc_core0_isr_dummy_entry_148>:
80003280:	3c 00       	j 80003280 <osEE_tc_core0_isr_dummy_entry_148>
	...

800032a0 <osEE_tc_core0_isr_dummy_entry_149>:
800032a0:	3c 00       	j 800032a0 <osEE_tc_core0_isr_dummy_entry_149>
	...

800032c0 <osEE_tc_core0_isr_dummy_entry_150>:
800032c0:	3c 00       	j 800032c0 <osEE_tc_core0_isr_dummy_entry_150>
	...

800032e0 <osEE_tc_core0_isr_dummy_entry_151>:
800032e0:	3c 00       	j 800032e0 <osEE_tc_core0_isr_dummy_entry_151>
	...

80003300 <osEE_tc_core0_isr_dummy_entry_152>:
80003300:	3c 00       	j 80003300 <osEE_tc_core0_isr_dummy_entry_152>
	...

80003320 <osEE_tc_core0_isr_dummy_entry_153>:
80003320:	3c 00       	j 80003320 <osEE_tc_core0_isr_dummy_entry_153>
	...

80003340 <osEE_tc_core0_isr_dummy_entry_154>:
80003340:	3c 00       	j 80003340 <osEE_tc_core0_isr_dummy_entry_154>
	...

80003360 <osEE_tc_core0_isr_dummy_entry_155>:
80003360:	3c 00       	j 80003360 <osEE_tc_core0_isr_dummy_entry_155>
	...

80003380 <osEE_tc_core0_isr_dummy_entry_156>:
80003380:	3c 00       	j 80003380 <osEE_tc_core0_isr_dummy_entry_156>
	...

800033a0 <osEE_tc_core0_isr_dummy_entry_157>:
800033a0:	3c 00       	j 800033a0 <osEE_tc_core0_isr_dummy_entry_157>
	...

800033c0 <osEE_tc_core0_isr_dummy_entry_158>:
800033c0:	3c 00       	j 800033c0 <osEE_tc_core0_isr_dummy_entry_158>
	...

800033e0 <osEE_tc_core0_isr_dummy_entry_159>:
800033e0:	3c 00       	j 800033e0 <osEE_tc_core0_isr_dummy_entry_159>
	...

80003400 <osEE_tc_core0_isr_dummy_entry_160>:
80003400:	3c 00       	j 80003400 <osEE_tc_core0_isr_dummy_entry_160>
	...

80003420 <osEE_tc_core0_isr_dummy_entry_161>:
80003420:	3c 00       	j 80003420 <osEE_tc_core0_isr_dummy_entry_161>
	...

80003440 <osEE_tc_core0_isr_dummy_entry_162>:
80003440:	3c 00       	j 80003440 <osEE_tc_core0_isr_dummy_entry_162>
	...

80003460 <osEE_tc_core0_isr_dummy_entry_163>:
80003460:	3c 00       	j 80003460 <osEE_tc_core0_isr_dummy_entry_163>
	...

80003480 <osEE_tc_core0_isr_dummy_entry_164>:
80003480:	3c 00       	j 80003480 <osEE_tc_core0_isr_dummy_entry_164>
	...

800034a0 <osEE_tc_core0_isr_dummy_entry_165>:
800034a0:	3c 00       	j 800034a0 <osEE_tc_core0_isr_dummy_entry_165>
	...

800034c0 <osEE_tc_core0_isr_dummy_entry_166>:
800034c0:	3c 00       	j 800034c0 <osEE_tc_core0_isr_dummy_entry_166>
	...

800034e0 <osEE_tc_core0_isr_dummy_entry_167>:
800034e0:	3c 00       	j 800034e0 <osEE_tc_core0_isr_dummy_entry_167>
	...

80003500 <osEE_tc_core0_isr_dummy_entry_168>:
80003500:	3c 00       	j 80003500 <osEE_tc_core0_isr_dummy_entry_168>
	...

80003520 <osEE_tc_core0_isr_dummy_entry_169>:
80003520:	3c 00       	j 80003520 <osEE_tc_core0_isr_dummy_entry_169>
	...

80003540 <osEE_tc_core0_isr_dummy_entry_170>:
80003540:	3c 00       	j 80003540 <osEE_tc_core0_isr_dummy_entry_170>
	...

80003560 <osEE_tc_core0_isr_dummy_entry_171>:
80003560:	3c 00       	j 80003560 <osEE_tc_core0_isr_dummy_entry_171>
	...

80003580 <osEE_tc_core0_isr_dummy_entry_172>:
80003580:	3c 00       	j 80003580 <osEE_tc_core0_isr_dummy_entry_172>
	...

800035a0 <osEE_tc_core0_isr_dummy_entry_173>:
800035a0:	3c 00       	j 800035a0 <osEE_tc_core0_isr_dummy_entry_173>
	...

800035c0 <osEE_tc_core0_isr_dummy_entry_174>:
800035c0:	3c 00       	j 800035c0 <osEE_tc_core0_isr_dummy_entry_174>
	...

800035e0 <osEE_tc_core0_isr_dummy_entry_175>:
800035e0:	3c 00       	j 800035e0 <osEE_tc_core0_isr_dummy_entry_175>
	...

80003600 <osEE_tc_core0_isr_dummy_entry_176>:
80003600:	3c 00       	j 80003600 <osEE_tc_core0_isr_dummy_entry_176>
	...

80003620 <osEE_tc_core0_isr_dummy_entry_177>:
80003620:	3c 00       	j 80003620 <osEE_tc_core0_isr_dummy_entry_177>
	...

80003640 <osEE_tc_core0_isr_dummy_entry_178>:
80003640:	3c 00       	j 80003640 <osEE_tc_core0_isr_dummy_entry_178>
	...

80003660 <osEE_tc_core0_isr_dummy_entry_179>:
80003660:	3c 00       	j 80003660 <osEE_tc_core0_isr_dummy_entry_179>
	...

80003680 <osEE_tc_core0_isr_dummy_entry_180>:
80003680:	3c 00       	j 80003680 <osEE_tc_core0_isr_dummy_entry_180>
	...

800036a0 <osEE_tc_core0_isr_dummy_entry_181>:
800036a0:	3c 00       	j 800036a0 <osEE_tc_core0_isr_dummy_entry_181>
	...

800036c0 <osEE_tc_core0_isr_dummy_entry_182>:
800036c0:	3c 00       	j 800036c0 <osEE_tc_core0_isr_dummy_entry_182>
	...

800036e0 <osEE_tc_core0_isr_dummy_entry_183>:
800036e0:	3c 00       	j 800036e0 <osEE_tc_core0_isr_dummy_entry_183>
	...

80003700 <osEE_tc_core0_isr_dummy_entry_184>:
80003700:	3c 00       	j 80003700 <osEE_tc_core0_isr_dummy_entry_184>
	...

80003720 <osEE_tc_core0_isr_dummy_entry_185>:
80003720:	3c 00       	j 80003720 <osEE_tc_core0_isr_dummy_entry_185>
	...

80003740 <osEE_tc_core0_isr_dummy_entry_186>:
80003740:	3c 00       	j 80003740 <osEE_tc_core0_isr_dummy_entry_186>
	...

80003760 <osEE_tc_core0_isr_dummy_entry_187>:
80003760:	3c 00       	j 80003760 <osEE_tc_core0_isr_dummy_entry_187>
	...

80003780 <osEE_tc_core0_isr_dummy_entry_188>:
80003780:	3c 00       	j 80003780 <osEE_tc_core0_isr_dummy_entry_188>
	...

800037a0 <osEE_tc_core0_isr_dummy_entry_189>:
800037a0:	3c 00       	j 800037a0 <osEE_tc_core0_isr_dummy_entry_189>
	...

800037c0 <osEE_tc_core0_isr_dummy_entry_190>:
800037c0:	3c 00       	j 800037c0 <osEE_tc_core0_isr_dummy_entry_190>
	...

800037e0 <osEE_tc_core0_isr_dummy_entry_191>:
800037e0:	3c 00       	j 800037e0 <osEE_tc_core0_isr_dummy_entry_191>
	...

80003800 <osEE_tc_core0_isr_dummy_entry_192>:
80003800:	3c 00       	j 80003800 <osEE_tc_core0_isr_dummy_entry_192>
	...

80003820 <osEE_tc_core0_isr_dummy_entry_193>:
80003820:	3c 00       	j 80003820 <osEE_tc_core0_isr_dummy_entry_193>
	...

80003840 <osEE_tc_core0_isr_dummy_entry_194>:
80003840:	3c 00       	j 80003840 <osEE_tc_core0_isr_dummy_entry_194>
	...

80003860 <osEE_tc_core0_isr_dummy_entry_195>:
80003860:	3c 00       	j 80003860 <osEE_tc_core0_isr_dummy_entry_195>
	...

80003880 <osEE_tc_core0_isr_dummy_entry_196>:
80003880:	3c 00       	j 80003880 <osEE_tc_core0_isr_dummy_entry_196>
	...

800038a0 <osEE_tc_core0_isr_dummy_entry_197>:
800038a0:	3c 00       	j 800038a0 <osEE_tc_core0_isr_dummy_entry_197>
	...

800038c0 <osEE_tc_core0_isr_dummy_entry_198>:
800038c0:	3c 00       	j 800038c0 <osEE_tc_core0_isr_dummy_entry_198>
	...

800038e0 <osEE_tc_core0_isr_dummy_entry_199>:
800038e0:	3c 00       	j 800038e0 <osEE_tc_core0_isr_dummy_entry_199>
	...

80003900 <osEE_tc_core0_isr_dummy_entry_200>:
80003900:	3c 00       	j 80003900 <osEE_tc_core0_isr_dummy_entry_200>
	...

80003920 <osEE_tc_core0_isr_dummy_entry_201>:
80003920:	3c 00       	j 80003920 <osEE_tc_core0_isr_dummy_entry_201>
	...

80003940 <osEE_tc_core0_isr_dummy_entry_202>:
80003940:	3c 00       	j 80003940 <osEE_tc_core0_isr_dummy_entry_202>
	...

80003960 <osEE_tc_core0_isr_dummy_entry_203>:
80003960:	3c 00       	j 80003960 <osEE_tc_core0_isr_dummy_entry_203>
	...

80003980 <osEE_tc_core0_isr_dummy_entry_204>:
80003980:	3c 00       	j 80003980 <osEE_tc_core0_isr_dummy_entry_204>
	...

800039a0 <osEE_tc_core0_isr_dummy_entry_205>:
800039a0:	3c 00       	j 800039a0 <osEE_tc_core0_isr_dummy_entry_205>
	...

800039c0 <osEE_tc_core0_isr_dummy_entry_206>:
800039c0:	3c 00       	j 800039c0 <osEE_tc_core0_isr_dummy_entry_206>
	...

800039e0 <osEE_tc_core0_isr_dummy_entry_207>:
800039e0:	3c 00       	j 800039e0 <osEE_tc_core0_isr_dummy_entry_207>
	...

80003a00 <osEE_tc_core0_isr_dummy_entry_208>:
80003a00:	3c 00       	j 80003a00 <osEE_tc_core0_isr_dummy_entry_208>
	...

80003a20 <osEE_tc_core0_isr_dummy_entry_209>:
80003a20:	3c 00       	j 80003a20 <osEE_tc_core0_isr_dummy_entry_209>
	...

80003a40 <osEE_tc_core0_isr_dummy_entry_210>:
80003a40:	3c 00       	j 80003a40 <osEE_tc_core0_isr_dummy_entry_210>
	...

80003a60 <osEE_tc_core0_isr_dummy_entry_211>:
80003a60:	3c 00       	j 80003a60 <osEE_tc_core0_isr_dummy_entry_211>
	...

80003a80 <osEE_tc_core0_isr_dummy_entry_212>:
80003a80:	3c 00       	j 80003a80 <osEE_tc_core0_isr_dummy_entry_212>
	...

80003aa0 <osEE_tc_core0_isr_dummy_entry_213>:
80003aa0:	3c 00       	j 80003aa0 <osEE_tc_core0_isr_dummy_entry_213>
	...

80003ac0 <osEE_tc_core0_isr_dummy_entry_214>:
80003ac0:	3c 00       	j 80003ac0 <osEE_tc_core0_isr_dummy_entry_214>
	...

80003ae0 <osEE_tc_core0_isr_dummy_entry_215>:
80003ae0:	3c 00       	j 80003ae0 <osEE_tc_core0_isr_dummy_entry_215>
	...

80003b00 <osEE_tc_core0_isr_dummy_entry_216>:
80003b00:	3c 00       	j 80003b00 <osEE_tc_core0_isr_dummy_entry_216>
	...

80003b20 <osEE_tc_core0_isr_dummy_entry_217>:
80003b20:	3c 00       	j 80003b20 <osEE_tc_core0_isr_dummy_entry_217>
	...

80003b40 <osEE_tc_core0_isr_dummy_entry_218>:
80003b40:	3c 00       	j 80003b40 <osEE_tc_core0_isr_dummy_entry_218>
	...

80003b60 <osEE_tc_core0_isr_dummy_entry_219>:
80003b60:	3c 00       	j 80003b60 <osEE_tc_core0_isr_dummy_entry_219>
	...

80003b80 <osEE_tc_core0_isr_dummy_entry_220>:
80003b80:	3c 00       	j 80003b80 <osEE_tc_core0_isr_dummy_entry_220>
	...

80003ba0 <osEE_tc_core0_isr_dummy_entry_221>:
80003ba0:	3c 00       	j 80003ba0 <osEE_tc_core0_isr_dummy_entry_221>
	...

80003bc0 <osEE_tc_core0_isr_dummy_entry_222>:
80003bc0:	3c 00       	j 80003bc0 <osEE_tc_core0_isr_dummy_entry_222>
	...

80003be0 <osEE_tc_core0_isr_dummy_entry_223>:
80003be0:	3c 00       	j 80003be0 <osEE_tc_core0_isr_dummy_entry_223>
	...

80003c00 <osEE_tc_core0_isr_dummy_entry_224>:
80003c00:	3c 00       	j 80003c00 <osEE_tc_core0_isr_dummy_entry_224>
	...

80003c20 <osEE_tc_core0_isr_dummy_entry_225>:
80003c20:	3c 00       	j 80003c20 <osEE_tc_core0_isr_dummy_entry_225>
	...

80003c40 <osEE_tc_core0_isr_dummy_entry_226>:
80003c40:	3c 00       	j 80003c40 <osEE_tc_core0_isr_dummy_entry_226>
	...

80003c60 <osEE_tc_core0_isr_dummy_entry_227>:
80003c60:	3c 00       	j 80003c60 <osEE_tc_core0_isr_dummy_entry_227>
	...

80003c80 <osEE_tc_core0_isr_dummy_entry_228>:
80003c80:	3c 00       	j 80003c80 <osEE_tc_core0_isr_dummy_entry_228>
	...

80003ca0 <osEE_tc_core0_isr_dummy_entry_229>:
80003ca0:	3c 00       	j 80003ca0 <osEE_tc_core0_isr_dummy_entry_229>
	...

80003cc0 <osEE_tc_core0_isr_dummy_entry_230>:
80003cc0:	3c 00       	j 80003cc0 <osEE_tc_core0_isr_dummy_entry_230>
	...

80003ce0 <osEE_tc_core0_isr_dummy_entry_231>:
80003ce0:	3c 00       	j 80003ce0 <osEE_tc_core0_isr_dummy_entry_231>
	...

80003d00 <osEE_tc_core0_isr_dummy_entry_232>:
80003d00:	3c 00       	j 80003d00 <osEE_tc_core0_isr_dummy_entry_232>
	...

80003d20 <osEE_tc_core0_isr_dummy_entry_233>:
80003d20:	3c 00       	j 80003d20 <osEE_tc_core0_isr_dummy_entry_233>
	...

80003d40 <osEE_tc_core0_isr_dummy_entry_234>:
80003d40:	3c 00       	j 80003d40 <osEE_tc_core0_isr_dummy_entry_234>
	...

80003d60 <osEE_tc_core0_isr_dummy_entry_235>:
80003d60:	3c 00       	j 80003d60 <osEE_tc_core0_isr_dummy_entry_235>
	...

80003d80 <osEE_tc_core0_isr_dummy_entry_236>:
80003d80:	3c 00       	j 80003d80 <osEE_tc_core0_isr_dummy_entry_236>
	...

80003da0 <osEE_tc_core0_isr_dummy_entry_237>:
80003da0:	3c 00       	j 80003da0 <osEE_tc_core0_isr_dummy_entry_237>
	...

80003dc0 <osEE_tc_core0_isr_dummy_entry_238>:
80003dc0:	3c 00       	j 80003dc0 <osEE_tc_core0_isr_dummy_entry_238>
	...

80003de0 <osEE_tc_core0_isr_dummy_entry_239>:
80003de0:	3c 00       	j 80003de0 <osEE_tc_core0_isr_dummy_entry_239>
	...

80003e00 <osEE_tc_core0_isr_dummy_entry_240>:
80003e00:	3c 00       	j 80003e00 <osEE_tc_core0_isr_dummy_entry_240>
	...

80003e20 <osEE_tc_core0_isr_dummy_entry_241>:
80003e20:	3c 00       	j 80003e20 <osEE_tc_core0_isr_dummy_entry_241>
	...

80003e40 <osEE_tc_core0_isr_dummy_entry_242>:
80003e40:	3c 00       	j 80003e40 <osEE_tc_core0_isr_dummy_entry_242>
	...

80003e60 <osEE_tc_core0_isr_dummy_entry_243>:
80003e60:	3c 00       	j 80003e60 <osEE_tc_core0_isr_dummy_entry_243>
	...

80003e80 <osEE_tc_core0_isr_dummy_entry_244>:
80003e80:	3c 00       	j 80003e80 <osEE_tc_core0_isr_dummy_entry_244>
	...

80003ea0 <osEE_tc_core0_isr_dummy_entry_245>:
80003ea0:	3c 00       	j 80003ea0 <osEE_tc_core0_isr_dummy_entry_245>
	...

80003ec0 <osEE_tc_core0_isr_dummy_entry_246>:
80003ec0:	3c 00       	j 80003ec0 <osEE_tc_core0_isr_dummy_entry_246>
	...

80003ee0 <osEE_tc_core0_isr_dummy_entry_247>:
80003ee0:	3c 00       	j 80003ee0 <osEE_tc_core0_isr_dummy_entry_247>
	...

80003f00 <osEE_tc_core0_isr_dummy_entry_248>:
80003f00:	3c 00       	j 80003f00 <osEE_tc_core0_isr_dummy_entry_248>
	...

80003f20 <osEE_tc_core0_isr_dummy_entry_249>:
80003f20:	3c 00       	j 80003f20 <osEE_tc_core0_isr_dummy_entry_249>
	...

80003f40 <osEE_tc_core0_isr_dummy_entry_250>:
80003f40:	3c 00       	j 80003f40 <osEE_tc_core0_isr_dummy_entry_250>
	...

80003f60 <osEE_tc_core0_isr_dummy_entry_251>:
80003f60:	3c 00       	j 80003f60 <osEE_tc_core0_isr_dummy_entry_251>
	...

80003f80 <osEE_tc_core0_isr_dummy_entry_252>:
80003f80:	3c 00       	j 80003f80 <osEE_tc_core0_isr_dummy_entry_252>
	...

80003fa0 <osEE_tc_core0_isr_dummy_entry_253>:
80003fa0:	3c 00       	j 80003fa0 <osEE_tc_core0_isr_dummy_entry_253>
	...

80003fc0 <osEE_tc_core0_isr_dummy_entry_254>:
80003fc0:	3c 00       	j 80003fc0 <osEE_tc_core0_isr_dummy_entry_254>
	...

80003fe0 <osEE_tc_core0_isr_dummy_entry_255>:
80003fe0:	3c 00       	j 80003fe0 <osEE_tc_core0_isr_dummy_entry_255>
	...

Disassembly of section .text:

80004000 <TimerISR>:
#include "bsw.h"
volatile unsigned long shared = 0;

ISR2(TimerISR)
{
    osEE_tc_stm_set_sr0_next_match(1000U);
80004000:	3b 80 3e 40 	mov %d4,1000
80004004:	6d 00 80 2a 	call 80009504 <osEE_tc_stm_set_sr0_next_match>
    IncrementCounter(myCounter);
80004008:	82 04       	mov %d4,0
8000400a:	1d 00 d6 32 	j 8000a5b6 <IncrementCounter>

8000400e <FuncTask1>:
}

TASK(Task1)
{
    unsigned long i;
    printfSerial("Task1 Begins...\n");
8000400e:	91 00 00 48 	movh.a %a4,32768
    osEE_tc_stm_set_sr0_next_match(1000U);
    IncrementCounter(myCounter);
}

TASK(Task1)
{
80004012:	20 08       	sub.a %sp,8
    unsigned long i;
    printfSerial("Task1 Begins...\n");
80004014:	d9 44 28 00 	lea %a4,[%a4]40
80004018:	6d 00 8b 00 	call 8000412e <printfSerial>
8000401c:	7b 10 13 f0 	movh %d15,305
    for (i = 0; i < 20000000; i++) {
        GetSpinlock(S2);
        shared++;
80004020:	91 00 00 f7 	movh.a %a15,28672
}

TASK(Task1)
{
    unsigned long i;
    printfSerial("Task1 Begins...\n");
80004024:	1b 0f d0 f2 	addi %d15,%d15,11520
    for (i = 0; i < 20000000; i++) {
        GetSpinlock(S2);
        shared++;
80004028:	d9 ff a4 10 	lea %a15,[%a15]2148 <70000864 <shared>>
TASK(Task1)
{
    unsigned long i;
    printfSerial("Task1 Begins...\n");
    for (i = 0; i < 20000000; i++) {
        GetSpinlock(S2);
8000402c:	82 14       	mov %d4,1
8000402e:	6d 00 61 34 	call 8000a8f0 <GetSpinlock>
        shared++;
80004032:	48 02       	ld.w %d2,[%a15]0
        ReleaseSpinlock(S2);
80004034:	82 14       	mov %d4,1
{
    unsigned long i;
    printfSerial("Task1 Begins...\n");
    for (i = 0; i < 20000000; i++) {
        GetSpinlock(S2);
        shared++;
80004036:	c2 12       	add %d2,1
80004038:	c2 ff       	add %d15,-1
8000403a:	68 02       	st.w [%a15]0,%d2
        ReleaseSpinlock(S2);
8000403c:	6d 00 ba 34 	call 8000a9b0 <ReleaseSpinlock>

TASK(Task1)
{
    unsigned long i;
    printfSerial("Task1 Begins...\n");
    for (i = 0; i < 20000000; i++) {
80004040:	ee f6       	jnz %d15,8000402c <FuncTask1+0x1e>
        GetSpinlock(S2);
        shared++;
        ReleaseSpinlock(S2);
    }
    printfSerial("Added 20000000 to shared\n");
80004042:	91 00 00 48 	movh.a %a4,32768
80004046:	d9 44 39 00 	lea %a4,[%a4]57 <80000039 <_start+0x19>>
8000404a:	6d 00 72 00 	call 8000412e <printfSerial>
    printfSerial("counter = %lu\n", shared);
8000404e:	4c f0       	ld.w %d15,[%a15]0
80004050:	91 00 00 48 	movh.a %a4,32768
80004054:	78 00       	st.w [%sp]0,%d15
80004056:	d9 44 13 10 	lea %a4,[%a4]83 <80000053 <_start+0x33>>
8000405a:	6d 00 6a 00 	call 8000412e <printfSerial>
    printfSerial("Task1 Finishes...\n");
8000405e:	91 00 00 48 	movh.a %a4,32768
80004062:	d9 44 22 10 	lea %a4,[%a4]98 <80000062 <_start+0x42>>
80004066:	6d 00 64 00 	call 8000412e <printfSerial>
    TerminateTask();
}
8000406a:	d9 aa 08 00 	lea %sp,[%sp]8
        ReleaseSpinlock(S2);
    }
    printfSerial("Added 20000000 to shared\n");
    printfSerial("counter = %lu\n", shared);
    printfSerial("Task1 Finishes...\n");
    TerminateTask();
8000406e:	1d 00 5e 2e 	j 80009d2a <TerminateTask>

80004072 <FuncTask2>:
}

TASK(Task2)
{
    static unsigned long i = 0;
    if (i < 500) {
80004072:	91 00 00 f7 	movh.a %a15,28672
80004076:	19 ff a0 10 	ld.w %d15,[%a15]2144 <70000860 <i.15855>>
8000407a:	8b 4f bf 22 	ge.u %d2,%d15,500
8000407e:	f6 2f       	jnz %d2,8000409c <FuncTask2+0x2a>
        GetSpinlock(S2);
80004080:	82 14       	mov %d4,1
80004082:	6d 00 37 34 	call 8000a8f0 <GetSpinlock>
        shared++;
80004086:	91 00 00 27 	movh.a %a2,28672
8000408a:	19 2f a4 10 	ld.w %d15,[%a2]2148 <70000864 <shared>>
        ReleaseSpinlock(S2);
8000408e:	82 14       	mov %d4,1
TASK(Task2)
{
    static unsigned long i = 0;
    if (i < 500) {
        GetSpinlock(S2);
        shared++;
80004090:	c2 1f       	add %d15,1
80004092:	59 2f a4 10 	st.w [%a2]2148 <70000864 <shared>>,%d15
        ReleaseSpinlock(S2);
80004096:	6d 00 8d 34 	call 8000a9b0 <ReleaseSpinlock>
8000409a:	3c 0a       	j 800040ae <FuncTask2+0x3c>
    } else if (i == 500) {
8000409c:	3b 40 1f 20 	mov %d2,500
800040a0:	7e 27       	jne %d15,%d2,800040ae <FuncTask2+0x3c>
        printfSerial("Added 500 to shared\n");
800040a2:	91 00 00 48 	movh.a %a4,32768
800040a6:	d9 44 35 10 	lea %a4,[%a4]117 <80000075 <_start+0x55>>
800040aa:	6d 00 42 00 	call 8000412e <printfSerial>
    }
    i++;
800040ae:	19 ff a0 10 	ld.w %d15,[%a15]2144 <70000860 <i.15855>>
800040b2:	c2 1f       	add %d15,1
800040b4:	59 ff a0 10 	st.w [%a15]2144 <70000860 <i.15855>>,%d15
    TerminateTask();
800040b8:	1d 00 39 2e 	j 80009d2a <TerminateTask>

800040bc <UART_init>:
                                        IfxVadc_ChannelId_6,  /* AN38: channel 6 of group 4                         */
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void UART_init(void)
{
800040bc:	20 60       	sub.a %sp,96

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800040be:	d9 a4 24 00 	lea %a4,[%sp]36
800040c2:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x3fff8900>
    ascConfig.baudrate.prescaler    = 1;
800040c6:	82 1f       	mov %d15,1

void UART_init(void)
{

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800040c8:	6d 00 72 0a 	call 800055ac <IfxAsclin_Asc_initModuleConfig>
    ascConfig.baudrate.prescaler    = 1;
800040cc:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
800040d0:	7b 10 7e f4 	movh %d15,18401
800040d4:	78 0a       	st.w [%sp]40,%d15
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
800040d6:	82 3f       	mov %d15,3
800040d8:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;
800040dc:	da 13       	mov %d15,19
800040de:	f9 af 00 10 	st.h [%sp]64,%d15


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800040e2:	4d c0 e1 ff 	mfcr %d15,$core_id
    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800040e6:	7b 00 00 28 	movh %d2,32768
800040ea:	60 23       	mov.a %a3,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800040ec:	37 0f 63 f0 	extr.u %d15,%d15,0,3
800040f0:	d9 af 04 00 	lea %a15,[%sp]4
800040f4:	40 f4       	mov.aa %a4,%a15
800040f6:	d9 32 0c 20 	lea %a2,[%a3]140
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
800040fa:	e9 af 06 10 	st.b [%sp]70,%d15
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800040fe:	a0 33       	mov.a %a3,3
80004100:	09 22 48 01 	ld.d %e2,[%a2+]8
80004104:	89 42 48 01 	st.d [%a4+]8,%e2
80004108:	fc 3c       	loop %a3,80004100 <UART_init+0x44>

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
8000410a:	7b 00 00 f7 	movh %d15,28672
8000410e:	1b 4f 8a f0 	addi %d15,%d15,2212
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004112:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
80004116:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004118:	d9 44 b8 b0 	lea %a4,[%a4]2808 <70000af8 <g_AsclinAsc+0x254>>
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
8000411c:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004120:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004124:	f9 af 0e 10 	st.h [%sp]78,%d15
        &IfxAsclin3_RXD_P32_2_IN, IfxPort_InputMode_pullUp,        /* Rx pin */
        NULL_PTR,                     IfxPort_OutputMode_pushPull,     /* RTS pin not used */
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
80004128:	f8 12       	st.a [%sp]72,%a15
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000412a:	1d 00 6a 08 	j 800051fe <IfxAsclin_Asc_initModule>

8000412e <printfSerial>:
    //printf("Asclin Asc is initialised\n");
}


void printfSerial(const char *fmt,...)
{
8000412e:	20 e8       	sub.a %sp,232
    GetSpinlock(S1);
80004130:	82 04       	mov %d4,0
    //printf("Asclin Asc is initialised\n");
}


void printfSerial(const char *fmt,...)
{
80004132:	40 4f       	mov.aa %a15,%a4
    GetSpinlock(S1);
80004134:	6d 00 de 33 	call 8000a8f0 <GetSpinlock>
//    EnableAllInterrupts();
    char buf[LEN_BUF];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, LEN_BUF, fmt, args);
80004138:	40 f5       	mov.aa %a5,%a15
8000413a:	d9 a4 28 10 	lea %a4,[%sp]104
8000413e:	3b 00 08 40 	mov %d4,128
80004142:	d9 a6 28 30 	lea %a6,[%sp]232
80004146:	6d 00 40 43 	call 8000c7c6 <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
8000414a:	d9 a4 28 10 	lea %a4,[%sp]104
8000414e:	6d 00 0d 43 	call 8000c768 <strlen>
80004152:	91 00 00 f7 	movh.a %a15,28672
80004156:	d9 ff a4 20 	lea %a15,[%a15]2212 <700008a4 <g_AsclinAsc>>
8000415a:	f9 f2 3a 90 	st.h [%a15]634 <7000027a <__malloc_av_+0x252>>,%d2
    unsigned int i =0;
8000415e:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
80004160:	d9 a4 28 10 	lea %a4,[%sp]104
80004164:	6d 00 02 43 	call 8000c768 <strlen>
80004168:	7f 2f 0c 80 	jge.u %d15,%d2,80004180 <printfSerial+0x52>
        txData[i] = buf[i];
8000416c:	d9 a3 04 00 	lea %a3,[%sp]4
80004170:	10 32       	addsc.a %a2,%a3,%d15,0
80004172:	d9 a3 28 10 	lea %a3,[%sp]104
80004176:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
80004178:	c2 1f       	add %d15,1
        txData[i] = buf[i];
8000417a:	08 02       	ld.bu %d2,[%a15]0
8000417c:	34 22       	st.b [%a2],%d2
8000417e:	3c f1       	j 80004160 <printfSerial+0x32>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
80004180:	82 f4       	mov %d4,-1
80004182:	91 00 00 47 	movh.a %a4,28672
80004186:	91 00 00 67 	movh.a %a6,28672
8000418a:	9b 04 00 58 	addih %d5,%d4,32768
8000418e:	d9 44 b8 b0 	lea %a4,[%a4]2808 <70000af8 <g_AsclinAsc+0x254>>
80004192:	d9 a5 04 00 	lea %a5,[%sp]4 <70000af8 <g_AsclinAsc+0x254>>
80004196:	d9 66 9e c0 	lea %a6,[%a6]2846 <70000b1e <g_AsclinAsc+0x27a>>
8000419a:	6d 00 71 0a 	call 8000567c <IfxAsclin_Asc_write>
    ReleaseSpinlock(S1);
8000419e:	82 04       	mov %d4,0
800041a0:	1d 00 08 34 	j 8000a9b0 <ReleaseSpinlock>

800041a4 <mdelay>:

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800041a4:	85 fa 10 00 	ld.w %d10,f0000010 <_SMALL_DATA4_+0x3fff8010>
}

void mdelay(unsigned long delay_ms)
{
800041a8:	02 4b       	mov %d11,%d4
    result |= ((uint64)stm->CAP.U) << 32;
800041aa:	85 fc 2c 00 	ld.w %d12,f000002c <_SMALL_DATA4_+0x3fff802c>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
800041ae:	6d 00 5b 0e 	call 80005e64 <IfxScuCcu_getSourceFrequency>
800041b2:	91 30 00 ff 	movh.a %a15,61443
800041b6:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800041ba:	4c f0       	ld.w %d15,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800041bc:	53 1a 40 80 	mul.u %e8,%d10,1
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800041c0:	0b ac 10 48 	mov %e4,%d12,%d10
800041c4:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800041c8:	a6 95       	or %d5,%d9
800041ca:	02 28       	mov %d8,%d2
800041cc:	6d 00 bb 3b 	call 8000b942 <__floatundisf>
800041d0:	4b 0f 41 f1 	itof %d15,%d15
800041d4:	7b a0 47 a4 	movh %d10,17530
800041d8:	4b f8 51 f0 	div.f %d15,%d8,%d15
800041dc:	40 fc       	mov.aa %a12,%a15
800041de:	40 fd       	mov.aa %a13,%a15
800041e0:	4b af 51 f0 	div.f %d15,%d15,%d10
800041e4:	4b f2 51 20 	div.f %d2,%d2,%d15
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800041e8:	02 ae       	mov %d14,%d10
    ReleaseSpinlock(S1);
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800041ea:	4b 02 71 f1 	ftouz %d15,%d2
800041ee:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800041f2:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
800041f6:	6d 00 37 0e 	call 80005e64 <IfxScuCcu_getSourceFrequency>
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
800041fa:	3b 40 01 40 	mov %d4,20
800041fe:	4b 4b 11 42 	div.u %e4,%d11,%d4
80004202:	48 02       	ld.w %d2,[%a15]0
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
80004204:	82 0b       	mov %d11,0
    while (cnt < (delay_ms / period_ms)) {
80004206:	02 4d       	mov %d13,%d4
80004208:	5f db 41 00 	jeq %d11,%d13,8000428a <mdelay+0xe6>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000420c:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80004210:	85 fe 2c 08 	ld.a %a14,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004214:	53 1c 40 80 	mul.u %e8,%d12,1
80004218:	6d 00 26 0e 	call 80005e64 <IfxScuCcu_getSourceFrequency>
8000421c:	54 c3       	ld.w %d3,[%a12]
    result |= ((uint64)stm->CAP.U) << 32;
8000421e:	80 e5       	mov.d %d5,%a14
80004220:	37 03 64 34 	extr.u %d3,%d3,8,4
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004224:	02 c4       	mov %d4,%d12
80004226:	a6 95       	or %d5,%d9
80004228:	60 3f       	mov.a %a15,%d3
8000422a:	02 28       	mov %d8,%d2
8000422c:	6d 00 8b 3b 	call 8000b942 <__floatundisf>
80004230:	80 f4       	mov.d %d4,%a15
80004232:	4b 04 41 31 	itof %d3,%d4
80004236:	4b 38 51 80 	div.f %d8,%d8,%d3
8000423a:	4b a8 51 80 	div.f %d8,%d8,%d10
8000423e:	4b 82 51 20 	div.f %d2,%d2,%d8
80004242:	4b 02 71 21 	ftouz %d2,%d2
        if (current_ms - prev_ms >= period_ms) {
80004246:	a2 f2       	sub %d2,%d15
80004248:	8b 42 61 22 	lt.u %d2,%d2,20
8000424c:	df 02 de ff 	jne %d2,0,80004208 <mdelay+0x64>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004250:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80004254:	85 ff 2c 08 	ld.a %a15,f000002c <_SMALL_DATA4_+0x3fff802c>
80004258:	6d 00 06 0e 	call 80005e64 <IfxScuCcu_getSourceFrequency>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000425c:	53 1c 40 80 	mul.u %e8,%d12,1
80004260:	4c d0       	ld.w %d15,[%a13]0
    result |= ((uint64)stm->CAP.U) << 32;
80004262:	80 f5       	mov.d %d5,%a15
80004264:	37 0f 64 f4 	extr.u %d15,%d15,8,4
            cnt++;
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004268:	02 c4       	mov %d4,%d12
8000426a:	a6 95       	or %d5,%d9
8000426c:	02 28       	mov %d8,%d2
8000426e:	6d 00 6a 3b 	call 8000b942 <__floatundisf>
80004272:	4b 0f 41 f1 	itof %d15,%d15
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
        if (current_ms - prev_ms >= period_ms) {
            cnt++;
80004276:	c2 1b       	add %d11,1
80004278:	4b f8 51 f0 	div.f %d15,%d8,%d15
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
8000427c:	4b ef 51 f0 	div.f %d15,%d15,%d14
80004280:	4b f2 51 20 	div.f %d2,%d2,%d15
80004284:	4b 02 71 f1 	ftouz %d15,%d2
80004288:	3c c0       	j 80004208 <mdelay+0x64>
        }
    }
}
8000428a:	00 90       	ret 

8000428c <initVADCModule>:
    IfxVadc_Adc_startBackgroundScan(&g_vadc);
}

/* Function to initialize the VADC module with default parameters */
void initVADCModule(void)
{
8000428c:	20 28       	sub.a %sp,40
    IfxVadc_Adc_Config adcConf;                                         /* Define a configuration structure         */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);               /* Fill it with default values              */
8000428e:	d9 a4 04 00 	lea %a4,[%sp]4
80004292:	91 20 00 5f 	movh.a %a5,61442
80004296:	6d 00 ce 1d 	call 80007e32 <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&g_vadc, &adcConf);                          /* Apply the configuration                  */
8000429a:	91 00 00 47 	movh.a %a4,28672
8000429e:	d9 44 94 20 	lea %a4,[%a4]2196 <70000894 <g_vadc>>
800042a2:	d9 a5 04 00 	lea %a5,[%sp]4 <70000894 <g_vadc>>
800042a6:	1d 00 52 1d 	j 80007d4a <IfxVadc_Adc_initModule>

800042aa <initVADCGroup>:
}

/* Function to initialize the VADC group */
void initVADCGroup(void)
{
800042aa:	20 38       	sub.a %sp,56
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */
800042ac:	91 00 00 57 	movh.a %a5,28672
800042b0:	40 a4       	mov.aa %a4,%sp
800042b2:	d9 55 94 20 	lea %a5,[%a5]2196 <70000894 <g_vadc>>
800042b6:	6d 00 33 1d 	call 80007d1c <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
800042ba:	82 4f       	mov %d15,4
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800042bc:	91 00 00 47 	movh.a %a4,28672
void initVADCGroup(void)
{
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
800042c0:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
800042c2:	2c a5       	st.b [%sp]5,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800042c4:	d9 44 88 20 	lea %a4,[%a4]2184 <70000888 <g_vadcGroup>>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
800042c8:	82 1f       	mov %d15,1
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800042ca:	40 a5       	mov.aa %a5,%sp

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
800042cc:	e9 af 35 00 	st.b [%sp]53,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;
800042d0:	e9 af 28 00 	st.b [%sp]40,%d15

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800042d4:	e9 af 2c 00 	st.b [%sp]44,%d15

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800042d8:	1d 00 5d 1b 	j 80007992 <IfxVadc_Adc_initGroup>

800042dc <initVADCChannels>:
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800042dc:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800042e0:	7b 00 00 b7 	movh %d11,28672
800042e4:	7b 00 00 a7 	movh %d10,28672
}


IFX_INLINE void IfxVadc_Adc_setBackgroundScan(IfxVadc_Adc *vadc, IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setBackgroundScan(vadc->vadc, group->groupId, channels, mask);
800042e8:	91 00 00 d7 	movh.a %a13,28672
    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
}

/* Function to initialize the VADC used channels */
void initVADCChannels(void)
{
800042ec:	20 60       	sub.a %sp,96
800042ee:	82 0f       	mov %d15,0
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800042f0:	d9 ee 88 20 	lea %a14,[%a14]2184 <70000888 <g_vadcGroup>>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800042f4:	1b 0b 00 b0 	addi %d11,%d11,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
800042f8:	82 19       	mov %d9,1
800042fa:	1b 8a 86 a0 	addi %d10,%d10,2152
800042fe:	d9 dd 94 20 	lea %a13,[%a13]2196
80004302:	53 8f 21 80 	mul %d8,%d15,24
80004306:	40 ac       	mov.aa %a12,%sp
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004308:	40 e5       	mov.aa %a5,%a14
8000430a:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000430c:	d9 af 20 10 	lea %a15,[%sp]96
80004310:	30 2c       	add.a %a12,%a2
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004312:	40 c4       	mov.aa %a4,%a12
80004314:	6d 00 34 1b 	call 8000797c <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004318:	60 83       	mov.a %a3,%d8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
8000431a:	40 c5       	mov.aa %a5,%a12
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000431c:	30 3f       	add.a %a15,%a3
8000431e:	60 b3       	mov.a %a3,%d11
80004320:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
80004322:	e9 ff ef ef 	st.b [%a15]-81,%d15
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004326:	14 22       	ld.bu %d2,[%a2]
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
80004328:	60 a2       	mov.a %a2,%d10
8000432a:	d0 24       	addsc.a %a4,%a2,%d15,3
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000432c:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
80004330:	e9 f9 e2 ef 	st.b [%a15]-94,%d9


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
80004334:	6d 00 2e 1a 	call 80007790 <IfxVadc_Adc_initChannel>
80004338:	d4 d2       	ld.a %a2,[%a13]
8000433a:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <osEE_kcb_var>>
8000433e:	c2 1f       	add %d15,1
80004340:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
80004344:	79 f2 ec ef 	ld.b %d2,[%a15]-84
}


IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask)
{
    channels                = (vadc->BRSSEL[groupId].U & ~mask) | channels;
80004348:	19 23 00 60 	ld.w %d3,[%a2]384
8000434c:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
80004350:	59 22 00 60 	st.w [%a2]384,%d2
void initVADCChannels(void)
{
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
80004354:	df 4f d7 ff 	jne %d15,4,80004302 <initVADCChannels+0x26>
        unsigned mask = chnEnableBit;                                   /* of the respective group to be added in   */
        IfxVadc_Adc_setBackgroundScan(&g_vadc, &g_vadcGroup, chnEnableBit, mask); /* the background scan sequence.  */

    }

}
80004358:	00 90       	ret 

8000435a <initADC>:
}


IFX_INLINE void IfxVadc_Adc_startBackgroundScan(IfxVadc_Adc *vadc)
{
    IfxVadc_startBackgroundScan(vadc->vadc);
8000435a:	91 00 00 f7 	movh.a %a15,28672
}

/* Function to initialize the VADC module */
void initADC(void)
{
    initVADCModule();                                                   /* Initialize the VADC module               */
8000435e:	6d ff 97 ff 	call 8000428c <initVADCModule>
    initVADCGroup();                                                    /* Initialize the VADC group                */
80004362:	6d ff a4 ff 	call 800042aa <initVADCGroup>
    initVADCChannels();                                                 /* Initialize the used channels             */
80004366:	6d ff bb ff 	call 800042dc <initVADCChannels>
8000436a:	99 ff 94 20 	ld.a %a15,[%a15]2196 <70000894 <g_vadc>>
}


IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.LDEV = 1;     /* execute Load event to start the conversion */
8000436e:	19 ff 04 80 	ld.w %d15,[%a15]516 <70000894 <g_vadc>>
80004372:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80004376:	59 ff 04 80 	st.w [%a15]516,%d15
8000437a:	00 90       	ret 

8000437c <readADCValue>:
}


IFX_INLINE Ifx_VADC_RES IfxVadc_Adc_getResult(IfxVadc_Adc_Channel *channel)
{
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
8000437c:	91 00 00 f7 	movh.a %a15,28672
80004380:	d9 ff a8 10 	lea %a15,[%a15]2152 <70000868 <g_vadcChannel>>
80004384:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004388:	c8 12       	ld.a %a2,[%a15]4
8000438a:	0c f1       	ld.bu %d15,[%a15]1
8000438c:	99 22 04 00 	ld.a %a2,[%a2]4

IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
{
    Ifx_VADC_RES tmpResult;

    tmpResult.U = group->RES[resultIdx].U;
80004390:	1b 0f 0a f0 	addi %d15,%d15,160
80004394:	90 2f       	addsc.a %a15,%a2,%d15,2
80004396:	4c f0       	ld.w %d15,[%a15]0
80004398:	37 0f 70 20 	extr.u %d2,%d15,0,16
{
    Ifx_VADC_RES conversionResult;
    do
    {
        conversionResult = IfxVadc_Adc_getResult(&g_vadcChannel[channel]);
    } while(!conversionResult.B.VF);
8000439c:	ff 0f fd 7f 	jge %d15,0,80004396 <readADCValue+0x1a>

    return conversionResult.B.RESULT;
}
800043a0:	00 90       	ret 

800043a2 <initPeripheralsAndERU>:

void initPeripheralsAndERU(void)
{
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
800043a2:	91 40 00 4f 	movh.a %a4,61444
800043a6:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
800043aa:	82 74       	mov %d4,7
800043ac:	3b 00 01 50 	mov %d5,16
800043b0:	6d 00 73 0b 	call 80005a96 <IfxPort_setPinMode>


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
800043b4:	91 00 00 f8 	movh.a %a15,32768
800043b8:	d9 ff c8 30 	lea %a15,[%a15]3272 <80000cc8 <IfxScu_REQ6_P02_0_IN>>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
800043bc:	c8 24       	ld.a %a4,[%a15]8
800043be:	91 00 00 d7 	movh.a %a13,28672
800043c2:	08 c4       	ld.bu %d4,[%a15]12
800043c4:	3b 80 00 50 	mov %d5,8
800043c8:	b5 df 98 20 	st.a [%a13]2200 <70000898 <g_ERUconfig>>,%a15
800043cc:	6d 00 65 0b 	call 80005a96 <IfxPort_setPinMode>
/******************************************************************************/

IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)
{
    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
800043d0:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
800043d4:	08 44       	ld.bu %d4,[%a15]4
800043d6:	6d 00 0e 15 	call 80006df2 <IfxScuEru_selectExternalInput>
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
800043da:	99 df 98 20 	ld.a %a15,[%a13]2200 <70000898 <g_ERUconfig>>
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
800043de:	d9 dc 98 20 	lea %a12,[%a13]2200 <70000898 <g_ERUconfig>>
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
800043e2:	82 0f       	mov %d15,0
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
800043e4:	08 44       	ld.bu %d4,[%a15]4
800043e6:	e9 c4 04 00 	st.b [%a12]4 <70000004 <__DSPR0_START+0x4>>,%d4

    /* Input channel configuration */
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */
800043ea:	6d 00 74 14 	call 80006cd2 <IfxScuEru_enableFallingEdgeDetection>
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800043ee:	39 c4 04 00 	ld.bu %d4,[%a12]4
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
800043f2:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
800043f4:	2c c5       	st.b [%a12]5,%d15

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800043f6:	6d 00 a7 14 	call 80006d44 <IfxScuEru_enableTriggerPulse>
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
800043fa:	39 c4 04 00 	ld.bu %d4,[%a12]4
800043fe:	39 c5 05 00 	ld.bu %d5,[%a12]5
80004402:	6d 00 db 13 	call 80006bb8 <IfxScuEru_connectTrigger>

    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
80004406:	39 c4 06 00 	ld.bu %d4,[%a12]6
8000440a:	82 15       	mov %d5,1
8000440c:	6d 00 2c 15 	call 80006e64 <IfxScuEru_setInterruptGatingPattern>

    /* Service request configuration */
    /* Get source pointer depending on outputChannel (SRC_SCUERU0 for outputChannel0) */
    g_ERUconfig.src = &MODULE_SRC.SCU.SCU.ERU[(int) g_ERUconfig.outputChannel % 4];
80004410:	0c c6       	ld.bu %d15,[%a12]6
80004412:	16 03       	and %d15,3
80004414:	06 2f       	sh %d15,2
80004416:	60 f2       	mov.a %a2,%d15
80004418:	d9 2f d4 38 	lea %a15,[%a2]-29484
8000441c:	11 4f 00 ff 	addih.a %a15,%a15,61444
80004420:	ec c2       	st.a [%a12]8,%a15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80004422:	4c f0       	ld.w %d15,[%a15]0
80004424:	b7 af 08 f0 	insert %d15,%d15,10,0,8
80004428:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
8000442a:	4c f0       	ld.w %d15,[%a15]0
8000442c:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
80004430:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80004432:	4c f0       	ld.w %d15,[%a15]0
80004434:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80004438:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
8000443a:	4c f0       	ld.w %d15,[%a15]0
8000443c:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80004440:	68 0f       	st.w [%a15]0,%d15
80004442:	00 90       	ret 

80004444 <asclin0TxISR>:
    IfxSrc_enable(g_ERUconfig.src);
}

ISR(asclin0TxISR)
{
    IfxAsclin_Asc_isrTransmit(&g_AsclinAsc.drivers.asc);
80004444:	91 00 00 47 	movh.a %a4,28672
80004448:	d9 44 b8 b0 	lea %a4,[%a4]2808 <70000af8 <g_AsclinAsc+0x254>>
8000444c:	1d 00 1e 06 	j 80005088 <IfxAsclin_Asc_isrTransmit>

80004450 <main>:
}

int main(void)
{
80004450:	20 08       	sub.a %sp,8
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80004452:	4d c0 e1 ff 	mfcr %d15,$core_id
    StatusType status1, status2;
    CoreIdType core_id = GetCoreID();
    if (core_id == OS_CORE_ID_MASTER) {
80004456:	37 0f 48 f0 	extr %d15,%d15,0,8
8000445a:	91 00 00 c8 	movh.a %a12,32768
8000445e:	91 00 00 f8 	movh.a %a15,32768
80004462:	d9 cc 2c 20 	lea %a12,[%a12]172 <800000ac <_start+0x8c>>
80004466:	d9 ff 16 30 	lea %a15,[%a15]214 <800000d6 <_start+0xb6>>
8000446a:	ee 20       	jnz %d15,800044aa <main+0x5a>
        osEE_tc_stm_set_clockpersec();
8000446c:	6d 00 f0 27 	call 8000944c <osEE_tc_stm_set_clockpersec>
        osEE_tc_stm_set_sr0(1000U, 1U);
80004470:	82 15       	mov %d5,1
80004472:	3b 80 3e 40 	mov %d4,1000
80004476:	6d 00 05 28 	call 80009480 <osEE_tc_stm_set_sr0>
        UART_init();
8000447a:	6d ff 21 fe 	call 800040bc <UART_init>
        initADC();
8000447e:	6d ff 6e ff 	call 8000435a <initADC>
        initPeripheralsAndERU();
80004482:	6d ff 90 ff 	call 800043a2 <initPeripheralsAndERU>
        StartCore(OS_CORE_ID_1, &status1);
80004486:	82 14       	mov %d4,1
80004488:	d9 a4 06 00 	lea %a4,[%sp]6
8000448c:	6d 00 04 31 	call 8000a694 <StartCore>
        StartCore(OS_CORE_ID_2, &status2);
80004490:	82 24       	mov %d4,2
80004492:	d9 a4 07 00 	lea %a4,[%sp]7
80004496:	6d 00 ff 30 	call 8000a694 <StartCore>
        printfSerial("\n...............\n");
8000449a:	40 c4       	mov.aa %a4,%a12
8000449c:	6d ff 49 fe 	call 8000412e <printfSerial>
        printfSerial("...Master OS Starts...\n");
800044a0:	91 00 00 48 	movh.a %a4,32768
800044a4:	d9 44 3e 20 	lea %a4,[%a4]190 <800000be <_start+0x9e>>
800044a8:	3c 08       	j 800044b8 <main+0x68>
        printfSerial("...............\n");
        StartOS(OSDEFAULTAPPMODE);
    } else {
        printfSerial("\n...............\n");
800044aa:	40 c4       	mov.aa %a4,%a12
800044ac:	6d ff 41 fe 	call 8000412e <printfSerial>
        printfSerial("...Slave OS Starts...\n");
800044b0:	91 00 00 48 	movh.a %a4,32768
800044b4:	d9 44 27 30 	lea %a4,[%a4]231 <800000e7 <_start+0xc7>>
800044b8:	6d ff 3b fe 	call 8000412e <printfSerial>
        printfSerial("...............\n");
800044bc:	40 f4       	mov.aa %a4,%a15
800044be:	6d ff 38 fe 	call 8000412e <printfSerial>
        StartOS(OSDEFAULTAPPMODE);
800044c2:	82 04       	mov %d4,0
800044c4:	6d 00 e3 29 	call 8000988a <StartOS>
    }
    return 0;
800044c8:	82 02       	mov %d2,0
800044ca:	00 90       	ret 

800044cc <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
800044cc:	02 4f       	mov %d15,%d4
800044ce:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800044d0:	6d 00 6d 16 	call 800071aa <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
800044d4:	02 24       	mov %d4,%d2
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800044d6:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
800044d8:	6d 00 66 15 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800044dc:	8b 0f a2 22 	ge.u %d2,%d15,32
800044e0:	f6 28       	jnz %d2,800044f0 <IfxVadc_disableAccess+0x24>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
800044e2:	19 f2 08 20 	ld.w %d2,[%a15]136
800044e6:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800044ea:	59 ff 08 20 	st.w [%a15]136,%d15
800044ee:	3c 08       	j 800044fe <IfxVadc_disableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
800044f0:	19 f2 0c 20 	ld.w %d2,[%a15]140
800044f4:	16 1f       	and %d15,31
800044f6:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800044fa:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800044fe:	02 84       	mov %d4,%d8
80004500:	1d 00 d8 16 	j 800072b0 <IfxScuWdt_setSafetyEndinit>

80004504 <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80004504:	02 4f       	mov %d15,%d4
80004506:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004508:	6d 00 51 16 	call 800071aa <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
8000450c:	02 24       	mov %d4,%d2
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
8000450e:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80004510:	6d 00 4a 15 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80004514:	8b 0f a2 22 	ge.u %d2,%d15,32
80004518:	f6 28       	jnz %d2,80004528 <IfxVadc_enableAccess+0x24>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
8000451a:	19 f2 08 20 	ld.w %d2,[%a15]136
8000451e:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80004522:	59 ff 08 20 	st.w [%a15]136,%d15
80004526:	3c 08       	j 80004536 <IfxVadc_enableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
80004528:	19 f2 0c 20 	ld.w %d2,[%a15]140
8000452c:	16 1f       	and %d15,31
8000452e:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80004532:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
80004536:	02 84       	mov %d4,%d8
80004538:	1d 00 bc 16 	j 800072b0 <IfxScuWdt_setSafetyEndinit>

8000453c <IfxVadc_configExternalMultiplexerMode>:

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
8000453c:	82 0f       	mov %d15,0
8000453e:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004542:	39 a3 04 00 	ld.bu %d3,[%sp]4
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
80004546:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000454a:	14 a2       	ld.bu %d2,[%sp]
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
8000454c:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
    emuxctr.B.EMUXCH   = channels;
80004550:	37 5f 0a f8 	insert %d15,%d15,%d5,16,10
    emuxctr.B.EMUXSET  = startChannel;
80004554:	37 6f 03 f0 	insert %d15,%d15,%d6,0,3
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004558:	3b f0 00 40 	mov %d4,15
    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
8000455c:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004560:	40 5f       	mov.aa %a15,%a5
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
80004562:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004566:	40 4c       	mov.aa %a12,%a4
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004568:	6d ff ce ff 	call 80004504 <IfxVadc_enableAccess>
    vadcG->EMUXCTR.U   = emuxctr.U;
8000456c:	59 ff 30 50 	st.w [%a15]368,%d15
    emuxctr.B.EMXWC    = 0;
80004570:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
    vadcG->EMUXCTR.U   = emuxctr.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004574:	40 c4       	mov.aa %a4,%a12
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
    vadcG->EMUXCTR.U   = emuxctr.U;
    emuxctr.B.EMXWC    = 0;
    vadcG->EMUXCTR.U   = emuxctr.U;
80004576:	59 ff 30 50 	st.w [%a15]368,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000457a:	3b f0 00 40 	mov %d4,15
8000457e:	1d ff a7 ff 	j 800044cc <IfxVadc_disableAccess>

80004582 <IfxVadc_disablePostCalibration>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
{
80004582:	40 4f       	mov.aa %a15,%a4
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
80004584:	ff 84 1c 80 	jge.u %d4,8,800045bc <IfxVadc_disablePostCalibration+0x3a>
80004588:	02 4f       	mov %d15,%d4
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
8000458a:	3b f0 01 40 	mov %d4,31
8000458e:	02 58       	mov %d8,%d5
80004590:	6d ff ba ff 	call 80004504 <IfxVadc_enableAccess>

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80004594:	1b 0f 01 40 	addi %d4,%d15,16

        if (disable == TRUE)
        {
            vadc->GLOBCFG.U |= mask;
80004598:	19 f2 00 20 	ld.w %d2,[%a15]128
{
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
8000459c:	82 1f       	mov %d15,1
8000459e:	0f 4f 00 f0 	sh %d15,%d15,%d4

        if (disable == TRUE)
800045a2:	df 18 04 80 	jne %d8,1,800045aa <IfxVadc_disablePostCalibration+0x28>
        {
            vadc->GLOBCFG.U |= mask;
800045a6:	a6 2f       	or %d15,%d2
800045a8:	3c 03       	j 800045ae <IfxVadc_disablePostCalibration+0x2c>
        }
        else
        {
            vadc->GLOBCFG.U &= ~mask;
800045aa:	0f f2 e0 f0 	andn %d15,%d2,%d15
800045ae:	59 ff 00 20 	st.w [%a15]128,%d15
        }

        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800045b2:	40 f4       	mov.aa %a4,%a15
800045b4:	3b f0 01 40 	mov %d4,31
800045b8:	1d ff 8a ff 	j 800044cc <IfxVadc_disableAccess>
800045bc:	00 90       	ret 

800045be <IfxVadc_enableGroupSync>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
800045be:	40 4f       	mov.aa %a15,%a4
800045c0:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800045c2:	6d 00 d6 15 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
800045c6:	02 24       	mov %d4,%d2
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800045c8:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
800045ca:	6d 00 d2 14 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800045ce:	40 f4       	mov.aa %a4,%a15
800045d0:	3b f0 01 40 	mov %d4,31
    IfxScuWdt_clearCpuEndinit(passwd);

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
800045d4:	19 ff 00 20 	ld.w %d15,[%a15]128
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800045d8:	6d ff 96 ff 	call 80004504 <IfxVadc_enableAccess>

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
800045dc:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
800045e0:	b7 1f 81 f3 	insert %d15,%d15,1,7,1

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800045e4:	40 f4       	mov.aa %a4,%a15
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
800045e6:	59 ff 00 20 	st.w [%a15]128,%d15
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800045ea:	3b f0 01 40 	mov %d4,31
800045ee:	6d ff 6f ff 	call 800044cc <IfxVadc_disableAccess>
    }

    if (ccu6Num == 0)
800045f2:	df 08 1a 80 	jne %d8,0,80004626 <IfxVadc_enableGroupSync+0x68>
    {
        // CCU60 Config
        CCU60_CLC.U = 0;
800045f6:	a5 f8 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d8

        if (CCU60_CLC.U)
800045fa:	85 ff 80 82 	ld.w %d15,f0002a00 <_SMALL_DATA4_+0x3fffaa00>
        {}

        CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800045fe:	82 4f       	mov %d15,4
80004600:	a5 ff 94 92 	st.w f0002a54 <_SMALL_DATA4_+0x3fffaa54>,%d15
        CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
80004604:	a5 ff 9c 92 	st.w f0002a5c <_SMALL_DATA4_+0x3fffaa5c>,%d15
        CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
80004608:	85 ff 80 a2 	ld.w %d15,f0002a80 <_SMALL_DATA4_+0x3fffaa80>
8000460c:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
80004610:	a5 ff 80 a2 	st.w f0002a80 <_SMALL_DATA4_+0x3fffaa80>,%d15
        CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
80004614:	3b 00 20 f4 	mov %d15,16896
80004618:	a5 ff b8 92 	st.w f0002a78 <_SMALL_DATA4_+0x3fffaa78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
8000461c:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
80004620:	8f 8f c3 f1 	andn %d15,%d15,56
80004624:	3c 1d       	j 8000465e <IfxVadc_enableGroupSync+0xa0>
    }
    else if (ccu6Num == 1)
80004626:	df 18 1e 80 	jne %d8,1,80004662 <IfxVadc_enableGroupSync+0xa4>
    {
        // CCU60 + CCU61 Config
        CCU60_CLC.U = 0;
8000462a:	82 0f       	mov %d15,0
8000462c:	a5 ff 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d15
        CCU61_CLC.U = 0;
80004630:	a5 ff 80 c2 	st.w f0002b00 <_SMALL_DATA4_+0x3fffab00>,%d15

        if (CCU61_CLC.U)
80004634:	85 ff 80 c2 	ld.w %d15,f0002b00 <_SMALL_DATA4_+0x3fffab00>
        {}

        CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
80004638:	82 4f       	mov %d15,4
8000463a:	a5 ff 94 d2 	st.w f0002b54 <_SMALL_DATA4_+0x3fffab54>,%d15
        CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
8000463e:	a5 ff 9c d2 	st.w f0002b5c <_SMALL_DATA4_+0x3fffab5c>,%d15
        CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
80004642:	85 ff 80 e2 	ld.w %d15,f0002b80 <_SMALL_DATA4_+0x3fffab80>
80004646:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
8000464a:	a5 ff 80 e2 	st.w f0002b80 <_SMALL_DATA4_+0x3fffab80>,%d15
        CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
8000464e:	3b 00 20 f4 	mov %d15,16896
80004652:	a5 ff b8 d2 	st.w f0002b78 <_SMALL_DATA4_+0x3fffab78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
80004656:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
8000465a:	b7 1f 83 f1 	insert %d15,%d15,1,3,3
8000465e:	a5 ff 8c 82 	st.w f0002a0c <_SMALL_DATA4_+0x3fffaa0c>,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80004662:	02 94       	mov %d4,%d9
80004664:	1d 00 ba 15 	j 800071d8 <IfxScuWdt_setCpuEndinit>

80004668 <IfxVadc_getAdcAnalogFrequency>:
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
80004668:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
8000466a:	6d 00 be 0c 	call 80005fe6 <IfxScuCcu_getSpbFrequency>
8000466e:	19 ff 00 20 	ld.w %d15,[%a15]128
80004672:	16 1f       	and %d15,31
80004674:	c2 1f       	add %d15,1
80004676:	4b 0f 41 f1 	itof %d15,%d15
}
8000467a:	4b f2 51 20 	div.f %d2,%d2,%d15
8000467e:	00 90       	ret 

80004680 <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
80004680:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
80004682:	6d 00 b2 0c 	call 80005fe6 <IfxScuCcu_getSpbFrequency>
80004686:	19 ff 00 20 	ld.w %d15,[%a15]128
8000468a:	37 0f 62 f4 	extr.u %d15,%d15,8,2
8000468e:	c2 1f       	add %d15,1
80004690:	4b 0f 41 f1 	itof %d15,%d15
}
80004694:	4b f2 51 20 	div.f %d2,%d2,%d15
80004698:	00 90       	ret 

8000469a <IfxVadc_getAdcModuleFrequency>:


float32 IfxVadc_getAdcModuleFrequency(void)
{
    return IfxScuCcu_getSpbFrequency();
8000469a:	1d 00 a6 0c 	j 80005fe6 <IfxScuCcu_getSpbFrequency>

8000469e <IfxVadc_getBackgroundScanStatus>:
}


IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
8000469e:	82 0f       	mov %d15,0
800046a0:	a0 7f       	mov.a %a15,7
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
    {
        if (vadc->BRSPND[i].U)
800046a2:	1b 0f 07 20 	addi %d2,%d15,112
800046a6:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
800046aa:	54 22       	ld.w %d2,[%a2]
800046ac:	f6 24       	jnz %d2,800046b4 <IfxVadc_getBackgroundScanStatus+0x16>
800046ae:	c2 1f       	add %d15,1
IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
800046b0:	fc f9       	loop %a15,800046a2 <IfxVadc_getBackgroundScanStatus+0x4>
800046b2:	00 90       	ret 
    {
        if (vadc->BRSPND[i].U)
        {
            return IfxVadc_Status_channelsStillPending;
800046b4:	82 62       	mov %d2,6
            continue;
        }
    }

    return status;
}
800046b6:	00 90       	ret 

800046b8 <IfxVadc_getQueueStatus>:
IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    /* just fill level is checked */
    if (0x7 == group->QSR0.B.FILL)
800046b8:	19 42 08 20 	ld.w %d2,[%a4]136
800046bc:	8f f2 00 21 	and %d2,%d2,15
    {
        status = IfxVadc_Status_queueFull;
    }
    else
    {
        status = IfxVadc_Status_noError;
800046c0:	8b 72 00 22 	eq %d2,%d2,7
    }

    return status;
}
800046c4:	06 22       	sh %d2,2
800046c6:	00 90       	ret 

800046c8 <IfxVadc_getResultBasedOnRequestSource>:
Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
{
    sint32       sourceResultRegister = -1;
    Ifx_VADC_RES tmpResult;

    switch (sourceType)
800046c8:	df 15 09 00 	jeq %d5,1,800046da <IfxVadc_getResultBasedOnRequestSource+0x12>
800046cc:	76 54       	jz %d5,800046d4 <IfxVadc_getResultBasedOnRequestSource+0xc>
800046ce:	df 25 0b 00 	jeq %d5,2,800046e4 <IfxVadc_getResultBasedOnRequestSource+0x1c>
800046d2:	3c 39       	j 80004744 <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
800046d4:	19 5f 00 20 	ld.w %d15,[%a5]128
800046d8:	3c 03       	j 800046de <IfxVadc_getResultBasedOnRequestSource+0x16>
        break;

    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
800046da:	19 5f 20 20 	ld.w %d15,[%a5]160
800046de:	16 0f       	and %d15,15
    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
        break;
    }

    if (sourceResultRegister > 0)
800046e0:	ee 39       	jnz %d15,80004752 <IfxVadc_getResultBasedOnRequestSource+0x8a>
800046e2:	3c 31       	j 80004744 <IfxVadc_getResultBasedOnRequestSource+0x7c>
    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
        break;

    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
800046e4:	19 4f 00 80 	ld.w %d15,[%a4]512
800046e8:	16 0f       	and %d15,15
        break;
    }

    if (sourceResultRegister > 0)
800046ea:	ee 34       	jnz %d15,80004752 <IfxVadc_getResultBasedOnRequestSource+0x8a>

        return tmpResult;
    }
    else
    {
        if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
800046ec:	1b 04 06 f0 	addi %d15,%d4,96
800046f0:	90 5f       	addsc.a %a15,%a5,%d15,2
800046f2:	4c f0       	ld.w %d15,[%a15]0
800046f4:	ef 4f 28 00 	jz.t %d15,20,80004744 <IfxVadc_getResultBasedOnRequestSource+0x7c>
        {
            tmpResult.B.VF     = vadc->GLOBRES.B.VF;
800046f8:	19 42 00 c0 	ld.w %d2,[%a4]768
800046fc:	82 0f       	mov %d15,0
800046fe:	67 2f 9f ff 	ins.t %d15,%d15,31,%d2,31
            tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
80004702:	19 42 00 c0 	ld.w %d2,[%a4]768
80004706:	67 2f 1e ff 	ins.t %d15,%d15,30,%d2,30
            tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
8000470a:	19 42 00 c0 	ld.w %d2,[%a4]768
8000470e:	37 02 62 2e 	extr.u %d2,%d2,28,2
80004712:	37 2f 02 fe 	insert %d15,%d15,%d2,28,2
            tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
80004716:	19 42 00 c0 	ld.w %d2,[%a4]768
8000471a:	37 02 e3 2c 	extr.u %d2,%d2,25,3
8000471e:	37 2f 83 fc 	insert %d15,%d15,%d2,25,3
            tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
80004722:	19 42 00 c0 	ld.w %d2,[%a4]768
80004726:	37 02 65 2a 	extr.u %d2,%d2,20,5
8000472a:	37 2f 05 fa 	insert %d15,%d15,%d2,20,5
            tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
8000472e:	19 42 00 c0 	ld.w %d2,[%a4]768
80004732:	37 02 64 28 	extr.u %d2,%d2,16,4
80004736:	37 2f 04 f8 	insert %d15,%d15,%d2,16,4
            tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
8000473a:	19 42 00 c0 	ld.w %d2,[%a4]768
8000473e:	37 2f 10 20 	insert %d2,%d15,%d2,0,16

            return tmpResult;
80004742:	00 90       	ret 
        }
        else
        {
            tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
80004744:	1b 04 06 40 	addi %d4,%d4,96
80004748:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
8000474c:	4c f0       	ld.w %d15,[%a15]0
8000474e:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004752:	1b 0f 0a f0 	addi %d15,%d15,160
80004756:	90 55       	addsc.a %a5,%a5,%d15,2
80004758:	54 52       	ld.w %d2,[%a5]

            return tmpResult;
8000475a:	00 90       	ret 

8000475c <IfxVadc_getScanStatus>:

IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    if (group->ASPND.U)
8000475c:	19 42 2c 20 	ld.w %d2,[%a4]172
    }
    else
    {
        return status;
    }
}
80004760:	ab 62 a0 22 	seln %d2,%d2,%d2,6
80004764:	00 90       	ret 

80004766 <IfxVadc_getSrcAddress>:

volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
80004766:	bf 45 0a 80 	jlt.u %d5,4,8000477a <IfxVadc_getSrcAddress+0x14>
    {
        index -= 4;
8000476a:	9a c5       	add %d15,%d5,-4
8000476c:	8f ff 0f 51 	and %d5,%d15,255

        if ((group & 0x1) != 0)
80004770:	8f 14 00 41 	and %d4,%d4,1
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
80004774:	da 08       	mov %d15,8
80004776:	ab 9f a0 44 	seln %d4,%d4,%d15,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
8000477a:	13 44 20 45 	madd %d4,%d5,%d4,4
8000477e:	91 00 00 f8 	movh.a %a15,32768
80004782:	d9 ff 1c d0 	lea %a15,[%a15]860 <8000035c <IfxVadc_cfg_srcAddresses>>
80004786:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2

    return &(base[0]);
}
8000478a:	c8 02       	ld.a %a2,[%a15]0
8000478c:	00 90       	ret 

8000478e <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
8000478e:	19 4f 00 20 	ld.w %d15,[%a4]128
    return &(base[0]);
}


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
80004792:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
80004794:	37 4f 02 f4 	insert %d15,%d15,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004798:	3b f0 01 40 	mov %d4,31
8000479c:	6d ff b4 fe 	call 80004504 <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
800047a0:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047a4:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800047a6:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047aa:	3b f0 01 40 	mov %d4,31
800047ae:	1d ff 8f fe 	j 800044cc <IfxVadc_disableAccess>

800047b2 <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800047b2:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
}


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
800047b6:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
800047b8:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800047bc:	3b f0 01 40 	mov %d4,31
800047c0:	6d ff a2 fe 	call 80004504 <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
800047c4:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047c8:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800047ca:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047ce:	3b f0 01 40 	mov %d4,31
800047d2:	1d ff 7d fe 	j 800044cc <IfxVadc_disableAccess>

800047d6 <IfxVadc_initializeFAdcD>:
}


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
800047d6:	02 4f       	mov %d15,%d4
800047d8:	40 4f       	mov.aa %a15,%a4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
800047da:	6d 00 06 0c 	call 80005fe6 <IfxScuCcu_getSpbFrequency>
800047de:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
800047e2:	4b f2 11 42 	div.u %e4,%d2,%d15
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800047e6:	82 3f       	mov %d15,3
800047e8:	c2 f4       	add %d4,-1
800047ea:	0b f4 90 41 	min.u %d4,%d4,%d15

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800047ee:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800047f2:	40 f4       	mov.aa %a4,%a15

    divD   = (fadc / fAdcD - 1);

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800047f4:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800047f8:	6d ff cb ff 	call 8000478e <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
800047fc:	02 82       	mov %d2,%d8
800047fe:	00 90       	ret 

80004800 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
80004800:	02 4f       	mov %d15,%d4
80004802:	40 4f       	mov.aa %a15,%a4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80004804:	6d 00 f1 0b 	call 80005fe6 <IfxScuCcu_getSpbFrequency>
80004808:	4b 02 71 21 	ftouz %d2,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
8000480c:	8f 22 00 40 	sh %d4,%d2,2
80004810:	4b f4 11 42 	div.u %e4,%d4,%d15
80004814:	3b f0 01 50 	mov %d5,31

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
80004818:	c2 24       	add %d4,2
8000481a:	06 e4       	sh %d4,-2
    divA   = __minu(divA - 1, 0x1Fu);
8000481c:	c2 f4       	add %d4,-1
8000481e:	0b 54 90 41 	min.u %d4,%d4,%d5
    result = fadc / (divA + 1);
80004822:	1b 14 00 30 	addi %d3,%d4,1
80004826:	4b 32 11 62 	div.u %e6,%d2,%d3
8000482a:	02 6f       	mov %d15,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
8000482c:	7b 10 13 60 	movh %d6,305
80004830:	1b 16 d0 62 	addi %d6,%d6,11521
80004834:	3f 6f 08 80 	jlt.u %d15,%d6,80004844 <IfxVadc_initializeFAdcI+0x44>
80004838:	0b 53 90 41 	min.u %d4,%d3,%d5
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
8000483c:	9a 14       	add %d15,%d4,1
8000483e:	4b f2 11 22 	div.u %e2,%d2,%d15
80004842:	02 2f       	mov %d15,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
80004844:	1b 0f ee 25 	addi %d2,%d15,24288
80004848:	7b a0 12 30 	movh %d3,298
8000484c:	9b 82 ff 2f 	addih %d2,%d2,65528
80004850:	1b 13 be 38 	addi %d3,%d3,-29727
80004854:	7f 32 06 80 	jge.u %d2,%d3,80004860 <IfxVadc_initializeFAdcI+0x60>
    {
        result = 0;             /* Min / Max FAdcI frequency */
    }
    else
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
80004858:	40 f4       	mov.aa %a4,%a15
8000485a:	6d ff ac ff 	call 800047b2 <IfxVadc_initialiseAdcConverterClock>
8000485e:	3c 02       	j 80004862 <IfxVadc_initializeFAdcI+0x62>
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
    {
        result = 0;             /* Min / Max FAdcI frequency */
80004860:	82 0f       	mov %d15,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
80004862:	02 f2       	mov %d2,%d15
80004864:	00 90       	ret 

80004866 <IfxVadc_isPostCalibration>:
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
        break;
    default: pcEnabled                = FALSE;
80004866:	82 02       	mov %d2,0

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004868:	ff 84 33 80 	jge.u %d4,8,800048ce <IfxVadc_isPostCalibration+0x68>
8000486c:	91 00 00 f8 	movh.a %a15,32768
80004870:	d9 ff 80 24 	lea %a15,[%a15]18560 <80004880 <IfxVadc_isPostCalibration+0x1a>>
80004874:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
        break;
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004878:	19 42 00 20 	ld.w %d2,[%a4]128

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
8000487c:	dc 0f       	ji %a15
8000487e:	00 00       	nop 
80004880:	1d 00 10 00 	j 800048a0 <IfxVadc_isPostCalibration+0x3a>
80004884:	1d 00 11 00 	j 800048a6 <IfxVadc_isPostCalibration+0x40>
80004888:	1d 00 12 00 	j 800048ac <IfxVadc_isPostCalibration+0x46>
8000488c:	1d 00 13 00 	j 800048b2 <IfxVadc_isPostCalibration+0x4c>
80004890:	1d 00 14 00 	j 800048b8 <IfxVadc_isPostCalibration+0x52>
80004894:	1d 00 15 00 	j 800048be <IfxVadc_isPostCalibration+0x58>
80004898:	1d 00 16 00 	j 800048c4 <IfxVadc_isPostCalibration+0x5e>
8000489c:	1d 00 17 00 	j 800048ca <IfxVadc_isPostCalibration+0x64>
    {
    case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
800048a0:	07 22 10 28 	nand.t %d2,%d2,16,%d2,16
        break;
800048a4:	00 90       	ret 
    case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
800048a6:	07 22 91 28 	nand.t %d2,%d2,17,%d2,17
        break;
800048aa:	00 90       	ret 
    case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
800048ac:	07 22 12 29 	nand.t %d2,%d2,18,%d2,18
        break;
800048b0:	00 90       	ret 
    case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
800048b2:	07 22 93 29 	nand.t %d2,%d2,19,%d2,19
        break;
800048b6:	00 90       	ret 
    case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
800048b8:	07 22 14 2a 	nand.t %d2,%d2,20,%d2,20
        break;
800048bc:	00 90       	ret 
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
800048be:	07 22 95 2a 	nand.t %d2,%d2,21,%d2,21
        break;
800048c2:	00 90       	ret 
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
800048c4:	07 22 16 2b 	nand.t %d2,%d2,22,%d2,22
        break;
800048c8:	00 90       	ret 
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
800048ca:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
    default: pcEnabled                = FALSE;
        break;
    }

    return pcEnabled;
}
800048ce:	00 90       	ret 

800048d0 <IfxVadc_getChannelConversionTime>:
    return status;
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
800048d0:	02 40       	mov %d0,%d4
800048d2:	02 68       	mov %d8,%d6
800048d4:	02 7a       	mov %d10,%d7
800048d6:	14 a4       	ld.bu %d4,[%sp]
    IfxVadc_ChannelResolution resolution;
    uint32                    n;

    uint32                    inputClassNum;

    if (inputClass <= IfxVadc_InputClasses_group1)
800048d8:	ff 25 08 80 	jge.u %d5,2,800048e8 <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
800048dc:	8f 80 00 f0 	sh %d15,%d0,8
800048e0:	42 f5       	add %d5,%d15
800048e2:	1b 85 12 50 	addi %d5,%d5,296
800048e6:	3c 03       	j 800048ec <IfxVadc_getChannelConversionTime+0x1c>
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
800048e8:	1b 65 02 50 	addi %d5,%d5,38
800048ec:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
800048f0:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
800048f2:	48 03       	ld.w %d3,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
800048f4:	16 1f       	and %d15,31
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
    }

    if (stcs > 16)
800048f6:	8b 1f 61 22 	lt.u %d2,%d15,17
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
800048fa:	37 03 63 34 	extr.u %d3,%d3,8,3
    }

    if (stcs > 16)
800048fe:	f6 24       	jnz %d2,80004906 <IfxVadc_getChannelConversionTime+0x36>
    {
        stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
80004900:	1b 1f ff ff 	addi %d15,%d15,-15
80004904:	06 4f       	sh %d15,4
80004906:	ff 63 35 80 	jge.u %d3,6,80004970 <IfxVadc_getChannelConversionTime+0xa0>
8000490a:	91 00 00 f8 	movh.a %a15,32768
8000490e:	d9 ff 14 d0 	lea %a15,[%a15]852 <80000354 <CSWTCH.25>>
80004912:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004916:	82 02       	mov %d2,0
80004918:	08 09       	ld.bu %d9,[%a15]0
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
8000491a:	df 04 2f 80 	jne %d4,0,80004978 <IfxVadc_getChannelConversionTime+0xa8>
    {
        if (resolution != IfxVadc_ChannelResolution_10bitFast)
8000491e:	df 53 0d 00 	jeq %d3,5,80004938 <IfxVadc_getChannelConversionTime+0x68>
        {
            /* Standard conversion */
            uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
80004922:	02 04       	mov %d4,%d0
80004924:	6d ff a1 ff 	call 80004866 <IfxVadc_isPostCalibration>
80004928:	92 24       	add %d4,%d15,2
8000492a:	ab 22 a0 22 	seln %d2,%d2,%d2,2
8000492e:	42 94       	add %d4,%d9
            conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
80004930:	42 24       	add %d4,%d2
80004932:	4b 04 41 41 	itof %d4,%d4
80004936:	3c 04       	j 8000493e <IfxVadc_getChannelConversionTime+0x6e>
        }
        else
        {
            /* Fast compare mode */
            conversionTime = (float32)(2 + stcs + 2) / analogFrequency + 2.0 / moduleFrequency;
80004938:	c2 4f       	add %d15,4
8000493a:	4b 0f 41 41 	itof %d4,%d15
8000493e:	4b 84 51 40 	div.f %d4,%d4,%d8
80004942:	6d 00 26 38 	call 8000b98e <__extendsfdf2>
80004946:	02 a4       	mov %d4,%d10
80004948:	0b 23 10 88 	mov %e8,%d3,%d2
8000494c:	6d 00 21 38 	call 8000b98e <__extendsfdf2>
80004950:	b7 00 21 4f 	imask %e4,0,30,1
80004954:	0b 23 10 68 	mov %e6,%d3,%d2
80004958:	6d 00 10 3a 	call 8000bd78 <__divdf3>
8000495c:	0b 89 10 48 	mov %e4,%d9,%d8
80004960:	0b 23 10 68 	mov %e6,%d3,%d2
80004964:	6d 00 fc 38 	call 8000bb5c <__adddf3>
80004968:	0b 23 10 48 	mov %e4,%d3,%d2
8000496c:	1d 00 c5 3a 	j 8000bef6 <__truncdfsf2>
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004970:	82 09       	mov %d9,0
80004972:	df 04 d8 7f 	jeq %d4,0,80004922 <IfxVadc_getChannelConversionTime+0x52>
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004976:	82 02       	mov %d2,0
    {
        // do nothing
    }

    return conversionTime;
}
80004978:	00 90       	ret 

8000497a <IfxVadc_resetKernel>:
    return pcEnabled;
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
8000497a:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000497c:	6d 00 f9 13 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80004980:	02 24       	mov %d4,%d2
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004982:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80004984:	6d 00 f5 12 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004988:	3b f0 01 40 	mov %d4,31
8000498c:	40 f4       	mov.aa %a4,%a15
8000498e:	6d ff bb fd 	call 80004504 <IfxVadc_enableAccess>
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004992:	48 c2       	ld.w %d2,[%a15]48
    vadc->KRST0.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004994:	02 f4       	mov %d4,%d15
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004996:	8f 12 40 21 	or %d2,%d2,1
8000499a:	68 c2       	st.w [%a15]48,%d2
    vadc->KRST0.B.RST = 1;
8000499c:	48 d2       	ld.w %d2,[%a15]52
8000499e:	8f 12 40 21 	or %d2,%d2,1
800049a2:	68 d2       	st.w [%a15]52,%d2
    IfxScuWdt_setCpuEndinit(passwd);
800049a4:	6d 00 1a 14 	call 800071d8 <IfxScuWdt_setCpuEndinit>

    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
800049a8:	48 d2       	ld.w %d2,[%a15]52
800049aa:	6f 12 ff 7f 	jz.t %d2,1,800049a8 <IfxVadc_resetKernel+0x2e>

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
800049ae:	02 f4       	mov %d4,%d15
800049b0:	6d 00 df 12 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
800049b4:	48 b2       	ld.w %d2,[%a15]44
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049b6:	3b f0 01 40 	mov %d4,31
    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
800049ba:	8f 12 40 21 	or %d2,%d2,1
800049be:	68 b2       	st.w [%a15]44,%d2
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049c0:	40 f4       	mov.aa %a4,%a15
800049c2:	6d ff 85 fd 	call 800044cc <IfxVadc_disableAccess>
    IfxScuWdt_setCpuEndinit(passwd);
800049c6:	02 f4       	mov %d4,%d15
800049c8:	1d 00 08 14 	j 800071d8 <IfxScuWdt_setCpuEndinit>

800049cc <IfxVadc_selectPowerSupplyVoltage>:


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800049cc:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
800049d0:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
800049d2:	67 4f 0e f0 	ins.t %d15,%d15,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800049d6:	3b f0 01 40 	mov %d4,31
800049da:	6d ff 95 fd 	call 80004504 <IfxVadc_enableAccess>
void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
800049de:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049e2:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800049e4:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049e8:	3b f0 01 40 	mov %d4,31
800049ec:	1d ff 70 fd 	j 800044cc <IfxVadc_disableAccess>

800049f0 <IfxVadc_setArbiterPriority>:
}


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
800049f0:	1b 87 01 f0 	addi %d15,%d7,24
    if (slotEnable != FALSE)
800049f4:	df 04 23 00 	jeq %d4,0,80004a3a <IfxVadc_setArbiterPriority+0x4a>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
800049f8:	19 42 04 00 	ld.w %d2,[%a4]4
800049fc:	0f f4 00 40 	sh %d4,%d4,%d15
80004a00:	a6 24       	or %d4,%d2
80004a02:	59 44 04 00 	st.w [%a4]4,%d4
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80004a06:	19 42 04 00 	ld.w %d2,[%a4]4
80004a0a:	06 27       	sh %d7,2
80004a0c:	82 3f       	mov %d15,3
80004a0e:	0f 7f 00 f0 	sh %d15,%d15,%d7
80004a12:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004a16:	6c 41       	st.w [%a4]4,%d15
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80004a18:	4c 41       	ld.w %d15,[%a4]4
80004a1a:	0f 75 00 50 	sh %d5,%d5,%d7
80004a1e:	a6 f5       	or %d5,%d15
80004a20:	59 45 04 00 	st.w [%a4]4,%d5

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004a24:	4c 41       	ld.w %d15,[%a4]4
80004a26:	c2 37       	add %d7,3
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80004a28:	76 64       	jz %d6,80004a30 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004a2a:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004a2e:	3c 03       	j 80004a34 <IfxVadc_setArbiterPriority+0x44>
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80004a30:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004a34:	59 47 04 00 	st.w [%a4]4,%d7
80004a38:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80004a3a:	19 44 04 00 	ld.w %d4,[%a4]4
80004a3e:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004a42:	6c 41       	st.w [%a4]4,%d15
80004a44:	00 90       	ret 

80004a46 <IfxVadc_setScan>:

void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80004a46:	19 4f 28 20 	ld.w %d15,[%a4]168
80004a4a:	26 54       	and %d4,%d5
80004a4c:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004a50:	0f 4f a0 50 	or %d5,%d15,%d4
80004a54:	59 45 28 20 	st.w [%a4]168,%d5
80004a58:	00 90       	ret 

80004a5a <IfxVadc_startupCalibration>:
{
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a5a:	3b f0 01 40 	mov %d4,31
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004a5e:	40 4f       	mov.aa %a15,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a60:	6d ff 52 fd 	call 80004504 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80004a64:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a68:	40 f4       	mov.aa %a4,%a15
80004a6a:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004a6e:	3b f0 01 40 	mov %d4,31
80004a72:	59 ff 00 20 	st.w [%a15]128,%d15
80004a76:	6d ff 2b fd 	call 800044cc <IfxVadc_disableAccess>
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004a7a:	82 02       	mov %d2,0

    /* Wait for hardware self-test and calibration to complete */
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;
80004a7c:	82 0f       	mov %d15,0
80004a7e:	a0 72       	mov.a %a2,7


IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
{
    uint8 status;
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80004a80:	8f a2 00 30 	sh %d3,%d2,10
80004a84:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004a88:	c2 12       	add %d2,1
80004a8a:	19 33 40 20 	ld.w %d3,[%a3]1152
80004a8e:	37 03 61 3e 	extr.u %d3,%d3,28,1

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
            {
                calibrationRunning = TRUE;
80004a92:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80004a96:	fc 25       	loop %a2,80004a80 <IfxVadc_startupCalibration+0x26>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80004a98:	df 1f f1 7f 	jeq %d15,1,80004a7a <IfxVadc_startupCalibration+0x20>
}
80004a9c:	00 90       	ret 
	...

80004aa0 <IfxAsclin_disableModule>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
80004aa0:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004aa2:	6d 00 66 13 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004aa6:	02 24       	mov %d4,%d2
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004aa8:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004aaa:	6d 00 62 12 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80004aae:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
    IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
80004ab0:	02 f4       	mov %d4,%d15
80004ab2:	8f 12 40 21 	or %d2,%d2,1
80004ab6:	68 02       	st.w [%a15]0,%d2
80004ab8:	1d 00 90 13 	j 800071d8 <IfxScuWdt_setCpuEndinit>

80004abc <IfxAsclin_enableAscErrorFlags>:
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80004abc:	7b 10 00 f0 	movh %d15,1
80004ac0:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004ac4:	19 4f 00 10 	ld.w %d15,[%a4]64
80004ac8:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004acc:	a6 f4       	or %d4,%d15
80004ace:	59 44 00 10 	st.w [%a4]64,%d4
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80004ad2:	7b 00 40 f0 	movh %d15,1024
80004ad6:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004ada:	19 4f 00 10 	ld.w %d15,[%a4]64
80004ade:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004ae2:	a6 f5       	or %d5,%d15
80004ae4:	59 45 00 10 	st.w [%a4]64,%d5
80004ae8:	00 90       	ret 

80004aea <IfxAsclin_enableModule>:
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
80004aea:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004aec:	6d 00 41 13 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004af0:	02 24       	mov %d4,%d2
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004af2:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004af4:	6d 00 3d 12 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
80004af8:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004afa:	02 f4       	mov %d4,%d15
80004afc:	8f 12 c0 21 	andn %d2,%d2,1
80004b00:	68 02       	st.w [%a15]0,%d2
80004b02:	1d 00 6b 13 	j 800071d8 <IfxScuWdt_setCpuEndinit>

80004b06 <IfxAsclin_getAddress>:
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
    }
    else
    {
        module = NULL_PTR;
80004b06:	a0 02       	mov.a %a2,0

Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
{
    Ifx_ASCLIN *module;

    if (asclin < IFXASCLIN_NUM_MODULES)
80004b08:	ff 44 09 00 	jge %d4,4,80004b1a <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004b0c:	91 00 00 f8 	movh.a %a15,32768
80004b10:	d9 ff ac a0 	lea %a15,[%a15]2732 <80000aac <IfxAsclin_cfg_indexMap>>
80004b14:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004b18:	c8 02       	ld.a %a2,[%a15]0
    {
        module = NULL_PTR;
    }

    return module;
}
80004b1a:	00 90       	ret 

80004b1c <IfxAsclin_getFaFrequency>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004b1c:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004b20:	16 1f       	and %d15,31
float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
80004b22:	c2 ff       	add %d15,-1
80004b24:	8b 0f a1 22 	ge.u %d2,%d15,16
80004b28:	df 02 32 80 	jne %d2,0,80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b2c:	91 00 00 f8 	movh.a %a15,32768
80004b30:	d9 ff b8 c4 	lea %a15,[%a15]19256 <80004b38 <IfxAsclin_getFaFrequency+0x1c>>
80004b34:	90 ff       	addsc.a %a15,%a15,%d15,2
80004b36:	dc 0f       	ji %a15
80004b38:	1d 00 20 00 	j 80004b78 <IfxAsclin_getFaFrequency+0x5c>
80004b3c:	1d 00 20 00 	j 80004b7c <IfxAsclin_getFaFrequency+0x60>
80004b40:	1d 00 26 00 	j 80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b44:	1d 00 1e 00 	j 80004b80 <IfxAsclin_getFaFrequency+0x64>
80004b48:	1d 00 22 00 	j 80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b4c:	1d 00 20 00 	j 80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b50:	1d 00 1e 00 	j 80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b54:	1d 00 18 00 	j 80004b84 <IfxAsclin_getFaFrequency+0x68>
80004b58:	1d 00 1a 00 	j 80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b5c:	1d 00 18 00 	j 80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b60:	1d 00 16 00 	j 80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b64:	1d 00 14 00 	j 80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b68:	1d 00 12 00 	j 80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b6c:	1d 00 10 00 	j 80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b70:	1d 00 0e 00 	j 80004b8c <IfxAsclin_getFaFrequency+0x70>
80004b74:	1d 00 0a 00 	j 80004b88 <IfxAsclin_getFaFrequency+0x6c>
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
80004b78:	1d 00 37 0a 	j 80005fe6 <IfxScuCcu_getSpbFrequency>
        break;
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004b7c:	1d 00 a6 08 	j 80005cc8 <IfxScuCcu_getOsc0Frequency>
        break;
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004b80:	1d 00 c3 08 	j 80005d06 <IfxScuCcu_getPllErayFrequency>
        break;
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004b84:	1d 00 20 0a 	j 80005fc4 <IfxScuCcu_getBaud2Frequency>
        break;
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80004b88:	1d 00 0e 0a 	j 80005fa4 <IfxScuCcu_getBaud1Frequency>
        frequency = 0.0;
        break;
    }

    return frequency;
}
80004b8c:	82 02       	mov %d2,0
80004b8e:	00 90       	ret 

80004b90 <IfxAsclin_getIndex>:

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004b90:	91 00 00 38 	movh.a %a3,32768
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004b94:	82 0f       	mov %d15,0
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004b96:	d9 33 ac a0 	lea %a3,[%a3]2732 <80000aac <IfxAsclin_cfg_indexMap>>
80004b9a:	a0 3f       	mov.a %a15,3
80004b9c:	d0 32       	addsc.a %a2,%a3,%d15,3
80004b9e:	d4 25       	ld.a %a5,[%a2]
80004ba0:	7d 45 05 80 	jne.a %a5,%a4,80004baa <IfxAsclin_getIndex+0x1a>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004ba4:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80004ba8:	00 90       	ret 
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004baa:	c2 1f       	add %d15,1
80004bac:	fc f8       	loop %a15,80004b9c <IfxAsclin_getIndex+0xc>
IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;
80004bae:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80004bb0:	00 90       	ret 

80004bb2 <IfxAsclin_getPdFrequency>:
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
80004bb2:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004bb4:	6d ff b4 ff 	call 80004b1c <IfxAsclin_getFaFrequency>
80004bb8:	4c f5       	ld.w %d15,[%a15]20
80004bba:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004bbe:	c2 1f       	add %d15,1
80004bc0:	4b 0f 41 f1 	itof %d15,%d15
}
80004bc4:	4b f2 51 20 	div.f %d2,%d2,%d15
80004bc8:	00 90       	ret 

80004bca <IfxAsclin_getOvsFrequency>:
    return result;
}


float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
{
80004bca:	40 4f       	mov.aa %a15,%a4
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
80004bcc:	6d ff f3 ff 	call 80004bb2 <IfxAsclin_getPdFrequency>
80004bd0:	48 83       	ld.w %d3,[%a15]32
80004bd2:	4c f8       	ld.w %d15,[%a15]32
80004bd4:	37 03 6c 38 	extr.u %d3,%d3,16,12
80004bd8:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004bdc:	4b 03 41 31 	itof %d3,%d3
80004be0:	4b 0f 41 f1 	itof %d15,%d15
80004be4:	4b 32 41 20 	mul.f %d2,%d2,%d3
}
80004be8:	4b f2 51 20 	div.f %d2,%d2,%d15
80004bec:	00 90       	ret 

80004bee <IfxAsclin_getShiftFrequency>:
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
}


float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
{
80004bee:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
80004bf0:	6d ff ed ff 	call 80004bca <IfxAsclin_getOvsFrequency>
80004bf4:	4c f5       	ld.w %d15,[%a15]20
80004bf6:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004bfa:	4b 0f 41 f1 	itof %d15,%d15
}
80004bfe:	4b f2 51 20 	div.f %d2,%d2,%d15
80004c02:	00 90       	ret 

80004c04 <IfxAsclin_getSrcPointerEr>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
80004c04:	6d ff c6 ff 	call 80004b90 <IfxAsclin_getIndex>
80004c08:	53 c2 20 f0 	mul %d15,%d2,12
80004c0c:	60 ff       	mov.a %a15,%d15
80004c0e:	d9 f2 08 28 	lea %a2,[%a15]-32632
}
80004c12:	11 42 00 2f 	addih.a %a2,%a2,61444
80004c16:	00 90       	ret 

80004c18 <IfxAsclin_getSrcPointerRx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
80004c18:	6d ff bc ff 	call 80004b90 <IfxAsclin_getIndex>
80004c1c:	53 c2 20 f0 	mul %d15,%d2,12
80004c20:	60 ff       	mov.a %a15,%d15
80004c22:	d9 f2 04 28 	lea %a2,[%a15]-32636
}
80004c26:	11 42 00 2f 	addih.a %a2,%a2,61444
80004c2a:	00 90       	ret 

80004c2c <IfxAsclin_getSrcPointerTx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
80004c2c:	6d ff b2 ff 	call 80004b90 <IfxAsclin_getIndex>
80004c30:	53 c2 20 f0 	mul %d15,%d2,12
80004c34:	60 ff       	mov.a %a15,%d15
80004c36:	d9 f2 00 28 	lea %a2,[%a15]-32640
}
80004c3a:	11 42 00 2f 	addih.a %a2,%a2,61444
80004c3e:	00 90       	ret 

80004c40 <IfxAsclin_read16>:


uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004c40:	9f 04 04 80 	jned %d4,0,80004c48 <IfxAsclin_read16+0x8>
        *data++ = (uint16)rxData->U;
        count--;
    }

    return count;
}
80004c44:	82 02       	mov %d2,0
80004c46:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint16)rxData->U;
80004c48:	19 4f 08 10 	ld.w %d15,[%a4]72
80004c4c:	ac 50       	st.h [%a5]0,%d15
80004c4e:	b0 25       	add.a %a5,2
80004c50:	3c f8       	j 80004c40 <IfxAsclin_read16>

80004c52 <IfxAsclin_read32>:
    return count;
}


uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004c52:	9f 04 04 80 	jned %d4,0,80004c5a <IfxAsclin_read32+0x8>
        *data++ = rxData->U;
        count--;
    }

    return count;
}
80004c56:	82 02       	mov %d2,0
80004c58:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = rxData->U;
80004c5a:	19 4f 08 10 	ld.w %d15,[%a4]72
80004c5e:	6c 50       	st.w [%a5]0,%d15
80004c60:	b0 45       	add.a %a5,4
80004c62:	3c f8       	j 80004c52 <IfxAsclin_read32>

80004c64 <IfxAsclin_read8>:
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004c64:	9f 04 04 80 	jned %d4,0,80004c6c <IfxAsclin_read8+0x8>
        *data++ = (uint8)rxData->U;
        count--;
    }

    return count;
}
80004c68:	82 02       	mov %d2,0
80004c6a:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint8)rxData->U;
80004c6c:	19 4f 08 10 	ld.w %d15,[%a4]72
80004c70:	2c 50       	st.b [%a5]0,%d15
80004c72:	b0 15       	add.a %a5,1
80004c74:	3c f8       	j 80004c64 <IfxAsclin_read8>

80004c76 <IfxAsclin_resetModule>:
    return count;
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
80004c76:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004c78:	6d 00 7b 12 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80004c7c:	02 24       	mov %d4,%d2
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004c7e:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004c80:	6d 00 77 11 	call 80006f6e <IfxScuWdt_clearCpuEndinit>

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004c84:	19 f2 34 30 	ld.w %d2,[%a15]244
    asclin->KRST1.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004c88:	02 f4       	mov %d4,%d15
void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004c8a:	8f 12 40 21 	or %d2,%d2,1
80004c8e:	59 f2 34 30 	st.w [%a15]244,%d2
    asclin->KRST1.B.RST = 1;
80004c92:	19 f2 30 30 	ld.w %d2,[%a15]240
80004c96:	8f 12 40 21 	or %d2,%d2,1
80004c9a:	59 f2 30 30 	st.w [%a15]240,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004c9e:	6d 00 9d 12 	call 800071d8 <IfxScuWdt_setCpuEndinit>

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
80004ca2:	19 f2 34 30 	ld.w %d2,[%a15]244
80004ca6:	6f 12 fe 7f 	jz.t %d2,1,80004ca2 <IfxAsclin_resetModule+0x2c>
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004caa:	02 f4       	mov %d4,%d15
80004cac:	6d 00 61 11 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004cb0:	19 f2 2c 30 	ld.w %d2,[%a15]236

    IfxScuWdt_setCpuEndinit(passwd);
80004cb4:	02 f4       	mov %d4,%d15

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004cb6:	8f 12 40 21 	or %d2,%d2,1
80004cba:	59 f2 2c 30 	st.w [%a15]236,%d2

    IfxScuWdt_setCpuEndinit(passwd);
80004cbe:	1d 00 8d 12 	j 800071d8 <IfxScuWdt_setCpuEndinit>

80004cc2 <IfxAsclin_setClockSource>:
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004cc2:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004cc6:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004cca:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004cce:	f6 46       	jnz %d4,80004cda <IfxAsclin_setClockSource+0x18>
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004cd0:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004cd4:	bf 0f fe 7f 	jlt %d15,0,80004cd0 <IfxAsclin_setClockSource+0xe>
80004cd8:	00 90       	ret 
80004cda:	19 4f 0c 10 	ld.w %d15,[%a4]76
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
80004cde:	ff 0f fe 7f 	jge %d15,0,80004cda <IfxAsclin_setClockSource+0x18>
80004ce2:	00 90       	ret 

80004ce4 <IfxAsclin_setBaudrateBitFields>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004ce4:	19 4f 0c 10 	ld.w %d15,[%a4]76
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004ce8:	19 42 0c 10 	ld.w %d2,[%a4]76
80004cec:	16 1f       	and %d15,31
80004cee:	8f f2 c1 21 	andn %d2,%d2,31
80004cf2:	59 42 0c 10 	st.w [%a4]76,%d2
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004cf6:	19 42 0c 10 	ld.w %d2,[%a4]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004cfa:	bf 02 fe 7f 	jlt %d2,0,80004cf6 <IfxAsclin_setBaudrateBitFields+0x12>
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80004cfe:	19 42 14 00 	ld.w %d2,[%a4]20
80004d02:	c2 f4       	add %d4,-1
80004d04:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004d08:	59 44 14 00 	st.w [%a4]20,%d4
}


IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
{
    asclin->BRG.B.NUMERATOR = numerator;
80004d0c:	19 42 20 00 	ld.w %d2,[%a4]32
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
    IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
    IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
    IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
    IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
    IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
80004d10:	02 f4       	mov %d4,%d15
80004d12:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004d16:	59 45 20 00 	st.w [%a4]32,%d5
}


IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
{
    asclin->BRG.B.DENOMINATOR = denominator;
80004d1a:	19 42 20 00 	ld.w %d2,[%a4]32
80004d1e:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004d22:	59 46 20 00 	st.w [%a4]32,%d6
}


IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
{
    asclin->BITCON.B.OVERSAMPLING = ovsFactor;
80004d26:	19 42 14 00 	ld.w %d2,[%a4]20
80004d2a:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004d2e:	59 47 14 00 	st.w [%a4]20,%d7
80004d32:	1d ff c8 ff 	j 80004cc2 <IfxAsclin_setClockSource>

80004d36 <IfxAsclin_setBitTiming>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004d36:	19 42 0c 10 	ld.w %d2,[%a4]76
}


boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
{
80004d3a:	20 08       	sub.a %sp,8
80004d3c:	8f f2 01 21 	and %d2,%d2,31
80004d40:	02 5f       	mov %d15,%d5
80004d42:	40 4f       	mov.aa %a15,%a4
80004d44:	02 48       	mov %d8,%d4
80004d46:	02 6a       	mov %d10,%d6
80004d48:	60 7d       	mov.a %a13,%d7
80004d4a:	60 2c       	mov.a %a12,%d2
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004d4c:	6d ff 33 ff 	call 80004bb2 <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004d50:	92 15       	add %d5,%d15,1
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004d52:	02 29       	mov %d9,%d2
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80004d54:	82 4f       	mov %d15,4
80004d56:	0b f5 b0 f1 	max.u %d15,%d5,%d15
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004d5a:	8f ff 0f 21 	and %d2,%d15,255
80004d5e:	59 a2 04 00 	st.w [%sp]4,%d2
80004d62:	82 16       	mov %d6,1
80004d64:	0b 6a b0 61 	max.u %d6,%d10,%d6
80004d68:	16 ff       	and %d15,255
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
80004d6a:	4b 0f 41 31 	itof %d3,%d15
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004d6e:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004d72:	4b 38 41 f0 	mul.f %d15,%d8,%d3
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004d76:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004d78:	02 f4       	mov %d4,%d15
80004d7a:	6d 00 0a 36 	call 8000b98e <__extendsfdf2>
80004d7e:	7b 00 f5 73 	movh %d7,16208
80004d82:	0b 23 10 48 	mov %e4,%d3,%d2
80004d86:	7b 20 2f 6d 	movh %d6,54002
80004d8a:	1b d7 24 76 	addi %d7,%d7,25165
80004d8e:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004d92:	6d 00 21 37 	call 8000bbd4 <__muldf3>
80004d96:	0b 23 10 48 	mov %e4,%d3,%d2
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
    nBest          = n;
80004d9a:	82 1c       	mov %d12,1
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004d9c:	6d 00 ad 38 	call 8000bef6 <__truncdfsf2>

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004da0:	4b f9 51 50 	div.f %d5,%d9,%d15
80004da4:	91 00 00 20 	movh.a %a2,0

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
    relError       = __absf(fOvs - f);
80004da8:	82 01       	mov %d1,0

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004daa:	4b 05 71 51 	ftouz %d5,%d5
    }

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
80004dae:	4b 05 61 31 	utof %d3,%d5
80004db2:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
80004db6:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80004dba:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80004dbe:	37 00 61 00 	extr.u %d0,%d0,0,1
80004dc2:	9b 03 00 48 	addih %d4,%d3,32768
80004dc6:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004dca:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004dce:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004dd2:	df 00 45 80 	jne %d0,0,80004e5c <IfxAsclin_setBitTiming+0x126>
80004dd6:	8f 15 00 60 	sh %d6,%d5,1
            /* Increase the value of the oversampling to generate the required baudrate */
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
80004dda:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80004ddc:	82 0e       	mov %d14,0
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004dde:	82 28       	mov %d8,2
80004de0:	3b 00 00 71 	mov %d7,4096
80004de4:	7f 76 3b 80 	jge.u %d6,%d7,80004e5a <IfxAsclin_setBitTiming+0x124>
    {
        if (n == 2)
        {
            adder_facL = 1;
            adder_facH = 1;
80004de8:	a0 13       	mov.a %a3,1

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
        {
            adder_facL = 1;
80004dea:	82 1b       	mov %d11,1
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
80004dec:	df 28 09 00 	jeq %d8,2,80004dfe <IfxAsclin_setBitTiming+0xc8>
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004df0:	73 8e 0a a0 	mul %d10,%d14,%d8
80004df4:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
80004df8:	60 a3       	mov.a %a3,%d10
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004dfa:	02 ab       	mov %d11,%d10
            adder_facH = adder_facL + 1;
80004dfc:	b0 13       	add.a %a3,1
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004dfe:	80 34       	mov.d %d4,%a3
80004e00:	3f b4 25 80 	jlt.u %d4,%d11,80004e4a <IfxAsclin_setBitTiming+0x114>
        {
            f           = (fpd * n) / (n * d + count);
80004e04:	4b 08 61 01 	utof %d0,%d8
80004e08:	0b 6b 00 40 	add %d4,%d11,%d6
80004e0c:	4b 04 61 d1 	utof %d13,%d4
80004e10:	4b 09 41 00 	mul.f %d0,%d9,%d0
            newRelError = __absf(fOvs - f);
80004e14:	80 2a       	mov.d %d10,%a2
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
        {
            f           = (fpd * n) / (n * d + count);
80004e16:	4b d0 51 00 	div.f %d0,%d0,%d13
            newRelError = __absf(fOvs - f);
80004e1a:	6b 00 31 0f 	sub.f %d0,%d15,%d0
80004e1e:	4b a0 01 d0 	cmp.f %d13,%d0,%d10
80004e22:	37 0d 61 d0 	extr.u %d13,%d13,0,1
80004e26:	9b 00 00 a8 	addih %d10,%d0,32768
80004e2a:	2b 0a 40 0d 	sel %d0,%d13,%d10,%d0

            if (relError > (newRelError))
80004e2e:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
80004e32:	37 0d 61 d1 	extr.u %d13,%d13,2,1
80004e36:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
80004e3a:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
80004e3e:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
80004e42:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
        {
            adder_facL = (adder_facL_min * n) / nBest;
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004e46:	c2 1b       	add %d11,1
80004e48:	3c db       	j 80004dfe <IfxAsclin_setBitTiming+0xc8>
                dBest          = (n * d + count);
                adder_facL_min = count;
            }
        }

        if (relError <= limit)
80004e4a:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004e4e:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004e52:	f6 04       	jnz %d0,80004e5a <IfxAsclin_setBitTiming+0x124>
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004e54:	c2 18       	add %d8,1
80004e56:	42 56       	add %d6,%d5
80004e58:	3c c6       	j 80004de4 <IfxAsclin_setBitTiming+0xae>
80004e5a:	02 15       	mov %d5,%d1
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004e5c:	19 f3 0c 10 	ld.w %d3,[%a15]76
80004e60:	8f f3 c1 31 	andn %d3,%d3,31
80004e64:	59 f3 0c 10 	st.w [%a15]76,%d3
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004e68:	19 ff 0c 10 	ld.w %d15,[%a15]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004e6c:	bf 0f fe 7f 	jlt %d15,0,80004e68 <IfxAsclin_setBitTiming+0x132>
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80004e70:	4c f8       	ld.w %d15,[%a15]32
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004e72:	19 a2 04 00 	ld.w %d2,[%sp]4
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80004e76:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004e7a:	c2 f2       	add %d2,-1
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80004e7c:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
80004e7e:	4c f8       	ld.w %d15,[%a15]32

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004e80:	80 ea       	mov.d %d10,%a14
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
80004e82:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
80004e86:	80 c4       	mov.d %d4,%a12
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
80004e88:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004e8a:	4c f5       	ld.w %d15,[%a15]20
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
80004e8c:	40 f4       	mov.aa %a4,%a15
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004e8e:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
80004e92:	68 52       	st.w [%a15]20,%d2

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004e94:	4c f5       	ld.w %d15,[%a15]20

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80004e96:	80 d2       	mov.d %d2,%a13

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004e98:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80004e9c:	7b 00 00 f8 	movh %d15,32768

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004ea0:	68 56       	st.w [%a15]20,%d6

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80004ea2:	ab 0f 80 72 	sel %d7,%d2,%d15,0
80004ea6:	4c f5       	ld.w %d15,[%a15]20
80004ea8:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
80004eac:	a6 7f       	or %d15,%d7
80004eae:	68 5f       	st.w [%a15]20,%d15

    IfxAsclin_setClockSource(asclin, source);
80004eb0:	6d ff 09 ff 	call 80004cc2 <IfxAsclin_setClockSource>

    return TRUE;
}
80004eb4:	82 12       	mov %d2,1
80004eb6:	00 90       	ret 

80004eb8 <IfxAsclin_write16>:
    }
}


uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004eb8:	9f 04 04 80 	jned %d4,0,80004ec0 <IfxAsclin_write16+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80004ebc:	82 02       	mov %d2,0
80004ebe:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80004ec0:	b9 5f 00 00 	ld.hu %d15,[%a5]0
80004ec4:	b0 25       	add.a %a5,2
80004ec6:	59 4f 04 10 	st.w [%a4]68,%d15
80004eca:	3c f7       	j 80004eb8 <IfxAsclin_write16>

80004ecc <IfxAsclin_write32>:
    return count;
}


uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004ecc:	9f 04 04 80 	jned %d4,0,80004ed4 <IfxAsclin_write32+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80004ed0:	82 02       	mov %d2,0
80004ed2:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80004ed4:	4c 50       	ld.w %d15,[%a5]0
80004ed6:	b0 45       	add.a %a5,4
80004ed8:	59 4f 04 10 	st.w [%a4]68,%d15
80004edc:	3c f8       	j 80004ecc <IfxAsclin_write32>

80004ede <IfxAsclin_write8>:
    return count;
}

#include <stdio.h>
uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004ede:	9f 04 04 80 	jned %d4,0,80004ee6 <IfxAsclin_write8+0x8>
        count--;

    }

    return count;
}
80004ee2:	82 02       	mov %d2,0
80004ee4:	00 90       	ret 
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {

        txData->U = *data++;
80004ee6:	0c 50       	ld.bu %d15,[%a5]0
80004ee8:	b0 15       	add.a %a5,1
80004eea:	59 4f 04 10 	st.w [%a4]68,%d15
80004eee:	3c f8       	j 80004ede <IfxAsclin_write8>

80004ef0 <IfxAsclin_Asc_getReadCount>:
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
80004ef0:	cc 42       	ld.a %a15,[%a4]8


sint32 IfxAsclin_Asc_getReadCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_readCount(asclin->rx);
}
80004ef2:	88 22       	ld.h %d2,[%a15]4
80004ef4:	00 90       	ret 

80004ef6 <IfxAsclin_Asc_getReadEvent>:


IfxStdIf_DPipe_ReadEvent IfxAsclin_Asc_getReadEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->rx->eventWriter;
80004ef6:	99 42 08 00 	ld.a %a2,[%a4]8
}
80004efa:	d9 22 1d 00 	lea %a2,[%a2]29
80004efe:	00 90       	ret 

80004f00 <IfxAsclin_Asc_getSendCount>:


uint32 IfxAsclin_Asc_getSendCount(IfxAsclin_Asc *asclin)
{
    return asclin->sendCount;
80004f00:	19 42 10 00 	ld.w %d2,[%a4]16
}
80004f04:	00 90       	ret 

80004f06 <IfxAsclin_Asc_getTxTimeStamp>:


Ifx_TickTime IfxAsclin_Asc_getTxTimeStamp(IfxAsclin_Asc *asclin)
{
    return asclin->txTimestamp;
80004f06:	09 42 54 09 	ld.d %e2,[%a4]20
}
80004f0a:	00 90       	ret 

80004f0c <IfxAsclin_Asc_getWriteCount>:


sint32 IfxAsclin_Asc_getWriteCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_writeCount(asclin->tx);
80004f0c:	cc 41       	ld.a %a15,[%a4]4
 *
 * \return Returns the free size in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)
{
    return (Ifx_SizeT)(fifo->size - Ifx_Fifo_readCount(fifo));
80004f0e:	88 c2       	ld.h %d2,[%a15]24
80004f10:	8c f2       	ld.h %d15,[%a15]4
80004f12:	a2 f2       	sub %d2,%d15
}
80004f14:	37 02 50 20 	extr %d2,%d2,0,16
80004f18:	00 90       	ret 

80004f1a <IfxAsclin_Asc_getWriteEvent>:


IfxStdIf_DPipe_WriteEvent IfxAsclin_Asc_getWriteEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->tx->eventWriter;
80004f1a:	99 42 04 00 	ld.a %a2,[%a4]4
}
80004f1e:	d9 22 1d 00 	lea %a2,[%a2]29
80004f22:	00 90       	ret 

80004f24 <IfxAsclin_Asc_isrError>:
}


void IfxAsclin_Asc_isrError(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin; /* getting the pointer to ASCLIN registers from module handler*/
80004f24:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.PE;
80004f26:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
80004f28:	ef 0f 0a 00 	jz.t %d15,16,80004f3c <IfxAsclin_Asc_isrError+0x18>
}


IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.PEC = 1;
80004f2c:	4c ff       	ld.w %d15,[%a15]60
80004f2e:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80004f32:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
80004f34:	0c 4e       	ld.bu %d15,[%a4]14
80004f36:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
80004f3a:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.FE;
80004f3c:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
80004f3e:	ef 2f 0a 00 	jz.t %d15,18,80004f52 <IfxAsclin_Asc_isrError+0x2e>
}


IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.FEC = 1;
80004f42:	4c ff       	ld.w %d15,[%a15]60
80004f44:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80004f48:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
80004f4a:	0c 4e       	ld.bu %d15,[%a4]14
80004f4c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
80004f50:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFO;
80004f52:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
80004f54:	ef af 0a 00 	jz.t %d15,26,80004f68 <IfxAsclin_Asc_isrError+0x44>
}


IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFOC = 1;
80004f58:	4c ff       	ld.w %d15,[%a15]60
80004f5a:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80004f5e:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
80004f60:	0c 4e       	ld.bu %d15,[%a4]14
80004f62:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
80004f66:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFU;
80004f68:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
80004f6a:	ef bf 0a 00 	jz.t %d15,27,80004f7e <IfxAsclin_Asc_isrError+0x5a>
}


IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFUC = 1;
80004f6e:	4c ff       	ld.w %d15,[%a15]60
80004f70:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80004f74:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
80004f76:	0c 4e       	ld.bu %d15,[%a4]14
80004f78:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
80004f7c:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.TFO;
80004f7e:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
80004f80:	ef ef 0a 00 	jz.t %d15,30,80004f94 <IfxAsclin_Asc_isrError+0x70>
}


IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.TFOC = 1;
80004f84:	4c ff       	ld.w %d15,[%a15]60
80004f86:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80004f8a:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
80004f8c:	0c 4e       	ld.bu %d15,[%a4]14
80004f8e:	b7 1f 01 f2 	insert %d15,%d15,1,4,1
80004f92:	2c 4e       	st.b [%a4]14,%d15
80004f94:	00 90       	ret 

80004f96 <IfxAsclin_Asc_resetSendCount>:
}


void IfxAsclin_Asc_resetSendCount(IfxAsclin_Asc *asclin)
{
    asclin->sendCount = 0;
80004f96:	82 0f       	mov %d15,0
80004f98:	6c 44       	st.w [%a4]16,%d15
80004f9a:	00 90       	ret 

80004f9c <IfxAsclin_Asc_canReadCount>:
}


boolean IfxAsclin_Asc_canReadCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canReadCount(asclin->rx, count, timeout);
80004f9c:	99 44 08 00 	ld.a %a4,[%a4]8
80004fa0:	1d 00 df 18 	j 8000815e <Ifx_Fifo_canReadCount>

80004fa4 <IfxAsclin_Asc_flushTx>:

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80004fa4:	82 f2       	mov %d2,-1
80004fa6:	06 f2       	sh %d2,-1
80004fa8:	ba f4       	eq %d15,%d4,-1
80004faa:	0b 52 00 f2 	and.eq %d15,%d2,%d5
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
}


boolean IfxAsclin_Asc_flushTx(IfxAsclin_Asc *asclin, Ifx_TickTime timeout)
{
80004fae:	40 4f       	mov.aa %a15,%a4
80004fb0:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
80004fb2:	82 f9       	mov %d9,-1
80004fb4:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80004fb6:	ee 16       	jnz %d15,80004fe2 <IfxAsclin_Asc_flushTx+0x3e>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80004fb8:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80004fbc:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80004fc0:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80004fc4:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004fc6:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80004fca:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80004fce:	02 39       	mov %d9,%d3
80004fd0:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80004fd4:	76 23       	jz %d2,80004fda <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
80004fd6:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80004fda:	0b 69 40 90 	addx %d9,%d9,%d6
80004fde:	0b 58 50 80 	addc %d8,%d8,%d5
 *
 * \return TRUE if the buffer is emptied.
 */
IFX_INLINE boolean Ifx_Fifo_flush(Ifx_Fifo *fifo, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(fifo, fifo->size, timeout);
80004fe2:	c8 14       	ld.a %a4,[%a15]4
80004fe4:	02 57       	mov %d7,%d5
80004fe6:	c9 44 18 00 	ld.h %d4,[%a4]24
80004fea:	6d 00 fd 19 	call 800083e4 <Ifx_Fifo_canWriteCount>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80004fee:	82 f4       	mov %d4,-1
80004ff0:	06 f4       	sh %d4,-1
    boolean      result;

    /* Flush the software FIFO */
    result = Ifx_Fifo_flush(asclin->tx, timeout);

    if (result)
80004ff2:	f6 23       	jnz %d2,80004ff8 <IfxAsclin_Asc_flushTx+0x54>
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
    {
        deadLine = TIME_INFINITE;
80004ff4:	82 02       	mov %d2,0
80004ff6:	00 90       	ret 
    {
        /* Flush the hardware FIFO (wait until all bytes have been transmitted) */
        do
        {
            result = IfxAsclin_getTxFifoFillLevel(asclin->asclin) == 0;
80004ff8:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
80004ffa:	4c 23       	ld.w %d15,[%a2]12
80004ffc:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
80005000:	6e 1e       	jz %d15,8000503c <IfxAsclin_Asc_flushTx+0x98>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80005002:	ba f9       	eq %d15,%d9,-1
80005004:	0b 84 00 f2 	and.eq %d15,%d4,%d8
80005008:	ee f9       	jnz %d15,80004ffa <IfxAsclin_Asc_flushTx+0x56>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000500a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000500e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005012:	0d 00 40 03 	disable 
80005016:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005018:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000501c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005020:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005024:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005028:	76 23       	jz %d2,8000502e <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
8000502a:	0d 00 00 03 	enable 
8000502e:	0b 8f 00 21 	eq %d2,%d15,%d8
80005032:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
80005036:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000503a:	3c dc       	j 80004ff2 <IfxAsclin_Asc_flushTx+0x4e>
8000503c:	82 12       	mov %d2,1
    }

    return result;
}
8000503e:	00 90       	ret 

80005040 <IfxAsclin_Asc_canWriteCount>:
}


boolean IfxAsclin_Asc_canWriteCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(asclin->tx, count, timeout);
80005040:	99 44 04 00 	ld.a %a4,[%a4]4
80005044:	1d 00 d0 19 	j 800083e4 <Ifx_Fifo_canWriteCount>

80005048 <IfxAsclin_Asc_clearRx>:
}


void IfxAsclin_Asc_clearRx(IfxAsclin_Asc *asclin)
{
    IfxAsclin_flushRxFifo(asclin->asclin);
80005048:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
8000504a:	4c f4       	ld.w %d15,[%a15]16
8000504c:	96 01       	or %d15,1
8000504e:	68 4f       	st.w [%a15]16,%d15
    Ifx_Fifo_clear(asclin->rx);
80005050:	99 44 08 00 	ld.a %a4,[%a4]8
80005054:	1d 00 ad 19 	j 800083ae <Ifx_Fifo_clear>

80005058 <IfxAsclin_Asc_clearTx>:
}


void IfxAsclin_Asc_clearTx(IfxAsclin_Asc *asclin)
{
80005058:	40 4f       	mov.aa %a15,%a4
    Ifx_Fifo_clear(asclin->tx);
8000505a:	99 44 04 00 	ld.a %a4,[%a4]4
8000505e:	6d 00 a8 19 	call 800083ae <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
80005062:	c8 0f       	ld.a %a15,[%a15]0
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
80005064:	4c f3       	ld.w %d15,[%a15]12
80005066:	96 01       	or %d15,1
80005068:	68 3f       	st.w [%a15]12,%d15
8000506a:	00 90       	ret 

8000506c <IfxAsclin_Asc_read>:
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
8000506c:	99 44 08 00 	ld.a %a4,[%a4]8
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005070:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005074:	94 64       	ld.h %d4,[%a6]
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005076:	40 6f       	mov.aa %a15,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005078:	6d 00 e0 18 	call 80008238 <Ifx_Fifo_read>

    *count -= left;
8000507c:	8c f0       	ld.h %d15,[%a15]0
8000507e:	a2 2f       	sub %d15,%d2
80005080:	a8 0f       	st.h [%a15]0,%d15

    return left == 0;
}
80005082:	8b 02 00 22 	eq %d2,%d2,0
80005086:	00 90       	ret 

80005088 <IfxAsclin_Asc_isrTransmit>:
    }
}

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
80005088:	20 18       	sub.a %sp,24
8000508a:	40 4f       	mov.aa %a15,%a4
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000508c:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80005090:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005094:	0d 00 40 03 	disable 
80005098:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000509a:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000509e:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800050a2:	02 52       	mov %d2,%d5
800050a4:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800050a8:	76 43       	jz %d4,800050ae <IfxAsclin_Asc_isrTransmit+0x26>
    {
        __enable();
800050aa:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
800050ae:	89 f2 54 09 	st.d [%a15]20,%e2
    asclin->sendCount++;

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
800050b2:	c8 14       	ld.a %a4,[%a15]4

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
    asclin->txTimestamp = IfxStm_now();
    asclin->sendCount++;
800050b4:	4c f4       	ld.w %d15,[%a15]16
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
800050b6:	c9 44 04 00 	ld.h %d4,[%a4]4
800050ba:	c2 1f       	add %d15,1
800050bc:	68 4f       	st.w [%a15]16,%d15

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
800050be:	df 04 32 00 	jeq %d4,0,80005122 <IfxAsclin_Asc_isrTransmit+0x9a>
    {

        switch (asclin->dataBufferMode)
800050c2:	0c ff       	ld.bu %d15,[%a15]15
800050c4:	6e 03       	jz %d15,800050ca <IfxAsclin_Asc_isrTransmit+0x42>
800050c6:	9e 1d       	jeq %d15,1,80005100 <IfxAsclin_Asc_isrTransmit+0x78>
800050c8:	00 90       	ret 
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
800050ca:	c8 02       	ld.a %a2,[%a15]0
        case Ifx_DataBufferMode_normal:
        {

            uint8          ascData[16];
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;
800050cc:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
800050ce:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
800050d2:	4c 23       	ld.w %d15,[%a2]12
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
800050d4:	d2 06       	mov %e6,0
800050d6:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800050da:	d9 a5 08 00 	lea %a5,[%sp]8
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
800050de:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
800050e0:	0c a7       	ld.bu %d15,[%sp]7
800050e2:	8b 0f 01 f1 	rsub %d15,%d15,16
800050e6:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800050ea:	0b 4f 90 f1 	min.u %d15,%d15,%d4
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
800050ee:	37 0f 50 40 	extr %d4,%d15,0,16
800050f2:	6d 00 a3 18 	call 80008238 <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
800050f6:	c8 04       	ld.a %a4,[%a15]0
800050f8:	d9 a5 08 00 	lea %a5,[%sp]8
800050fc:	02 f4       	mov %d4,%d15
800050fe:	3c 10       	j 8000511e <IfxAsclin_Asc_isrTransmit+0x96>
        {

            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005100:	d2 06       	mov %e6,0
80005102:	d9 a5 08 00 	lea %a5,[%sp]8
80005106:	3b c0 00 40 	mov %d4,12
8000510a:	6d 00 97 18 	call 80008238 <Ifx_Fifo_read>

            ascData = packedData.data;
8000510e:	39 af 10 00 	ld.bu %d15,[%sp]16
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
80005112:	c8 04       	ld.a %a4,[%a15]0
            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);

            ascData = packedData.data;
80005114:	d9 a5 18 00 	lea %a5,[%sp]24
80005118:	89 5f 2f f4 	st.b [+%a5]-17,%d15
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
8000511c:	82 14       	mov %d4,1
        }
        break;
8000511e:	1d ff e0 fe 	j 80004ede <IfxAsclin_write8>
    }
    else
    {

        /* Transmit buffer is empty */
        asclin->txInProgress = FALSE;
80005122:	28 c4       	st.b [%a15]12,%d4
80005124:	00 90       	ret 

80005126 <IfxAsclin_Asc_isrReceive>:

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005126:	0c 4f       	ld.bu %d15,[%a4]15
    }
}


void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
80005128:	20 20       	sub.a %sp,32
8000512a:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
8000512c:	6e 34       	jz %d15,80005194 <IfxAsclin_Asc_isrReceive+0x6e>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
8000512e:	82 18       	mov %d8,1

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005130:	df 1f 45 80 	jne %d15,1,800051ba <IfxAsclin_Asc_isrReceive+0x94>
    }
    case Ifx_DataBufferMode_timeStampSingle:
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
80005134:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->RXFIFOCON.B.FILL;
80005136:	4c 24       	ld.w %d15,[%a2]16
80005138:	37 0f 65 f8 	extr.u %d15,%d15,16,5
8000513c:	6e 2b       	jz %d15,80005192 <IfxAsclin_Asc_isrReceive+0x6c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000513e:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80005142:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005146:	0d 00 40 03 	disable 
8000514a:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000514c:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005150:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005154:	8f 02 40 21 	or %d2,%d2,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005158:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000515c:	76 33       	jz %d3,80005162 <IfxAsclin_Asc_isrReceive+0x3c>
    {
        __enable();
8000515e:	0d 00 00 03 	enable 
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005162:	c8 04       	ld.a %a4,[%a15]0
80005164:	d9 a5 10 00 	lea %a5,[%sp]16
80005168:	82 14       	mov %d4,1
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
8000516a:	78 02       	st.w [%sp]8,%d15
8000516c:	59 a2 04 00 	st.w [%sp]4,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005170:	6d ff 7a fd 	call 80004c64 <IfxAsclin_read8>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
80005174:	c8 24       	ld.a %a4,[%a15]8

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
80005176:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000517a:	d2 06       	mov %e6,0
8000517c:	d9 a5 04 00 	lea %a5,[%sp]4
80005180:	3b c0 00 40 	mov %d4,12

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
80005184:	2c ac       	st.b [%sp]12,%d15

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
80005186:	6d 00 a7 19 	call 800084d4 <Ifx_Fifo_write>
8000518a:	df 02 d5 7f 	jeq %d2,0,80005134 <IfxAsclin_Asc_isrReceive+0xe>
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
8000518e:	28 d8       	st.b [%a15]13,%d8
80005190:	3c d2       	j 80005134 <IfxAsclin_Asc_isrReceive+0xe>
80005192:	00 90       	ret 
    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
    {
        uint8 count;
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
80005194:	d4 44       	ld.a %a4,[%a4]
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
80005196:	d9 a5 10 00 	lea %a5,[%sp]16
8000519a:	4c 44       	ld.w %d15,[%a4]16
8000519c:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800051a0:	02 f4       	mov %d4,%d15
800051a2:	6d ff 61 fd 	call 80004c64 <IfxAsclin_read8>

        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
800051a6:	c8 24       	ld.a %a4,[%a15]8
800051a8:	d2 06       	mov %e6,0
800051aa:	d9 a5 10 00 	lea %a5,[%sp]16
800051ae:	02 f4       	mov %d4,%d15
800051b0:	6d 00 92 19 	call 800084d4 <Ifx_Fifo_write>
800051b4:	76 23       	jz %d2,800051ba <IfxAsclin_Asc_isrReceive+0x94>
        {
            /* Receive buffer is full, data is discard */
            asclin->rxSwFifoOverflow = TRUE;
800051b6:	82 1f       	mov %d15,1
800051b8:	28 df       	st.b [%a15]13,%d15
800051ba:	00 90       	ret 

800051bc <IfxAsclin_Asc_blockingRead>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
800051bc:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
800051be:	82 1f       	mov %d15,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
800051c0:	40 4f       	mov.aa %a15,%a4
    Ifx_SizeT count = 1;
800051c2:	ac a3       	st.h [%sp]6,%d15
    uint8     data;

    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
800051c4:	82 f4       	mov %d4,-1
800051c6:	40 f4       	mov.aa %a4,%a15
800051c8:	d9 a5 05 00 	lea %a5,[%sp]5
800051cc:	d9 a6 06 00 	lea %a6,[%sp]6
800051d0:	9b 04 00 58 	addih %d5,%d4,32768
800051d4:	6d ff 4c ff 	call 8000506c <IfxAsclin_Asc_read>
800051d8:	df 12 f6 ff 	jne %d2,1,800051c4 <IfxAsclin_Asc_blockingRead+0x8>
    {}

    return data;
}
800051dc:	39 a2 05 00 	ld.bu %d2,[%sp]5
800051e0:	00 90       	ret 

800051e2 <IfxAsclin_Asc_disableModule>:
}


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
800051e2:	cc 40       	ld.a %a15,[%a4]0
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
800051e4:	6d 00 c5 0f 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800051e8:	02 24       	mov %d4,%d2


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
800051ea:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800051ec:	6d 00 c1 0e 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
800051f0:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclinSFR); /* disabling the module */
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
800051f2:	02 f4       	mov %d4,%d15
800051f4:	8f 12 40 21 	or %d2,%d2,1
800051f8:	68 02       	st.w [%a15]0,%d2
800051fa:	1d 00 ef 0f 	j 800071d8 <IfxScuWdt_setCpuEndinit>

800051fe <IfxAsclin_Asc_initModule>:
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
800051fe:	cc 50       	ld.a %a15,[%a5]0
    return &asclin->tx->eventWriter;
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
80005200:	40 4e       	mov.aa %a14,%a4
80005202:	40 5c       	mov.aa %a12,%a5
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
    IfxAsclin_Status status    = IfxAsclin_Status_noError;

    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
80005204:	ec 40       	st.a [%a4]0,%a15

    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
80005206:	40 f4       	mov.aa %a4,%a15
80005208:	6d ff 71 fc 	call 80004aea <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
8000520c:	40 f4       	mov.aa %a4,%a15
8000520e:	82 04       	mov %d4,0
80005210:	6d ff 59 fd 	call 80004cc2 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
80005214:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
80005216:	40 f4       	mov.aa %a4,%a15
80005218:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
8000521c:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
8000521e:	8c c4       	ld.h %d15,[%a12]8
80005220:	48 52       	ld.w %d2,[%a15]20
80005222:	c2 ff       	add %d15,-1
80005224:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
80005228:	68 5f       	st.w [%a15]20,%d15
8000522a:	39 c4 28 00 	ld.bu %d4,[%a12]40
8000522e:	6d ff 4a fd 	call 80004cc2 <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
80005232:	40 f4       	mov.aa %a4,%a15
80005234:	19 c4 04 00 	ld.w %d4,[%a12]4
80005238:	39 c5 0a 00 	ld.bu %d5,[%a12]10
8000523c:	39 c6 0d 00 	ld.bu %d6,[%a12]13
80005240:	39 c7 0c 00 	ld.bu %d7,[%a12]12
80005244:	6d ff 79 fd 	call 80004d36 <IfxAsclin_setBitTiming>
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005248:	40 f4       	mov.aa %a4,%a15
8000524a:	82 04       	mov %d4,0
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
8000524c:	02 29       	mov %d9,%d2
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
8000524e:	6d ff 3a fd 	call 80004cc2 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.LB = enable ? 1 : 0;
80005252:	39 c2 38 00 	ld.bu %d2,[%a12]56
80005256:	7b 00 00 f1 	movh %d15,4096
8000525a:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000525e:	4c f1       	ld.w %d15,[%a15]4
80005260:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
80005264:	a6 2f       	or %d15,%d2
80005266:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
80005268:	39 c2 14 00 	ld.bu %d2,[%a12]20
8000526c:	7b 00 00 f4 	movh %d15,16384
80005270:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005274:	4c f6       	ld.w %d15,[%a15]24
80005276:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
8000527a:	a6 2f       	or %d15,%d2
8000527c:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
{
    asclin->FRAMECON.B.ODD = type;
8000527e:	48 62       	ld.w %d2,[%a15]24
80005280:	39 cf 12 00 	ld.bu %d15,[%a12]18
80005284:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
80005288:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
8000528a:	48 62       	ld.w %d2,[%a15]24
8000528c:	0c cf       	ld.bu %d15,[%a12]15
8000528e:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
80005292:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir)
{
    asclin->FRAMECON.B.MSB = dir;
80005294:	48 62       	ld.w %d2,[%a15]24
80005296:	39 cf 11 00 	ld.bu %d15,[%a12]17
8000529a:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
8000529e:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
{
    asclin->DATCON.B.DATLEN = length;
800052a0:	48 72       	ld.w %d2,[%a15]28
800052a2:	39 cf 13 00 	ld.bu %d15,[%a12]19
800052a6:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
800052aa:	68 7f       	st.w [%a15]28,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
800052ac:	48 32       	ld.w %d2,[%a15]12
800052ae:	39 cf 16 00 	ld.bu %d15,[%a12]22
800052b2:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800052b6:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width)
{
    asclin->RXFIFOCON.B.OUTW = width;
800052b8:	48 42       	ld.w %d2,[%a15]16
800052ba:	39 cf 17 00 	ld.bu %d15,[%a12]23
800052be:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800052c2:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
{
    asclin->FRAMECON.B.IDLE = delay;
800052c4:	48 62       	ld.w %d2,[%a15]24
800052c6:	0c ce       	ld.bu %d15,[%a12]14
800052c8:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
800052cc:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
800052ce:	39 c2 18 00 	ld.bu %d2,[%a12]24
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800052d2:	da 0f       	mov %d15,15
800052d4:	0b f2 90 21 	min.u %d2,%d2,%d15
800052d8:	48 33       	ld.w %d3,[%a15]12
800052da:	37 23 04 24 	insert %d2,%d3,%d2,8,4
800052de:	68 32       	st.w [%a15]12,%d2
}


IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level)
{
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
800052e0:	39 c2 19 00 	ld.bu %d2,[%a12]25
800052e4:	0b f2 90 f1 	min.u %d15,%d2,%d15
800052e8:	48 42       	ld.w %d2,[%a15]16
800052ea:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
800052ee:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800052f0:	39 cf 10 00 	ld.bu %d15,[%a12]16
800052f4:	48 62       	ld.w %d2,[%a15]24
800052f6:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
800052fa:	68 6f       	st.w [%a15]24,%d15
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/

    /* Pin mapping */
    const IfxAsclin_Asc_Pins *pins = config->pins;
800052fc:	99 cd 24 00 	ld.a %a13,[%a12]36

    if (pins != NULL_PTR)
80005300:	bd 0d 81 00 	jz.a %a13,80005402 <IfxAsclin_Asc_initModule+0x204>
    {
        IfxAsclin_Cts_In *cts = pins->cts;
80005304:	4c d0       	ld.w %d15,[%a13]0

        if (cts != NULL_PTR)
80005306:	6e 27       	jz %d15,80005354 <IfxAsclin_Asc_initModule+0x156>
}


IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (cts->pin.port != NULL_PTR)
80005308:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
8000530a:	79 d5 04 00 	ld.b %d5,[%a13]4
8000530e:	99 24 04 00 	ld.a %a4,[%a2]4
80005312:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005316:	bd 04 1f 00 	jz.a %a4,80005354 <IfxAsclin_Asc_initModule+0x156>
8000531a:	39 24 08 00 	ld.bu %d4,[%a2]8
8000531e:	8f f5 0f 51 	and %d5,%d5,255
80005322:	6d 00 ba 03 	call 80005a96 <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
80005326:	60 f3       	mov.a %a3,%d15
80005328:	02 85       	mov %d5,%d8
8000532a:	99 34 04 00 	ld.a %a4,[%a3]4
8000532e:	39 34 08 00 	ld.bu %d4,[%a3]8
80005332:	6d 00 30 04 	call 80005b92 <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
80005336:	60 f3       	mov.a %a3,%d15
80005338:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
8000533a:	19 22 04 00 	ld.w %d2,[%a2]4
8000533e:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
80005342:	59 22 04 00 	st.w [%a2]4,%d2
    if (cts->pin.port != NULL_PTR)
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
        IfxAsclin_enableCts(cts->module, TRUE);
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
80005346:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
{
    asclin->IOCR.B.CTS = ctsi;
80005348:	0c 3c       	ld.bu %d15,[%a3]12
8000534a:	19 22 04 00 	ld.w %d2,[%a2]4
8000534e:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
80005352:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rx_In *rx = pins->rx;
80005354:	4c d2       	ld.w %d15,[%a13]8

        if (rx != NULL_PTR)
80005356:	6e 20       	jz %d15,80005396 <IfxAsclin_Asc_initModule+0x198>
}


IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (rx->pin.port != NULL_PTR)
80005358:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
8000535a:	79 d5 0c 00 	ld.b %d5,[%a13]12
8000535e:	99 24 04 00 	ld.a %a4,[%a2]4
80005362:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005366:	bd 04 18 00 	jz.a %a4,80005396 <IfxAsclin_Asc_initModule+0x198>
8000536a:	39 24 08 00 	ld.bu %d4,[%a2]8
8000536e:	8f f5 0f 51 	and %d5,%d5,255
80005372:	6d 00 92 03 	call 80005a96 <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
80005376:	60 f3       	mov.a %a3,%d15
80005378:	02 85       	mov %d5,%d8
8000537a:	99 34 04 00 	ld.a %a4,[%a3]4
8000537e:	39 34 08 00 	ld.bu %d4,[%a3]8
80005382:	6d 00 08 04 	call 80005b92 <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
80005386:	60 f3       	mov.a %a3,%d15
80005388:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti)
{
    asclin->IOCR.B.ALTI = alti;
8000538a:	0c 3c       	ld.bu %d15,[%a3]12
8000538c:	19 22 04 00 	ld.w %d2,[%a2]4
80005390:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
80005394:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rts_Out *rts = pins->rts;
80005396:	4c d4       	ld.w %d15,[%a13]16

        if (rts != NULL_PTR)
80005398:	6e 1a       	jz %d15,800053cc <IfxAsclin_Asc_initModule+0x1ce>
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
8000539a:	60 f2       	mov.a %a2,%d15
8000539c:	39 d2 14 00 	ld.bu %d2,[%a13]20
800053a0:	39 23 0c 00 	ld.bu %d3,[%a2]12
800053a4:	99 24 04 00 	ld.a %a4,[%a2]4
800053a8:	0f 23 a0 50 	or %d5,%d3,%d2
800053ac:	39 24 08 00 	ld.bu %d4,[%a2]8
800053b0:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
800053b4:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800053b8:	6d 00 6f 03 	call 80005a96 <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
800053bc:	60 f3       	mov.a %a3,%d15
800053be:	02 85       	mov %d5,%d8
800053c0:	99 34 04 00 	ld.a %a4,[%a3]4
800053c4:	39 34 08 00 	ld.bu %d4,[%a3]8
800053c8:	6d 00 e5 03 	call 80005b92 <IfxPort_setPinPadDriver>
        }

        IfxAsclin_Tx_Out *tx = pins->tx;
800053cc:	4c d6       	ld.w %d15,[%a13]24

        if (tx != NULL_PTR)
800053ce:	6e 1a       	jz %d15,80005402 <IfxAsclin_Asc_initModule+0x204>
800053d0:	60 f2       	mov.a %a2,%d15
800053d2:	39 d2 1c 00 	ld.bu %d2,[%a13]28
800053d6:	39 23 0c 00 	ld.bu %d3,[%a2]12
800053da:	99 24 04 00 	ld.a %a4,[%a2]4
800053de:	0f 23 a0 50 	or %d5,%d3,%d2
800053e2:	39 24 08 00 	ld.bu %d4,[%a2]8
800053e6:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
800053ea:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800053ee:	6d 00 54 03 	call 80005a96 <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
800053f2:	60 f3       	mov.a %a3,%d15
800053f4:	02 85       	mov %d5,%d8
800053f6:	99 34 04 00 	ld.a %a4,[%a3]4
800053fa:	39 34 08 00 	ld.bu %d4,[%a3]8
800053fe:	6d 00 ca 03 	call 80005b92 <IfxPort_setPinPadDriver>
        }
    }

    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
80005402:	40 f4       	mov.aa %a4,%a15
80005404:	39 c4 28 00 	ld.bu %d4,[%a12]40
80005408:	6d ff 5d fc 	call 80004cc2 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSENABLE.U = 0x00000000;
8000540c:	82 0f       	mov %d15,0
8000540e:	59 ff 00 10 	st.w [%a15]64,%d15
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
80005412:	82 f2       	mov %d2,-1
80005414:	68 f2       	st.w [%a15]60,%d2

    IfxAsclin_disableAllFlags(asclinSFR);                     /* disable all flags */
    IfxAsclin_clearAllFlags(asclinSFR);                       /* clear all flags */

    /* HW error flags */
    asclin->errorFlags.ALL = 0;
80005416:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
80005418:	4c ca       	ld.w %d15,[%a12]40
8000541a:	2e 87       	jz.t %d15,8,80005428 <IfxAsclin_Asc_initModule+0x22a>
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
8000541c:	19 ff 00 10 	ld.w %d15,[%a15]64
80005420:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80005424:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableParityErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.frameError)
80005428:	4c ca       	ld.w %d15,[%a12]40
8000542a:	2e 97       	jz.t %d15,9,80005438 <IfxAsclin_Asc_initModule+0x23a>
}


IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
8000542c:	19 ff 00 10 	ld.w %d15,[%a15]64
80005430:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80005434:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableFrameErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoOverflow)
80005438:	4c ca       	ld.w %d15,[%a12]40
8000543a:	2e a7       	jz.t %d15,10,80005448 <IfxAsclin_Asc_initModule+0x24a>
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
8000543c:	19 ff 00 10 	ld.w %d15,[%a15]64
80005440:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80005444:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoOverflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoUnderflow)
80005448:	4c ca       	ld.w %d15,[%a12]40
8000544a:	2e b7       	jz.t %d15,11,80005458 <IfxAsclin_Asc_initModule+0x25a>
}


IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
8000544c:	19 ff 00 10 	ld.w %d15,[%a15]64
80005450:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80005454:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoUnderflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.txFifoOverflow)
80005458:	4c ca       	ld.w %d15,[%a12]40
8000545a:	2e c7       	jz.t %d15,12,80005468 <IfxAsclin_Asc_initModule+0x26a>
}


IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
8000545c:	19 ff 00 10 	ld.w %d15,[%a15]64
80005460:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80005464:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableTxFifoOverflowFlag(asclinSFR, TRUE);
    }

    /* transmission flags */
    asclin->rxSwFifoOverflow = FALSE;
80005468:	82 0f       	mov %d15,0
8000546a:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
8000546c:	2c ec       	st.b [%a14]12,%d15

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
8000546e:	d2 04       	mov %e4,0
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005470:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
80005474:	82 0f       	mov %d15,0
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
80005476:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
8000547a:	6c e4       	st.w [%a14]16,%d15
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
8000547c:	e9 e3 0f 00 	st.b [%a14]15,%d3
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
        elementSize = 1;
80005480:	82 1f       	mov %d15,1
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
80005482:	76 34       	jz %d3,8000548a <IfxAsclin_Asc_initModule+0x28c>
        break;
    case Ifx_DataBufferMode_timeStampSingle:
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
        break;
    default:
        elementSize = 0;
80005484:	ba 13       	eq %d15,%d3,1
80005486:	ab cf a0 ff 	seln %d15,%d15,%d15,12
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
8000548a:	99 c4 2c 00 	ld.a %a4,[%a12]44
8000548e:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
80005492:	02 f5       	mov %d5,%d15
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
80005494:	bc 44       	jz.a %a4,8000549c <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
80005496:	6d 00 36 16 	call 80008102 <Ifx_Fifo_init>
8000549a:	3c 03       	j 800054a0 <IfxAsclin_Asc_initModule+0x2a2>
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
8000549c:	6d 00 50 16 	call 8000813c <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
800054a0:	99 c4 34 00 	ld.a %a4,[%a12]52
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
800054a4:	b5 e2 04 00 	st.a [%a14]4,%a2
800054a8:	c9 c4 30 00 	ld.h %d4,[%a12]48
    }

    if (config->rxBuffer != NULL_PTR)
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
800054ac:	02 f5       	mov %d5,%d15
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
    }

    if (config->rxBuffer != NULL_PTR)
800054ae:	bc 44       	jz.a %a4,800054b6 <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
800054b0:	6d 00 29 16 	call 80008102 <Ifx_Fifo_init>
800054b4:	3c 03       	j 800054ba <IfxAsclin_Asc_initModule+0x2bc>
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
800054b6:	6d 00 43 16 	call 8000813c <Ifx_Fifo_create>
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;
800054ba:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
800054be:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
800054c2:	8b 3f 00 82 	eq %d8,%d15,3
800054c6:	02 83       	mov %d3,%d8
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
800054c8:	b5 e2 08 00 	st.a [%a14]8,%a2
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
800054cc:	8b 02 00 35 	or.ne %d3,%d2,0
800054d0:	df 03 1e 00 	jeq %d3,0,8000550c <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
800054d4:	40 f4       	mov.aa %a4,%a15
800054d6:	6d ff a1 fb 	call 80004c18 <IfxAsclin_getSrcPointerRx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800054da:	54 22       	ld.w %d2,[%a2]
800054dc:	39 c3 1e 00 	ld.bu %d3,[%a12]30
800054e0:	8f f2 cf 21 	andn %d2,%d2,255
800054e4:	a6 32       	or %d2,%d3
800054e6:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800054e8:	54 22       	ld.w %d2,[%a2]
800054ea:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800054ee:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800054f0:	54 22       	ld.w %d2,[%a2]
800054f2:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800054f6:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
800054f8:	19 f2 00 10 	ld.w %d2,[%a15]64
800054fc:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80005500:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80005504:	54 22       	ld.w %d2,[%a2]
80005506:	b7 f2 01 25 	insert %d2,%d2,15,10,1
8000550a:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.rxPriority);
        IfxAsclin_enableRxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
8000550c:	b9 c2 1c 00 	ld.hu %d2,[%a12]28
80005510:	8b 02 00 85 	or.ne %d8,%d2,0
80005514:	df 08 1e 00 	jeq %d8,0,80005550 <IfxAsclin_Asc_initModule+0x352>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
80005518:	40 f4       	mov.aa %a4,%a15
8000551a:	6d ff 89 fb 	call 80004c2c <IfxAsclin_getSrcPointerTx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
8000551e:	54 22       	ld.w %d2,[%a2]
80005520:	39 c3 1c 00 	ld.bu %d3,[%a12]28
80005524:	8f f2 cf 21 	andn %d2,%d2,255
80005528:	a6 32       	or %d2,%d3
8000552a:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
8000552c:	54 22       	ld.w %d2,[%a2]
8000552e:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
80005532:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80005534:	54 22       	ld.w %d2,[%a2]
80005536:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
8000553a:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
8000553c:	19 f2 00 10 	ld.w %d2,[%a15]64
80005540:	b7 f2 81 2f 	insert %d2,%d2,15,31,1
80005544:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80005548:	54 22       	ld.w %d2,[%a2]
8000554a:	b7 f2 01 25 	insert %d2,%d2,15,10,1
8000554e:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.txPriority);
        IfxAsclin_enableTxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
80005550:	b9 c2 20 00 	ld.hu %d2,[%a12]32
80005554:	df 02 1e 00 	jeq %d2,0,80005590 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
80005558:	40 f4       	mov.aa %a4,%a15
8000555a:	6d ff 55 fb 	call 80004c04 <IfxAsclin_getSrcPointerEr>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
8000555e:	54 22       	ld.w %d2,[%a2]
80005560:	39 c3 20 00 	ld.bu %d3,[%a12]32
80005564:	8f f2 cf 21 	andn %d2,%d2,255
80005568:	a6 32       	or %d2,%d3
8000556a:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
8000556c:	54 22       	ld.w %d2,[%a2]
8000556e:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80005572:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80005574:	4c 20       	ld.w %d15,[%a2]0
80005576:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
8000557a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
8000557c:	19 ff 00 10 	ld.w %d15,[%a15]64
80005580:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80005584:	59 ff 00 10 	st.w [%a15]64,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80005588:	4c 20       	ld.w %d15,[%a2]0
8000558a:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
8000558e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
80005590:	4c f4       	ld.w %d15,[%a15]16

    IfxAsclin_flushRxFifo(asclinSFR);              // flushing Rx FIFO
    IfxAsclin_flushTxFifo(asclinSFR);              // flushing Tx FIFO

    return status;
}
80005592:	02 92       	mov %d2,%d9
80005594:	96 02       	or %d15,2
80005596:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
80005598:	4c f3       	ld.w %d15,[%a15]12
8000559a:	96 02       	or %d15,2
8000559c:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
8000559e:	4c f4       	ld.w %d15,[%a15]16
800055a0:	96 01       	or %d15,1
800055a2:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
800055a4:	4c f3       	ld.w %d15,[%a15]12
800055a6:	96 01       	or %d15,1
800055a8:	68 3f       	st.w [%a15]12,%d15
800055aa:	00 90       	ret 

800055ac <IfxAsclin_Asc_initModuleConfig>:

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
800055ac:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
800055ae:	7b 10 7e 34 	movh %d3,18401

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
800055b2:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
800055b6:	82 12       	mov %d2,1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
800055b8:	82 0f       	mov %d15,0

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
800055ba:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
800055be:	59 43 04 00 	st.w [%a4]4,%d3
    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
800055c2:	e9 42 0f 00 	st.b [%a4]15,%d2

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
800055c6:	82 33       	mov %d3,3
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
800055c8:	e9 42 10 00 	st.b [%a4]16,%d2
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
800055cc:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
800055d0:	e9 42 17 00 	st.b [%a4]23,%d2
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
800055d4:	82 f2       	mov %d2,-1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
800055d6:	e9 4f 38 00 	st.b [%a4]56,%d15

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
800055da:	e9 43 0a 00 	st.b [%a4]10,%d3

    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
800055de:	2c 4c       	st.b [%a4]12,%d15
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
800055e0:	e9 43 0d 00 	st.b [%a4]13,%d3
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
800055e4:	2c 4e       	st.b [%a4]14,%d15
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
800055e6:	e9 4f 11 00 	st.b [%a4]17,%d15
    config->frame.parityBit               = FALSE;                             /* disable parity*/
800055ea:	e9 4f 14 00 	st.b [%a4]20,%d15
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
800055ee:	e9 4f 12 00 	st.b [%a4]18,%d15
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800055f2:	82 73       	mov %d3,7

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
800055f4:	e9 4f 18 00 	st.b [%a4]24,%d15
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
800055f8:	e9 4f 19 00 	st.b [%a4]25,%d15
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
800055fc:	e9 4f 1a 00 	st.b [%a4]26,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
80005600:	e9 42 29 00 	st.b [%a4]41,%d2
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
80005604:	82 0f       	mov %d15,0

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
80005606:	82 02       	mov %d2,0
}


void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;
80005608:	f4 45       	st.a [%a4],%a5
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
8000560a:	e9 43 13 00 	st.b [%a4]19,%d3
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
8000560e:	ac 4f       	st.h [%a4]30,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
80005610:	ac 4e       	st.h [%a4]28,%d15
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
80005612:	f9 4f 20 00 	st.h [%a4]32,%d15
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
80005616:	e9 4f 22 00 	st.b [%a4]34,%d15

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
8000561a:	59 42 24 00 	st.w [%a4]36,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
8000561e:	59 42 34 00 	st.w [%a4]52,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
80005622:	59 42 2c 00 	st.w [%a4]44,%d2

    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
80005626:	f9 42 2a 00 	st.h [%a4]42,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
8000562a:	f9 42 30 00 	st.h [%a4]48,%d2

    config->dataBufferMode = Ifx_DataBufferMode_normal;
8000562e:	e9 4f 39 00 	st.b [%a4]57,%d15
80005632:	00 90       	ret 

80005634 <IfxAsclin_Asc_initiateTransmission>:
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
80005634:	0c 4c       	ld.bu %d15,[%a4]12
    config->dataBufferMode = Ifx_DataBufferMode_normal;
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
80005636:	20 10       	sub.a %sp,16
80005638:	40 4f       	mov.aa %a15,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
8000563a:	ee 20       	jnz %d15,8000567a <IfxAsclin_Asc_initiateTransmission+0x46>
    {

        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
8000563c:	99 44 04 00 	ld.a %a4,[%a4]4
80005640:	8c 42       	ld.h %d15,[%a4]4
80005642:	6e 1c       	jz %d15,8000567a <IfxAsclin_Asc_initiateTransmission+0x46>
        {
            uint8 data;

            asclin->txInProgress = TRUE;
80005644:	82 1f       	mov %d15,1
80005646:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
80005648:	0c ff       	ld.bu %d15,[%a15]15
8000564a:	6e 0c       	jz %d15,80005662 <IfxAsclin_Asc_initiateTransmission+0x2e>
8000564c:	de 11       	jne %d15,1,8000566e <IfxAsclin_Asc_initiateTransmission+0x3a>
            break;
            case Ifx_DataBufferMode_timeStampSingle:
            {

                Ifx_DataBufferMode_TimeStampSingle packedData;
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
8000564e:	d2 06       	mov %e6,0
80005650:	d9 a5 04 00 	lea %a5,[%sp]4
80005654:	3b c0 00 40 	mov %d4,12
80005658:	6d 00 f0 15 	call 80008238 <Ifx_Fifo_read>
                data = packedData.data;
8000565c:	0c ac       	ld.bu %d15,[%sp]12
8000565e:	2c a3       	st.b [%sp]3,%d15
80005660:	3c 07       	j 8000566e <IfxAsclin_Asc_initiateTransmission+0x3a>
            switch (asclin->dataBufferMode)
            {
            case Ifx_DataBufferMode_normal: // here
            {

                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
80005662:	d2 06       	mov %e6,0
80005664:	d9 a5 03 00 	lea %a5,[%sp]3
80005668:	82 14       	mov %d4,1
8000566a:	6d 00 e7 15 	call 80008238 <Ifx_Fifo_read>
                data = packedData.data;
            }
            break;
            }

            IfxAsclin_write8(asclin->asclin, &data, 1);
8000566e:	c8 04       	ld.a %a4,[%a15]0
80005670:	d9 a5 03 00 	lea %a5,[%sp]3
80005674:	82 14       	mov %d4,1
80005676:	6d ff 34 fc 	call 80004ede <IfxAsclin_write8>
8000567a:	00 90       	ret 

8000567c <IfxAsclin_Asc_write>:
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000567c:	40 4f       	mov.aa %a15,%a4

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
8000567e:	0c 4c       	ld.bu %d15,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005680:	99 44 04 00 	ld.a %a4,[%a4]4

    if (*count != 0)
80005684:	94 63       	ld.h %d3,[%a6]
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005686:	0b 45 10 88 	mov %e8,%d5,%d4
8000568a:	40 5d       	mov.aa %a13,%a5

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
8000568c:	c9 44 18 00 	ld.h %d4,[%a4]24
#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
80005690:	82 12       	mov %d2,1
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;

    if (*count != 0)
80005692:	df 03 25 00 	jeq %d3,0,800056dc <IfxAsclin_Asc_write+0x60>
80005696:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005698:	ee 13       	jnz %d15,800056be <IfxAsclin_Asc_write+0x42>
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
8000569a:	37 04 70 f0 	extr.u %d15,%d4,0,16

    if (*count != 0)
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
8000569e:	7f 3f 10 00 	jge %d15,%d3,800056be <IfxAsclin_Asc_write+0x42>
        {


            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
800056a2:	0b 89 10 68 	mov %e6,%d9,%d8
800056a6:	6d 00 17 17 	call 800084d4 <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
800056aa:	40 f4       	mov.aa %a4,%a15
800056ac:	6d ff c4 ff 	call 80005634 <IfxAsclin_Asc_initiateTransmission>

            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
800056b0:	94 c4       	ld.h %d4,[%a12]
800056b2:	c8 14       	ld.a %a4,[%a15]4
800056b4:	a2 f4       	sub %d4,%d15
800056b6:	10 d5       	addsc.a %a5,%a13,%d15,0
800056b8:	37 04 50 40 	extr %d4,%d4,0,16
800056bc:	3c 03       	j 800056c2 <IfxAsclin_Asc_write+0x46>

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
800056be:	40 d5       	mov.aa %a5,%a13
800056c0:	02 34       	mov %d4,%d3
800056c2:	0b 89 10 68 	mov %e6,%d9,%d8
800056c6:	6d 00 07 17 	call 800084d4 <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
800056ca:	40 f4       	mov.aa %a4,%a15

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
800056cc:	02 2f       	mov %d15,%d2

            IfxAsclin_Asc_initiateTransmission(asclin);
800056ce:	6d ff b3 ff 	call 80005634 <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
800056d2:	94 c2       	ld.h %d2,[%a12]
800056d4:	a2 f2       	sub %d2,%d15
800056d6:	b4 c2       	st.h [%a12],%d2
        result  = left == 0;
800056d8:	8b 0f 00 22 	eq %d2,%d15,0

    }

    return result;
}
800056dc:	00 90       	ret 

800056de <IfxAsclin_Asc_blockingWrite>:
    return data;
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
800056de:	20 10       	sub.a %sp,16
800056e0:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800056e4:	82 f4       	mov %d4,-1
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
800056e6:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800056e8:	d9 a5 07 00 	lea %a5,[%sp]7
800056ec:	d9 a6 0e 00 	lea %a6,[%sp]14
800056f0:	9b 04 00 58 	addih %d5,%d4,32768
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
800056f4:	ac a7       	st.h [%sp]14,%d15

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
}
800056f6:	1d ff c3 ff 	j 8000567c <IfxAsclin_Asc_write>

800056fa <IfxAsclin_Asc_stdIfDPipeInit>:


boolean IfxAsclin_Asc_stdIfDPipeInit(IfxStdIf_DPipe *stdif, IfxAsclin_Asc *asclin)
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));
800056fa:	40 42       	mov.aa %a2,%a4
800056fc:	82 0f       	mov %d15,0
800056fe:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
80005702:	24 2f       	st.b [%a2+],%d15
80005704:	fc ff       	loop %a15,80005702 <IfxAsclin_Asc_stdIfDPipeInit+0x8>

    /* Set the API link */
    stdif->driver         = asclin;
    stdif->write          = (IfxStdIf_DPipe_Write) & IfxAsclin_Asc_write;
80005706:	7b 00 00 f8 	movh %d15,32768
8000570a:	1b cf 67 f5 	addi %d15,%d15,22140
8000570e:	6c 42       	st.w [%a4]8,%d15
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
80005710:	7b 00 00 f8 	movh %d15,32768
80005714:	1b cf 06 f5 	addi %d15,%d15,20588
80005718:	6c 43       	st.w [%a4]12,%d15
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
8000571a:	7b 00 00 f8 	movh %d15,32768
8000571e:	1b 0f ef f4 	addi %d15,%d15,20208
80005722:	6c 44       	st.w [%a4]16,%d15
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
80005724:	7b 00 00 f8 	movh %d15,32768
80005728:	1b 6f ef f4 	addi %d15,%d15,20214
8000572c:	6c 45       	st.w [%a4]20,%d15
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
8000572e:	7b 00 00 f8 	movh %d15,32768
80005732:	1b cf f0 f4 	addi %d15,%d15,20236
80005736:	6c 46       	st.w [%a4]24,%d15
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
80005738:	7b 00 00 f8 	movh %d15,32768
8000573c:	1b af f1 f4 	addi %d15,%d15,20250
80005740:	6c 47       	st.w [%a4]28,%d15
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
80005742:	7b 00 00 f8 	movh %d15,32768
80005746:	1b cf f9 f4 	addi %d15,%d15,20380
8000574a:	6c 48       	st.w [%a4]32,%d15
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
8000574c:	7b 00 00 f8 	movh %d15,32768
80005750:	1b 0f 04 f5 	addi %d15,%d15,20544
80005754:	6c 49       	st.w [%a4]36,%d15
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
80005756:	7b 00 00 f8 	movh %d15,32768
8000575a:	1b 4f fa f4 	addi %d15,%d15,20388
8000575e:	6c 4a       	st.w [%a4]40,%d15
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
80005760:	7b 00 00 f8 	movh %d15,32768
80005764:	1b 8f 05 f5 	addi %d15,%d15,20568
80005768:	6c 4b       	st.w [%a4]44,%d15
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
8000576a:	7b 00 00 f8 	movh %d15,32768
8000576e:	1b 8f 04 f5 	addi %d15,%d15,20552
80005772:	6c 4c       	st.w [%a4]48,%d15
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
80005774:	7b 00 00 f8 	movh %d15,32768
80005778:	1b 6f 12 f5 	addi %d15,%d15,20774
8000577c:	6c 4d       	st.w [%a4]52,%d15
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
8000577e:	7b 00 00 f8 	movh %d15,32768
80005782:	1b 8f 08 f5 	addi %d15,%d15,20616
80005786:	6c 4e       	st.w [%a4]56,%d15
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
80005788:	7b 00 00 f8 	movh %d15,32768
8000578c:	1b 4f f2 f4 	addi %d15,%d15,20260
80005790:	6c 4f       	st.w [%a4]60,%d15
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
80005792:	7b 00 00 f8 	movh %d15,32768
80005796:	1b 0f f0 f4 	addi %d15,%d15,20224
8000579a:	59 4f 00 10 	st.w [%a4]64,%d15
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
8000579e:	7b 00 00 f8 	movh %d15,32768
800057a2:	1b 6f f0 f4 	addi %d15,%d15,20230
800057a6:	59 4f 04 10 	st.w [%a4]68,%d15
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
800057aa:	7b 00 00 f8 	movh %d15,32768
800057ae:	1b 6f f9 f4 	addi %d15,%d15,20374
800057b2:	59 4f 08 10 	st.w [%a4]72,%d15
    stdif->txDisabled     = FALSE;
800057b6:	82 0f       	mov %d15,0
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));

    /* Set the API link */
    stdif->driver         = asclin;
800057b8:	f4 45       	st.a [%a4],%a5
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
    stdif->txDisabled     = FALSE;
800057ba:	2c 44       	st.b [%a4]4,%d15
    return TRUE;
}
800057bc:	82 12       	mov %d2,1
800057be:	00 90       	ret 

800057c0 <IfxPort_getAddress>:
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
800057c0:	91 00 00 28 	movh.a %a2,32768
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
800057c4:	82 05       	mov %d5,0
}


Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
800057c6:	82 02       	mov %d2,0
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
800057c8:	d9 22 8c b0 	lea %a2,[%a2]2764 <80000acc <IfxPort_cfg_indexMap>>
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
800057cc:	8f f5 0f f1 	and %d15,%d5,255
800057d0:	8b 02 00 32 	eq %d3,%d2,0
800057d4:	8b 0f 61 34 	and.lt.u %d3,%d15,16
800057d8:	76 3a       	jz %d3,800057ec <IfxPort_getAddress+0x2c>
800057da:	02 5f       	mov %d15,%d5
800057dc:	16 ff       	and %d15,255
    {
        if (IfxPort_cfg_indexMap[i].index == port)
800057de:	d0 2f       	addsc.a %a15,%a2,%d15,3
800057e0:	82 02       	mov %d2,0
800057e2:	4c f1       	ld.w %d15,[%a15]4
800057e4:	7e 42       	jne %d15,%d4,800057e8 <IfxPort_getAddress+0x28>
        {
            module = IfxPort_cfg_indexMap[i].module;
800057e6:	48 02       	ld.w %d2,[%a15]0
800057e8:	c2 15       	add %d5,1
800057ea:	3c f1       	j 800057cc <IfxPort_getAddress+0xc>

        i++;
    }

    return module;
}
800057ec:	60 22       	mov.a %a2,%d2
800057ee:	00 90       	ret 

800057f0 <IfxPort_getIndex>:

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800057f0:	91 00 00 38 	movh.a %a3,32768
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
800057f4:	82 0f       	mov %d15,0
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800057f6:	d9 33 8c b0 	lea %a3,[%a3]2764 <80000acc <IfxPort_cfg_indexMap>>
800057fa:	a0 ff       	mov.a %a15,15
800057fc:	d0 32       	addsc.a %a2,%a3,%d15,3
800057fe:	d4 25       	ld.a %a5,[%a2]
80005800:	7d 45 05 80 	jne.a %a5,%a4,8000580a <IfxPort_getIndex+0x1a>
        {
            result = (IfxPort_Index)IfxPort_cfg_indexMap[index].index;
80005804:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80005808:	00 90       	ret 
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
8000580a:	c2 1f       	add %d15,1
8000580c:	fc f8       	loop %a15,800057fc <IfxPort_getIndex+0xc>
IfxPort_Index IfxPort_getIndex(Ifx_P *port)
{
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;
8000580e:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80005810:	00 90       	ret 

80005812 <IfxPort_resetESR>:


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
80005812:	40 4f       	mov.aa %a15,%a4
80005814:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005816:	6d 00 ac 0c 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
8000581a:	02 24       	mov %d4,%d2
}


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000581c:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
8000581e:	6d 00 a8 0b 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 0);
80005822:	82 12       	mov %d2,1
80005824:	d9 f4 10 10 	lea %a4,[%a15]80
80005828:	0f 82 00 20 	sh %d2,%d2,%d8

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
8000582c:	d2 06       	mov %e6,0
8000582e:	02 27       	mov %d7,%d2
80005830:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005834:	02 f4       	mov %d4,%d15
80005836:	1d 00 d1 0c 	j 800071d8 <IfxScuWdt_setCpuEndinit>

8000583a <IfxPort_disableEmergencyStop>:
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
8000583a:	91 00 00 38 	movh.a %a3,32768
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
8000583e:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005840:	d9 33 8c d0 	lea %a3,[%a3]2892 <80000b4c <IfxPort_cfg_esrMasks>>
80005844:	a0 ff       	mov.a %a15,15
80005846:	d0 32       	addsc.a %a2,%a3,%d15,3
80005848:	d4 25       	ld.a %a5,[%a2]
8000584a:	7d 54 0c 80 	jne.a %a4,%a5,80005862 <IfxPort_disableEmergencyStop+0x28>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
8000584e:	b9 2f 04 00 	ld.hu %d15,[%a2]4
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005852:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005854:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
80005858:	6e 08       	jz %d15,80005868 <IfxPort_disableEmergencyStop+0x2e>
            {
                IfxPort_resetESR(port, pinIndex);
8000585a:	6d ff dc ff 	call 80005812 <IfxPort_resetESR>
                result = TRUE;
8000585e:	82 12       	mov %d2,1
80005860:	00 90       	ret 
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005862:	c2 1f       	add %d15,1
80005864:	fc f1       	loop %a15,80005846 <IfxPort_disableEmergencyStop+0xc>
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005866:	82 02       	mov %d2,0
            break;
        }
    }

    return result;
}
80005868:	00 90       	ret 

8000586a <IfxPort_setESR>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
8000586a:	40 4f       	mov.aa %a15,%a4
8000586c:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000586e:	6d 00 80 0c 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005872:	02 24       	mov %d4,%d2
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005874:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005876:	6d 00 7c 0b 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 1U << pinIndex);
8000587a:	82 12       	mov %d2,1
8000587c:	0f 82 00 20 	sh %d2,%d2,%d8
80005880:	d9 f4 10 10 	lea %a4,[%a15]80
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005884:	53 12 40 60 	mul.u %e6,%d2,1

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005888:	02 27       	mov %d7,%d2
8000588a:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
8000588e:	02 f4       	mov %d4,%d15
80005890:	1d 00 a4 0c 	j 800071d8 <IfxScuWdt_setCpuEndinit>

80005894 <IfxPort_enableEmergencyStop>:
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005894:	82 19       	mov %d9,1
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005896:	91 00 00 d8 	movh.a %a13,32768
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
8000589a:	40 4c       	mov.aa %a12,%a4
8000589c:	02 48       	mov %d8,%d4
8000589e:	0f 49 00 90 	sh %d9,%d9,%d4
    sint32  portIndex;
    boolean result = FALSE;
800058a2:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
800058a4:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
800058a6:	d9 dd 8c d0 	lea %a13,[%a13]2892 <80000b4c <IfxPort_cfg_esrMasks>>
800058aa:	d0 df       	addsc.a %a15,%a13,%d15,3
800058ac:	c8 02       	ld.a %a2,[%a15]0
800058ae:	7d 2c 0b 80 	jne.a %a12,%a2,800058c4 <IfxPort_enableEmergencyStop+0x30>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
800058b2:	b9 f3 04 00 	ld.hu %d3,[%a15]4
800058b6:	26 93       	and %d3,%d9
800058b8:	76 36       	jz %d3,800058c4 <IfxPort_enableEmergencyStop+0x30>
            {
                IfxPort_setESR(port, pinIndex);
800058ba:	40 c4       	mov.aa %a4,%a12
800058bc:	02 84       	mov %d4,%d8
800058be:	6d ff d6 ff 	call 8000586a <IfxPort_setESR>
                result = TRUE;
800058c2:	82 12       	mov %d2,1
boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
800058c4:	c2 1f       	add %d15,1
800058c6:	8b 0f 21 32 	ne %d3,%d15,16
800058ca:	df 03 f0 ff 	jne %d3,0,800058aa <IfxPort_enableEmergencyStop+0x16>
            }
        }
    }

    return result;
}
800058ce:	00 90       	ret 

800058d0 <IfxPort_setGroupModeInput>:
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800058d0:	82 0f       	mov %d15,0
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode)
{
800058d2:	20 20       	sub.a %sp,32
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800058d4:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
800058d6:	78 04       	st.w [%sp]16,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800058d8:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
800058da:	78 05       	st.w [%sp]20,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800058dc:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
800058de:	78 06       	st.w [%sp]24,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800058e0:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
800058e2:	78 07       	st.w [%sp]28,%d15
800058e4:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800058e8:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
800058ec:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800058f0:	3b 80 0f 70 	mov %d7,248
800058f4:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
800058f8:	9f 0f 07 80 	jned %d15,0,80005906 <IfxPort_setGroupModeInput+0x36>
800058fc:	d9 44 10 00 	lea %a4,[%a4]16
80005900:	82 0f       	mov %d15,0
80005902:	a0 3f       	mov.a %a15,3
80005904:	3c 1e       	j 80005940 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
80005906:	57 05 61 24 	extr.u %d2,%d5,%d4,1
8000590a:	df 02 19 00 	jeq %d2,0,8000593c <IfxPort_setGroupModeInput+0x6c>
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
8000590e:	8f 34 c0 31 	andn %d3,%d4,3
80005912:	60 32       	mov.a %a2,%d3
80005914:	d9 af 20 00 	lea %a15,[%sp]32
80005918:	30 2f       	add.a %a15,%a2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
8000591a:	8f 34 00 21 	and %d2,%d4,3
8000591e:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
80005920:	19 f0 f0 ff 	ld.w %d0,[%a15]-16
80005924:	0f 27 00 30 	sh %d3,%d7,%d2
80005928:	a6 03       	or %d3,%d0
8000592a:	59 f3 f0 ff 	st.w [%a15]-16,%d3
            iocrVal[index]  |= (mode) << shift;
8000592e:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
80005932:	0f 26 00 20 	sh %d2,%d6,%d2
80005936:	a6 32       	or %d2,%d3
80005938:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
8000593c:	c2 14       	add %d4,1
8000593e:	3c dd       	j 800058f8 <IfxPort_setGroupModeInput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005940:	d9 a3 20 00 	lea %a3,[%sp]32
80005944:	90 32       	addsc.a %a2,%a3,%d15,2
80005946:	19 24 f0 ff 	ld.w %d4,[%a2]-16
8000594a:	76 47       	jz %d4,80005958 <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
8000594c:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005950:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005952:	02 43       	mov %d3,%d4
80005954:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005958:	c2 1f       	add %d15,1
8000595a:	b0 44       	add.a %a4,4
8000595c:	fc f2       	loop %a15,80005940 <IfxPort_setGroupModeInput+0x70>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
8000595e:	00 90       	ret 

80005960 <IfxPort_setGroupModeOutput>:
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005960:	82 0f       	mov %d15,0
    }
}


void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
80005962:	20 20       	sub.a %sp,32
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005964:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005966:	78 04       	st.w [%sp]16,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005968:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
8000596a:	78 05       	st.w [%sp]20,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
8000596c:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
8000596e:	78 06       	st.w [%sp]24,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005970:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005972:	78 07       	st.w [%sp]28,%d15
80005974:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005978:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
8000597c:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005980:	3b 80 0f 00 	mov %d0,248
80005984:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005988:	9f 0f 07 80 	jned %d15,0,80005996 <IfxPort_setGroupModeOutput+0x36>
8000598c:	d9 44 10 00 	lea %a4,[%a4]16
80005990:	82 0f       	mov %d15,0
80005992:	a0 3f       	mov.a %a15,3
80005994:	3c 1f       	j 800059d2 <IfxPort_setGroupModeOutput+0x72>
    {
        if ((imask & (1U << i)) != 0)
80005996:	57 05 61 24 	extr.u %d2,%d5,%d4,1
8000599a:	df 02 1a 00 	jeq %d2,0,800059ce <IfxPort_setGroupModeOutput+0x6e>
        {
            uint32 index = i / 4;
8000599e:	8f e4 1f 30 	sh %d3,%d4,-2
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800059a2:	d9 a2 20 00 	lea %a2,[%sp]32
800059a6:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
800059aa:	8f 34 00 21 	and %d2,%d4,3
800059ae:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
800059b0:	a6 63       	or %d3,%d6
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800059b2:	0f 20 00 70 	sh %d7,%d0,%d2
800059b6:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
800059ba:	0f 23 00 20 	sh %d2,%d3,%d2
800059be:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800059c2:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
800059c4:	a6 32       	or %d2,%d3
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800059c6:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
800059ca:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
800059ce:	c2 14       	add %d4,1
800059d0:	3c dc       	j 80005988 <IfxPort_setGroupModeOutput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
800059d2:	d9 a3 20 00 	lea %a3,[%sp]32
800059d6:	90 32       	addsc.a %a2,%a3,%d15,2
800059d8:	19 24 f0 ff 	ld.w %d4,[%a2]-16
800059dc:	76 47       	jz %d4,800059ea <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
800059de:	19 22 e0 ff 	ld.w %d2,[%a2]-32
800059e2:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
800059e4:	02 43       	mov %d3,%d4
800059e6:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode | index) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
800059ea:	c2 1f       	add %d15,1
800059ec:	b0 44       	add.a %a4,4
800059ee:	fc f2       	loop %a15,800059d2 <IfxPort_setGroupModeOutput+0x72>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
800059f0:	00 90       	ret 

800059f2 <IfxPort_setGroupPadDriver>:


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
800059f2:	20 10       	sub.a %sp,16
800059f4:	02 4f       	mov %d15,%d4
800059f6:	02 5a       	mov %d10,%d5
800059f8:	40 4c       	mov.aa %a12,%a4
800059fa:	02 69       	mov %d9,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800059fc:	6d 00 b9 0b 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005a00:	02 24       	mov %d4,%d2
}


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a02:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005a04:	6d 00 b5 0a 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005a08:	82 03       	mov %d3,0
80005a0a:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
80005a0c:	59 a3 08 00 	st.w [%sp]8,%d3
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005a10:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
80005a14:	59 a3 0c 00 	st.w [%sp]12,%d3
80005a18:	8b 1f a1 22 	ge.u %d2,%d15,17
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005a1c:	8b 0f 01 31 	rsub %d3,%d15,16
            pdrVal[i]  = 0;
            pdrMask[i] = 0;
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;
80005a20:	0f fa 00 50 	sh %d5,%d10,%d15
80005a24:	ab 03 a0 32 	seln %d3,%d2,%d3,0

        for (i = pinIndex; i < 16; i++)
80005a28:	9f 03 03 80 	jned %d3,0,80005a2e <IfxPort_setGroupPadDriver+0x3c>
80005a2c:	3c 1d       	j 80005a66 <IfxPort_setGroupPadDriver+0x74>
        {
            if ((imask & (1U << i)) != 0)
80005a2e:	57 05 61 2f 	extr.u %d2,%d5,%d15,1
80005a32:	df 02 18 00 	jeq %d2,0,80005a62 <IfxPort_setGroupPadDriver+0x70>
            {
                uint32 index = i / 8;
80005a36:	8f df 1f 40 	sh %d4,%d15,-3
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005a3a:	d9 a2 10 00 	lea %a2,[%sp]16
80005a3e:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005a42:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005a46:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005a4a:	06 22       	sh %d2,2
                pdrMask[index] |= (0xFUL << shift);
80005a4c:	d7 f4 04 42 	insert %d4,%d4,15,%d2,4
                pdrVal[index]  |= (padDriver << shift);
80005a50:	0f 29 00 20 	sh %d2,%d9,%d2
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005a54:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005a58:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005a5c:	a6 42       	or %d2,%d4
80005a5e:	59 f2 f0 ff 	st.w [%a15]-16,%d2
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;

        for (i = pinIndex; i < 16; i++)
80005a62:	c2 1f       	add %d15,1
80005a64:	3c e2       	j 80005a28 <IfxPort_setGroupPadDriver+0x36>
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005a66:	58 02       	ld.w %d15,[%sp]8
80005a68:	6e 08       	jz %d15,80005a78 <IfxPort_setGroupPadDriver+0x86>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005a6a:	d9 cf 00 10 	lea %a15,[%a12]64
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005a6e:	54 a6       	ld.w %d6,[%sp]
80005a70:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a72:	02 f7       	mov %d7,%d15
80005a74:	49 f6 40 08 	ldmst [%a15]0,%e6
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005a78:	58 03       	ld.w %d15,[%sp]12
80005a7a:	6e 09       	jz %d15,80005a8c <IfxPort_setGroupPadDriver+0x9a>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005a7c:	d9 cc 04 10 	lea %a12,[%a12]68
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005a80:	19 a6 04 00 	ld.w %d6,[%sp]4
80005a84:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a86:	02 f7       	mov %d7,%d15
80005a88:	49 c6 40 08 	ldmst [%a12]0,%e6
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005a8c:	02 84       	mov %d4,%d8
}
80005a8e:	d9 aa 10 00 	lea %sp,[%sp]16
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005a92:	1d 00 a3 0b 	j 800071d8 <IfxScuWdt_setCpuEndinit>

80005a96 <IfxPort_setPinMode>:
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
80005a96:	91 40 00 2f 	movh.a %a2,61444

void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005a9a:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005a9e:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80005aa2:	40 4f       	mov.aa %a15,%a4
80005aa4:	02 4f       	mov %d15,%d4
80005aa6:	02 5a       	mov %d10,%d5
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80005aa8:	d9 4c 10 00 	lea %a12,[%a4]16
    uint8                 iocrIndex = (pinIndex / 4);
80005aac:	8f e4 1f b0 	sh %d11,%d4,-2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005ab0:	06 39       	sh %d9,3

    if (port == &MODULE_P40)
80005ab2:	7d 24 11 80 	jne.a %a4,%a2,80005ad4 <IfxPort_setPinMode+0x3e>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005ab6:	6d 00 5c 0b 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>
        IfxScuWdt_clearCpuEndinit(passwd);
80005aba:	02 24       	mov %d4,%d2
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005abc:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80005abe:	6d 00 58 0a 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80005ac2:	19 f2 20 10 	ld.w %d2,[%a15]96
        IfxScuWdt_setCpuEndinit(passwd);
80005ac6:	02 84       	mov %d4,%d8

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
80005ac8:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005acc:	59 ff 20 10 	st.w [%a15]96,%d15
        IfxScuWdt_setCpuEndinit(passwd);
80005ad0:	6d 00 84 0b 	call 800071d8 <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80005ad4:	da ff       	mov %d15,255
80005ad6:	01 cb 02 f6 	addsc.a %a15,%a12,%d11,2
80005ada:	0f 9f 00 f0 	sh %d15,%d15,%d9
80005ade:	0f 9a 00 20 	sh %d2,%d10,%d9
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005ae2:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005ae4:	02 f3       	mov %d3,%d15
80005ae6:	49 f2 40 08 	ldmst [%a15]0,%e2
80005aea:	00 90       	ret 

80005aec <IfxPort_setPinModeLvdsHigh>:
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
80005aec:	02 5a       	mov %d10,%d5
80005aee:	40 4f       	mov.aa %a15,%a4
80005af0:	02 49       	mov %d9,%d4
80005af2:	02 6f       	mov %d15,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005af4:	6d 00 3d 0b 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005af8:	02 24       	mov %d4,%d2
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005afa:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005afc:	6d 00 39 0a 	call 80006f6e <IfxScuWdt_clearCpuEndinit>

    if (mode < IfxPort_Mode_outputPushPullGeneral)
80005b00:	37 0a 48 50 	extr %d5,%d10,0,8
80005b04:	bf 05 11 00 	jlt %d5,0,80005b26 <IfxPort_setPinModeLvdsHigh+0x3a>
    {
        if (pinIndex < 2)
80005b08:	bf 29 21 80 	jlt.u %d9,2,80005b4a <IfxPort_setPinModeLvdsHigh+0x5e>
        {}
        else
        {
            port->LPCR1.B_P21.RDIS_CTRL = enablePortControlled;
80005b0c:	19 f2 24 20 	ld.w %d2,[%a15]164
80005b10:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005b14:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005b18:	19 ff 24 20 	ld.w %d15,[%a15]164
80005b1c:	8f 2f c0 f1 	andn %d15,%d15,2
80005b20:	59 ff 24 20 	st.w [%a15]164,%d15
80005b24:	3c 13       	j 80005b4a <IfxPort_setPinModeLvdsHigh+0x5e>
        }
    }
    else
    {
        port->LPCR2.B.TDIS_CTRL = enablePortControlled;
80005b26:	19 f2 28 20 	ld.w %d2,[%a15]168
80005b2a:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005b2e:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_DIS    = 0;
80005b32:	19 ff 28 20 	ld.w %d15,[%a15]168
80005b36:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80005b3a:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_PD     = 0;
80005b3e:	19 ff 28 20 	ld.w %d15,[%a15]168
80005b42:	b7 0f 01 f7 	insert %d15,%d15,0,14,1
80005b46:	59 ff 28 20 	st.w [%a15]168,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80005b4a:	02 84       	mov %d4,%d8
80005b4c:	1d 00 46 0b 	j 800071d8 <IfxScuWdt_setCpuEndinit>

80005b50 <IfxPort_setPinModeLvdsMedium>:
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005b50:	0b 65 10 a8 	mov %e10,%d5,%d6
80005b54:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005b56:	8f f4 1f 90 	sh %d9,%d4,-1
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005b5a:	02 48       	mov %d8,%d4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005b5c:	6d 00 09 0b 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005b60:	02 24       	mov %d4,%d2
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005b62:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005b64:	6d 00 05 0a 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
80005b68:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005b6a:	d9 f2 00 10 	lea %a2,[%a15]64
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005b6e:	01 28 02 26 	addsc.a %a2,%a2,%d8,2


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005b72:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005b76:	d9 f4 20 20 	lea %a4,[%a15]160
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005b7a:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005b7e:	0f 2b 00 50 	sh %d5,%d11,%d2
80005b82:	74 25       	st.w [%a2],%d5
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005b84:	54 46       	ld.w %d6,[%a4]
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005b86:	02 f4       	mov %d4,%d15
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005b88:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005b8c:	74 46       	st.w [%a4],%d6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005b8e:	1d 00 25 0b 	j 800071d8 <IfxScuWdt_setCpuEndinit>

80005b92 <IfxPort_setPinPadDriver>:
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80005b92:	0b 45 10 88 	mov %e8,%d5,%d4
80005b96:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005b98:	6d 00 eb 0a 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005b9c:	02 24       	mov %d4,%d2
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005b9e:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005ba0:	6d 00 e7 09 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
80005ba4:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005ba8:	06 22       	sh %d2,2
80005baa:	06 d8       	sh %d8,-3
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80005bac:	d9 ff 00 10 	lea %a15,[%a15]64
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005bb0:	3b f0 00 30 	mov %d3,15
80005bb4:	01 f8 02 f6 	addsc.a %a15,%a15,%d8,2
80005bb8:	0f 23 00 30 	sh %d3,%d3,%d2
80005bbc:	0f 29 00 60 	sh %d6,%d9,%d2
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005bc0:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005bc2:	02 37       	mov %d7,%d3
80005bc4:	49 f6 40 08 	ldmst [%a15]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005bc8:	02 f4       	mov %d4,%d15
80005bca:	1d 00 07 0b 	j 800071d8 <IfxScuWdt_setCpuEndinit>
	...

80005bd0 <IfxScuCcu_calculateSysPllDividers>:
        //' K2+1 div should be even for 50% duty cycle
        k2Steps = 2;

        if (fPll > 240000000)
        {
            k2Steps = 1;
80005bd0:	7b e0 e4 30 	movh %d3,3662
80005bd4:	1b 13 c0 31 	addi %d3,%d3,7169
80005bd8:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005bdc:	82 2f       	mov %d15,2
80005bde:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005be2:	8f 4c 00 80 	sh %d8,%d12,4
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005be6:	7b c0 be 00 	movh %d0,3052

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005bea:	91 40 0f 50 	movh.a %a5,244
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005bee:	7b 80 82 6e 	movh %d6,59432
80005bf2:	91 80 7d 61 	movh.a %a6,6104

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
    uint8   deviationAllowed = 2;
    uint32  fOsc             = cfg->xtalFrequency;
80005bf6:	19 4e 10 10 	ld.w %d14,[%a4]80
80005bfa:	60 83       	mov.a %a3,%d8
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005bfc:	1b 00 20 0c 	addi %d0,%d0,-15872

        uint32       p;
        uint32       n;
        uint32       k2;
        uint32       k2Steps;
        uint32       bestK2 = 0, bestN = 0, bestP = 0;
80005c00:	d2 0a       	mov %e10,0
80005c02:	82 09       	mov %d9,0
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005c04:	3b 00 01 50 	mov %d5,16
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005c08:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005c0c:	82 f7       	mov %d7,-1
80005c0e:	1b 06 c0 67 	addi %d6,%d6,31744
80005c12:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005c16:	a0 ff       	mov.a %a15,15
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005c18:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005c1c:	7b 60 f8 1f 	movh %d1,65414
80005c20:	1b 01 e0 1e 	addi %d1,%d1,-4608
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005c24:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005c26:	0b 12 40 10 	addx %d1,%d2,%d1
80005c2a:	8b f3 bf 20 	addc %d2,%d3,-1
80005c2e:	80 53       	mov.d %d3,%a5
80005c30:	ba 02       	eq %d15,%d2,0
80005c32:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005c36:	8b 02 00 f5 	or.ne %d15,%d2,0
80005c3a:	ee 24       	jnz %d15,80005c82 <IfxScuCcu_calculateSysPllDividers+0xb2>
80005c3c:	02 5d       	mov %d13,%d5
80005c3e:	82 11       	mov %d1,1
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005c40:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005c44:	80 68       	mov.d %d8,%a6
80005c46:	ba 03       	eq %d15,%d3,0
80005c48:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005c4c:	8b 03 00 f5 	or.ne %d15,%d3,0
80005c50:	ee 13       	jnz %d15,80005c76 <IfxScuCcu_calculateSysPllDividers+0xa6>
80005c52:	82 18       	mov %d8,1
80005c54:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
                    {
                        for (n = nMin; n <= nMax; n++)
                        {
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);
80005c58:	4b d8 11 22 	div.u %e2,%d8,%d13
80005c5c:	e2 e2       	mul %d2,%d14
80005c5e:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005c60:	df 02 18 00 	jeq %d2,0,80005c90 <IfxScuCcu_calculateSysPllDividers+0xc0>
                                bestP          = p;

                                goto EXITCALC_LOOP;
                            }

                            if (fPllLeastError > fPllError)
80005c64:	82 1f       	mov %d15,1
80005c66:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005c6a:	6a 8b       	cmovn %d11,%d15,%d8
80005c6c:	6a 20       	cmovn %d0,%d15,%d2
80005c6e:	6a 5a       	cmovn %d10,%d15,%d5
80005c70:	6a 19       	cmovn %d9,%d15,%d1
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
                    {
                        for (n = nMin; n <= nMax; n++)
80005c72:	c2 18       	add %d8,1
80005c74:	fc 22       	loop %a2,80005c58 <IfxScuCcu_calculateSysPllDividers+0x88>
80005c76:	80 3f       	mov.d %d15,%a3
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
80005c78:	42 c1       	add %d1,%d12
80005c7a:	42 fd       	add %d13,%d15
80005c7c:	8b 11 68 f2 	lt.u %d15,%d1,129
80005c80:	ee e0       	jnz %d15,80005c40 <IfxScuCcu_calculateSysPllDividers+0x70>
80005c82:	60 c2       	mov.a %a2,%d12
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005c84:	c2 f5       	add %d5,-1
80005c86:	01 23 20 30 	sub.a %a3,%a3,%a2
80005c8a:	fd f0 c7 7f 	loop %a15,80005c18 <IfxScuCcu_calculateSysPllDividers+0x48>
80005c8e:	3c 05       	j 80005c98 <IfxScuCcu_calculateSysPllDividers+0xc8>

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
                                bestN          = n;
80005c90:	0b 58 10 a8 	mov %e10,%d8,%d5
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
80005c94:	02 19       	mov %d9,%d1
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
80005c96:	82 00       	mov %d0,0
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005c98:	da 64       	mov %d15,100
80005c9a:	06 14       	sh %d4,1
80005c9c:	4b f4 11 42 	div.u %e4,%d4,%d15
80005ca0:	82 1f       	mov %d15,1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
        }
        else
        {
            retVal = 1;
80005ca2:	82 12       	mov %d2,1
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005ca4:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005ca8:	ee 0f       	jnz %d15,80005cc6 <IfxScuCcu_calculateSysPllDividers+0xf6>
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005caa:	82 02       	mov %d2,0

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005cac:	c2 fb       	add %d11,-1
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005cae:	c2 fa       	add %d10,-1
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005cb0:	c2 f9       	add %d9,-1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005cb2:	59 42 0c 00 	st.w [%a4]12,%d2

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005cb6:	e9 4b 09 00 	st.b [%a4]9,%d11
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005cba:	e9 4a 08 00 	st.b [%a4]8,%d10
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005cbe:	e9 49 0a 00 	st.b [%a4]10,%d9
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
80005cc2:	2c 40       	st.b [%a4]0,%d15
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
80005cc4:	82 02       	mov %d2,0
        {
            retVal = 1;
        }
    }
    return retVal;
}
80005cc6:	00 90       	ret 

80005cc8 <IfxScuCcu_getOsc0Frequency>:
}


float32 IfxScuCcu_getOsc0Frequency(void)
{
    return (float32)IfxScuCcu_xtalFrequency;
80005cc8:	91 00 00 f7 	movh.a %a15,28672
80005ccc:	19 f2 18 00 	ld.w %d2,[%a15]24 <70000018 <IfxScuCcu_xtalFrequency>>
}
80005cd0:	4b 02 61 21 	utof %d2,%d2
80005cd4:	00 90       	ret 

80005cd6 <IfxScuCcu_getOscFrequency>:

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005cd6:	91 30 00 ff 	movh.a %a15,61443
80005cda:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005cde:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005ce0:	7b f0 cb 24 	movh %d2,19647

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005ce4:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005ce8:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005cec:	6e 0c       	jz %d15,80005d04 <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005cee:	4c f0       	ld.w %d15,[%a15]0
        freq = (float32)IfxScuCcu_xtalFrequency;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0;
80005cf0:	82 02       	mov %d2,0

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005cf2:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005cf6:	5e 17       	jne %d15,1,80005d04 <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005cf8:	91 00 00 f7 	movh.a %a15,28672
80005cfc:	19 f2 18 00 	ld.w %d2,[%a15]24 <70000018 <IfxScuCcu_xtalFrequency>>
80005d00:	4b 02 61 21 	utof %d2,%d2
        /* Reserved values, this */
        freq = 0.0;
    }

    return freq;
}
80005d04:	00 90       	ret 

80005d06 <IfxScuCcu_getPllErayFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005d06:	91 30 00 ff 	movh.a %a15,61443
80005d0a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005d0e:	6d ff e4 ff 	call 80005cd6 <IfxScuCcu_getOscFrequency>

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005d12:	4c f9       	ld.w %d15,[%a15]36
80005d14:	2e 05       	jz.t %d15,0,80005d1e <IfxScuCcu_getPllErayFrequency+0x18>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80005d16:	4c fb       	ld.w %d15,[%a15]44
80005d18:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005d1c:	3c 21       	j 80005d5e <IfxScuCcu_getPllErayFrequency+0x58>
    }
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80005d1e:	4c f9       	ld.w %d15,[%a15]36
80005d20:	6f 3f 15 00 	jz.t %d15,3,80005d4a <IfxScuCcu_getPllErayFrequency+0x44>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80005d24:	48 b4       	ld.w %d4,[%a15]44
80005d26:	8f f4 07 41 	and %d4,%d4,127
80005d2a:	c2 14       	add %d4,1
80005d2c:	6d 00 b2 30 	call 8000be90 <__floatsidf>
80005d30:	7b 80 19 54 	movh %d5,16792
80005d34:	0b 23 10 68 	mov %e6,%d3,%d2
80005d38:	82 04       	mov %d4,0
80005d3a:	1b 45 78 5d 	addi %d5,%d5,-10364
80005d3e:	6d 00 1d 30 	call 8000bd78 <__divdf3>
80005d42:	0b 23 10 48 	mov %e4,%d3,%d2
80005d46:	1d 00 d8 30 	j 8000bef6 <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
80005d4a:	48 a3       	ld.w %d3,[%a15]40
80005d4c:	4c fb       	ld.w %d15,[%a15]44
80005d4e:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005d52:	16 7f       	and %d15,127
80005d54:	c2 13       	add %d3,1
80005d56:	4b 03 41 31 	itof %d3,%d3
80005d5a:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005d5e:	c2 1f       	add %d15,1
80005d60:	4b 0f 41 f1 	itof %d15,%d15
80005d64:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005d68:	00 90       	ret 

80005d6a <IfxScuCcu_getPllErayVcoFrequency>:

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005d6a:	91 30 00 ff 	movh.a %a15,61443
80005d6e:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005d72:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005d74:	7b f0 cb 24 	movh %d2,19647
80005d78:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005d7c:	6f 3f 18 80 	jnz.t %d15,3,80005dac <IfxScuCcu_getPllErayVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLERAYCON0.B.NDIV + 1)) / (SCU_PLLERAYCON0.B.PDIV + 1);
80005d80:	6d ff ab ff 	call 80005cd6 <IfxScuCcu_getOscFrequency>
80005d84:	91 30 00 ff 	movh.a %a15,61443
80005d88:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005d8c:	48 03       	ld.w %d3,[%a15]0
80005d8e:	4c f0       	ld.w %d15,[%a15]0
80005d90:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005d94:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005d98:	c2 13       	add %d3,1
80005d9a:	4b 03 41 31 	itof %d3,%d3
80005d9e:	c2 1f       	add %d15,1
80005da0:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005da4:	4b 0f 41 f1 	itof %d15,%d15
80005da8:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80005dac:	00 90       	ret 

80005dae <IfxScuCcu_getPllFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005dae:	91 30 00 ff 	movh.a %a15,61443
80005db2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005db6:	6d ff 90 ff 	call 80005cd6 <IfxScuCcu_getOscFrequency>

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005dba:	4c f5       	ld.w %d15,[%a15]20
80005dbc:	2e 06       	jz.t %d15,0,80005dc8 <IfxScuCcu_getPllFrequency+0x1a>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80005dbe:	4c f7       	ld.w %d15,[%a15]28
80005dc0:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005dc4:	c2 1f       	add %d15,1
80005dc6:	3c 28       	j 80005e16 <IfxScuCcu_getPllFrequency+0x68>
    }
    else if (scu->PLLSTAT.B.FINDIS == 1)
80005dc8:	4c f5       	ld.w %d15,[%a15]20
80005dca:	6f 3f 15 00 	jz.t %d15,3,80005df4 <IfxScuCcu_getPllFrequency+0x46>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80005dce:	48 74       	ld.w %d4,[%a15]28
80005dd0:	8f f4 07 41 	and %d4,%d4,127
80005dd4:	c2 14       	add %d4,1
80005dd6:	6d 00 5d 30 	call 8000be90 <__floatsidf>
80005dda:	7b 80 19 54 	movh %d5,16792
80005dde:	0b 23 10 68 	mov %e6,%d3,%d2
80005de2:	82 04       	mov %d4,0
80005de4:	1b 45 78 5d 	addi %d5,%d5,-10364
80005de8:	6d 00 c8 2f 	call 8000bd78 <__divdf3>
80005dec:	0b 23 10 48 	mov %e4,%d3,%d2
80005df0:	1d 00 83 30 	j 8000bef6 <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
80005df4:	48 64       	ld.w %d4,[%a15]24
80005df6:	4c f7       	ld.w %d15,[%a15]28
80005df8:	37 04 e7 44 	extr.u %d4,%d4,9,7
80005dfc:	8f ff 07 31 	and %d3,%d15,127
80005e00:	4c f6       	ld.w %d15,[%a15]24
80005e02:	c2 14       	add %d4,1
80005e04:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005e08:	4b 04 41 41 	itof %d4,%d4
80005e0c:	c2 1f       	add %d15,1
80005e0e:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80005e12:	4b 42 41 20 	mul.f %d2,%d2,%d4
80005e16:	4b 0f 41 f1 	itof %d15,%d15
80005e1a:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005e1e:	00 90       	ret 

80005e20 <IfxScuCcu_getPllVcoFrequency>:

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005e20:	91 30 00 ff 	movh.a %a15,61443
80005e24:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80005e28:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005e2a:	7b f0 cb 24 	movh %d2,19647
80005e2e:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005e32:	6f 3f 18 80 	jnz.t %d15,3,80005e62 <IfxScuCcu_getPllVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLCON0.B.NDIV + 1)) / (SCU_PLLCON0.B.PDIV + 1);
80005e36:	6d ff 50 ff 	call 80005cd6 <IfxScuCcu_getOscFrequency>
80005e3a:	91 30 00 ff 	movh.a %a15,61443
80005e3e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80005e42:	48 03       	ld.w %d3,[%a15]0
80005e44:	4c f0       	ld.w %d15,[%a15]0
80005e46:	37 03 e7 34 	extr.u %d3,%d3,9,7
80005e4a:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005e4e:	c2 13       	add %d3,1
80005e50:	4b 03 41 31 	itof %d3,%d3
80005e54:	c2 1f       	add %d15,1
80005e56:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005e5a:	4b 0f 41 f1 	itof %d15,%d15
80005e5e:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80005e62:	00 90       	ret 

80005e64 <IfxScuCcu_getSourceFrequency>:

float32 IfxScuCcu_getSourceFrequency(void)
{
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
80005e64:	91 30 00 ff 	movh.a %a15,61443
80005e68:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005e6c:	4c f0       	ld.w %d15,[%a15]0
80005e6e:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005e72:	6e 06       	jz %d15,80005e7e <IfxScuCcu_getSourceFrequency+0x1a>
80005e74:	1e 13       	jeq %d15,1,80005e7a <IfxScuCcu_getSourceFrequency+0x16>
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
        break;
    default:
        sourcefreq = 0;
80005e76:	82 02       	mov %d2,0
80005e78:	00 90       	ret 
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
80005e7a:	1d ff 9a ff 	j 80005dae <IfxScuCcu_getPllFrequency>
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
80005e7e:	7b f0 cb 24 	movh %d2,19647
80005e82:	1b 02 c2 2b 	addi %d2,%d2,-17376
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
80005e86:	00 90       	ret 

80005e88 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
80005e88:	02 4f       	mov %d15,%d4
80005e8a:	6d ff ed ff 	call 80005e64 <IfxScuCcu_getSourceFrequency>
80005e8e:	91 30 00 ff 	movh.a %a15,61443
80005e92:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005e96:	48 03       	ld.w %d3,[%a15]0
80005e98:	37 03 64 34 	extr.u %d3,%d3,8,4
80005e9c:	4b 03 41 31 	itof %d3,%d3
80005ea0:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
80005ea4:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
80005ea8:	4b f2 41 20 	mul.f %d2,%d2,%d15
80005eac:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80005eb0:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80005eb4:	a2 3f       	sub %d15,%d3
80005eb6:	3f 2f fd ff 	jlt.u %d15,%d2,80005eb0 <IfxScuCcu_wait+0x28>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80005eba:	00 90       	ret 

80005ebc <IfxScuCcu_getBbbFrequency>:
float32 IfxScuCcu_getBbbFrequency(void)
{
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80005ebc:	6d ff d4 ff 	call 80005e64 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80005ec0:	91 30 00 ff 	movh.a %a15,61443
80005ec4:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005ec8:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
        break;
    default:
        bbbFrequency = 0.0;
80005eca:	82 0f       	mov %d15,0
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80005ecc:	37 03 64 36 	extr.u %d3,%d3,12,4
80005ed0:	ff 53 30 80 	jge.u %d3,5,80005f30 <IfxScuCcu_getBbbFrequency+0x74>
80005ed4:	91 00 00 f8 	movh.a %a15,32768
80005ed8:	d9 ff e4 b5 	lea %a15,[%a15]24292 <80005ee4 <IfxScuCcu_getBbbFrequency+0x28>>
80005edc:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80005ee0:	dc 0f       	ji %a15
80005ee2:	00 00       	nop 
80005ee4:	1d 00 0a 00 	j 80005ef8 <IfxScuCcu_getBbbFrequency+0x3c>
80005ee8:	1d 00 17 00 	j 80005f16 <IfxScuCcu_getBbbFrequency+0x5a>
80005eec:	1d 00 18 00 	j 80005f1c <IfxScuCcu_getBbbFrequency+0x60>
80005ef0:	1d 00 19 00 	j 80005f22 <IfxScuCcu_getBbbFrequency+0x66>
80005ef4:	1d 00 1a 00 	j 80005f28 <IfxScuCcu_getBbbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
80005ef8:	91 30 00 ff 	movh.a %a15,61443
80005efc:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80005f00:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
80005f02:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
80005f04:	8f f3 00 31 	and %d3,%d3,15
80005f08:	df 03 14 00 	jeq %d3,0,80005f30 <IfxScuCcu_getBbbFrequency+0x74>
        {
            bbbFrequency = 0.0;
        }
        else
        {
            bbbFrequency = sourceFrequency / SCU_CCUCON2.B.BBBDIV;
80005f0c:	4c f0       	ld.w %d15,[%a15]0
80005f0e:	16 0f       	and %d15,15
80005f10:	4b 0f 41 f1 	itof %d15,%d15
80005f14:	3c 0c       	j 80005f2c <IfxScuCcu_getBbbFrequency+0x70>
        }

        break;
    case 1:
        bbbFrequency = sourceFrequency / 30;
80005f16:	7b 00 1f f4 	movh %d15,16880
80005f1a:	3c 09       	j 80005f2c <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 2:
        bbbFrequency = sourceFrequency / 60;
80005f1c:	7b 00 27 f4 	movh %d15,17008
80005f20:	3c 06       	j 80005f2c <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 3:
        bbbFrequency = sourceFrequency / 120;
80005f22:	7b 00 2f f4 	movh %d15,17136
80005f26:	3c 03       	j 80005f2c <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
80005f28:	7b 00 37 f4 	movh %d15,17264
80005f2c:	4b f2 51 f0 	div.f %d15,%d2,%d15
        bbbFrequency = 0.0;
        break;
    }

    return bbbFrequency;
}
80005f30:	02 f2       	mov %d2,%d15
80005f32:	00 90       	ret 

80005f34 <IfxScuCcu_getMaxFrequency>:
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80005f34:	91 30 00 ff 	movh.a %a15,61443
80005f38:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>

float32 IfxScuCcu_getMaxFrequency(void)
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();
80005f3c:	6d ff 94 ff 	call 80005e64 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80005f40:	4c f0       	ld.w %d15,[%a15]0
80005f42:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80005f46:	ff 5f 2d 80 	jge.u %d15,5,80005fa0 <IfxScuCcu_getMaxFrequency+0x6c>
80005f4a:	91 00 00 f8 	movh.a %a15,32768
80005f4e:	d9 ff d8 d5 	lea %a15,[%a15]24408 <80005f58 <IfxScuCcu_getMaxFrequency+0x24>>
80005f52:	90 ff       	addsc.a %a15,%a15,%d15,2
80005f54:	dc 0f       	ji %a15
80005f56:	00 00       	nop 
80005f58:	1d 00 0a 00 	j 80005f6c <IfxScuCcu_getMaxFrequency+0x38>
80005f5c:	1d 00 14 00 	j 80005f84 <IfxScuCcu_getMaxFrequency+0x50>
80005f60:	1d 00 15 00 	j 80005f8a <IfxScuCcu_getMaxFrequency+0x56>
80005f64:	1d 00 16 00 	j 80005f90 <IfxScuCcu_getMaxFrequency+0x5c>
80005f68:	1d 00 17 00 	j 80005f96 <IfxScuCcu_getMaxFrequency+0x62>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON5.B.MAXDIV == 0)
80005f6c:	91 30 00 ff 	movh.a %a15,61443
80005f70:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80005f74:	4c f0       	ld.w %d15,[%a15]0
80005f76:	16 0f       	and %d15,15
80005f78:	6e 15       	jz %d15,80005fa2 <IfxScuCcu_getMaxFrequency+0x6e>
        {
            maxFrequency = sourceFrequency;
        }
        else
        {
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
80005f7a:	4c f0       	ld.w %d15,[%a15]0
80005f7c:	16 0f       	and %d15,15
80005f7e:	4b 0f 41 f1 	itof %d15,%d15
80005f82:	3c 0c       	j 80005f9a <IfxScuCcu_getMaxFrequency+0x66>
        }

        break;
    case 1:
        maxFrequency = sourceFrequency / 15;
80005f84:	7b 00 17 f4 	movh %d15,16752
80005f88:	3c 09       	j 80005f9a <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 2:
        maxFrequency = sourceFrequency / 30;
80005f8a:	7b 00 1f f4 	movh %d15,16880
80005f8e:	3c 06       	j 80005f9a <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 3:
        maxFrequency = sourceFrequency / 60;
80005f90:	7b 00 27 f4 	movh %d15,17008
80005f94:	3c 03       	j 80005f9a <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 4:
        maxFrequency = sourceFrequency / 120;
80005f96:	7b 00 2f f4 	movh %d15,17136
80005f9a:	4b f2 51 20 	div.f %d2,%d2,%d15
        break;
80005f9e:	00 90       	ret 
    default:
        maxFrequency = 0.0;
80005fa0:	82 02       	mov %d2,0
        break;
    }

    return maxFrequency;
}
80005fa2:	00 90       	ret 

80005fa4 <IfxScuCcu_getBaud1Frequency>:


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80005fa4:	91 30 00 ff 	movh.a %a15,61443
80005fa8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005fac:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD1DIV == 0)
    {
        frequency = 0;
80005fae:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80005fb0:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
80005fb4:	76 87       	jz %d8,80005fc2 <IfxScuCcu_getBaud1Frequency+0x1e>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
80005fb6:	6d ff bf ff 	call 80005f34 <IfxScuCcu_getMaxFrequency>
80005fba:	4b 08 41 f1 	itof %d15,%d8
80005fbe:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
80005fc2:	00 90       	ret 

80005fc4 <IfxScuCcu_getBaud2Frequency>:


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80005fc4:	91 30 00 ff 	movh.a %a15,61443
80005fc8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005fcc:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD2DIV == 0)
    {
        frequency = 0;
80005fce:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80005fd0:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
80005fd4:	16 f0       	and %d15,240
80005fd6:	6e 07       	jz %d15,80005fe4 <IfxScuCcu_getBaud2Frequency+0x20>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
80005fd8:	6d ff ae ff 	call 80005f34 <IfxScuCcu_getMaxFrequency>
80005fdc:	4b 08 41 f1 	itof %d15,%d8
80005fe0:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
80005fe4:	00 90       	ret 

80005fe6 <IfxScuCcu_getSpbFrequency>:
float32 IfxScuCcu_getSpbFrequency(void)
{
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80005fe6:	6d ff 3f ff 	call 80005e64 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80005fea:	91 30 00 ff 	movh.a %a15,61443
80005fee:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005ff2:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
        break;
    default:
        spbFrequency = 0.0;
80005ff4:	82 0f       	mov %d15,0
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80005ff6:	37 03 64 36 	extr.u %d3,%d3,12,4
80005ffa:	ff 53 30 80 	jge.u %d3,5,8000605a <IfxScuCcu_getSpbFrequency+0x74>
80005ffe:	91 00 00 f8 	movh.a %a15,32768
80006002:	d9 ff 0c 06 	lea %a15,[%a15]24588 <8000600c <IfxScuCcu_getSpbFrequency+0x26>>
80006006:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000600a:	dc 0f       	ji %a15
8000600c:	1d 00 0a 00 	j 80006020 <IfxScuCcu_getSpbFrequency+0x3a>
80006010:	1d 00 18 00 	j 80006040 <IfxScuCcu_getSpbFrequency+0x5a>
80006014:	1d 00 19 00 	j 80006046 <IfxScuCcu_getSpbFrequency+0x60>
80006018:	1d 00 1a 00 	j 8000604c <IfxScuCcu_getSpbFrequency+0x66>
8000601c:	1d 00 1b 00 	j 80006052 <IfxScuCcu_getSpbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
80006020:	91 30 00 ff 	movh.a %a15,61443
80006024:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006028:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
8000602a:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
8000602c:	37 03 64 38 	extr.u %d3,%d3,16,4
80006030:	df 03 15 00 	jeq %d3,0,8000605a <IfxScuCcu_getSpbFrequency+0x74>
        {
            spbFrequency = 0.0;
        }
        else
        {
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
80006034:	4c f0       	ld.w %d15,[%a15]0
80006036:	37 0f 64 f8 	extr.u %d15,%d15,16,4
8000603a:	4b 0f 41 f1 	itof %d15,%d15
8000603e:	3c 0c       	j 80006056 <IfxScuCcu_getSpbFrequency+0x70>
        }

        break;
    case 1:
        spbFrequency = sourceFrequency / 30;
80006040:	7b 00 1f f4 	movh %d15,16880
80006044:	3c 09       	j 80006056 <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 2:
        spbFrequency = sourceFrequency / 60;
80006046:	7b 00 27 f4 	movh %d15,17008
8000604a:	3c 06       	j 80006056 <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 3:
        spbFrequency = sourceFrequency / 120;
8000604c:	7b 00 2f f4 	movh %d15,17136
80006050:	3c 03       	j 80006056 <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
80006052:	7b 00 37 f4 	movh %d15,17264
80006056:	4b f2 51 f0 	div.f %d15,%d2,%d15
        spbFrequency = 0.0;
        break;
    }

    return spbFrequency;
}
8000605a:	02 f2       	mov %d2,%d15
8000605c:	00 90       	ret 

8000605e <IfxScuCcu_getModuleFrequency>:
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
8000605e:	91 30 00 ff 	movh.a %a15,61443
80006062:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
80006066:	48 09       	ld.w %d9,[%a15]0
    spbFreq = IfxScuCcu_getSpbFrequency();
80006068:	6d ff bf ff 	call 80005fe6 <IfxScuCcu_getSpbFrequency>

    if (scuFdr.B.DM == 1)
8000606c:	bb 00 00 fc 	mov.u %d15,49152
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
    spbFreq = IfxScuCcu_getSpbFrequency();
80006070:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
80006072:	26 9f       	and %d15,%d9
80006074:	3b 00 00 24 	mov %d2,16384
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
80006078:	b7 09 16 85 	insert %d8,%d9,0,10,22
    spbFreq = IfxScuCcu_getSpbFrequency();

    if (scuFdr.B.DM == 1)
8000607c:	7e 29       	jne %d15,%d2,8000608e <IfxScuCcu_getModuleFrequency+0x30>
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
8000607e:	3b 00 40 20 	mov %d2,1024
80006082:	a2 82       	sub %d2,%d8
80006084:	4b 02 41 21 	itof %d2,%d2
80006088:	4b 23 51 20 	div.f %d2,%d3,%d2
8000608c:	00 90       	ret 
    }
    else if (scuFdr.B.DM == 2)
8000608e:	bb 00 00 48 	mov.u %d4,32768
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
    }
    else
    {
        moduleFreq = 0;
80006092:	82 02       	mov %d2,0

    if (scuFdr.B.DM == 1)
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
    }
    else if (scuFdr.B.DM == 2)
80006094:	7e 49       	jne %d15,%d4,800060a6 <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
80006096:	4b 08 41 21 	itof %d2,%d8
8000609a:	7b 00 a8 f3 	movh %d15,14976
8000609e:	4b 23 41 20 	mul.f %d2,%d3,%d2
800060a2:	4b f2 41 20 	mul.f %d2,%d2,%d15
    {
        moduleFreq = 0;
    }

    return moduleFreq;
}
800060a6:	00 90       	ret 

800060a8 <IfxScuCcu_getSriFrequency>:
float32 IfxScuCcu_getSriFrequency(void)
{
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
800060a8:	6d ff de fe 	call 80005e64 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800060ac:	91 30 00 ff 	movh.a %a15,61443
800060b0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800060b4:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
        break;
    default:
        sriFrequency = 0.0;
800060b6:	82 0f       	mov %d15,0
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
800060b8:	37 03 64 36 	extr.u %d3,%d3,12,4
800060bc:	ff 53 31 80 	jge.u %d3,5,8000611e <IfxScuCcu_getSriFrequency+0x76>
800060c0:	91 00 00 f8 	movh.a %a15,32768
800060c4:	d9 ff 10 36 	lea %a15,[%a15]24784 <800060d0 <IfxScuCcu_getSriFrequency+0x28>>
800060c8:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800060cc:	dc 0f       	ji %a15
800060ce:	00 00       	nop 
800060d0:	1d 00 0a 00 	j 800060e4 <IfxScuCcu_getSriFrequency+0x3c>
800060d4:	1d 00 18 00 	j 80006104 <IfxScuCcu_getSriFrequency+0x5c>
800060d8:	1d 00 19 00 	j 8000610a <IfxScuCcu_getSriFrequency+0x62>
800060dc:	1d 00 1a 00 	j 80006110 <IfxScuCcu_getSriFrequency+0x68>
800060e0:	1d 00 1b 00 	j 80006116 <IfxScuCcu_getSriFrequency+0x6e>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
800060e4:	91 30 00 ff 	movh.a %a15,61443
800060e8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800060ec:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
800060ee:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
800060f0:	37 03 64 34 	extr.u %d3,%d3,8,4
800060f4:	df 03 15 00 	jeq %d3,0,8000611e <IfxScuCcu_getSriFrequency+0x76>
        {
            sriFrequency = 0.0;
        }
        else
        {
            sriFrequency = sourceFrequency / SCU_CCUCON0.B.SRIDIV;
800060f8:	4c f0       	ld.w %d15,[%a15]0
800060fa:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800060fe:	4b 0f 41 f1 	itof %d15,%d15
80006102:	3c 0c       	j 8000611a <IfxScuCcu_getSriFrequency+0x72>
        }

        break;
    case 1:
        sriFrequency = sourceFrequency / 30;
80006104:	7b 00 1f f4 	movh %d15,16880
80006108:	3c 09       	j 8000611a <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 2:
        sriFrequency = sourceFrequency / 60;
8000610a:	7b 00 27 f4 	movh %d15,17008
8000610e:	3c 06       	j 8000611a <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 3:
        sriFrequency = sourceFrequency / 120;
80006110:	7b 00 2f f4 	movh %d15,17136
80006114:	3c 03       	j 8000611a <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
80006116:	7b 00 37 f4 	movh %d15,17264
8000611a:	4b f2 51 f0 	div.f %d15,%d2,%d15
        sriFrequency = 0.0;
        break;
    }

    return sriFrequency;
}
8000611e:	02 f2       	mov %d2,%d15
80006120:	00 90       	ret 

80006122 <IfxScuCcu_getCpuFrequency>:
    return bbbFrequency;
}


float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu)
{
80006122:	02 4f       	mov %d15,%d4
    float32 frequency = IfxScuCcu_getSriFrequency();
80006124:	6d ff c2 ff 	call 800060a8 <IfxScuCcu_getSriFrequency>
    uint32  cpuDiv    = 0;

    switch (cpu)
80006128:	1e 1d       	jeq %d15,1,80006142 <IfxScuCcu_getCpuFrequency+0x20>
8000612a:	6e 07       	jz %d15,80006138 <IfxScuCcu_getCpuFrequency+0x16>
8000612c:	de 2a       	jne %d15,2,80006160 <IfxScuCcu_getCpuFrequency+0x3e>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
8000612e:	91 30 00 ff 	movh.a %a15,61443
80006132:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
80006136:	3c 0a       	j 8000614a <IfxScuCcu_getCpuFrequency+0x28>
    uint32  cpuDiv    = 0;

    switch (cpu)
    {
    case IfxCpu_ResourceCpu_0:
        cpuDiv = SCU_CCUCON6.U;
80006138:	91 30 00 ff 	movh.a %a15,61443
8000613c:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006140:	3c 05       	j 8000614a <IfxScuCcu_getCpuFrequency+0x28>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
80006142:	91 30 00 ff 	movh.a %a15,61443
80006146:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
8000614a:	4c f0       	ld.w %d15,[%a15]0
    default:
        frequency = 0.0;
        break;
    }

    if (cpuDiv != 0)
8000614c:	6e 0b       	jz %d15,80006162 <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
8000614e:	4b 0f 61 f1 	utof %d15,%d15
80006152:	7b 00 c8 33 	movh %d3,15488
80006156:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
8000615a:	4b f2 41 20 	mul.f %d2,%d2,%d15
8000615e:	00 90       	ret 
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
        break;
    default:
        frequency = 0.0;
80006160:	82 02       	mov %d2,0
    {
        frequency = frequency * (cpuDiv / 64.0f);
    }

    return frequency;
}
80006162:	00 90       	ret 

80006164 <IfxScuCcu_getFsi2Frequency>:


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006164:	91 30 00 ff 	movh.a %a15,61443
80006168:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000616c:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
8000616e:	7b 00 03 30 	movh %d3,48
80006172:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006174:	37 0f 62 8a 	extr.u %d8,%d15,20,2

    if (ccucon0.B.FSI2DIV == 0)
    {
        frequency = 0;
80006178:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSI2DIV == 0)
8000617a:	76 3f       	jz %d3,80006198 <IfxScuCcu_getFsi2Frequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
8000617c:	6d ff 96 ff 	call 800060a8 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
80006180:	3b 00 f0 30 	mov %d3,3840
80006184:	26 3f       	and %d15,%d3
80006186:	1b 0f f0 ff 	addi %d15,%d15,-256
8000618a:	8f 0f d0 f1 	andn %d15,%d15,256
8000618e:	ee 05       	jnz %d15,80006198 <IfxScuCcu_getFsi2Frequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSI2DIV;
80006190:	4b 08 41 f1 	itof %d15,%d8
80006194:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
80006198:	00 90       	ret 

8000619a <IfxScuCcu_getFsiFrequency>:


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000619a:	91 30 00 ff 	movh.a %a15,61443
8000619e:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061a2:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
800061a4:	7b 00 30 30 	movh %d3,768
800061a8:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800061aa:	37 0f 62 8c 	extr.u %d8,%d15,24,2

    if (ccucon0.B.FSIDIV == 0)
    {
        frequency = 0;
800061ae:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSIDIV == 0)
800061b0:	76 3f       	jz %d3,800061ce <IfxScuCcu_getFsiFrequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
800061b2:	6d ff 7b ff 	call 800060a8 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
800061b6:	3b 00 f0 30 	mov %d3,3840
800061ba:	26 3f       	and %d15,%d3
800061bc:	1b 0f f0 ff 	addi %d15,%d15,-256
800061c0:	8f 0f d0 f1 	andn %d15,%d15,256
800061c4:	ee 05       	jnz %d15,800061ce <IfxScuCcu_getFsiFrequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSIDIV;
800061c6:	4b 08 41 f1 	itof %d15,%d8
800061ca:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
800061ce:	00 90       	ret 

800061d0 <IfxScuCcu_init>:
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
800061d0:	19 4f 10 10 	ld.w %d15,[%a4]80
800061d4:	91 00 00 c7 	movh.a %a12,28672
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg)
{
800061d8:	40 4f       	mov.aa %a15,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
800061da:	59 cf 18 00 	st.w [%a12]24 <70000018 <IfxScuCcu_xtalFrequency>>,%d15

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
800061de:	6d 00 c8 07 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>
800061e2:	02 29       	mov %d9,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
800061e4:	6d 00 e3 07 	call 800071aa <IfxScuWdt_getSafetyWatchdogPassword>

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800061e8:	02 94       	mov %d4,%d9
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
800061ea:	02 28       	mov %d8,%d2

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800061ec:	6d 00 c1 06 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800061f0:	91 30 00 2f 	movh.a %a2,61443
800061f4:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800061f8:	54 2c       	ld.w %d12,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;
800061fa:	4c 20       	ld.w %d15,[%a2]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800061fc:	02 94       	mov %d4,%d9

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
800061fe:	96 08       	or %d15,8
80006200:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006202:	6d 00 eb 07 	call 800071d8 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006206:	02 84       	mov %d4,%d8
80006208:	6d 00 ce 06 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
8000620c:	37 0c e1 c1 	extr.u %d12,%d12,3,1

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        while (SCU_CCUCON0.B.LCK != 0U)
80006210:	91 30 00 3f 	movh.a %a3,61443
80006214:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006218:	4c 30       	ld.w %d15,[%a3]0
8000621a:	91 30 00 2f 	movh.a %a2,61443
8000621e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006222:	bf 0f fb 7f 	jlt %d15,0,80006218 <IfxScuCcu_init+0x48>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80006226:	4c 20       	ld.w %d15,[%a2]0
80006228:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
8000622c:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
8000622e:	4c 20       	ld.w %d15,[%a2]0
80006230:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006234:	6c 20       	st.w [%a2]0,%d15

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006236:	91 30 00 2f 	movh.a %a2,61443
8000623a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000623e:	4c 20       	ld.w %d15,[%a2]0
80006240:	96 10       	or %d15,16
80006242:	6c 20       	st.w [%a2]0,%d15
        /* Now PLL is in free running mode */

        /* Select Clock Source as PLL input clock */
        while (SCU_CCUCON0.B.LCK != 0U)
80006244:	91 30 00 2f 	movh.a %a2,61443
80006248:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000624c:	4c 20       	ld.w %d15,[%a2]0
8000624e:	bf 0f ff 7f 	jlt %d15,0,8000624c <IfxScuCcu_init+0x7c>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
80006252:	91 30 00 2f 	movh.a %a2,61443
80006256:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000625a:	4c 20       	ld.w %d15,[%a2]0
8000625c:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006260:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
80006262:	4c 20       	ld.w %d15,[%a2]0
80006264:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006268:	6c 20       	st.w [%a2]0,%d15
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
8000626a:	6d 00 82 07 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
8000626e:	91 30 00 2f 	movh.a %a2,61443
80006272:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
80006276:	02 2f       	mov %d15,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006278:	54 22       	ld.w %d2,[%a2]

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000627a:	40 23       	mov.aa %a3,%a2
    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
8000627c:	8f 02 c6 21 	andn %d2,%d2,96
80006280:	74 22       	st.w [%a2],%d2

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
80006282:	19 c6 18 00 	ld.w %d6,[%a12]24 <70000018 <IfxScuCcu_xtalFrequency>>
80006286:	7b 60 02 20 	movh %d2,38
8000628a:	1b 02 5a 22 	addi %d2,%d2,9632
8000628e:	4b 26 11 62 	div.u %e6,%d6,%d2
80006292:	54 22       	ld.w %d2,[%a2]
80006294:	c2 f6       	add %d6,-1
80006296:	37 62 05 68 	insert %d6,%d2,%d6,16,5
8000629a:	74 26       	st.w [%a2],%d6

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
8000629c:	54 22       	ld.w %d2,[%a2]
8000629e:	8f 42 40 21 	or %d2,%d2,4
800062a2:	74 22       	st.w [%a2],%d2

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800062a4:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
800062a8:	54 32       	ld.w %d2,[%a3]
800062aa:	6f 12 05 80 	jnz.t %d2,1,800062b4 <IfxScuCcu_init+0xe4>
800062ae:	fc 2d       	loop %a2,800062a8 <IfxScuCcu_init+0xd8>
    {
        TimeoutCtr--;

        if (TimeoutCtr == 0)
        {
            status = 1;
800062b0:	82 1b       	mov %d11,1
800062b2:	3c 05       	j 800062bc <IfxScuCcu_init+0xec>

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800062b4:	54 32       	ld.w %d2,[%a3]
800062b6:	6f 82 fc 7f 	jz.t %d2,8,800062ae <IfxScuCcu_init+0xde>


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;
800062ba:	82 0b       	mov %d11,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
800062bc:	02 f4       	mov %d4,%d15
800062be:	6d 00 58 06 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
800062c2:	91 30 00 2f 	movh.a %a2,61443
800062c6:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
800062ca:	54 22       	ld.w %d2,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
        IfxScuWdt_setCpuEndinit(endinitPw);
800062cc:	02 f4       	mov %d4,%d15
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
800062ce:	8f 82 40 21 	or %d2,%d2,8
800062d2:	74 22       	st.w [%a2],%d2
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
800062d4:	91 30 00 2f 	movh.a %a2,61443
800062d8:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800062dc:	54 22       	ld.w %d2,[%a2]
800062de:	8f 82 40 21 	or %d2,%d2,8
800062e2:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinitPw);
800062e4:	6d 00 7a 07 	call 800071d8 <IfxScuWdt_setCpuEndinit>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */

        status             |= IfxScuCcu_isOscillatorStable();

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800062e8:	02 84       	mov %d4,%d8
800062ea:	6d 00 e3 07 	call 800072b0 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
800062ee:	df 0b 29 81 	jne %d11,0,80006540 <IfxScuCcu_init+0x370>

        /*Setting up P N and K2 values equate pll to evr osc freq */
        {
            {
                /*Set the K2 divider value for the step corresponding to step count */
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800062f2:	02 84       	mov %d4,%d8
800062f4:	6d 00 58 06 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
800062f8:	91 30 00 2f 	movh.a %a2,61443
800062fc:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006300:	4c 20       	ld.w %d15,[%a2]0
80006302:	6f 5f ff 7f 	jz.t %d15,5,80006300 <IfxScuCcu_init+0x130>
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80006306:	91 30 00 2f 	movh.a %a2,61443
8000630a:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
8000630e:	54 22       	ld.w %d2,[%a2]
80006310:	0c fa       	ld.bu %d15,[%a15]10
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006312:	7b 20 85 43 	movh %d4,14418
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80006316:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
8000631a:	1b 74 71 4b 	addi %d4,%d4,-18665
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
8000631e:	6c 20       	st.w [%a2]0,%d15

                {
                    /*change P and N divider values */
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
80006320:	91 30 00 2f 	movh.a %a2,61443
80006324:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006328:	54 22       	ld.w %d2,[%a2]
8000632a:	0c f8       	ld.bu %d15,[%a15]8
8000632c:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
80006330:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
80006332:	54 22       	ld.w %d2,[%a2]
80006334:	0c f9       	ld.bu %d15,[%a15]9
80006336:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
8000633a:	6c 20       	st.w [%a2]0,%d15

                    /* Disable oscillator disconnect feature
                     * in case of PLL unlock, PLL stays connected to fref */
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
8000633c:	4c 20       	ld.w %d15,[%a2]0
8000633e:	96 40       	or %d15,64
80006340:	6c 20       	st.w [%a2]0,%d15
                    //                    workaround for Errata: PLL TC 005
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
80006342:	4c 20       	ld.w %d15,[%a2]0
80006344:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80006348:	6c 20       	st.w [%a2]0,%d15
                    /* Connect PLL to fREF as oscillator clock is connected to PLL   */
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
8000634a:	4c 20       	ld.w %d15,[%a2]0
8000634c:	96 20       	or %d15,32
8000634e:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80006350:	4c 20       	ld.w %d15,[%a2]0
80006352:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80006356:	6c 20       	st.w [%a2]0,%d15

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;
80006358:	4c 20       	ld.w %d15,[%a2]0
8000635a:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
8000635e:	6c 20       	st.w [%a2]0,%d15

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006360:	6d ff 94 fd 	call 80005e88 <IfxScuCcu_wait>

                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
80006364:	91 30 00 2f 	movh.a %a2,61443
80006368:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000636c:	4c 20       	ld.w %d15,[%a2]0
8000636e:	6f 2f ff 7f 	jz.t %d15,2,8000636c <IfxScuCcu_init+0x19c>
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80006372:	91 30 00 2f 	movh.a %a2,61443
80006376:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000637a:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
8000637c:	91 30 00 3f 	movh.a %a3,61443
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80006380:	8f 1f c0 f1 	andn %d15,%d15,1
80006384:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
80006386:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000638a:	4c 30       	ld.w %d15,[%a3]0
8000638c:	91 30 00 2f 	movh.a %a2,61443
80006390:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006394:	bf 0f fb 7f 	jlt %d15,0,8000638a <IfxScuCcu_init+0x1ba>
                    {
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_CCUCON0.B.CLKSEL = 0x01;
80006398:	4c 20       	ld.w %d15,[%a2]0
8000639a:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
8000639e:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
800063a0:	4c 20       	ld.w %d15,[%a2]0
800063a2:	91 30 00 cf 	movh.a %a12,61443
800063a6:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063aa:	bf 0f fb 7f 	jlt %d15,0,800063a0 <IfxScuCcu_init+0x1d0>
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
800063ae:	48 34       	ld.w %d4,[%a15]12
800063b0:	6d ff 6c fd 	call 80005e88 <IfxScuCcu_wait>

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
800063b4:	4c f5       	ld.w %d15,[%a15]20
800063b6:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
800063b8:	48 42       	ld.w %d2,[%a15]16
                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
800063ba:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
800063be:	26 f2       	and %d2,%d15
800063c0:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
800063c4:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon0.B.UP     = 1;
800063c8:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
800063cc:	91 30 00 3f 	movh.a %a3,61443
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
                        ccucon0.B.UP     = 1;
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
800063d0:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
800063d2:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800063d6:	4c 30       	ld.w %d15,[%a3]0
800063d8:	91 30 00 2f 	movh.a %a2,61443
800063dc:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800063e0:	bf 0f fb 7f 	jlt %d15,0,800063d6 <IfxScuCcu_init+0x206>
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
800063e4:	4c f7       	ld.w %d15,[%a15]28
800063e6:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800063e8:	48 62       	ld.w %d2,[%a15]24
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
800063ea:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800063ee:	26 f2       	and %d2,%d15
800063f0:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon1.B.INSEL = 1;
800063f4:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon1.B.UP    = 1;
800063f8:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON1     = ccucon1;
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800063fc:	91 30 00 3f 	movh.a %a3,61443
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
                        ccucon1.B.INSEL = 1;
                        ccucon1.B.UP    = 1;
                        SCU_CCUCON1     = ccucon1;
80006400:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
80006402:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006406:	4c 30       	ld.w %d15,[%a3]0
80006408:	91 30 00 2f 	movh.a %a2,61443
8000640c:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006410:	bf 0f fb 7f 	jlt %d15,0,80006406 <IfxScuCcu_init+0x236>
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
80006414:	4c f9       	ld.w %d15,[%a15]36
80006416:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80006418:	48 82       	ld.w %d2,[%a15]32
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
8000641a:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
8000641e:	26 f2       	and %d2,%d15
80006420:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon2.B.UP = 1;
80006424:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON2  = ccucon2;
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
80006428:	91 30 00 3f 	movh.a %a3,61443
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
                        ccucon2.B.UP = 1;
                        SCU_CCUCON2  = ccucon2;
8000642c:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
8000642e:	d9 33 0c 16 	lea %a3,[%a3]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006432:	4c 30       	ld.w %d15,[%a3]0
80006434:	91 30 00 2f 	movh.a %a2,61443
80006438:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
8000643c:	bf 0f fb 7f 	jlt %d15,0,80006432 <IfxScuCcu_init+0x262>
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80006440:	54 23       	ld.w %d3,[%a2]
80006442:	4c fb       	ld.w %d15,[%a15]44
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80006444:	48 a2       	ld.w %d2,[%a15]40
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80006446:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
8000644a:	26 f2       	and %d2,%d15
8000644c:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon5.B.UP = 1;
80006450:	b7 1f 01 ff 	insert %d15,%d15,1,30,1

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80006454:	48 c2       	ld.w %d2,[%a15]48
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
                        ccucon5.B.UP = 1;
                        SCU_CCUCON5  = ccucon5;
80006456:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
80006458:	91 30 00 2f 	movh.a %a2,61443
8000645c:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006460:	54 23       	ld.w %d3,[%a2]
80006462:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
                        SCU_CCUCON8 = ccucon8;
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006464:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
80006466:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
8000646a:	26 f2       	and %d2,%d15
8000646c:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
80006470:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006472:	91 30 00 2f 	movh.a %a2,61443
80006476:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
8000647a:	54 23       	ld.w %d3,[%a2]
8000647c:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
8000647e:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006480:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006484:	26 f2       	and %d2,%d15
80006486:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
8000648a:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
8000648c:	91 30 00 2f 	movh.a %a2,61443
80006490:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
80006494:	54 23       	ld.w %d3,[%a2]
80006496:	19 ff 04 10 	ld.w %d15,[%a15]68 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
8000649a:	19 f2 00 10 	ld.w %d2,[%a15]64 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
8000649e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
800064a2:	26 f2       	and %d2,%d15
800064a4:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON8 = ccucon8;
800064a8:	6c 20       	st.w [%a2]0,%d15
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800064aa:	6d 00 03 07 	call 800072b0 <IfxScuWdt_setSafetyEndinit>
            }
        }

        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
800064ae:	91 00 80 cf 	movh.a %a12,63488
800064b2:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
800064b6:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
800064ba:	54 c3       	ld.w %d3,[%a12]

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
800064bc:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
800064c0:	0f f3 e0 30 	andn %d3,%d3,%d15
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
800064c4:	26 f2       	and %d2,%d15
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
800064c6:	02 94       	mov %d4,%d9
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
800064c8:	0f 23 a0 f0 	or %d15,%d3,%d2
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
800064cc:	6d 00 51 05 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
800064d0:	6c c0       	st.w [%a12]0,%d15
                IfxScuWdt_setCpuEndinit(endinit_pw);
800064d2:	02 94       	mov %d4,%d9
800064d4:	6d 00 82 06 	call 800071d8 <IfxScuWdt_setCpuEndinit>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800064d8:	91 30 00 df 	movh.a %a13,61443
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800064dc:	91 30 00 cf 	movh.a %a12,61443
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
800064e0:	82 0d       	mov %d13,0
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800064e2:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800064e6:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
800064ea:	0c f0       	ld.bu %d15,[%a15]0
800064ec:	8f fd 0f 21 	and %d2,%d13,255
800064f0:	7f f2 28 80 	jge.u %d2,%d15,80006540 <IfxScuCcu_init+0x370>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800064f4:	02 84       	mov %d4,%d8
800064f6:	6d 00 57 05 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800064fa:	4c d0       	ld.w %d15,[%a13]0
800064fc:	6f 5f ff 7f 	jz.t %d15,5,800064fa <IfxScuCcu_init+0x32a>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006500:	02 df       	mov %d15,%d13
80006502:	16 ff       	and %d15,255
80006504:	53 cf 20 a0 	mul %d10,%d15,12
80006508:	c8 12       	ld.a %a2,[%a15]4
8000650a:	4c c0       	ld.w %d15,[%a12]0
8000650c:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000650e:	02 84       	mov %d4,%d8
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006510:	30 32       	add.a %a2,%a3
80006512:	14 22       	ld.bu %d2,[%a2]
80006514:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
80006518:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000651a:	6d 00 cb 06 	call 800072b0 <IfxScuWdt_setSafetyEndinit>
            }

            /*call the hook function if configured */
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
8000651e:	c8 12       	ld.a %a2,[%a15]4
80006520:	60 a3       	mov.a %a3,%d10
80006522:	30 32       	add.a %a2,%a3
80006524:	99 22 08 00 	ld.a %a2,[%a2]8
80006528:	bc 23       	jz.a %a2,8000652e <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
8000652a:	2d 02 00 00 	calli %a2
            }

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
8000652e:	c8 12       	ld.a %a2,[%a15]4
80006530:	60 a3       	mov.a %a3,%d10
80006532:	c2 1d       	add %d13,1
80006534:	30 32       	add.a %a2,%a3
80006536:	19 24 04 00 	ld.w %d4,[%a2]4
8000653a:	6d ff a7 fc 	call 80005e88 <IfxScuCcu_wait>
8000653e:	3c d6       	j 800064ea <IfxScuCcu_init+0x31a>
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006540:	02 84       	mov %d4,%d8
80006542:	6d 00 31 05 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006546:	91 30 00 ff 	movh.a %a15,61443
8000654a:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000654e:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006550:	02 84       	mov %d4,%d8
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006552:	8f 0f c4 f1 	andn %d15,%d15,64
80006556:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006558:	6d 00 ac 06 	call 800072b0 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
8000655c:	91 30 00 ff 	movh.a %a15,61443
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006560:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
80006562:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006566:	6d 00 04 05 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
8000656a:	4c f0       	ld.w %d15,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000656c:	06 3c       	sh %d12,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
8000656e:	96 08       	or %d15,8
80006570:	68 0f       	st.w [%a15]0,%d15
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006572:	91 30 00 ff 	movh.a %a15,61443
80006576:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
8000657a:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000657c:	02 94       	mov %d4,%d9
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000657e:	8f 8f c0 f1 	andn %d15,%d15,8
80006582:	a6 fc       	or %d12,%d15
80006584:	68 0c       	st.w [%a15]0,%d12
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006586:	6d 00 29 06 	call 800071d8 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
8000658a:	02 b2       	mov %d2,%d11
8000658c:	00 90       	ret 

8000658e <IfxScuCcu_initConfig>:


void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg)
{
    *cfg = IfxScuCcu_defaultClockConfig;
8000658e:	91 00 00 f8 	movh.a %a15,32768
80006592:	d9 ff 94 f0 	lea %a15,[%a15]3028 <80000bd4 <IfxScuCcu_defaultClockConfig>>
80006596:	c5 02 14 00 	lea %a2,14 <_.+0x13>
8000659a:	44 ff       	ld.w %d15,[%a15+]
8000659c:	64 4f       	st.w [%a4+],%d15
8000659e:	fc 2e       	loop %a2,8000659a <IfxScuCcu_initConfig+0xc>
800065a0:	00 90       	ret 

800065a2 <IfxScuCcu_initErayPll>:
}


boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
800065a2:	40 4c       	mov.aa %a12,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
800065a4:	6d 00 e5 05 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>
800065a8:	02 2f       	mov %d15,%d2
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800065aa:	6d 00 00 06 	call 800071aa <IfxScuWdt_getSafetyWatchdogPassword>

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800065ae:	02 f4       	mov %d4,%d15
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800065b0:	02 28       	mov %d8,%d2

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800065b2:	6d 00 de 04 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800065b6:	91 30 00 ff 	movh.a %a15,61443
800065ba:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800065be:	48 03       	ld.w %d3,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
800065c0:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800065c2:	02 f4       	mov %d4,%d15
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
800065c4:	8f 82 40 21 	or %d2,%d2,8
800065c8:	68 02       	st.w [%a15]0,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800065ca:	37 03 e1 a1 	extr.u %d10,%d3,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
        IfxScuWdt_setCpuEndinit(endinit_pw);
800065ce:	6d 00 05 06 	call 800071d8 <IfxScuWdt_setCpuEndinit>
    }
    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800065d2:	02 84       	mov %d4,%d8
800065d4:	6d 00 e8 04 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>

    // ensure that PLL enabled
    if (!SCU_PLLERAYCON0.B.PLLPWD || SCU_PLLERAYCON0.B.VCOPWD || SCU_PLLERAYSTAT.B.PWDSTAT)
800065d8:	91 30 00 ff 	movh.a %a15,61443
800065dc:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800065e0:	48 02       	ld.w %d2,[%a15]0
800065e2:	ef 02 0c 00 	jz.t %d2,16,800065fa <IfxScuCcu_initErayPll+0x58>
800065e6:	48 02       	ld.w %d2,[%a15]0
800065e8:	6f 12 09 80 	jnz.t %d2,1,800065fa <IfxScuCcu_initErayPll+0x58>
800065ec:	91 30 00 ff 	movh.a %a15,61443
800065f0:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800065f4:	48 02       	ld.w %d2,[%a15]0
800065f6:	6f 12 19 00 	jz.t %d2,1,80006628 <IfxScuCcu_initErayPll+0x86>
    {   // PLLPWD=0 or VCOPWD=1 or PWDSTAT=1?
      // enable PLL and leave power saving mode
        SCU_PLLERAYCON0.B.PLLPWD = 1;
800065fa:	91 30 00 ff 	movh.a %a15,61443
800065fe:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006602:	48 02       	ld.w %d2,[%a15]0
80006604:	b7 f2 01 28 	insert %d2,%d2,15,16,1
80006608:	68 02       	st.w [%a15]0,%d2
        SCU_PLLERAYCON0.B.VCOPWD = 0;
8000660a:	48 02       	ld.w %d2,[%a15]0
8000660c:	8f 22 c0 21 	andn %d2,%d2,2
80006610:	68 02       	st.w [%a15]0,%d2

        while (SCU_PLLERAYSTAT.B.PWDSTAT)  // poll PWDSTAT
80006612:	91 30 00 ff 	movh.a %a15,61443
80006616:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
8000661a:	48 02       	ld.w %d2,[%a15]0
8000661c:	6f 12 ff ff 	jnz.t %d2,1,8000661a <IfxScuCcu_initErayPll+0x78>
        {}

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(cfg->pllInitialStep.waitTime);
80006620:	19 c4 04 00 	ld.w %d4,[%a12]4
80006624:	6d ff 32 fc 	call 80005e88 <IfxScuCcu_wait>
    }

    /* Enter Prescalar mode */
    /* Update K and N dividers */
    if (!SCU_PLLERAYSTAT.B.VCOBYST)      // checking PLLERAYBYPST flag
80006628:	91 30 00 ff 	movh.a %a15,61443
8000662c:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006630:	48 02       	ld.w %d2,[%a15]0
80006632:	6f 02 15 80 	jnz.t %d2,0,8000665c <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
80006636:	48 02       	ld.w %d2,[%a15]0
80006638:	6f 42 ff 7f 	jz.t %d2,4,80006636 <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
8000663c:	91 30 00 ff 	movh.a %a15,61443
80006640:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006644:	48 02       	ld.w %d2,[%a15]0
80006646:	b7 32 07 28 	insert %d2,%d2,3,16,7
8000664a:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
8000664c:	91 30 00 ff 	movh.a %a15,61443
80006650:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006654:	48 02       	ld.w %d2,[%a15]0
80006656:	8f 12 40 21 	or %d2,%d2,1
8000665a:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
8000665c:	91 30 00 ff 	movh.a %a15,61443
80006660:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006664:	48 02       	ld.w %d2,[%a15]0
80006666:	6f 52 ff 7f 	jz.t %d2,5,80006664 <IfxScuCcu_initErayPll+0xc2>
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
8000666a:	91 30 00 ff 	movh.a %a15,61443
8000666e:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006672:	48 03       	ld.w %d3,[%a15]0
80006674:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006678:	02 84       	mov %d4,%d8
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
8000667a:	37 23 07 20 	insert %d2,%d3,%d2,0,7
8000667e:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.PDIV  = cfg->pllInitialStep.pDivider;
80006680:	91 30 00 ff 	movh.a %a15,61443
80006684:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006688:	48 03       	ld.w %d3,[%a15]0
8000668a:	14 c2       	ld.bu %d2,[%a12]
8000668c:	37 23 04 2c 	insert %d2,%d3,%d2,24,4
80006690:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.NDIV  = cfg->pllInitialStep.nDivider;
80006692:	48 03       	ld.w %d3,[%a15]0
80006694:	39 c2 01 00 	ld.bu %d2,[%a12]1
80006698:	37 23 85 24 	insert %d2,%d3,%d2,9,5
8000669c:	68 02       	st.w [%a15]0,%d2
     *  CLRFINDIS = 1 ==> Connect OSC to PLL
     *  PLLPWD = 1    ==> PLL Power Saving Mode : Normal behaviour
     *  NDIV = NDIV
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
8000669e:	48 02       	ld.w %d2,[%a15]0
800066a0:	b7 f2 01 29 	insert %d2,%d2,15,18,1
800066a4:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;
800066a6:	48 02       	ld.w %d2,[%a15]0
800066a8:	8f 02 42 21 	or %d2,%d2,32
800066ac:	68 02       	st.w [%a15]0,%d2

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066ae:	6d 00 01 06 	call 800072b0 <IfxScuWdt_setSafetyEndinit>

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
800066b2:	91 10 00 f0 	movh.a %a15,1
800066b6:	91 30 00 2f 	movh.a %a2,61443
800066ba:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800066be:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
800066c2:	fd f0 04 00 	loop %a15,800066ca <IfxScuCcu_initErayPll+0x128>
    {}

    // check for timeout, exit immediately (don't disable VCO bypass) of not locked
    if (!time_out_ctr)
    {
        status = TRUE;
800066c6:	82 19       	mov %d9,1
800066c8:	3c 05       	j 800066d2 <IfxScuCcu_initErayPll+0x130>
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
800066ca:	54 22       	ld.w %d2,[%a2]
800066cc:	6f 22 fb 7f 	jz.t %d2,2,800066c2 <IfxScuCcu_initErayPll+0x120>

boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
800066d0:	82 09       	mov %d9,0
    if (!time_out_ctr)
    {
        status = TRUE;
    }

    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800066d2:	02 84       	mov %d4,%d8
800066d4:	6d 00 68 04 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>
    /*Bypass VCO*/
    SCU_PLLERAYCON0.B.VCOBYP = 0U;
800066d8:	91 30 00 ff 	movh.a %a15,61443
800066dc:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800066e0:	48 02       	ld.w %d2,[%a15]0
800066e2:	8f 12 c0 21 	andn %d2,%d2,1
800066e6:	68 02       	st.w [%a15]0,%d2

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
800066e8:	91 30 00 ff 	movh.a %a15,61443
800066ec:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800066f0:	48 02       	ld.w %d2,[%a15]0
800066f2:	6f 02 ff ff 	jnz.t %d2,0,800066f0 <IfxScuCcu_initErayPll+0x14e>
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800066f6:	91 30 00 ff 	movh.a %a15,61443
800066fa:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800066fe:	48 02       	ld.w %d2,[%a15]0
    {
        status = TRUE;
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006700:	02 84       	mov %d4,%d8

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
80006702:	37 02 61 21 	extr.u %d2,%d2,2,1

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006706:	91 30 00 ff 	movh.a %a15,61443
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
    {
        status = TRUE;
8000670a:	ab 19 80 92 	sel %d9,%d2,%d9,1
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000670e:	6d 00 d1 05 	call 800072b0 <IfxScuWdt_setSafetyEndinit>

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006712:	02 f4       	mov %d4,%d15
80006714:	6d 00 2d 04 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006718:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
8000671c:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000671e:	8f 3a 00 30 	sh %d3,%d10,3

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006722:	8f 82 40 21 	or %d2,%d2,8
80006726:	68 02       	st.w [%a15]0,%d2
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006728:	91 30 00 ff 	movh.a %a15,61443
8000672c:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006730:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006732:	02 f4       	mov %d4,%d15
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006734:	8f 82 c0 21 	andn %d2,%d2,8
80006738:	a6 32       	or %d2,%d3
8000673a:	68 02       	st.w [%a15]0,%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000673c:	6d 00 4e 05 	call 800071d8 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
80006740:	02 92       	mov %d2,%d9
80006742:	00 90       	ret 

80006744 <IfxScuCcu_initErayPllConfig>:


void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg)
{
    *cfg = IfxScuCcu_defaultErayPllConfig;
80006744:	91 00 00 f8 	movh.a %a15,32768
80006748:	d9 ff 8c f0 	lea %a15,[%a15]3020 <80000bcc <IfxScuCcu_defaultErayPllConfig>>
8000674c:	09 f2 40 09 	ld.d %e2,[%a15]
80006750:	89 42 40 09 	st.d [%a4],%e2
80006754:	00 90       	ret 

80006756 <IfxScuCcu_setCpuFrequency>:
    return status;
}


float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq)
{
80006756:	02 5a       	mov %d10,%d5
80006758:	02 49       	mov %d9,%d4
    uint16  endinitSfty_pw;
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();
8000675a:	6d ff a7 fc 	call 800060a8 <IfxScuCcu_getSriFrequency>
8000675e:	02 2f       	mov %d15,%d2

    if (cpuFreq >= sriFreq)
80006760:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
80006764:	87 22 a2 20 	or.t %d2,%d2,2,%d2,1
    {
        cpuDiv = 0;
80006768:	82 08       	mov %d8,0
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();

    if (cpuFreq >= sriFreq)
8000676a:	f6 29       	jnz %d2,8000677c <IfxScuCcu_setCpuFrequency+0x26>
    {
        cpuDiv = 0;
    }
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
8000676c:	7b 00 28 84 	movh %d8,17024
80006770:	4b 8a 41 80 	mul.f %d8,%d10,%d8
80006774:	4b f8 51 80 	div.f %d8,%d8,%d15
80006778:	4b 08 71 81 	ftouz %d8,%d8
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
8000677c:	6d 00 17 05 	call 800071aa <IfxScuWdt_getSafetyWatchdogPassword>

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006780:	02 24       	mov %d4,%d2
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006782:	02 2a       	mov %d10,%d2

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006784:	6d 00 10 04 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>

        switch (cpu)
80006788:	df 19 0f 00 	jeq %d9,1,800067a6 <IfxScuCcu_setCpuFrequency+0x50>
8000678c:	76 98       	jz %d9,8000679c <IfxScuCcu_setCpuFrequency+0x46>
8000678e:	df 29 11 80 	jne %d9,2,800067b0 <IfxScuCcu_setCpuFrequency+0x5a>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
80006792:	91 30 00 ff 	movh.a %a15,61443
80006796:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000679a:	3c 0a       	j 800067ae <IfxScuCcu_setCpuFrequency+0x58>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        switch (cpu)
        {
        case IfxCpu_ResourceCpu_0:
            SCU_CCUCON6.U = cpuDiv;
8000679c:	91 30 00 ff 	movh.a %a15,61443
800067a0:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800067a4:	3c 05       	j 800067ae <IfxScuCcu_setCpuFrequency+0x58>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
800067a6:	91 30 00 ff 	movh.a %a15,61443
800067aa:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
800067ae:	68 08       	st.w [%a15]0,%d8

        default:
            break;
        }

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800067b0:	02 a4       	mov %d4,%d10
800067b2:	6d 00 7f 05 	call 800072b0 <IfxScuWdt_setSafetyEndinit>
    }

    if (cpuDiv != 0)
800067b6:	76 89       	jz %d8,800067c8 <IfxScuCcu_setCpuFrequency+0x72>
    {
        sriFreq = sriFreq * (cpuDiv / 64.0f);
800067b8:	4b 08 61 81 	utof %d8,%d8
800067bc:	7b 00 c8 23 	movh %d2,15488
800067c0:	4b 28 41 80 	mul.f %d8,%d8,%d2
800067c4:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
    }

    return sriFreq;
}
800067c8:	02 f2       	mov %d2,%d15
800067ca:	00 90       	ret 

800067cc <IfxScuCcu_setGtmFrequency>:


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
800067cc:	91 30 00 ff 	movh.a %a15,61443
800067d0:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
    return sriFreq;
}


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
800067d4:	02 48       	mov %d8,%d4
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
800067d6:	4c f0       	ld.w %d15,[%a15]0

    float32         inputFreq = IfxScuCcu_getSourceFrequency();
800067d8:	6d ff 46 fb 	call 80005e64 <IfxScuCcu_getSourceFrequency>
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
800067dc:	4b 82 51 20 	div.f %d2,%d2,%d8
800067e0:	4b 02 31 31 	ftoiz %d3,%d2
800067e4:	4b 03 41 41 	itof %d4,%d3
800067e8:	6b 04 31 22 	sub.f %d2,%d2,%d4
800067ec:	7b 00 f0 43 	movh %d4,16128
800067f0:	4b 42 01 20 	cmp.f %d2,%d2,%d4
800067f4:	37 02 61 21 	extr.u %d2,%d2,2,1
800067f8:	42 32       	add %d2,%d3
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800067fa:	82 13       	mov %d3,1
800067fc:	0b 32 b0 21 	max.u %d2,%d2,%d3
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
80006800:	8b e2 00 52 	eq %d5,%d2,14
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
80006804:	1b 92 ff 4f 	addi %d4,%d2,-7
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
    {
        gtmDiv = 12;
80006808:	ab c2 a0 95 	seln %d9,%d5,%d2,12
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
8000680c:	8f 12 c0 31 	andn %d3,%d2,1
80006810:	02 92       	mov %d2,%d9
80006812:	8b 74 a0 92 	ge.u %d9,%d4,7
80006816:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
8000681a:	6d 00 c8 04 	call 800071aa <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
8000681e:	02 24       	mov %d4,%d2
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006820:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006822:	6d 00 c1 03 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON1.B.LCK != 0U)
80006826:	40 f2       	mov.aa %a2,%a15
80006828:	54 22       	ld.w %d2,[%a2]
8000682a:	91 30 00 ff 	movh.a %a15,61443
8000682e:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006832:	bf 02 fb 7f 	jlt %d2,0,80006828 <IfxScuCcu_setGtmFrequency+0x5c>
    {}

    ccucon1.B.GTMDIV = gtmDiv;
80006836:	37 9f 04 f6 	insert %d15,%d15,%d9,12,4
    ccucon1.B.UP     = 1U;
8000683a:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON1.U    = ccucon1.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
8000683e:	02 84       	mov %d4,%d8
    while (SCU_CCUCON1.B.LCK != 0U)
    {}

    ccucon1.B.GTMDIV = gtmDiv;
    ccucon1.B.UP     = 1U;
    SCU_CCUCON1.U    = ccucon1.U;
80006840:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006842:	6d 00 37 05 	call 800072b0 <IfxScuWdt_setSafetyEndinit>
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
80006846:	6d ff 0f fb 	call 80005e64 <IfxScuCcu_getSourceFrequency>
8000684a:	4c f0       	ld.w %d15,[%a15]0
8000684c:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006850:	4b 0f 41 f1 	itof %d15,%d15

    return IfxScuCcu_getGtmFrequency();
}
80006854:	4b f2 51 20 	div.f %d2,%d2,%d15
80006858:	00 90       	ret 

8000685a <IfxScuCcu_setPll2ErayFrequency>:


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
8000685a:	02 48       	mov %d8,%d4
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
8000685c:	6d 00 a7 04 	call 800071aa <IfxScuWdt_getSafetyWatchdogPassword>
80006860:	02 2f       	mov %d15,%d2
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006862:	6d ff 84 fa 	call 80005d6a <IfxScuCcu_getPllErayVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006866:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006868:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
8000686a:	6d 00 9d 03 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
8000686e:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006872:	91 30 00 ff 	movh.a %a15,61443
80006876:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
8000687a:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
8000687c:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(password);
80006880:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006882:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006886:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
8000688a:	37 82 04 84 	insert %d8,%d2,%d8,8,4
8000688e:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(password);
80006890:	6d 00 10 05 	call 800072b0 <IfxScuWdt_setSafetyEndinit>

IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
{
    float32 pll2ErayFrequency;

    pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
80006894:	6d ff 6b fa 	call 80005d6a <IfxScuCcu_getPllErayVcoFrequency>
80006898:	4c f0       	ld.w %d15,[%a15]0
8000689a:	37 0f 64 f4 	extr.u %d15,%d15,8,4
8000689e:	c2 1f       	add %d15,1
800068a0:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2ErayFrequency();
}
800068a4:	4b f2 51 20 	div.f %d2,%d2,%d15
800068a8:	00 90       	ret 

800068aa <IfxScuCcu_setPll2Frequency>:


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
800068aa:	02 48       	mov %d8,%d4
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800068ac:	6d 00 7f 04 	call 800071aa <IfxScuWdt_getSafetyWatchdogPassword>
800068b0:	02 2f       	mov %d15,%d2
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
800068b2:	6d ff b7 fa 	call 80005e20 <IfxScuCcu_getPllVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800068b6:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
800068b8:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800068ba:	6d 00 75 03 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
800068be:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
800068c2:	91 30 00 ff 	movh.a %a15,61443
800068c6:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800068ca:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
800068cc:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068d0:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
800068d2:	6b 03 31 88 	sub.f %d8,%d8,%d3
800068d6:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
800068da:	37 82 07 84 	insert %d8,%d2,%d8,8,7
800068de:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068e0:	6d 00 e8 04 	call 800072b0 <IfxScuWdt_setSafetyEndinit>


IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void)
{
    float32 pll2Frequency;
    pll2Frequency = IfxScuCcu_getPllVcoFrequency() / (SCU_PLLCON1.B.K3DIV + 1);
800068e4:	6d ff 9e fa 	call 80005e20 <IfxScuCcu_getPllVcoFrequency>
800068e8:	4c f0       	ld.w %d15,[%a15]0
800068ea:	37 0f 67 f4 	extr.u %d15,%d15,8,7
800068ee:	c2 1f       	add %d15,1
800068f0:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2Frequency();
}
800068f4:	4b f2 51 20 	div.f %d2,%d2,%d15
800068f8:	00 90       	ret 

800068fa <IfxScuCcu_setSpbFrequency>:


float32 IfxScuCcu_setSpbFrequency(float32 spbFreq)
{
800068fa:	02 4f       	mov %d15,%d4
    /* TODO: check whether it is necessary to disable trap and/or the safety */
    uint16          l_EndInitPW;
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
800068fc:	6d ff b4 fa 	call 80005e64 <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
80006900:	4b f2 51 20 	div.f %d2,%d2,%d15
80006904:	82 24       	mov %d4,2
80006906:	4b 02 71 21 	ftouz %d2,%d2
8000690a:	0b 42 b0 41 	max.u %d4,%d2,%d4
    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
    {
        spbDiv = spbDiv - 1;
    }

    if (spbDiv == 14)
8000690e:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
80006912:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
    spbDiv = __maxu(spbDiv, 2);

    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
80006916:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
8000691a:	8f 14 c0 f1 	andn %d15,%d4,1
8000691e:	02 a4       	mov %d4,%d10
80006920:	8b 72 a0 a2 	ge.u %d10,%d2,7
80006924:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
    if (spbDiv == 14)
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
80006928:	6d 00 23 04 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>
8000692c:	02 28       	mov %d8,%d2
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
8000692e:	6d 00 3e 04 	call 800071aa <IfxScuWdt_getSafetyWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006932:	02 84       	mov %d4,%d8
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006934:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006936:	6d 00 1c 03 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
8000693a:	91 30 00 ff 	movh.a %a15,61443
8000693e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006942:	48 02       	ld.w %d2,[%a15]0
80006944:	3b 00 3e f0 	mov %d15,992
80006948:	a6 2f       	or %d15,%d2
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
8000694a:	02 84       	mov %d4,%d8

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
8000694c:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
8000694e:	6d 00 45 04 	call 800071d8 <IfxScuWdt_setCpuEndinit>

    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006952:	02 94       	mov %d4,%d9
80006954:	6d 00 28 03 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006958:	91 30 00 2f 	movh.a %a2,61443
8000695c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006960:	4c 20       	ld.w %d15,[%a2]0
80006962:	91 30 00 ff 	movh.a %a15,61443
80006966:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000696a:	bf 0f fb 7f 	jlt %d15,0,80006960 <IfxScuCcu_setSpbFrequency+0x66>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
8000696e:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SPBDIV = spbDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006970:	02 94       	mov %d4,%d9

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SPBDIV = spbDiv;
80006972:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
    ccucon0.B.UP     = 1;
80006976:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
8000697a:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
8000697c:	6d 00 9a 04 	call 800072b0 <IfxScuWdt_setSafetyEndinit>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006980:	02 84       	mov %d4,%d8
80006982:	6d 00 f6 02 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006986:	91 30 00 ff 	movh.a %a15,61443
8000698a:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
8000698e:	4c f0       	ld.w %d15,[%a15]0
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006990:	02 84       	mov %d4,%d8
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006992:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
80006996:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006998:	6d 00 20 04 	call 800071d8 <IfxScuWdt_setCpuEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
8000699c:	91 30 00 ff 	movh.a %a15,61443
800069a0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800069a4:	4c f0       	ld.w %d15,[%a15]0
800069a6:	bf 0f ff 7f 	jlt %d15,0,800069a4 <IfxScuCcu_setSpbFrequency+0xaa>
    {}

    return IfxScuCcu_getSpbFrequency();
800069aa:	1d ff 1e fb 	j 80005fe6 <IfxScuCcu_getSpbFrequency>

800069ae <IfxScuCcu_setSriFrequency>:
}


float32 IfxScuCcu_setSriFrequency(float32 sriFreq)
{
800069ae:	02 4f       	mov %d15,%d4
    float32         freq   = 0;
    float32         source = IfxScuCcu_getSourceFrequency();
800069b0:	6d ff 5a fa 	call 80005e64 <IfxScuCcu_getSourceFrequency>
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
800069b4:	4b f2 51 20 	div.f %d2,%d2,%d15
800069b8:	4b 02 31 31 	ftoiz %d3,%d2
800069bc:	4b 03 41 f1 	itof %d15,%d3
800069c0:	6b 0f 31 22 	sub.f %d2,%d2,%d15
800069c4:	7b 00 f0 f3 	movh %d15,16128
800069c8:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
800069cc:	37 0f 61 f1 	extr.u %d15,%d15,2,1
800069d0:	82 12       	mov %d2,1
800069d2:	42 3f       	add %d15,%d3
800069d4:	0b 2f b0 f1 	max.u %d15,%d15,%d2
    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
800069d8:	8b ef 00 42 	eq %d4,%d15,14
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
800069dc:	92 93       	add %d3,%d15,-7
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
    {
        sriDiv = 12;
800069de:	ab cf a0 94 	seln %d9,%d4,%d15,12
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
800069e2:	8f 1f c0 21 	andn %d2,%d15,1
800069e6:	02 9f       	mov %d15,%d9
800069e8:	8b 73 a0 92 	ge.u %d9,%d3,7
800069ec:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069f0:	6d 00 dd 03 	call 800071aa <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069f4:	02 24       	mov %d4,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069f6:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069f8:	6d 00 d6 02 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
800069fc:	91 30 00 2f 	movh.a %a2,61443
80006a00:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006a04:	4c 20       	ld.w %d15,[%a2]0
80006a06:	91 30 00 ff 	movh.a %a15,61443
80006a0a:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006a0e:	bf 0f fb 7f 	jlt %d15,0,80006a04 <IfxScuCcu_setSriFrequency+0x56>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006a12:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SRIDIV = sriDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a14:	02 84       	mov %d4,%d8

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SRIDIV = sriDiv;
80006a16:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
    ccucon0.B.UP     = 1;
80006a1a:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006a1e:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a20:	6d 00 48 04 	call 800072b0 <IfxScuWdt_setSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006a24:	4c f0       	ld.w %d15,[%a15]0
80006a26:	bf 0f ff 7f 	jlt %d15,0,80006a24 <IfxScuCcu_setSriFrequency+0x76>
    {}

    freq = IfxScuCcu_getSriFrequency();
80006a2a:	1d ff 3f fb 	j 800060a8 <IfxScuCcu_getSriFrequency>

80006a2e <IfxScuCcu_switchToBackupClock>:
{
    uint16 endinit_pw, endinitSfty_pw;
    int    pllStepsCount;
    uint8  smuTrapEnable;

    if (SCU_CCUCON0.B.CLKSEL == 0) /* Already source is backup clock */
80006a2e:	91 30 00 ff 	movh.a %a15,61443
80006a32:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006a36:	4c f0       	ld.w %d15,[%a15]0
80006a38:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006a3c:	df 0f 81 00 	jeq %d15,0,80006b3e <IfxScuCcu_switchToBackupClock+0x110>
80006a40:	40 4f       	mov.aa %a15,%a4
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006a42:	6d 00 b4 03 	call 800071aa <IfxScuWdt_getSafetyWatchdogPassword>
80006a46:	02 29       	mov %d9,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006a48:	6d 00 93 03 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006a4c:	0c f0       	ld.bu %d15,[%a15]0
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006a4e:	02 28       	mov %d8,%d2
80006a50:	53 cf 20 20 	mul %d2,%d15,12
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006a54:	91 30 00 ef 	movh.a %a14,61443
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006a58:	91 30 00 df 	movh.a %a13,61443
80006a5c:	60 22       	mov.a %a2,%d2
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006a5e:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006a62:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006a66:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006a6a:	6e 1b       	jz %d15,80006aa0 <IfxScuCcu_switchToBackupClock+0x72>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006a6c:	02 94       	mov %d4,%d9
80006a6e:	6d 00 9b 02 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006a72:	54 e2       	ld.w %d2,[%a14]
80006a74:	6f 52 ff 7f 	jz.t %d2,5,80006a72 <IfxScuCcu_switchToBackupClock+0x44>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006a78:	c8 12       	ld.a %a2,[%a15]4
80006a7a:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006a7c:	02 94       	mov %d4,%d9
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006a7e:	30 c2       	add.a %a2,%a12
80006a80:	14 22       	ld.bu %d2,[%a2]

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006a82:	c2 ff       	add %d15,-1
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006a84:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006a88:	74 d2       	st.w [%a13],%d2

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006a8a:	6d 00 13 04 	call 800072b0 <IfxScuWdt_setSafetyEndinit>

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount - 1].waitTime);
80006a8e:	c8 12       	ld.a %a2,[%a15]4
80006a90:	30 c2       	add.a %a2,%a12
80006a92:	19 24 04 00 	ld.w %d4,[%a2]4
80006a96:	6d ff f9 f9 	call 80005e88 <IfxScuCcu_wait>
80006a9a:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006a9e:	3c e6       	j 80006a6a <IfxScuCcu_switchToBackupClock+0x3c>
        }
    }

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006aa0:	02 84       	mov %d4,%d8
80006aa2:	6d 00 66 02 	call 80006f6e <IfxScuWdt_clearCpuEndinit>

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006aa6:	91 30 00 ff 	movh.a %a15,61443
80006aaa:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006aae:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006ab0:	4c f0       	ld.w %d15,[%a15]0

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006ab2:	02 84       	mov %d4,%d8
    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006ab4:	96 08       	or %d15,8
80006ab6:	68 0f       	st.w [%a15]0,%d15

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006ab8:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006abc:	6d 00 8e 03 	call 800071d8 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006ac0:	02 94       	mov %d4,%d9
80006ac2:	6d 00 71 02 	call 80006fa4 <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006ac6:	91 30 00 2f 	movh.a %a2,61443
80006aca:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006ace:	4c 20       	ld.w %d15,[%a2]0
80006ad0:	91 30 00 ff 	movh.a %a15,61443
80006ad4:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006ad8:	bf 0f fb 7f 	jlt %d15,0,80006ace <IfxScuCcu_switchToBackupClock+0xa0>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80006adc:	4c f0       	ld.w %d15,[%a15]0
80006ade:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006ae2:	68 0f       	st.w [%a15]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006ae4:	4c f0       	ld.w %d15,[%a15]0
80006ae6:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006aea:	68 0f       	st.w [%a15]0,%d15

        while (SCU_CCUCON0.B.LCK != 0U)
80006aec:	4c f0       	ld.w %d15,[%a15]0
80006aee:	bf 0f ff 7f 	jlt %d15,0,80006aec <IfxScuCcu_switchToBackupClock+0xbe>
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006af2:	91 30 00 ff 	movh.a %a15,61443
80006af6:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006afa:	4c f0       	ld.w %d15,[%a15]0

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006afc:	02 94       	mov %d4,%d9
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006afe:	96 10       	or %d15,16
80006b00:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006b02:	4c f0       	ld.w %d15,[%a15]0
80006b04:	8f 0f c4 f1 	andn %d15,%d15,64
80006b08:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006b0a:	6d 00 d3 03 	call 800072b0 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006b0e:	91 30 00 ff 	movh.a %a15,61443
80006b12:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006b16:	02 84       	mov %d4,%d8
80006b18:	6d 00 2b 02 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006b1c:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006b1e:	8f 3a 00 20 	sh %d2,%d10,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006b22:	96 08       	or %d15,8
80006b24:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006b26:	91 30 00 ff 	movh.a %a15,61443
80006b2a:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006b2e:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006b30:	02 84       	mov %d4,%d8
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006b32:	8f 8f c0 f1 	andn %d15,%d15,8
80006b36:	a6 2f       	or %d15,%d2
80006b38:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006b3a:	1d 00 4f 03 	j 800071d8 <IfxScuWdt_setCpuEndinit>
80006b3e:	00 90       	ret 

80006b40 <IfxScuEru_clearAllEventFlags>:
/******************************************************************************/

void IfxScuEru_clearAllEventFlags(void)
{
    uint32 mask = (0xFF << 16);
    MODULE_SCU.FMR.U = mask;
80006b40:	91 30 00 ff 	movh.a %a15,61443
80006b44:	7b f0 0f f0 	movh %d15,255
80006b48:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006b4c:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006b50:	00 90       	ret 

80006b52 <IfxScuEru_clearEventFlag>:
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006b52:	1b 04 01 40 	addi %d4,%d4,16
80006b56:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006b58:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006b5c:	0f 4f 00 f0 	sh %d15,%d15,%d4
    SCU_FMR.U = mask;
80006b60:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006b64:	68 0f       	st.w [%a15]0,%d15
80006b66:	00 90       	ret 

80006b68 <IfxScuEru_clearInputChannelConfiguration>:


void IfxScuEru_clearInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006b68:	8f f4 1f f0 	sh %d15,%d4,-1
80006b6c:	06 2f       	sh %d15,2
80006b6e:	60 ff       	mov.a %a15,%d15
80006b70:	d9 ff 00 06 	lea %a15,[%a15]24576
80006b74:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006b78:	19 ff 10 80 	ld.w %d15,[%a15]528
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006b7c:	6f 04 05 00 	jz.t %d4,0,80006b86 <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006b80:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006b84:	3c 03       	j 80006b8a <IfxScuEru_clearInputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006b86:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006b8a:	59 ff 10 80 	st.w [%a15]528,%d15
80006b8e:	00 90       	ret 

80006b90 <IfxScuEru_clearOutputChannelConfiguration>:


void IfxScuEru_clearOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006b90:	8f f4 1f f0 	sh %d15,%d4,-1
80006b94:	06 2f       	sh %d15,2
80006b96:	60 ff       	mov.a %a15,%d15
80006b98:	d9 ff 00 06 	lea %a15,[%a15]24576
80006b9c:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006ba0:	19 ff 2c 80 	ld.w %d15,[%a15]556
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006ba4:	6f 04 05 00 	jz.t %d4,0,80006bae <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006ba8:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006bac:	3c 03       	j 80006bb2 <IfxScuEru_clearOutputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006bae:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006bb2:	59 ff 2c 80 	st.w [%a15]556,%d15
80006bb6:	00 90       	ret 

80006bb8 <IfxScuEru_connectTrigger>:


void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006bb8:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006bbc:	91 30 00 ff 	movh.a %a15,61443
80006bc0:	1b 4f 08 f0 	addi %d15,%d15,132
80006bc4:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006bc8:	8f 75 00 51 	and %d5,%d5,7
80006bcc:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006bce:	6f 04 08 00 	jz.t %d4,0,80006bde <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006bd2:	4c f0       	ld.w %d15,[%a15]0
80006bd4:	8f c5 01 50 	sh %d5,%d5,28
80006bd8:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006bdc:	3c 06       	j 80006be8 <IfxScuEru_connectTrigger+0x30>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.INP0 = triggerSelect;
80006bde:	4c f0       	ld.w %d15,[%a15]0
80006be0:	8f c5 00 50 	sh %d5,%d5,12
80006be4:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006be8:	a6 f5       	or %d5,%d15
80006bea:	68 05       	st.w [%a15]0,%d5
80006bec:	00 90       	ret 

80006bee <IfxScuEru_disableAutoClear>:


void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006bee:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006bf2:	91 30 00 ff 	movh.a %a15,61443
80006bf6:	1b 4f 08 f0 	addi %d15,%d15,132
80006bfa:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006bfe:	90 ff       	addsc.a %a15,%a15,%d15,2
80006c00:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006c02:	6f 04 05 00 	jz.t %d4,0,80006c0c <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006c06:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006c0a:	3c 03       	j 80006c10 <IfxScuEru_disableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = FALSE;
80006c0c:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006c10:	68 0f       	st.w [%a15]0,%d15
80006c12:	00 90       	ret 

80006c14 <IfxScuEru_disableFallingEdgeDetection>:


void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006c14:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006c18:	91 30 00 ff 	movh.a %a15,61443
80006c1c:	1b 4f 08 f0 	addi %d15,%d15,132
80006c20:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006c24:	90 ff       	addsc.a %a15,%a15,%d15,2
80006c26:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006c28:	6f 04 05 00 	jz.t %d4,0,80006c32 <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006c2c:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006c30:	3c 03       	j 80006c36 <IfxScuEru_disableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = FALSE;
80006c32:	8f 0f d0 f1 	andn %d15,%d15,256
80006c36:	68 0f       	st.w [%a15]0,%d15
80006c38:	00 90       	ret 

80006c3a <IfxScuEru_disablePatternDetectionTrigger>:


void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006c3a:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006c3e:	91 30 00 ff 	movh.a %a15,61443
80006c42:	1b bf 08 f0 	addi %d15,%d15,139
80006c46:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006c4a:	90 ff       	addsc.a %a15,%a15,%d15,2
80006c4c:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006c4e:	6f 04 05 00 	jz.t %d4,0,80006c58 <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006c52:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006c56:	3c 03       	j 80006c5c <IfxScuEru_disablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = FALSE;
80006c58:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006c5c:	68 0f       	st.w [%a15]0,%d15
80006c5e:	00 90       	ret 

80006c60 <IfxScuEru_disableRisingEdgeDetection>:


void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006c60:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006c64:	91 30 00 ff 	movh.a %a15,61443
80006c68:	1b 4f 08 f0 	addi %d15,%d15,132
80006c6c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006c70:	90 ff       	addsc.a %a15,%a15,%d15,2
80006c72:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006c74:	6f 04 05 00 	jz.t %d4,0,80006c7e <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006c78:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006c7c:	3c 03       	j 80006c82 <IfxScuEru_disableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = FALSE;
80006c7e:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006c82:	68 0f       	st.w [%a15]0,%d15
80006c84:	00 90       	ret 

80006c86 <IfxScuEru_disableTriggerPulse>:


void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006c86:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006c8a:	91 30 00 ff 	movh.a %a15,61443
80006c8e:	1b 4f 08 f0 	addi %d15,%d15,132
80006c92:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006c96:	90 ff       	addsc.a %a15,%a15,%d15,2
80006c98:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006c9a:	6f 04 05 00 	jz.t %d4,0,80006ca4 <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006c9e:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006ca2:	3c 03       	j 80006ca8 <IfxScuEru_disableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = FALSE;
80006ca4:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006ca8:	68 0f       	st.w [%a15]0,%d15
80006caa:	00 90       	ret 

80006cac <IfxScuEru_enableAutoClear>:


void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006cac:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006cb0:	91 30 00 ff 	movh.a %a15,61443
80006cb4:	1b 4f 08 f0 	addi %d15,%d15,132
80006cb8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006cbc:	90 ff       	addsc.a %a15,%a15,%d15,2
80006cbe:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006cc0:	6f 04 05 00 	jz.t %d4,0,80006cca <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006cc4:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006cc8:	3c 03       	j 80006cce <IfxScuEru_enableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = TRUE;
80006cca:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006cce:	68 0f       	st.w [%a15]0,%d15
80006cd0:	00 90       	ret 

80006cd2 <IfxScuEru_enableFallingEdgeDetection>:


void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006cd2:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006cd6:	91 30 00 ff 	movh.a %a15,61443
80006cda:	1b 4f 08 f0 	addi %d15,%d15,132
80006cde:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ce2:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ce4:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006ce6:	6f 04 05 00 	jz.t %d4,0,80006cf0 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006cea:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006cee:	3c 03       	j 80006cf4 <IfxScuEru_enableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = TRUE;
80006cf0:	8f 0f 50 f1 	or %d15,%d15,256
80006cf4:	68 0f       	st.w [%a15]0,%d15
80006cf6:	00 90       	ret 

80006cf8 <IfxScuEru_enablePatternDetectionTrigger>:


void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006cf8:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006cfc:	91 30 00 ff 	movh.a %a15,61443
80006d00:	1b bf 08 f0 	addi %d15,%d15,139
80006d04:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d08:	90 ff       	addsc.a %a15,%a15,%d15,2
80006d0a:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006d0c:	6f 04 05 00 	jz.t %d4,0,80006d16 <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006d10:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006d14:	3c 03       	j 80006d1a <IfxScuEru_enablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = TRUE;
80006d16:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006d1a:	68 0f       	st.w [%a15]0,%d15
80006d1c:	00 90       	ret 

80006d1e <IfxScuEru_enableRisingEdgeDetection>:


void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d1e:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006d22:	91 30 00 ff 	movh.a %a15,61443
80006d26:	1b 4f 08 f0 	addi %d15,%d15,132
80006d2a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d2e:	90 ff       	addsc.a %a15,%a15,%d15,2
80006d30:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006d32:	6f 04 05 00 	jz.t %d4,0,80006d3c <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006d36:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006d3a:	3c 03       	j 80006d40 <IfxScuEru_enableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = TRUE;
80006d3c:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006d40:	68 0f       	st.w [%a15]0,%d15
80006d42:	00 90       	ret 

80006d44 <IfxScuEru_enableTriggerPulse>:


void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d44:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006d48:	91 30 00 ff 	movh.a %a15,61443
80006d4c:	1b 4f 08 f0 	addi %d15,%d15,132
80006d50:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d54:	90 ff       	addsc.a %a15,%a15,%d15,2
80006d56:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006d58:	6f 04 05 00 	jz.t %d4,0,80006d62 <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006d5c:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006d60:	3c 03       	j 80006d66 <IfxScuEru_enableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = TRUE;
80006d62:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006d66:	68 0f       	st.w [%a15]0,%d15
80006d68:	00 90       	ret 

80006d6a <IfxScuEru_getAllEventFlagsStatus>:
}


uint32 IfxScuEru_getAllEventFlagsStatus(void)
{
    return MODULE_SCU.EIFR.U;
80006d6a:	91 30 00 ff 	movh.a %a15,61443
80006d6e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d72:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006d76:	00 90       	ret 

80006d78 <IfxScuEru_getEventFlagStatus>:


boolean IfxScuEru_getEventFlagStatus(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = (1U << inputChannel);
    return (MODULE_SCU.EIFR.U & mask) ? TRUE : FALSE;
80006d78:	91 30 00 ff 	movh.a %a15,61443
80006d7c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d80:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006d84:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006d88:	00 90       	ret 

80006d8a <IfxScuEru_getInputChannelConfiguration>:


uint32 IfxScuEru_getInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d8a:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006d8e:	91 30 00 ff 	movh.a %a15,61443
80006d92:	1b 4f 08 f0 	addi %d15,%d15,132
80006d96:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d9a:	90 ff       	addsc.a %a15,%a15,%d15,2
80006d9c:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006d9e:	6f 04 05 00 	jz.t %d4,0,80006da8 <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006da2:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006da6:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.EICR[index].U & mask);
80006da8:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006dac:	00 90       	ret 

80006dae <IfxScuEru_getOutputChannelConfiguration>:


uint32 IfxScuEru_getOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006dae:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006db2:	91 30 00 ff 	movh.a %a15,61443
80006db6:	1b bf 08 f0 	addi %d15,%d15,139
80006dba:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006dbe:	90 ff       	addsc.a %a15,%a15,%d15,2
80006dc0:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006dc2:	6f 04 05 00 	jz.t %d4,0,80006dcc <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006dc6:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006dca:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.IGCR[index].U & mask);
80006dcc:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006dd0:	00 90       	ret 

80006dd2 <IfxScuEru_getPatternDetectionResult>:


boolean IfxScuEru_getPatternDetectionResult(IfxScuEru_OutputChannel outputChannel)
{
    uint32 mask = (1U << outputChannel);
    return (MODULE_SCU.PDRR.U & mask) ? TRUE : FALSE;
80006dd2:	91 30 00 ff 	movh.a %a15,61443
80006dd6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006dda:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006dde:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006de2:	00 90       	ret 

80006de4 <IfxScuEru_getWholePatternDetectionResult>:


uint32 IfxScuEru_getWholePatternDetectionResult(void)
{
    return MODULE_SCU.PDRR.U;
80006de4:	91 30 00 ff 	movh.a %a15,61443
80006de8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006dec:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006df0:	00 90       	ret 

80006df2 <IfxScuEru_selectExternalInput>:


void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006df2:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006df6:	91 30 00 ff 	movh.a %a15,61443
80006dfa:	1b 4f 08 f0 	addi %d15,%d15,132
80006dfe:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e02:	8f 75 00 51 	and %d5,%d5,7
80006e06:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006e08:	6f 04 08 00 	jz.t %d4,0,80006e18 <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006e0c:	4c f0       	ld.w %d15,[%a15]0
80006e0e:	8f 45 01 50 	sh %d5,%d5,20
80006e12:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
80006e16:	3c 05       	j 80006e20 <IfxScuEru_selectExternalInput+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EXIS0 = inputSignal;
80006e18:	4c f0       	ld.w %d15,[%a15]0
80006e1a:	06 45       	sh %d5,4
80006e1c:	8f 0f c7 f1 	andn %d15,%d15,112
80006e20:	a6 f5       	or %d5,%d15
80006e22:	68 05       	st.w [%a15]0,%d5
80006e24:	00 90       	ret 

80006e26 <IfxScuEru_setEventFlag>:
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006e26:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006e28:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006e2c:	0f 4f 00 40 	sh %d4,%d15,%d4
    SCU_FMR.U = mask;
80006e30:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006e34:	68 04       	st.w [%a15]0,%d4
80006e36:	00 90       	ret 

80006e38 <IfxScuEru_setFlagPatternDetection>:
}


void IfxScuEru_setFlagPatternDetection(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InputChannel inputChannel, boolean state)
{
80006e38:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 shift, mask;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD) // for channels 1, 3 ,5 and 7
80006e3c:	6f 04 04 00 	jz.t %d4,0,80006e44 <IfxScuEru_setFlagPatternDetection+0xc>
    {
        shift = (inputChannel + 16);                  // offset at location IPEN10
80006e40:	1b 05 01 50 	addi %d5,%d5,16
80006e44:	06 2f       	sh %d15,2
80006e46:	60 f2       	mov.a %a2,%d15
80006e48:	d9 2f 00 06 	lea %a15,[%a2]24576
80006e4c:	11 3f 00 ff 	addih.a %a15,%a15,61443
    {
        shift = inputChannel;
        mask  = (1 << shift);
        // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
        uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & ~mask) | ((uint32)state << shift);
80006e50:	19 ff 2c 80 	ld.w %d15,[%a15]556
80006e54:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
80006e58:	0f 56 00 50 	sh %d5,%d6,%d5
80006e5c:	a6 f5       	or %d5,%d15
80006e5e:	59 f5 2c 80 	st.w [%a15]556,%d5
80006e62:	00 90       	ret 

80006e64 <IfxScuEru_setInterruptGatingPattern>:


void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e64:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80006e68:	91 30 00 ff 	movh.a %a15,61443
80006e6c:	1b bf 08 f0 	addi %d15,%d15,139
80006e70:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e74:	8f 35 00 51 	and %d5,%d5,3
80006e78:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006e7a:	6f 04 06 00 	jz.t %d4,0,80006e86 <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80006e7e:	4c f0       	ld.w %d15,[%a15]0
80006e80:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
80006e84:	3c 07       	j 80006e92 <IfxScuEru_setInterruptGatingPattern+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.IGP0 = gatingPattern;
80006e86:	4c f0       	ld.w %d15,[%a15]0
80006e88:	8f e5 00 50 	sh %d5,%d5,14
80006e8c:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
80006e90:	a6 f5       	or %d5,%d15
80006e92:	68 05       	st.w [%a15]0,%d5
80006e94:	00 90       	ret 

80006e96 <IfxScuWdt_changeCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80006e96:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80006e9a:	16 07       	and %d15,7
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
{
    Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
80006e9c:	53 cf 20 f0 	mul %d15,%d15,12
80006ea0:	60 f2       	mov.a %a2,%d15
80006ea2:	d9 2f 00 46 	lea %a15,[%a2]24832
80006ea6:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
80006eaa:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80006eac:	2e 16       	jz.t %d15,1,80006eb8 <IfxScuWdt_changeCpuWatchdogPassword+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80006eae:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80006eb2:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
80006eb6:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80006eb8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80006ebc:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80006ec0:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
80006ec4:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80006ec6:	4c f0       	ld.w %d15,[%a15]0
80006ec8:	6f 0f ff 7f 	jz.t %d15,0,80006ec6 <IfxScuWdt_changeCpuWatchdogPassword+0x30>
    {}
}
80006ecc:	00 90       	ret 

80006ece <IfxScuWdt_changeCpuWatchdogReload>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80006ece:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80006ed2:	16 07       	and %d15,7

void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
{
    /* Select CPU Watchdog based on Core Id */
    uint32              coreId = IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
80006ed4:	53 cf 20 f0 	mul %d15,%d15,12
80006ed8:	60 f2       	mov.a %a2,%d15
80006eda:	d9 2f 00 46 	lea %a15,[%a2]24832
80006ede:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
80006ee2:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80006ee4:	2e 16       	jz.t %d15,1,80006ef0 <IfxScuWdt_changeCpuWatchdogReload+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80006ee6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80006eea:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80006eee:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80006ef0:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80006ef4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
80006ef8:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80006efc:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
80006efe:	4c f0       	ld.w %d15,[%a15]0
80006f00:	6f 0f ff 7f 	jz.t %d15,0,80006efe <IfxScuWdt_changeCpuWatchdogReload+0x30>
    {}
}
80006f04:	00 90       	ret 

80006f06 <IfxScuWdt_changeSafetyWatchdogPassword>:
{
    Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
80006f06:	91 30 00 ff 	movh.a %a15,61443
80006f0a:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006f0e:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80006f10:	2e 16       	jz.t %d15,1,80006f1c <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80006f12:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80006f16:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
80006f1a:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80006f1c:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80006f20:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80006f24:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
80006f28:	91 30 00 ff 	movh.a %a15,61443
80006f2c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006f30:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80006f32:	4c f0       	ld.w %d15,[%a15]0
80006f34:	6f 0f ff 7f 	jz.t %d15,0,80006f32 <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
80006f38:	00 90       	ret 

80006f3a <IfxScuWdt_changeSafetyWatchdogReload>:
    /* Initialize pointer to Safety Watchdog */
    Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
80006f3a:	91 30 00 ff 	movh.a %a15,61443
80006f3e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006f42:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80006f44:	2e 16       	jz.t %d15,1,80006f50 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80006f46:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80006f4a:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80006f4e:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80006f50:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80006f54:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
80006f58:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80006f5c:	91 30 00 ff 	movh.a %a15,61443
80006f60:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006f64:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
80006f66:	4c f0       	ld.w %d15,[%a15]0
80006f68:	6f 0f ff 7f 	jz.t %d15,0,80006f66 <IfxScuWdt_changeSafetyWatchdogReload+0x2c>
    {}
}
80006f6c:	00 90       	ret 

80006f6e <IfxScuWdt_clearCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80006f6e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80006f72:	16 07       	and %d15,7


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80006f74:	53 cf 20 f0 	mul %d15,%d15,12
80006f78:	06 24       	sh %d4,2
80006f7a:	60 f2       	mov.a %a2,%d15
80006f7c:	d9 2f 00 46 	lea %a15,[%a2]24832
80006f80:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80006f84:	4c f0       	ld.w %d15,[%a15]0
80006f86:	2e 16       	jz.t %d15,1,80006f92 <IfxScuWdt_clearCpuEndinit+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80006f88:	4c f0       	ld.w %d15,[%a15]0
80006f8a:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80006f8e:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80006f90:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80006f92:	4c f0       	ld.w %d15,[%a15]0
80006f94:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80006f98:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80006f9a:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80006f9c:	4c f0       	ld.w %d15,[%a15]0
80006f9e:	6f 0f ff ff 	jnz.t %d15,0,80006f9c <IfxScuWdt_clearCpuEndinit+0x2e>
}
80006fa2:	00 90       	ret 

80006fa4 <IfxScuWdt_clearSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80006fa4:	91 30 00 ff 	movh.a %a15,61443
80006fa8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006fac:	4c f0       	ld.w %d15,[%a15]0
80006fae:	06 24       	sh %d4,2
80006fb0:	2e 16       	jz.t %d15,1,80006fbc <IfxScuWdt_clearSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80006fb2:	4c f0       	ld.w %d15,[%a15]0
80006fb4:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80006fb8:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80006fba:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80006fbc:	91 30 00 ff 	movh.a %a15,61443
80006fc0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006fc4:	4c f0       	ld.w %d15,[%a15]0
80006fc6:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80006fca:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80006fcc:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80006fce:	4c f0       	ld.w %d15,[%a15]0
80006fd0:	6f 0f ff ff 	jnz.t %d15,0,80006fce <IfxScuWdt_clearSafetyEndinit+0x2a>


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
}
80006fd4:	00 90       	ret 

80006fd6 <IfxScuWdt_disableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80006fd6:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80006fda:	16 07       	and %d15,7

void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80006fdc:	53 cf 20 f0 	mul %d15,%d15,12
80006fe0:	06 24       	sh %d4,2
80006fe2:	60 f2       	mov.a %a2,%d15
80006fe4:	d9 2f 00 46 	lea %a15,[%a2]24832
80006fe8:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80006fec:	4c f0       	ld.w %d15,[%a15]0
80006fee:	2e 16       	jz.t %d15,1,80006ffa <IfxScuWdt_disableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80006ff0:	4c f0       	ld.w %d15,[%a15]0
80006ff2:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80006ff6:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80006ff8:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80006ffa:	4c f0       	ld.w %d15,[%a15]0
80006ffc:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007000:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007002:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007004:	4c f0       	ld.w %d15,[%a15]0
80007006:	6f 0f ff ff 	jnz.t %d15,0,80007004 <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
8000700a:	4c f1       	ld.w %d15,[%a15]4
8000700c:	96 08       	or %d15,8
8000700e:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007010:	4c f0       	ld.w %d15,[%a15]0
80007012:	2e 16       	jz.t %d15,1,8000701e <IfxScuWdt_disableCpuWatchdog+0x48>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007014:	4c f0       	ld.w %d15,[%a15]0
80007016:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000701a:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000701c:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000701e:	4c f0       	ld.w %d15,[%a15]0
80007020:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007024:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007026:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80007028:	4c f0       	ld.w %d15,[%a15]0
8000702a:	6f 0f ff 7f 	jz.t %d15,0,80007028 <IfxScuWdt_disableCpuWatchdog+0x52>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
8000702e:	00 90       	ret 

80007030 <IfxScuWdt_disableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007030:	91 30 00 ff 	movh.a %a15,61443
80007034:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007038:	4c f0       	ld.w %d15,[%a15]0
8000703a:	06 24       	sh %d4,2
8000703c:	2e 16       	jz.t %d15,1,80007048 <IfxScuWdt_disableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000703e:	4c f0       	ld.w %d15,[%a15]0
80007040:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007044:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007046:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007048:	91 30 00 ff 	movh.a %a15,61443
8000704c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007050:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007052:	40 f2       	mov.aa %a2,%a15
80007054:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007058:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000705a:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000705c:	4c 20       	ld.w %d15,[%a2]0
8000705e:	91 30 00 ff 	movh.a %a15,61443
80007062:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007066:	6f 0f fb ff 	jnz.t %d15,0,8000705c <IfxScuWdt_disableSafetyWatchdog+0x2c>


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
8000706a:	91 30 00 2f 	movh.a %a2,61443
8000706e:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007072:	4c 20       	ld.w %d15,[%a2]0
80007074:	96 08       	or %d15,8
80007076:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007078:	4c f0       	ld.w %d15,[%a15]0
8000707a:	2e 16       	jz.t %d15,1,80007086 <IfxScuWdt_disableSafetyWatchdog+0x56>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000707c:	4c f0       	ld.w %d15,[%a15]0
8000707e:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007082:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007084:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007086:	91 30 00 ff 	movh.a %a15,61443
8000708a:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000708e:	4c f0       	ld.w %d15,[%a15]0
80007090:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007094:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007096:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80007098:	4c f0       	ld.w %d15,[%a15]0
8000709a:	6f 0f ff 7f 	jz.t %d15,0,80007098 <IfxScuWdt_disableSafetyWatchdog+0x68>
    IfxScuWdt_setSafetyEndinitInline(password);
}
8000709e:	00 90       	ret 

800070a0 <IfxScuWdt_enableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800070a0:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800070a4:	16 07       	and %d15,7

void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
800070a6:	53 cf 20 f0 	mul %d15,%d15,12
800070aa:	06 24       	sh %d4,2
800070ac:	60 f2       	mov.a %a2,%d15
800070ae:	d9 2f 00 46 	lea %a15,[%a2]24832
800070b2:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800070b6:	4c f0       	ld.w %d15,[%a15]0
800070b8:	2e 16       	jz.t %d15,1,800070c4 <IfxScuWdt_enableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070ba:	4c f0       	ld.w %d15,[%a15]0
800070bc:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070c0:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070c2:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070c4:	4c f0       	ld.w %d15,[%a15]0
800070c6:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070ca:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070cc:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
800070ce:	4c f0       	ld.w %d15,[%a15]0
800070d0:	6f 0f ff ff 	jnz.t %d15,0,800070ce <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
800070d4:	4c f1       	ld.w %d15,[%a15]4
800070d6:	8f 8f c0 f1 	andn %d15,%d15,8
800070da:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800070dc:	4c f0       	ld.w %d15,[%a15]0
800070de:	2e 16       	jz.t %d15,1,800070ea <IfxScuWdt_enableCpuWatchdog+0x4a>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070e0:	4c f0       	ld.w %d15,[%a15]0
800070e2:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070e6:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070e8:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070ea:	4c f0       	ld.w %d15,[%a15]0
800070ec:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070f0:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070f2:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800070f4:	4c f0       	ld.w %d15,[%a15]0
800070f6:	6f 0f ff 7f 	jz.t %d15,0,800070f4 <IfxScuWdt_enableCpuWatchdog+0x54>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800070fa:	00 90       	ret 

800070fc <IfxScuWdt_enableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800070fc:	91 30 00 ff 	movh.a %a15,61443
80007100:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007104:	4c f0       	ld.w %d15,[%a15]0
80007106:	06 24       	sh %d4,2
80007108:	2e 16       	jz.t %d15,1,80007114 <IfxScuWdt_enableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000710a:	4c f0       	ld.w %d15,[%a15]0
8000710c:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007110:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007112:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007114:	91 30 00 ff 	movh.a %a15,61443
80007118:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000711c:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000711e:	40 f2       	mov.aa %a2,%a15
80007120:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007124:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007126:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007128:	4c 20       	ld.w %d15,[%a2]0
8000712a:	91 30 00 ff 	movh.a %a15,61443
8000712e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007132:	6f 0f fb ff 	jnz.t %d15,0,80007128 <IfxScuWdt_enableSafetyWatchdog+0x2c>


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
80007136:	91 30 00 2f 	movh.a %a2,61443
8000713a:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
8000713e:	4c 20       	ld.w %d15,[%a2]0
80007140:	8f 8f c0 f1 	andn %d15,%d15,8
80007144:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007146:	4c f0       	ld.w %d15,[%a15]0
80007148:	2e 16       	jz.t %d15,1,80007154 <IfxScuWdt_enableSafetyWatchdog+0x58>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000714a:	4c f0       	ld.w %d15,[%a15]0
8000714c:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007150:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007152:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007154:	91 30 00 ff 	movh.a %a15,61443
80007158:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000715c:	4c f0       	ld.w %d15,[%a15]0
8000715e:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007162:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007164:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80007166:	4c f0       	ld.w %d15,[%a15]0
80007168:	6f 0f ff 7f 	jz.t %d15,0,80007166 <IfxScuWdt_enableSafetyWatchdog+0x6a>
    IfxScuWdt_setSafetyEndinitInline(password);
}
8000716c:	00 90       	ret 

8000716e <IfxScuWdt_getCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000716e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007172:	16 07       	and %d15,7


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80007174:	53 cf 20 f0 	mul %d15,%d15,12
80007178:	60 f2       	mov.a %a2,%d15
8000717a:	d9 2f 00 46 	lea %a15,[%a2]24832
8000717e:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80007182:	48 02       	ld.w %d2,[%a15]0
80007184:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
80007188:	8f f2 83 21 	xor %d2,%d2,63
8000718c:	00 90       	ret 

8000718e <IfxScuWdt_getCpuWatchdogEndInit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000718e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007192:	16 07       	and %d15,7


boolean IfxScuWdt_getCpuWatchdogEndInit(void)
{
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80007194:	53 cf 20 f0 	mul %d15,%d15,12
80007198:	60 f2       	mov.a %a2,%d15
8000719a:	d9 2f 00 46 	lea %a15,[%a2]24832
8000719e:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
800071a2:	48 02       	ld.w %d2,[%a15]0
}
800071a4:	8f 12 00 21 	and %d2,%d2,1
800071a8:	00 90       	ret 

800071aa <IfxScuWdt_getSafetyWatchdogPassword>:
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
800071aa:	91 30 00 ff 	movh.a %a15,61443
800071ae:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071b2:	48 02       	ld.w %d2,[%a15]0
800071b4:	37 02 6e 21 	extr.u %d2,%d2,2,14


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
800071b8:	8f f2 83 21 	xor %d2,%d2,63
800071bc:	00 90       	ret 

800071be <IfxScuWdt_initConfig>:


void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
{
    config->password                      = IFXSCUWDT_RESET_PASSWORD;
800071be:	da 3c       	mov %d15,60
800071c0:	ac 40       	st.h [%a4]0,%d15
    config->reload                        = 0xFFFC;
800071c2:	82 cf       	mov %d15,-4
800071c4:	ac 41       	st.h [%a4]2,%d15
    config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
800071c6:	82 0f       	mov %d15,0
800071c8:	2c 44       	st.b [%a4]4,%d15
    config->disableWatchdog               = FALSE;
800071ca:	2c 45       	st.b [%a4]5,%d15
    config->enableSmuRestriction          = FALSE;
800071cc:	2c 46       	st.b [%a4]6,%d15
    config->enableAutomaticPasswordChange = FALSE;
800071ce:	2c 47       	st.b [%a4]7,%d15
    config->enableTimerCheck              = FALSE;
800071d0:	2c 48       	st.b [%a4]8,%d15
    config->enableTimerCheckTolerance     = FALSE;
800071d2:	2c 49       	st.b [%a4]9,%d15
    config->clrInternalResetFlag          = FALSE;
800071d4:	2c 4a       	st.b [%a4]10,%d15
800071d6:	00 90       	ret 

800071d8 <IfxScuWdt_setCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800071d8:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800071dc:	16 07       	and %d15,7
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800071de:	53 cf 20 f0 	mul %d15,%d15,12
800071e2:	06 24       	sh %d4,2
800071e4:	60 f2       	mov.a %a2,%d15
800071e6:	d9 2f 00 46 	lea %a15,[%a2]24832
800071ea:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800071ee:	4c f0       	ld.w %d15,[%a15]0
800071f0:	2e 16       	jz.t %d15,1,800071fc <IfxScuWdt_setCpuEndinit+0x24>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071f2:	4c f0       	ld.w %d15,[%a15]0
800071f4:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071f8:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071fa:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071fc:	4c f0       	ld.w %d15,[%a15]0
800071fe:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007202:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007204:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80007206:	4c f0       	ld.w %d15,[%a15]0
80007208:	6f 0f ff 7f 	jz.t %d15,0,80007206 <IfxScuWdt_setCpuEndinit+0x2e>
}
8000720c:	00 90       	ret 

8000720e <IfxScuWdt_initCpuWatchdog>:
{
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    Ifx_SCU_WDTCPU_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
8000720e:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
80007210:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
80007212:	6f 12 0b 00 	jz.t %d2,1,80007228 <IfxScuWdt_initCpuWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80007216:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
8000721a:	37 02 6e 31 	extr.u %d3,%d2,2,14
8000721e:	8f f3 83 31 	xor %d3,%d3,63
80007222:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007226:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
80007228:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
8000722a:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
8000722e:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
80007232:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
80007236:	b9 53 02 00 	ld.hu %d3,[%a5]2
8000723a:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
8000723e:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
80007240:	54 42       	ld.w %d2,[%a4]
80007242:	6f 02 ff ff 	jnz.t %d2,0,80007240 <IfxScuWdt_initCpuWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
80007246:	39 52 04 00 	ld.bu %d2,[%a5]4
8000724a:	df 12 0a 00 	jeq %d2,1,8000725e <IfxScuWdt_initCpuWatchdog+0x50>
8000724e:	76 26       	jz %d2,8000725a <IfxScuWdt_initCpuWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
80007250:	8b 22 20 22 	ne %d2,%d2,2
80007254:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
80007258:	3c 07       	j 80007266 <IfxScuWdt_initCpuWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
8000725a:	82 0f       	mov %d15,0
        break;
8000725c:	3c 05       	j 80007266 <IfxScuWdt_initCpuWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
8000725e:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
80007262:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
80007266:	39 52 05 00 	ld.bu %d2,[%a5]5
8000726a:	8b 02 20 22 	ne %d2,%d2,0
8000726e:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
80007272:	39 52 06 00 	ld.bu %d2,[%a5]6
80007276:	8b 02 20 22 	ne %d2,%d2,0
8000727a:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
8000727e:	39 52 07 00 	ld.bu %d2,[%a5]7
80007282:	8b 02 20 22 	ne %d2,%d2,0
80007286:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
8000728a:	39 52 08 00 	ld.bu %d2,[%a5]8
8000728e:	8b 02 20 22 	ne %d2,%d2,0
80007292:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
80007296:	39 52 09 00 	ld.bu %d2,[%a5]9
8000729a:	8b 02 20 22 	ne %d2,%d2,0
8000729e:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
800072a2:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set CPU ENDINIT protection */
    IfxScuWdt_setCpuEndinit(config->password);
800072a4:	b9 54 00 00 	ld.hu %d4,[%a5]0
800072a8:	1d ff 98 ff 	j 800071d8 <IfxScuWdt_setCpuEndinit>

800072ac <IfxScuWdt_serviceCpuWatchdog>:
}


void IfxScuWdt_serviceCpuWatchdog(uint16 password)
{
    IfxScuWdt_setCpuEndinit(password);
800072ac:	1d ff 96 ff 	j 800071d8 <IfxScuWdt_setCpuEndinit>

800072b0 <IfxScuWdt_setSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800072b0:	91 30 00 ff 	movh.a %a15,61443
800072b4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072b8:	4c f0       	ld.w %d15,[%a15]0
800072ba:	06 24       	sh %d4,2
800072bc:	2e 16       	jz.t %d15,1,800072c8 <IfxScuWdt_setSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072be:	4c f0       	ld.w %d15,[%a15]0
800072c0:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072c4:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072c6:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072c8:	91 30 00 ff 	movh.a %a15,61443
800072cc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072d0:	4c f0       	ld.w %d15,[%a15]0
800072d2:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072d6:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072d8:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800072da:	4c f0       	ld.w %d15,[%a15]0
800072dc:	6f 0f ff 7f 	jz.t %d15,0,800072da <IfxScuWdt_setSafetyEndinit+0x2a>


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
    IfxScuWdt_setSafetyEndinitInline(password);
}
800072e0:	00 90       	ret 

800072e2 <IfxScuWdt_initSafetyWatchdog>:
{
    Ifx_SCU_WDTS_CON0 wdt_con0;
    Ifx_SCU_WDTS_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
800072e2:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
800072e4:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
800072e6:	6f 12 0b 00 	jz.t %d2,1,800072fc <IfxScuWdt_initSafetyWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800072ea:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800072ee:	37 02 6e 31 	extr.u %d3,%d2,2,14
800072f2:	8f f3 83 31 	xor %d3,%d3,63
800072f6:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800072fa:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
800072fc:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
800072fe:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
80007302:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
80007306:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
8000730a:	b9 53 02 00 	ld.hu %d3,[%a5]2
8000730e:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
80007312:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
80007314:	54 42       	ld.w %d2,[%a4]
80007316:	6f 02 ff ff 	jnz.t %d2,0,80007314 <IfxScuWdt_initSafetyWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
8000731a:	39 52 04 00 	ld.bu %d2,[%a5]4
8000731e:	df 12 0a 00 	jeq %d2,1,80007332 <IfxScuWdt_initSafetyWatchdog+0x50>
80007322:	76 26       	jz %d2,8000732e <IfxScuWdt_initSafetyWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
80007324:	8b 22 20 22 	ne %d2,%d2,2
80007328:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
8000732c:	3c 07       	j 8000733a <IfxScuWdt_initSafetyWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
8000732e:	82 0f       	mov %d15,0
        break;
80007330:	3c 05       	j 8000733a <IfxScuWdt_initSafetyWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
80007332:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
80007336:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
8000733a:	39 52 05 00 	ld.bu %d2,[%a5]5
8000733e:	8b 02 20 22 	ne %d2,%d2,0
80007342:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
80007346:	39 52 06 00 	ld.bu %d2,[%a5]6
8000734a:	8b 02 20 22 	ne %d2,%d2,0
8000734e:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
80007352:	39 52 07 00 	ld.bu %d2,[%a5]7
80007356:	8b 02 20 22 	ne %d2,%d2,0
8000735a:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
8000735e:	39 52 08 00 	ld.bu %d2,[%a5]8
80007362:	8b 02 20 22 	ne %d2,%d2,0
80007366:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
8000736a:	39 52 09 00 	ld.bu %d2,[%a5]9
8000736e:	8b 02 20 22 	ne %d2,%d2,0
80007372:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7
    wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
80007376:	39 52 0a 00 	ld.bu %d2,[%a5]10
8000737a:	8b 02 00 22 	eq %d2,%d2,0
8000737e:	67 2f 00 f0 	ins.t %d15,%d15,0,%d2,0

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
80007382:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set Safety ENDINIT protection */
    IfxScuWdt_setSafetyEndinit(config->password);
80007384:	b9 54 00 00 	ld.hu %d4,[%a5]0
80007388:	1d ff 94 ff 	j 800072b0 <IfxScuWdt_setSafetyEndinit>

8000738c <IfxScuWdt_serviceSafetyWatchdog>:
}


void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
{
    IfxScuWdt_setSafetyEndinit(password);
8000738c:	1d ff 92 ff 	j 800072b0 <IfxScuWdt_setSafetyEndinit>

80007390 <IfxScuWdt_enableWatchdogWithDebugger>:
    volatile uint32 *oecPtr    = (volatile uint32 *)0xF0000478;
    volatile uint32 *ostatePtr = (volatile uint32 *)0xF0000480;
    volatile uint32 *ocntrlPtr = (volatile uint32 *)0xF000047C;

    /* read OSTATE.OEN */
    ostateValue = *ostatePtr;
80007390:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
80007394:	2e 07       	jz.t %d15,0,800073a2 <IfxScuWdt_enableWatchdogWithDebugger+0x12>
    }

    if (oenEnabled)
    {
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
80007396:	3b 00 00 f3 	mov %d15,12288
8000739a:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
}


boolean IfxScuWdt_enableWatchdogWithDebugger(void)
{
    boolean          status = 0, oenEnabled = 0, watchdogEnabled = 0;
8000739e:	82 0f       	mov %d15,0
800073a0:	3c 11       	j 800073c2 <IfxScuWdt_enableWatchdogWithDebugger+0x32>

    if (!oenEnabled)
    {
        /* enable the debug interface (OSTATE.OEN )if it is not already enabled */
        /* pattern for enabling OSTATE.OEN */
        *oecPtr = 0xA1;
800073a2:	3b 10 0a 20 	mov %d2,161
800073a6:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
800073aa:	da 5e       	mov %d15,94
800073ac:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15
        *oecPtr = 0xA1;
800073b0:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
800073b4:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15

        /* read OSTATE.OEN again*/
        ostateValue = *ostatePtr;
800073b8:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
        oenEnabled  = (ostateValue & 0x00000001);
    }

    if (oenEnabled)
800073bc:	6f 0f ed ff 	jnz.t %d15,0,80007396 <IfxScuWdt_enableWatchdogWithDebugger+0x6>
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
    }
    else
    {
        status = 1;
800073c0:	82 1f       	mov %d15,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, oenEnabled == 1);

    /* read OSTATE.WDTSUS */
    ostateValue     = *ostatePtr;
800073c2:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
800073c6:	37 02 e1 23 	extr.u %d2,%d2,7,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, watchdogEnabled == 1);

    return status;
}
800073ca:	ab 1f 80 22 	sel %d2,%d2,%d15,1
800073ce:	00 90       	ret 

800073d0 <IfxVadc_Adc_deInitGroup>:
    Ifx_VADC_G     *vadcG      = IfxVadc_Adc_getGroupRegsFromGroup(group);
    /* Get group index */
    IfxVadc_GroupId groupIndex = group->groupId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800073d0:	0c 48       	ld.bu %d15,[%a4]8
800073d2:	d4 4c       	ld.a %a12,[%a4]
800073d4:	1b 0f 01 f0 	addi %d15,%d15,16
800073d8:	16 ff       	and %d15,255
800073da:	99 4d 04 00 	ld.a %a13,[%a4]4
800073de:	02 f4       	mov %d4,%d15
800073e0:	40 c4       	mov.aa %a4,%a12
800073e2:	6d ff 91 e8 	call 80004504 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG)
{
    vadcG->ARBCFG.B.ANONC = IfxVadc_AnalogConverterMode_off;   /* turn off group */
800073e6:	54 d2       	ld.w %d2,[%a13]
    IfxVadc_resetGroup(vadcG);
    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800073e8:	40 c4       	mov.aa %a4,%a12
800073ea:	8f 32 c0 21 	andn %d2,%d2,3
800073ee:	74 d2       	st.w [%a13],%d2
800073f0:	02 f4       	mov %d4,%d15
800073f2:	1d ff 6d e8 	j 800044cc <IfxVadc_disableAccess>

800073f6 <IfxVadc_Adc_disableModule>:
}


void IfxVadc_Adc_disableModule(Ifx_VADC *vadc)
{
800073f6:	40 4f       	mov.aa %a15,%a4
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800073f8:	6d ff bb fe 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
800073fc:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800073fe:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80007400:	6d ff b7 fd 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.B.DISR = 1;
80007404:	48 02       	ld.w %d2,[%a15]0
    IfxScuWdt_setCpuEndinit(passwd);
80007406:	02 f4       	mov %d4,%d15

IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->CLC.B.DISR = 1;
80007408:	8f 12 40 21 	or %d2,%d2,1
8000740c:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
8000740e:	1d ff e5 fe 	j 800071d8 <IfxScuWdt_setCpuEndinit>

80007412 <IfxVadc_Adc_getChannelConfig>:
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
80007412:	99 42 04 00 	ld.a %a2,[%a4]4
80007416:	99 2d 04 00 	ld.a %a13,[%a2]4
    IfxVadc_ChannelId channelIndex = channel->channel;
8000741a:	79 42 00 00 	ld.b %d2,[%a4]0

    config->channelId = channel->channel;
    config->group     = channel->group;
8000741e:	b5 52 14 00 	st.a [%a5]20,%a2


IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U = vadcG->CHCTR[channelIndex].U;
80007422:	1b 02 06 f0 	addi %d15,%d2,96
80007426:	90 d2       	addsc.a %a2,%a13,%d15,2
void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
    IfxVadc_ChannelId channelIndex = channel->channel;

    config->channelId = channel->channel;
80007428:	e9 52 0c 00 	st.b [%a5]12,%d2
8000742c:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
8000742e:	40 4c       	mov.aa %a12,%a4

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
80007430:	37 0f 62 30 	extr.u %d3,%d15,0,2
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
80007434:	40 5f       	mov.aa %a15,%a5

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
80007436:	e9 53 0d 00 	st.b [%a5]13,%d3
    config->reference           = (IfxVadc_ChannelReference)tempChctr.B.REFSEL;
8000743a:	37 0f e1 35 	extr.u %d3,%d15,11,1
8000743e:	e9 53 0e 00 	st.b [%a5]14,%d3
    config->resultRegister      = (IfxVadc_ChannelResult)tempChctr.B.RESREG;
80007442:	37 0f 64 38 	extr.u %d3,%d15,16,4
80007446:	e9 53 0f 00 	st.b [%a5]15,%d3
    config->globalResultUsage   = tempChctr.B.RESTBS;
8000744a:	37 0f 61 3a 	extr.u %d3,%d15,20,1
8000744e:	34 53       	st.b [%a5],%d3
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
80007450:	37 0f 62 32 	extr.u %d3,%d15,4,2
80007454:	e9 53 10 00 	st.b [%a5]16,%d3
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
80007458:	37 0f 62 33 	extr.u %d3,%d15,6,2
8000745c:	e9 53 11 00 	st.b [%a5]17,%d3
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
80007460:	37 0f 64 36 	extr.u %d3,%d15,12,4
80007464:	e9 53 12 00 	st.b [%a5]18,%d3
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
80007468:	37 0f 62 34 	extr.u %d3,%d15,8,2
8000746c:	e9 53 13 00 	st.b [%a5]19,%d3
    config->synchonize          = tempChctr.B.SYNC;
80007470:	37 0f 61 35 	extr.u %d3,%d15,10,1
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007474:	37 0f e1 fa 	extr.u %d15,%d15,21,1
    config->globalResultUsage   = tempChctr.B.RESTBS;
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
    config->synchonize          = tempChctr.B.SYNC;
80007478:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
8000747c:	2c 53       	st.b [%a5]3,%d15


IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CHASS assignChannels;
    assignChannels.U = vadcG->CHASS.U;
8000747e:	4c d2       	ld.w %d15,[%a13]8

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
80007480:	57 0f 61 22 	extr.u %d2,%d15,%d2,1
80007484:	8f 12 80 21 	xor %d2,%d2,1
80007488:	e9 52 02 00 	st.b [%a5]2,%d2
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
8000748c:	99 42 04 00 	ld.a %a2,[%a4]4
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007490:	79 4f 00 00 	ld.b %d15,[%a4]0


IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
    serviceRequestNodePtr.U = vadcG->CEVNP0.U;
80007494:	19 d2 20 40 	ld.w %d2,[%a13]288
80007498:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
8000749a:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
    config->rightAlignedStorage = tempChctr.B.RESPOS;

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
8000749e:	39 28 08 00 	ld.bu %d8,[%a2]8
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
800074a2:	0b 8f 10 48 	mov %e4,%d15,%d8
800074a6:	6d ff 60 e9 	call 80004766 <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
800074aa:	54 22       	ld.w %d2,[%a2]
800074ac:	6f a2 0a 00 	jz.t %d2,10,800074c0 <IfxVadc_Adc_getChannelConfig+0xae>
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)channelServiceRequestNodePtr;
800074b0:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)src->B.SRPN;
800074b2:	4c 20       	ld.w %d15,[%a2]0
800074b4:	16 ff       	and %d15,255
800074b6:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)src->B.TOS;
800074b8:	4c 20       	ld.w %d15,[%a2]0
800074ba:	37 0f e2 f5 	extr.u %d15,%d15,11,2
800074be:	3c 05       	j 800074c8 <IfxVadc_Adc_getChannelConfig+0xb6>
    }
    else
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)0;
800074c0:	82 0f       	mov %d15,0
800074c2:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)0;
800074c4:	82 0f       	mov %d15,0
800074c6:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)0;
800074c8:	28 9f       	st.b [%a15]9,%d15
    }

    uint32 resultServiceRequestNodePtr;

    if (config->resultRegister < IfxVadc_ChannelResult_8)
800074ca:	0c ff       	ld.bu %d15,[%a15]15
800074cc:	79 c2 00 00 	ld.b %d2,[%a12]0
800074d0:	ff 8f 08 80 	jge.u %d15,8,800074e0 <IfxVadc_Adc_getChannelConfig+0xce>


IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
    resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
800074d4:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
800074d8:	06 22       	sh %d2,2
800074da:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
800074de:	3c 08       	j 800074ee <IfxVadc_Adc_getChannelConfig+0xdc>
    }
    else
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer1(vadcG)).U >> ((channel->channel - IfxVadc_ChannelResult_8) * 4)) & 0xF;
800074e0:	9a 82       	add %d15,%d2,-8


IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
    resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
800074e2:	19 d3 34 40 	ld.w %d3,[%a13]308
800074e6:	8f 2f 00 20 	sh %d2,%d15,2
800074ea:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
    }

    src = IfxVadc_getSrcAddress(groupIndex, resultServiceRequestNodePtr);
800074ee:	16 ff       	and %d15,255
800074f0:	0b 8f 10 48 	mov %e4,%d15,%d8
800074f4:	6d ff 39 e9 	call 80004766 <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
800074f8:	54 22       	ld.w %d2,[%a2]
800074fa:	6f a2 0a 00 	jz.t %d2,10,8000750e <IfxVadc_Adc_getChannelConfig+0xfc>
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)resultServiceRequestNodePtr;
800074fe:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)src->B.SRPN;
80007500:	4c 20       	ld.w %d15,[%a2]0
80007502:	16 ff       	and %d15,255
80007504:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)src->B.TOS;
80007506:	4c 20       	ld.w %d15,[%a2]0
80007508:	37 0f e2 f5 	extr.u %d15,%d15,11,2
8000750c:	3c 05       	j 80007516 <IfxVadc_Adc_getChannelConfig+0x104>
    }
    else
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)0;
8000750e:	82 0f       	mov %d15,0
80007510:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)0;
80007512:	82 0f       	mov %d15,0
80007514:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)0;
80007516:	28 8f       	st.b [%a15]8,%d15
80007518:	00 90       	ret 

8000751a <IfxVadc_Adc_getChannelConversionTime>:
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
8000751a:	cc 41       	ld.a %a15,[%a4]4
8000751c:	c8 12       	ld.a %a2,[%a15]4
}


IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
8000751e:	79 4f 00 00 	ld.b %d15,[%a4]0
80007522:	08 8a       	ld.bu %d10,[%a15]8
80007524:	c8 0f       	ld.a %a15,[%a15]0
80007526:	1b 0f 06 f0 	addi %d15,%d15,96
8000752a:	90 22       	addsc.a %a2,%a2,%d15,2
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
8000752c:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
8000752e:	40 f4       	mov.aa %a4,%a15
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
80007530:	02 49       	mov %d9,%d4
80007532:	54 28       	ld.w %d8,[%a2]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
80007534:	6d ff 9a e8 	call 80004668 <IfxVadc_getAdcAnalogFrequency>
80007538:	02 2f       	mov %d15,%d2
8000753a:	6d ff b0 e8 	call 8000469a <IfxVadc_getAdcModuleFrequency>
8000753e:	8f 38 00 81 	and %d8,%d8,3
80007542:	74 a9       	st.w [%sp],%d9
80007544:	40 f4       	mov.aa %a4,%a15
80007546:	0b a8 10 48 	mov %e4,%d8,%d10
8000754a:	0b f2 10 68 	mov %e6,%d2,%d15
}
8000754e:	1d ff c1 e9 	j 800048d0 <IfxVadc_getChannelConversionTime>

80007552 <IfxVadc_Adc_getGroupConfig>:

void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
80007552:	d4 4d       	ld.a %a13,[%a4]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
80007554:	40 4e       	mov.aa %a14,%a4
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
80007556:	99 4c 04 00 	ld.a %a12,[%a4]4
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
8000755a:	40 d4       	mov.aa %a4,%a13
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
8000755c:	40 5f       	mov.aa %a15,%a5
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
8000755e:	6d ff 85 e8 	call 80004668 <IfxVadc_getAdcAnalogFrequency>

    config->groupId                    = group->groupId;
80007562:	0c e8       	ld.bu %d15,[%a14]8
    config->module                     = &group->module;
80007564:	e8 0e       	st.a [%a15]0,%a14
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);

    config->groupId                    = group->groupId;
80007566:	28 4f       	st.b [%a15]4,%d15
}


IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
80007568:	4c c0       	ld.w %d15,[%a12]0
8000756a:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
8000756e:	e9 ff 32 00 	st.b [%a15]50,%d15
80007572:	82 0f       	mov %d15,0
}


IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
{
    return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
80007574:	1b 8f 00 30 	addi %d3,%d15,8
80007578:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
8000757c:	d0 f3       	addsc.a %a3,%a15,%d15,3
8000757e:	54 23       	ld.w %d3,[%a2]
80007580:	37 03 63 34 	extr.u %d3,%d3,8,3
80007584:	e9 33 0c 00 	st.b [%a3]12,%d3
}


IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
{
    uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
80007588:	54 23       	ld.w %d3,[%a2]
8000758a:	8f f3 01 31 	and %d3,%d3,31

    if (sampleTime > 16)
8000758e:	8b 13 61 42 	lt.u %d4,%d3,17
80007592:	f6 44       	jnz %d4,8000759a <IfxVadc_Adc_getGroupConfig+0x48>
    {
        sampleTime = (sampleTime - 15) * 16;
80007594:	1b 13 ff 3f 	addi %d3,%d3,-15
80007598:	06 43       	sh %d3,4
    }

    return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
8000759a:	c2 23       	add %d3,2
8000759c:	4b 03 41 31 	itof %d3,%d3
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
800075a0:	92 14       	add %d4,%d15,1
800075a2:	4b 23 51 30 	div.f %d3,%d3,%d2
800075a6:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
800075aa:	74 23       	st.w [%a2],%d3
    config->groupId                    = group->groupId;
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
800075ac:	1e 13       	jeq %d15,1,800075b2 <IfxVadc_Adc_getGroupConfig+0x60>
800075ae:	82 1f       	mov %d15,1
800075b0:	3c e2       	j 80007574 <IfxVadc_Adc_getGroupConfig+0x22>
}


IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN1;
800075b2:	19 c2 04 00 	ld.w %d2,[%a12]4
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
    }

    if (IfxVadc_isRequestScanSlotEnabled(vadcG) == TRUE)
800075b6:	ef 92 33 00 	jz.t %d2,25,8000761c <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
800075ba:	e9 ff 34 00 	st.b [%a15]52,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
800075be:	19 c2 04 00 	ld.w %d2,[%a12]4
800075c2:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
800075c6:	e9 f2 1e 00 	st.b [%a15]30,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
800075ca:	19 c2 04 00 	ld.w %d2,[%a12]4
800075ce:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
800075d2:	e9 f2 1f 00 	st.b [%a15]31,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
800075d6:	19 c3 20 20 	ld.w %d3,[%a12]160
800075da:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
800075de:	e9 f3 1b 00 	st.b [%a15]27,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
800075e2:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800075e6:	8b f3 00 32 	eq %d3,%d3,15
800075ea:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotScanEnabled          = TRUE;
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);
800075ee:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800075f2:	f6 35       	jnz %d3,800075fc <IfxVadc_Adc_getGroupConfig+0xaa>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
800075f4:	19 cf 24 20 	ld.w %d15,[%a12]164
800075f8:	16 03       	and %d15,3
800075fa:	3c 02       	j 800075fe <IfxVadc_Adc_getGroupConfig+0xac>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_getScanSlotGatingMode(vadcG);
        }
        else if (config->scanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800075fc:	76 23       	jz %d2,80007602 <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800075fe:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
80007602:	19 cf 20 20 	ld.w %d15,[%a12]160
80007606:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
8000760a:	e9 ff 1a 00 	st.b [%a15]26,%d15
}


IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ASMR.B.SCAN;
8000760e:	19 cf 24 20 	ld.w %d15,[%a12]164
80007612:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
80007616:	e9 ff 18 00 	st.b [%a15]24,%d15
8000761a:	3c 0c       	j 80007632 <IfxVadc_Adc_getGroupConfig+0xe0>
    }
    else
    {
        config->scanRequest.autoscanEnabled             = FALSE;
8000761c:	82 0f       	mov %d15,0
8000761e:	e9 ff 18 00 	st.b [%a15]24,%d15
        config->scanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007622:	e9 ff 1c 00 	st.b [%a15]28,%d15
        config->scanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;    /* Use CCU6061 TRIG0 */
80007626:	e9 ff 1a 00 	st.b [%a15]26,%d15
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
8000762a:	e9 ff 1d 00 	st.b [%a15]29,%d15
        config->scanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;   /* Trigger source taken from Gating Input */
8000762e:	e9 ff 1b 00 	st.b [%a15]27,%d15
}


IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN0;
80007632:	4c c1       	ld.w %d15,[%a12]4
80007634:	37 0f 61 fc 	extr.u %d15,%d15,24,1
    }

    if (IfxVadc_isRequestQueueSlotEnabled(vadcG) == TRUE)
80007638:	df 1f 30 80 	jne %d15,1,80007698 <IfxVadc_Adc_getGroupConfig+0x146>
    {
        config->arbiter.requestSlotQueueEnabled          = TRUE;
8000763c:	e9 ff 33 00 	st.b [%a15]51,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
80007640:	19 c2 04 00 	ld.w %d2,[%a12]4
80007644:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
80007648:	e9 f2 26 00 	st.b [%a15]38,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
8000764c:	19 c2 04 00 	ld.w %d2,[%a12]4
80007650:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
80007654:	e9 f2 27 00 	st.b [%a15]39,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
80007658:	19 c3 00 20 	ld.w %d3,[%a12]128
8000765c:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
80007660:	e9 f3 23 00 	st.b [%a15]35,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
80007664:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007668:	8b f3 00 32 	eq %d3,%d3,15
8000766c:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotQueueEnabled          = TRUE;
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);
80007670:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007674:	f6 35       	jnz %d3,8000767e <IfxVadc_Adc_getGroupConfig+0x12c>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
80007676:	19 cf 04 20 	ld.w %d15,[%a12]132
8000767a:	16 03       	and %d15,3
8000767c:	3c 02       	j 80007680 <IfxVadc_Adc_getGroupConfig+0x12e>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_getQueueSlotGatingMode(vadcG);
        }
        else if (config->queueRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
8000767e:	76 23       	jz %d2,80007684 <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007680:	e9 ff 24 00 	st.b [%a15]36,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
80007684:	19 cf 00 20 	ld.w %d15,[%a12]128
80007688:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->queueRequest.triggerConfig.gatingSource = IfxVadc_getQueueSlotGatingSource(vadcG);
8000768c:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.flushQueueAfterInit        = FALSE;
80007690:	82 0f       	mov %d15,0
80007692:	e9 ff 20 00 	st.b [%a15]32,%d15
80007696:	3c 0c       	j 800076ae <IfxVadc_Adc_getGroupConfig+0x15c>
    }
    else
    {
        config->queueRequest.flushQueueAfterInit         = FALSE;
80007698:	82 0f       	mov %d15,0
8000769a:	e9 ff 20 00 	st.b [%a15]32,%d15
        config->queueRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
8000769e:	e9 ff 24 00 	st.b [%a15]36,%d15
        config->queueRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;        /* Use CCU6061 TRIG0 */
800076a2:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800076a6:	e9 ff 25 00 	st.b [%a15]37,%d15
        config->queueRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;       /* Trigger source taken from Gating Input */
800076aa:	e9 ff 23 00 	st.b [%a15]35,%d15
}


IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN2;
800076ae:	4c c1       	ld.w %d15,[%a12]4
800076b0:	37 0f 61 fd 	extr.u %d15,%d15,26,1
    }

    if (IfxVadc_isRequestBackgroundScanSlotEnabled(vadcG) == TRUE)
800076b4:	df 1f 33 80 	jne %d15,1,8000771a <IfxVadc_Adc_getGroupConfig+0x1c8>
    {
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
800076b8:	e9 ff 35 00 	st.b [%a15]53,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
800076bc:	19 c2 04 00 	ld.w %d2,[%a12]4
800076c0:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
800076c4:	e9 f2 2e 00 	st.b [%a15]46,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
800076c8:	19 c2 04 00 	ld.w %d2,[%a12]4
800076cc:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
800076d0:	e9 f2 2f 00 	st.b [%a15]47,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
800076d4:	19 d3 00 80 	ld.w %d3,[%a13]512
800076d8:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
800076dc:	e9 f3 2b 00 	st.b [%a15]43,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
800076e0:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800076e4:	8b f3 00 32 	eq %d3,%d3,15
800076e8:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);
800076ec:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800076f0:	f6 35       	jnz %d3,800076fa <IfxVadc_Adc_getGroupConfig+0x1a8>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
800076f2:	19 df 04 80 	ld.w %d15,[%a13]516
800076f6:	16 03       	and %d15,3
800076f8:	3c 02       	j 800076fc <IfxVadc_Adc_getGroupConfig+0x1aa>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_getBackgroundScanGatingMode(vadc);
        }
        else if (config->backgroundScanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800076fa:	76 23       	jz %d2,80007700 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800076fc:	e9 ff 2c 00 	st.b [%a15]44,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
80007700:	19 df 00 80 	ld.w %d15,[%a13]512
80007704:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
80007708:	e9 ff 2a 00 	st.b [%a15]42,%d15
}


IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc)
{
    return (boolean)vadc->BRSMR.B.SCAN;
8000770c:	19 df 04 80 	ld.w %d15,[%a13]516
80007710:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
80007714:	e9 ff 28 00 	st.b [%a15]40,%d15
80007718:	3c 0c       	j 80007730 <IfxVadc_Adc_getGroupConfig+0x1de>
    }
    else
    {
        config->backgroundScanRequest.autoBackgroundScanEnabled   = FALSE;
8000771a:	82 0f       	mov %d15,0
8000771c:	e9 ff 28 00 	st.b [%a15]40,%d15
        config->backgroundScanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007720:	e9 ff 2c 00 	st.b [%a15]44,%d15
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
80007724:	e9 ff 2a 00 	st.b [%a15]42,%d15
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
80007728:	e9 ff 2d 00 	st.b [%a15]45,%d15
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
8000772c:	e9 ff 2b 00 	st.b [%a15]43,%d15


IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
{
    uint8 masterIndex = 0;
    masterIndex = vadcG->SYNCTR.B.STSEL;
80007730:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
80007734:	39 e7 08 00 	ld.bu %d7,[%a14]8
80007738:	8f 33 00 31 	and %d3,%d3,3
8000773c:	02 72       	mov %d2,%d7
IFX_INLINE IfxVadc_GroupId IfxVadc_Adc_getMasterId(IfxVadc_GroupId slave, IfxVadc_Adc_SYNCTR_STSEL masterIndex)
{
    uint8           i, idxOffset;
    IfxVadc_GroupId masterId = slave;

    if (masterIndex == 0)
8000773e:	df 03 1f 00 	jeq %d3,0,8000777c <IfxVadc_Adc_getGroupConfig+0x22a>
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007742:	7b 00 00 58 	movh %d5,32768
80007746:	1b 45 ec 50 	addi %d5,%d5,3780
8000774a:	13 87 20 55 	madd %d5,%d5,%d7,8
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
8000774e:	8b 47 60 42 	lt.u %d4,%d7,4
80007752:	82 02       	mov %d2,0
80007754:	ab 42 80 24 	sel %d2,%d4,%d2,4

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007758:	1a 25       	add %d15,%d5,%d2
8000775a:	60 f4       	mov.a %a4,%d15
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
8000775c:	82 04       	mov %d4,0

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
8000775e:	a0 32       	mov.a %a2,3
80007760:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
80007764:	8f f4 0f 61 	and %d6,%d4,255
80007768:	14 35       	ld.bu %d5,[%a3]
8000776a:	5f 35 06 80 	jne %d5,%d3,80007776 <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
8000776e:	42 62       	add %d2,%d6
80007770:	8f f2 0f 21 	and %d2,%d2,255
80007774:	3c 04       	j 8000777c <IfxVadc_Adc_getGroupConfig+0x22a>
80007776:	c2 14       	add %d4,1
80007778:	fc 24       	loop %a2,80007760 <IfxVadc_Adc_getGroupConfig+0x20e>
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
8000777a:	02 72       	mov %d2,%d7
8000777c:	28 52       	st.b [%a15]5,%d2


IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
{
    Ifx_VADC_GLOBCFG globCfg;
    globCfg.U = vadc->GLOBCFG.U;
8000777e:	19 d2 00 20 	ld.w %d2,[%a13]128

    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
80007782:	1b 07 01 f0 	addi %d15,%d7,16
80007786:	57 02 61 ff 	extr.u %d15,%d2,%d15,1
8000778a:	e9 ff 30 00 	st.b [%a15]48,%d15
8000778e:	00 90       	ret 

80007790 <IfxVadc_Adc_initChannel>:


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
80007790:	99 52 14 00 	ld.a %a2,[%a5]20
80007794:	d4 2e       	ld.a %a14,[%a2]
80007796:	99 2c 04 00 	ld.a %a12,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
8000779a:	39 28 08 00 	ld.bu %d8,[%a2]8
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
8000779e:	b5 42 04 00 	st.a [%a4]4,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800077a2:	02 84       	mov %d4,%d8
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
800077a4:	40 4d       	mov.aa %a13,%a4
    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800077a6:	40 e4       	mov.aa %a4,%a14
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
800077a8:	40 5f       	mov.aa %a15,%a5
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;
800077aa:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800077ae:	6d ff ab e6 	call 80004504 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
800077b2:	1b 09 06 20 	addi %d2,%d9,96
800077b6:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
800077ba:	0c fe       	ld.bu %d15,[%a15]14
800077bc:	54 22       	ld.w %d2,[%a2]
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800077be:	40 e4       	mov.aa %a4,%a14
800077c0:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
800077c4:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
800077c6:	54 22       	ld.w %d2,[%a2]
800077c8:	0c ff       	ld.bu %d15,[%a15]15
800077ca:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
800077ce:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
800077d0:	54 22       	ld.w %d2,[%a2]
800077d2:	39 ff 10 00 	ld.bu %d15,[%a15]16
800077d6:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
800077da:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
800077dc:	54 22       	ld.w %d2,[%a2]
800077de:	39 ff 11 00 	ld.bu %d15,[%a15]17
800077e2:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800077e6:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize)
{
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
800077e8:	54 22       	ld.w %d2,[%a2]
800077ea:	0c f1       	ld.bu %d15,[%a15]1
800077ec:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
800077f0:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass)
{
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
800077f2:	54 22       	ld.w %d2,[%a2]
800077f4:	0c fd       	ld.bu %d15,[%a15]13
800077f6:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
800077fa:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck)
{
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
800077fc:	54 22       	ld.w %d2,[%a2]
800077fe:	39 ff 13 00 	ld.bu %d15,[%a15]19
80007802:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
80007806:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage)
{
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
80007808:	54 22       	ld.w %d2,[%a2]
8000780a:	0c f3       	ld.bu %d15,[%a15]3
8000780c:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
80007810:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage)
{
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
80007812:	54 22       	ld.w %d2,[%a2]
80007814:	0c f0       	ld.bu %d15,[%a15]0
80007816:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
8000781a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode)
{
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
8000781c:	54 22       	ld.w %d2,[%a2]
8000781e:	39 ff 12 00 	ld.bu %d15,[%a15]18
80007822:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
80007826:	6c 20       	st.w [%a2]0,%d15
80007828:	1b 08 01 f0 	addi %d15,%d8,16
8000782c:	16 ff       	and %d15,255
8000782e:	02 f4       	mov %d4,%d15
80007830:	6d ff 6a e6 	call 80004504 <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
80007834:	08 23       	ld.bu %d3,[%a15]2
80007836:	82 12       	mov %d2,1
80007838:	0f 92 00 20 	sh %d2,%d2,%d9
8000783c:	f6 35       	jnz %d3,80007846 <IfxVadc_Adc_initChannel+0xb6>
}


IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U |= (1 << channelIndex);
8000783e:	19 c3 08 00 	ld.w %d3,[%a12]8
80007842:	a6 32       	or %d2,%d3
80007844:	3c 05       	j 8000784e <IfxVadc_Adc_initChannel+0xbe>
}


IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U &= ~(1 << channelIndex);
80007846:	19 c3 08 00 	ld.w %d3,[%a12]8
8000784a:	0f 23 e0 20 	andn %d2,%d3,%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
8000784e:	02 f4       	mov %d4,%d15
80007850:	59 c2 08 00 	st.w [%a12]8,%d2
80007854:	40 e4       	mov.aa %a4,%a14
80007856:	6d ff 3b e6 	call 800044cc <IfxVadc_disableAccess>
}


IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel)
{
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
8000785a:	79 d3 00 00 	ld.b %d3,[%a13]0
8000785e:	19 c5 20 40 	ld.w %d5,[%a12]288
80007862:	8f 23 00 f0 	sh %d15,%d3,2
80007866:	3b f0 00 20 	mov %d2,15
8000786a:	0f f2 00 20 	sh %d2,%d2,%d15
8000786e:	0f 25 e0 20 	andn %d2,%d5,%d2

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80007872:	08 b4       	ld.bu %d4,[%a15]11
80007874:	59 c2 20 40 	st.w [%a12]288,%d2
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80007878:	19 c2 20 40 	ld.w %d2,[%a12]288
8000787c:	0f f4 00 f0 	sh %d15,%d4,%d15
80007880:	a6 2f       	or %d15,%d2
80007882:	59 cf 20 40 	st.w [%a12]288,%d15

    if (config->channelPriority > 0)
80007886:	b9 ff 06 00 	ld.hu %d15,[%a15]6
8000788a:	6e 1f       	jz %d15,800078c8 <IfxVadc_Adc_initChannel+0x138>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
8000788c:	02 84       	mov %d4,%d8
8000788e:	08 b5       	ld.bu %d5,[%a15]11
80007890:	6d ff 6b e7 	call 80004766 <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
{
    vadcG->CEFCLR.U = 1 << channelId;
80007894:	79 f2 0c 00 	ld.b %d2,[%a15]12
80007898:	82 1f       	mov %d15,1
8000789a:	0f 2f 00 f0 	sh %d15,%d15,%d2
8000789e:	59 cf 10 40 	st.w [%a12]272,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800078a2:	54 22       	ld.w %d2,[%a2]
800078a4:	08 63       	ld.bu %d3,[%a15]6
800078a6:	8f f2 cf 21 	andn %d2,%d2,255
800078aa:	a6 32       	or %d2,%d3

        IfxVadc_clearChannelRequest(vadcG, config->channelId);
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
800078ac:	0c f9       	ld.bu %d15,[%a15]9
800078ae:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800078b0:	54 22       	ld.w %d2,[%a2]
800078b2:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
800078b6:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800078b8:	4c 20       	ld.w %d15,[%a2]0
800078ba:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
800078be:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800078c0:	4c 20       	ld.w %d15,[%a2]0
800078c2:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
800078c6:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
800078c8:	0c ff       	ld.bu %d15,[%a15]15
800078ca:	08 a2       	ld.bu %d2,[%a15]10
800078cc:	ff 8f 15 80 	jge.u %d15,8,800078f6 <IfxVadc_Adc_initChannel+0x166>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
800078d0:	19 c4 30 40 	ld.w %d4,[%a12]304
800078d4:	06 2f       	sh %d15,2
800078d6:	3b f0 00 30 	mov %d3,15
800078da:	0f f3 00 30 	sh %d3,%d3,%d15
800078de:	0f 34 e0 30 	andn %d3,%d4,%d3
800078e2:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
800078e6:	19 c3 30 40 	ld.w %d3,[%a12]304
800078ea:	0f f2 00 f0 	sh %d15,%d2,%d15
800078ee:	a6 3f       	or %d15,%d3
800078f0:	59 cf 30 40 	st.w [%a12]304,%d15
800078f4:	3c 14       	j 8000791c <IfxVadc_Adc_initChannel+0x18c>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
800078f6:	c2 8f       	add %d15,-8
800078f8:	19 c4 34 40 	ld.w %d4,[%a12]308
800078fc:	06 2f       	sh %d15,2
800078fe:	3b f0 00 30 	mov %d3,15
80007902:	0f f3 00 30 	sh %d3,%d3,%d15
80007906:	0f 34 e0 30 	andn %d3,%d4,%d3
8000790a:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
8000790e:	19 c3 34 40 	ld.w %d3,[%a12]308
80007912:	0f f2 00 f0 	sh %d15,%d2,%d15
80007916:	a6 3f       	or %d15,%d3
80007918:	59 cf 34 40 	st.w [%a12]308,%d15
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
8000791c:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80007920:	6e 24       	jz %d15,80007968 <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80007922:	02 84       	mov %d4,%d8
80007924:	08 a5       	ld.bu %d5,[%a15]10
80007926:	6d ff 20 e7 	call 80004766 <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
{
    vadcG->RCR[resultRegister].B.SRGEN = 1;
8000792a:	0c ff       	ld.bu %d15,[%a15]15
8000792c:	1b 0f 08 f0 	addi %d15,%d15,128
80007930:	90 c3       	addsc.a %a3,%a12,%d15,2
80007932:	4c 30       	ld.w %d15,[%a3]0
80007934:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80007938:	6c 30       	st.w [%a3]0,%d15
}


IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
{
    vadcG->REFCLR.U = 0x0000FFFFu;
8000793a:	bb f0 ff ff 	mov.u %d15,65535
8000793e:	59 cf 14 40 	st.w [%a12]276,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007942:	54 22       	ld.w %d2,[%a2]
80007944:	08 43       	ld.bu %d3,[%a15]4
80007946:	8f f2 cf 21 	andn %d2,%d2,255
8000794a:	a6 32       	or %d2,%d3

        IfxVadc_enableServiceRequest(vadcG, config->resultRegister);
        IfxVadc_clearAllResultRequests(vadcG);
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
8000794c:	0c f8       	ld.bu %d15,[%a15]8
8000794e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007950:	54 22       	ld.w %d2,[%a2]
80007952:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007956:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007958:	4c 20       	ld.w %d15,[%a2]0
8000795a:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
8000795e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007960:	4c 20       	ld.w %d15,[%a2]0
80007962:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007966:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007968:	40 e4       	mov.aa %a4,%a14
8000796a:	02 84       	mov %d4,%d8
8000796c:	6d ff b0 e5 	call 800044cc <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007970:	0c ff       	ld.bu %d15,[%a15]15
    channel->channel   = config->channelId;

    return Status;
}
80007972:	82 02       	mov %d2,0
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007974:	2c d1       	st.b [%a13]1,%d15
    channel->channel   = config->channelId;
80007976:	0c fc       	ld.bu %d15,[%a15]12
80007978:	2c d0       	st.b [%a13]0,%d15

    return Status;
}
8000797a:	00 90       	ret 

8000797c <IfxVadc_Adc_initChannelConfig>:
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
8000797c:	40 42       	mov.aa %a2,%a4
8000797e:	d2 02       	mov %e2,0
80007980:	89 22 48 01 	st.d [%a2+]8,%e2
80007984:	89 22 48 01 	st.d [%a2+]8,%e2
80007988:	89 22 48 01 	st.d [%a2+]8,%e2
    config->group = group;
8000798c:	b5 45 14 00 	st.a [%a4]20,%a5
80007990:	00 90       	ret 

80007992 <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007992:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007994:	39 58 04 00 	ld.bu %d8,[%a5]4


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007998:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
8000799a:	8f a8 00 90 	sh %d9,%d8,10
8000799e:	1b 09 48 f0 	addi %d15,%d9,1152
800079a2:	10 cd       	addsc.a %a13,%a12,%d15,0

    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
800079a4:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];

    /* check for write access */
    group->group   = vadcG;
800079a6:	b5 4d 04 00 	st.a [%a4]4,%a13
    group->module  = *config->module;
800079aa:	6c 40       	st.w [%a4]0,%d15
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
800079ac:	e9 48 08 00 	st.b [%a4]8,%d8
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
800079b0:	40 c4       	mov.aa %a4,%a12
    config->group = group;
}


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
800079b2:	40 5f       	mov.aa %a15,%a5
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
800079b4:	6d ff 5a e6 	call 80004668 <IfxVadc_getAdcAnalogFrequency>

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800079b8:	1b 08 01 f0 	addi %d15,%d8,16
800079bc:	8f ff 0f a1 	and %d10,%d15,255
800079c0:	40 c4       	mov.aa %a4,%a12
800079c2:	02 a4       	mov %d4,%d10
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
800079c4:	02 2b       	mov %d11,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800079c6:	6d ff 9f e5 	call 80004504 <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
800079ca:	39 ff 33 00 	ld.bu %d15,[%a15]51
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
800079ce:	40 d4       	mov.aa %a4,%a13
    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
800079d0:	5e 17       	jne %d15,1,800079de <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
800079d2:	82 14       	mov %d4,1
800079d4:	39 f5 26 00 	ld.bu %d5,[%a15]38
800079d8:	39 f6 27 00 	ld.bu %d6,[%a15]39
800079dc:	3c 03       	j 800079e2 <IfxVadc_Adc_initGroup+0x50>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
800079de:	d2 04       	mov %e4,0
800079e0:	82 06       	mov %d6,0
800079e2:	82 07       	mov %d7,0
800079e4:	6d ff 06 e8 	call 800049f0 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
800079e8:	39 ff 34 00 	ld.bu %d15,[%a15]52
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
800079ec:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
800079ee:	5e 17       	jne %d15,1,800079fc <IfxVadc_Adc_initGroup+0x6a>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
800079f0:	82 14       	mov %d4,1
800079f2:	39 f5 1e 00 	ld.bu %d5,[%a15]30
800079f6:	39 f6 1f 00 	ld.bu %d6,[%a15]31
800079fa:	3c 03       	j 80007a00 <IfxVadc_Adc_initGroup+0x6e>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
800079fc:	d2 04       	mov %e4,0
800079fe:	82 06       	mov %d6,0
80007a00:	82 17       	mov %d7,1
80007a02:	6d ff f7 e7 	call 800049f0 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007a06:	39 ff 35 00 	ld.bu %d15,[%a15]53
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007a0a:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007a0c:	5e 17       	jne %d15,1,80007a1a <IfxVadc_Adc_initGroup+0x88>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007a0e:	82 14       	mov %d4,1
80007a10:	39 f5 2e 00 	ld.bu %d5,[%a15]46
80007a14:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007a18:	3c 03       	j 80007a1e <IfxVadc_Adc_initGroup+0x8c>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
80007a1a:	d2 04       	mov %e4,0
80007a1c:	82 06       	mov %d6,0
80007a1e:	82 27       	mov %d7,2
80007a20:	6d ff e8 e7 	call 800049f0 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
80007a24:	0c f5       	ld.bu %d15,[%a15]5
80007a26:	be 8b       	jeq %d15,%d8,80007a5c <IfxVadc_Adc_initGroup+0xca>
}


IFX_INLINE IfxVadc_Adc_SYNCTR_STSEL IfxVadc_Adc_getMasterKernelIndex(IfxVadc_GroupId slave, IfxVadc_GroupId master)
{
    return IfxVadc_Adc_masterIndex[slave][master];
80007a28:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007a2c:	91 00 00 28 	movh.a %a2,32768
80007a30:	d9 22 c4 b0 	lea %a2,[%a2]3780 <80000ec4 <IfxVadc_Adc_masterIndex>>
80007a34:	10 22       	addsc.a %a2,%a2,%d15,0
80007a36:	0c 20       	ld.bu %d15,[%a2]0
}


IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex)
{
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80007a38:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007a3c:	8f 3f 00 21 	and %d2,%d15,3
80007a40:	19 23 40 30 	ld.w %d3,[%a2]1216
80007a44:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007a48:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007a4c:	19 23 40 30 	ld.w %d3,[%a2]1216
80007a50:	da 08       	mov %d15,8
80007a52:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007a56:	a6 3f       	or %d15,%d3
80007a58:	59 2f 40 30 	st.w [%a2]1216,%d15
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007a5c:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007a60:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007a64:	8f 3f c0 f1 	andn %d15,%d15,3
80007a68:	59 2f 40 20 	st.w [%a2]1152,%d15
}


IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength)
{
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
80007a6c:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007a70:	19 22 40 20 	ld.w %d2,[%a2]1152
80007a74:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007a78:	59 2f 40 20 	st.w [%a2]1152,%d15
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007a7c:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007a80:	df 1f 5a 80 	jne %d15,1,80007b34 <IfxVadc_Adc_initGroup+0x1a2>
    {
        const IfxVadc_Adc_QueueConfig *queueSlot = &config->queueRequest;

        /* configure external Trigger if enabled */
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007a84:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007a88:	6e 28       	jz %d15,80007ad8 <IfxVadc_Adc_initGroup+0x146>
}


IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80007a8a:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007a8e:	96 04       	or %d15,4
80007a90:	59 2f 44 40 	st.w [%a2]1284,%d15


IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U        = vadcG->QCTRL0.U;
80007a94:	19 23 40 40 	ld.w %d3,[%a2]1280
        {
            /* enable external trigger */
            IfxVadc_enableQueueSlotExternalTrigger(vadcG);
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
80007a98:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007a9c:	39 ff 23 00 	ld.bu %d15,[%a15]35
    qctrl0.B.XTWC   = 1;
80007aa0:	b7 13 81 37 	insert %d3,%d3,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80007aa4:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    qctrl0.B.XTSEL  = triggerSource;
80007aa8:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80007aac:	59 23 40 40 	st.w [%a2]1280,%d3

            /* if last input is used the trigger input selection is extend by Gating inputs */
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80007ab0:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007ab4:	8b ff 20 f2 	ne %d15,%d15,15
80007ab8:	ee 16       	jnz %d15,80007ae4 <IfxVadc_Adc_initGroup+0x152>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007aba:	19 23 40 40 	ld.w %d3,[%a2]1280
            {
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007abe:	39 ff 22 00 	ld.bu %d15,[%a15]34
    qctrl0.B.GTWC      = 1;
80007ac2:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007ac6:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007aca:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007ace:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007ad2:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007ad6:	3c 05       	j 80007ae0 <IfxVadc_Adc_initGroup+0x14e>
}


IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
80007ad8:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007adc:	8f 4f c0 f1 	andn %d15,%d15,4
80007ae0:	59 2f 44 40 	st.w [%a2]1284,%d15
            /* disable external trigger */
            IfxVadc_disableQueueSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007ae4:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007ae8:	8b ff 00 f2 	eq %d15,%d15,15
80007aec:	ee 15       	jnz %d15,80007b16 <IfxVadc_Adc_initGroup+0x184>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007aee:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80007af2:	39 f2 22 00 	ld.bu %d2,[%a15]34
80007af6:	19 23 40 40 	ld.w %d3,[%a2]1280
80007afa:	39 ff 24 00 	ld.bu %d15,[%a15]36
    qctrl0.B.GTWC      = 1;
80007afe:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007b02:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007b06:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007b0a:	19 22 44 40 	ld.w %d2,[%a2]1284
80007b0e:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007b12:	59 2f 44 40 	st.w [%a2]1284,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80007b16:	39 f2 20 00 	ld.bu %d2,[%a15]32
}


IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
{
    vadcG->QMR0.B.FLUSH = flushQueue;
80007b1a:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007b1e:	3b 00 40 f0 	mov %d15,1024
80007b22:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007b26:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007b2a:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007b2e:	a6 2f       	or %d15,%d2
80007b30:	59 2f 44 40 	st.w [%a2]1284,%d15
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007b34:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007b38:	df 1f 5a 80 	jne %d15,1,80007bec <IfxVadc_Adc_initGroup+0x25a>
    {
        const IfxVadc_Adc_ScanConfig *scanSlot = &config->scanRequest;

        /* configure external Trigger if enabled */
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007b3c:	39 ff 1d 00 	ld.bu %d15,[%a15]29
}


IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
80007b40:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007b44:	6e 28       	jz %d15,80007b94 <IfxVadc_Adc_initGroup+0x202>
80007b46:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007b4a:	96 04       	or %d15,4
80007b4c:	59 2f 64 40 	st.w [%a2]1316,%d15


IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U        = vadcG->ASCTRL.U;
80007b50:	19 23 60 40 	ld.w %d3,[%a2]1312
        {
            /* enable external trigger */
            IfxVadc_enableScanSlotExternalTrigger(vadcG);

            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80007b54:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007b58:	39 ff 1b 00 	ld.bu %d15,[%a15]27
    asctrl.B.XTWC   = 1;
80007b5c:	b7 13 81 37 	insert %d3,%d3,1,15,1
    asctrl.B.XTMODE = triggerMode;
80007b60:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    asctrl.B.XTSEL  = triggerSource;
80007b64:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->ASCTRL.U = asctrl.U;
80007b68:	59 23 60 40 	st.w [%a2]1312,%d3

            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007b6c:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007b70:	8b ff 20 f2 	ne %d15,%d15,15
80007b74:	ee 16       	jnz %d15,80007ba0 <IfxVadc_Adc_initGroup+0x20e>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007b76:	19 23 60 40 	ld.w %d3,[%a2]1312
            {
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007b7a:	39 ff 1a 00 	ld.bu %d15,[%a15]26
    asctrl.B.GTWC      = 1;
80007b7e:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007b82:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007b86:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007b8a:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007b8e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007b92:	3c 05       	j 80007b9c <IfxVadc_Adc_initGroup+0x20a>
}


IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
80007b94:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007b98:	8f 4f c0 f1 	andn %d15,%d15,4
80007b9c:	59 2f 64 40 	st.w [%a2]1316,%d15
        {
            IfxVadc_disableScanSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007ba0:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007ba4:	8b ff 00 f2 	eq %d15,%d15,15
80007ba8:	ee 15       	jnz %d15,80007bd2 <IfxVadc_Adc_initGroup+0x240>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007baa:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80007bae:	39 f2 1a 00 	ld.bu %d2,[%a15]26
80007bb2:	19 23 60 40 	ld.w %d3,[%a2]1312
80007bb6:	39 ff 1c 00 	ld.bu %d15,[%a15]28
    asctrl.B.GTWC      = 1;
80007bba:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007bbe:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007bc2:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007bc6:	19 22 64 40 	ld.w %d2,[%a2]1316
80007bca:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007bce:	59 2f 64 40 	st.w [%a2]1316,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80007bd2:	39 ff 18 00 	ld.bu %d15,[%a15]24
}


IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable)
{
    vadcG->ASMR.B.SCAN = autoscanEnable;
80007bd6:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007bda:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007bde:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007be2:	8f 0f c1 f1 	andn %d15,%d15,16
80007be6:	a6 2f       	or %d15,%d2
80007be8:	59 2f 64 40 	st.w [%a2]1316,%d15
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007bec:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007bf0:	df 1f 4f 80 	jne %d15,1,80007c8e <IfxVadc_Adc_initGroup+0x2fc>
    {
        const IfxVadc_Adc_BackgroundScanConfig *backgroundScanSlot = &config->backgroundScanRequest;

        /* configure external Trigger if enabled */
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007bf4:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007bf8:	6e 29       	jz %d15,80007c4a <IfxVadc_Adc_initGroup+0x2b8>
}


IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80007bfa:	19 cf 04 80 	ld.w %d15,[%a12]516
80007bfe:	96 04       	or %d15,4
80007c00:	59 cf 04 80 	st.w [%a12]516,%d15


IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U        = vadc->BRSCTRL.U;
80007c04:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_enableBackgroundScanSlotExternalTrigger(vadc);

            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
80007c08:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007c0c:	39 ff 2b 00 	ld.bu %d15,[%a15]43
    brsctrl.B.XTWC   = 1;
80007c10:	b7 13 81 37 	insert %d3,%d3,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80007c14:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    brsctrl.B.XTSEL  = triggerSource;
80007c18:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80007c1c:	59 c3 00 80 	st.w [%a12]512,%d3

            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007c20:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007c24:	8b ff 20 f2 	ne %d15,%d15,15
80007c28:	ee 11       	jnz %d15,80007c4a <IfxVadc_Adc_initGroup+0x2b8>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007c2a:	19 c3 00 80 	ld.w %d3,[%a12]512
            {
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007c2e:	39 ff 2a 00 	ld.bu %d15,[%a15]42
    brsctrl.B.GTWC     = 1;
80007c32:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007c36:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80007c3a:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007c3e:	19 cf 04 80 	ld.w %d15,[%a12]516
80007c42:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007c46:	59 cf 04 80 	st.w [%a12]516,%d15
        {
            /* do nothing */
        }

        /* configure Gating if enabled */
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007c4a:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007c4e:	8b ff 00 f2 	eq %d15,%d15,15
80007c52:	ee 13       	jnz %d15,80007c78 <IfxVadc_Adc_initGroup+0x2e6>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007c54:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80007c58:	39 f2 2a 00 	ld.bu %d2,[%a15]42
    brsctrl.B.GTWC     = 1;
80007c5c:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007c60:	37 23 04 38 	insert %d3,%d3,%d2,16,4
80007c64:	39 ff 2c 00 	ld.bu %d15,[%a15]44
    vadc->BRSCTRL.U    = brsctrl.U;
80007c68:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007c6c:	19 c2 04 80 	ld.w %d2,[%a12]516
80007c70:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007c74:	59 cf 04 80 	st.w [%a12]516,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80007c78:	39 ff 28 00 	ld.bu %d15,[%a15]40
}


IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable)
{
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80007c7c:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007c80:	19 cf 04 80 	ld.w %d15,[%a12]516
80007c84:	8f 0f c1 f1 	andn %d15,%d15,16
80007c88:	a6 2f       	or %d15,%d2
80007c8a:	59 cf 04 80 	st.w [%a12]516,%d15
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
80007c8e:	0c f5       	ld.bu %d15,[%a15]5
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007c90:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c94:	3a 8f       	eq %d15,%d15,%d8
80007c96:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007c9a:	19 2f 40 20 	ld.w %d15,[%a2]1152
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
80007c9e:	02 84       	mov %d4,%d8
80007ca0:	8f 3f c0 f1 	andn %d15,%d15,3
80007ca4:	a6 2f       	or %d15,%d2
80007ca6:	59 2f 40 20 	st.w [%a2]1152,%d15
80007caa:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007cae:	40 c4       	mov.aa %a4,%a12
80007cb0:	6d ff 69 e4 	call 80004582 <IfxVadc_disablePostCalibration>
}


IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
80007cb4:	8f 88 00 80 	sh %d8,%d8,8
80007cb8:	82 05       	mov %d5,0
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80007cba:	3b f0 0f 40 	mov %d4,255

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
80007cbe:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007cc2:	0b 58 00 20 	add %d2,%d8,%d5
80007cc6:	1b 82 12 20 	addi %d2,%d2,296
80007cca:	0c 2c       	ld.bu %d15,[%a2]12
80007ccc:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007cd0:	54 22       	ld.w %d2,[%a2]
80007cd2:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007cd6:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007cd8:	9a 15       	add %d15,%d5,1
80007cda:	d0 f2       	addsc.a %a2,%a15,%d15,3

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007cdc:	54 23       	ld.w %d3,[%a2]
80007cde:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007ce2:	4b 03 71 31 	ftouz %d3,%d3
80007ce6:	c2 e3       	add %d3,-2

    if (ticks > 31)
80007ce8:	8b 03 62 f2 	lt.u %d15,%d3,32
80007cec:	ee 04       	jnz %d15,80007cf4 <IfxVadc_Adc_initGroup+0x362>
    {
        ticks = (ticks / 16) + 15;
80007cee:	06 c3       	sh %d3,-4
80007cf0:	1b f3 00 30 	addi %d3,%d3,15
80007cf4:	0b 43 90 31 	min.u %d3,%d3,%d4
}


IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007cf8:	1a 58       	add %d15,%d8,%d5
80007cfa:	1b 8f 12 f0 	addi %d15,%d15,296
80007cfe:	90 c2       	addsc.a %a2,%a12,%d15,2
80007d00:	4c 20       	ld.w %d15,[%a2]0
80007d02:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007d06:	74 23       	st.w [%a2],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007d08:	df 15 04 00 	jeq %d5,1,80007d10 <IfxVadc_Adc_initGroup+0x37e>
80007d0c:	82 15       	mov %d5,1
80007d0e:	3c d8       	j 80007cbe <IfxVadc_Adc_initGroup+0x32c>
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007d10:	40 c4       	mov.aa %a4,%a12
80007d12:	02 a4       	mov %d4,%d10
80007d14:	6d ff dc e3 	call 800044cc <IfxVadc_disableAccess>

    return status;
}
80007d18:	82 02       	mov %d2,0
80007d1a:	00 90       	ret 

80007d1c <IfxVadc_Adc_initGroupConfig>:
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
80007d1c:	40 42       	mov.aa %a2,%a4
80007d1e:	7b 60 58 f3 	movh %d15,13702
80007d22:	d2 02       	mov %e2,0
80007d24:	a0 6f       	mov.a %a15,6
80007d26:	89 22 48 01 	st.d [%a2+]8,%e2
80007d2a:	fc fe       	loop %a15,80007d26 <IfxVadc_Adc_initGroupConfig+0xa>
80007d2c:	1b df 7b f3 	addi %d15,%d15,14269
80007d30:	6c 42       	st.w [%a4]8,%d15
80007d32:	6c 44       	st.w [%a4]16,%d15
80007d34:	82 1f       	mov %d15,1
80007d36:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007d3a:	e9 4f 20 00 	st.b [%a4]32,%d15
80007d3e:	e9 4f 26 00 	st.b [%a4]38,%d15
80007d42:	e9 4f 2e 00 	st.b [%a4]46,%d15
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80007d46:	f4 45       	st.a [%a4],%a5
80007d48:	00 90       	ret 

80007d4a <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
80007d4a:	cc 50       	ld.a %a15,[%a5]0
    config->disablePostCalibration = FALSE;
}


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
80007d4c:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007d4e:	ec 40       	st.a [%a4]0,%a15
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007d50:	6d ff 0f fa 	call 8000716e <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007d54:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007d56:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80007d58:	6d ff 0b f9 	call 80006f6e <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80007d5c:	82 02       	mov %d2,0
80007d5e:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007d60:	02 f4       	mov %d4,%d15
80007d62:	6d ff 3b fa 	call 800071d8 <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80007d66:	40 f4       	mov.aa %a4,%a15
80007d68:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007d6c:	6d ff 30 e6 	call 800049cc <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007d70:	19 c4 18 00 	ld.w %d4,[%a12]24
80007d74:	40 f4       	mov.aa %a4,%a15
80007d76:	4b 04 71 41 	ftouz %d4,%d4
    {
        return IfxVadc_Status_notInitialised;
80007d7a:	82 1f       	mov %d15,1
    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007d7c:	6d ff 42 e5 	call 80004800 <IfxVadc_initializeFAdcI>
80007d80:	df 02 57 00 	jeq %d2,0,80007e2e <IfxVadc_Adc_initModule+0xe4>
    {
        /* do nothing */
    }

    /* Set digital Frequency */
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
80007d84:	19 c4 14 00 	ld.w %d4,[%a12]20
80007d88:	40 f4       	mov.aa %a4,%a15
80007d8a:	4b 04 71 41 	ftouz %d4,%d4
80007d8e:	6d ff 24 e5 	call 800047d6 <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007d92:	40 f4       	mov.aa %a4,%a15
80007d94:	6d ff 6a e4 	call 80004668 <IfxVadc_getAdcAnalogFrequency>
80007d98:	82 03       	mov %d3,0
80007d9a:	3b f0 0f 60 	mov %d6,255

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
    {
        /* configure ADC channel resolution ( conversion mode ) */
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
80007d9e:	9a 13       	add %d15,%d3,1
}


IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
80007da0:	1b 83 02 40 	addi %d4,%d3,40
80007da4:	d0 c2       	addsc.a %a2,%a12,%d15,3
80007da6:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80007daa:	0c 20       	ld.bu %d15,[%a2]0
80007dac:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80007dae:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
80007db2:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
80007db6:	6c 30       	st.w [%a3]0,%d15

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007db8:	4c 21       	ld.w %d15,[%a2]4
80007dba:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80007dbe:	4b 0f 71 f1 	ftouz %d15,%d15
80007dc2:	c2 ef       	add %d15,-2

    if (ticks > 31)
80007dc4:	8b 0f 62 52 	lt.u %d5,%d15,32
80007dc8:	f6 54       	jnz %d5,80007dd0 <IfxVadc_Adc_initModule+0x86>
    {
        ticks = (ticks / 16) + 15;
80007dca:	06 cf       	sh %d15,-4
80007dcc:	1b ff 00 f0 	addi %d15,%d15,15
80007dd0:	0b 6f 90 f1 	min.u %d15,%d15,%d6
}


IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007dd4:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80007dd8:	54 24       	ld.w %d4,[%a2]
80007dda:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80007dde:	6c 20       	st.w [%a2]0,%d15
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
80007de0:	df 13 04 00 	jeq %d3,1,80007de8 <IfxVadc_Adc_initModule+0x9e>
80007de4:	82 13       	mov %d3,1
80007de6:	3c dc       	j 80007d9e <IfxVadc_Adc_initModule+0x54>
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007de8:	39 c2 20 00 	ld.bu %d2,[%a12]32

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
80007dec:	82 0f       	mov %d15,0
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007dee:	df 12 20 80 	jne %d2,1,80007e2e <IfxVadc_Adc_initModule+0xe4>
80007df2:	82 08       	mov %d8,0
80007df4:	1b 08 01 f0 	addi %d15,%d8,16
80007df8:	16 ff       	and %d15,255
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007dfa:	02 f4       	mov %d4,%d15
80007dfc:	40 f4       	mov.aa %a4,%a15
80007dfe:	6d ff 83 e3 	call 80004504 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007e02:	8f a8 00 20 	sh %d2,%d8,10
80007e06:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
80007e0a:	c2 18       	add %d8,1
80007e0c:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007e10:	02 f4       	mov %d4,%d15
80007e12:	8f 32 40 21 	or %d2,%d2,3
80007e16:	59 22 40 20 	st.w [%a2]1152,%d2
80007e1a:	40 f4       	mov.aa %a4,%a15

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007e1c:	8b 88 20 f2 	ne %d15,%d8,8
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007e20:	6d ff 56 e3 	call 800044cc <IfxVadc_disableAccess>

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007e24:	ee e8       	jnz %d15,80007df4 <IfxVadc_Adc_initModule+0xaa>
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
        }

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
80007e26:	40 f4       	mov.aa %a4,%a15
80007e28:	6d ff 19 e6 	call 80004a5a <IfxVadc_startupCalibration>
    }

    return status;
80007e2c:	82 0f       	mov %d15,0
}
80007e2e:	02 f2       	mov %d2,%d15
80007e30:	00 90       	ret 

80007e32 <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007e32:	7b 90 b9 f4 	movh %d15,19353
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80007e36:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007e38:	1b 0f 68 f9 	addi %d15,%d15,-27008
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80007e3c:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80007e3e:	e8 05       	st.a [%a15]0,%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007e40:	68 6f       	st.w [%a15]24,%d15

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
80007e42:	6d ff 1f e4 	call 80004680 <IfxVadc_getAdcDigitalFrequency>
80007e46:	68 52       	st.w [%a15]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
80007e48:	6d ff cf f0 	call 80005fe6 <IfxScuCcu_getSpbFrequency>
80007e4c:	68 72       	st.w [%a15]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
    config->globalInputClass[0].sampleTime = 1.0e-6;
80007e4e:	7b 60 58 23 	movh %d2,13702
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80007e52:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
80007e54:	1b d2 7b 23 	addi %d2,%d2,14269
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80007e58:	28 8f       	st.b [%a15]8,%d15
    config->globalInputClass[0].sampleTime = 1.0e-6;
80007e5a:	68 12       	st.w [%a15]4,%d2
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
80007e5c:	e9 ff 10 00 	st.b [%a15]16,%d15
    config->globalInputClass[1].sampleTime = 1.0e-6;
80007e60:	68 32       	st.w [%a15]12,%d2
    config->startupCalibration             = FALSE;
80007e62:	e9 ff 20 00 	st.b [%a15]32,%d15
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
80007e66:	e9 ff 21 00 	st.b [%a15]33,%d15
80007e6a:	00 90       	ret 

80007e6c <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
80007e6c:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80007e6e:	82 0f       	mov %d15,0
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80007e70:	40 a2       	mov.aa %a2,%sp


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80007e72:	2c 49       	st.b [%a4]9,%d15
    emuxConfig->groupId               = IfxVadc_GroupId_0;
80007e74:	2c 48       	st.b [%a4]8,%d15
    emuxConfig->emuxInterface         = IfxVadc_EmuxInterface_0;
80007e76:	2c 4a       	st.b [%a4]10,%d15
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
80007e78:	2c 45       	st.b [%a4]5,%d15
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
80007e7a:	2c 46       	st.b [%a4]6,%d15
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
80007e7c:	2c 47       	st.b [%a4]7,%d15
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
80007e7e:	2c 44       	st.b [%a4]4,%d15
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
80007e80:	e9 4f 1c 00 	st.b [%a4]28,%d15
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80007e84:	d2 02       	mov %e2,0
80007e86:	89 22 48 01 	st.d [%a2+]8,%e2
80007e8a:	89 22 48 01 	st.d [%a2+]8,%e2
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
80007e8e:	3b 00 f8 ff 	mov %d15,-128
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
80007e92:	f4 45       	st.a [%a4],%a5
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80007e94:	40 af       	mov.aa %a15,%sp
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
80007e96:	2c ac       	st.b [%sp]12,%d15
80007e98:	d9 44 0c 00 	lea %a4,[%a4]12
80007e9c:	09 f2 48 01 	ld.d %e2,[%a15+]8
80007ea0:	89 42 48 01 	st.d [%a4+]8,%e2
80007ea4:	09 f2 48 01 	ld.d %e2,[%a15+]8
80007ea8:	89 42 48 01 	st.d [%a4+]8,%e2
80007eac:	00 90       	ret 

80007eae <IfxVadc_Adc_initExternalMultiplexerMode>:


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
80007eae:	0c 58       	ld.bu %d15,[%a5]8
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
80007eb0:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
80007eb2:	8f af 00 20 	sh %d2,%d15,10
80007eb6:	1b 02 48 20 	addi %d2,%d2,1152
80007eba:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
}


IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group)
{
    if (emuxInterface == IfxVadc_EmuxInterface_0)
80007ebe:	39 52 0a 00 	ld.bu %d2,[%a5]10
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
80007ec2:	40 4c       	mov.aa %a12,%a4
80007ec4:	40 5f       	mov.aa %a15,%a5
80007ec6:	16 0f       	and %d15,15
80007ec8:	f6 2a       	jnz %d2,80007edc <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
80007eca:	19 42 30 f0 	ld.w %d2,[%a4]1008
80007ece:	8f f2 c0 21 	andn %d2,%d2,15
80007ed2:	a6 2f       	or %d15,%d2
80007ed4:	59 cf 30 f0 	st.w [%a12]1008,%d15
80007ed8:	82 0f       	mov %d15,0
80007eda:	3c 07       	j 80007ee8 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
    }
    else
    {
        vadc->EMUXSEL.B.EMUXGRP1 = group;
80007edc:	19 42 30 f0 	ld.w %d2,[%a4]1008
80007ee0:	06 4f       	sh %d15,4
80007ee2:	8f 02 cf 21 	andn %d2,%d2,240
80007ee6:	3c f6       	j 80007ed2 <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
    {
        if (emuxControl->emuxOutPinConfig.pins[count] != NULL_PTR)
80007ee8:	90 f2       	addsc.a %a2,%a15,%d15,2
80007eea:	99 2d 0c 00 	ld.a %a13,[%a2]12
80007eee:	bd 0d 19 00 	jz.a %a13,80007f20 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
80007ef2:	39 d3 0c 00 	ld.bu %d3,[%a13]12
80007ef6:	39 f2 18 00 	ld.bu %d2,[%a15]24
80007efa:	99 d4 04 00 	ld.a %a4,[%a13]4
80007efe:	0f 23 a0 50 	or %d5,%d3,%d2
80007f02:	39 d4 08 00 	ld.bu %d4,[%a13]8
80007f06:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
80007f0a:	39 f8 19 00 	ld.bu %d8,[%a15]25
80007f0e:	6d ff c4 ed 	call 80005a96 <IfxPort_setPinMode>


IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
    IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
80007f12:	99 d4 04 00 	ld.a %a4,[%a13]4
80007f16:	39 d4 08 00 	ld.bu %d4,[%a13]8
80007f1a:	02 85       	mov %d5,%d8
80007f1c:	6d ff 3b ee 	call 80005b92 <IfxPort_setPinPadDriver>
80007f20:	c2 1f       	add %d15,1
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
80007f22:	df 3f e3 ff 	jne %d15,3,80007ee8 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
        }
    }

    IfxVadc_configExternalMultiplexerMode(vadc, vadcG, emuxControl->mode, emuxControl->channels, emuxControl->startChannel, emuxControl->code, emuxControl->sampleTimeControl, emuxControl->channelSelectionStyle);
80007f26:	0c f7       	ld.bu %d15,[%a15]7
80007f28:	08 44       	ld.bu %d4,[%a15]4
80007f2a:	78 00       	st.w [%sp]0,%d15
80007f2c:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80007f30:	08 95       	ld.bu %d5,[%a15]9
80007f32:	08 56       	ld.bu %d6,[%a15]5
80007f34:	08 67       	ld.bu %d7,[%a15]6
80007f36:	78 01       	st.w [%sp]4,%d15
80007f38:	40 c4       	mov.aa %a4,%a12
80007f3a:	40 e5       	mov.aa %a5,%a14
80007f3c:	1d ff 00 e3 	j 8000453c <IfxVadc_configExternalMultiplexerMode>

80007f40 <Ifx_CircularBuffer_get32>:

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80007f40:	cc 40       	ld.a %a15,[%a4]0
80007f42:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 4;

    if (buffer->index >= buffer->length)
80007f46:	b9 43 06 00 	ld.hu %d3,[%a4]6

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80007f4a:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
80007f4c:	c2 4f       	add %d15,4
80007f4e:	37 0f 70 f0 	extr.u %d15,%d15,0,16

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80007f52:	48 02       	ld.w %d2,[%a15]0

    buffer->index += 4;
80007f54:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80007f56:	3f 3f 04 80 	jlt.u %d15,%d3,80007f5e <Ifx_CircularBuffer_get32+0x1e>
    {
        buffer->index = 0;
80007f5a:	82 0f       	mov %d15,0
80007f5c:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80007f5e:	00 90       	ret 

80007f60 <Ifx_CircularBuffer_get16>:


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80007f60:	cc 40       	ld.a %a15,[%a4]0
80007f62:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 2;

    if (buffer->index >= buffer->length)
80007f66:	b9 43 06 00 	ld.hu %d3,[%a4]6
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80007f6a:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
80007f6c:	c2 2f       	add %d15,2
80007f6e:	37 0f 70 f0 	extr.u %d15,%d15,0,16
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80007f72:	b9 f2 00 00 	ld.hu %d2,[%a15]0

    buffer->index += 2;
80007f76:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80007f78:	3f 3f 04 80 	jlt.u %d15,%d3,80007f80 <Ifx_CircularBuffer_get16+0x20>
    {
        buffer->index = 0;
80007f7c:	82 0f       	mov %d15,0
80007f7e:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80007f80:	00 90       	ret 

80007f82 <Ifx_CircularBuffer_addDataIncr>:
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80007f82:	cc 40       	ld.a %a15,[%a4]0
80007f84:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    buffer->index                          += 4;

    if (buffer->index >= buffer->length)
80007f88:	b9 42 06 00 	ld.hu %d2,[%a4]6
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80007f8c:	90 ff       	addsc.a %a15,%a15,%d15,2
    buffer->index                          += 4;
80007f8e:	c2 4f       	add %d15,4
80007f90:	37 0f 70 f0 	extr.u %d15,%d15,0,16
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80007f94:	68 04       	st.w [%a15]0,%d4
    buffer->index                          += 4;
80007f96:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80007f98:	3f 2f 04 80 	jlt.u %d15,%d2,80007fa0 <Ifx_CircularBuffer_addDataIncr+0x1e>
    {
        buffer->index = 0;
80007f9c:	82 0f       	mov %d15,0
80007f9e:	ac 42       	st.h [%a4]4,%d15
80007fa0:	00 90       	ret 

80007fa2 <Ifx_CircularBuffer_read8>:
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
80007fa2:	80 52       	mov.d %d2,%a5
80007fa4:	37 04 70 40 	extr.u %d4,%d4,0,16
80007fa8:	8f 02 60 31 	nor %d3,%d2,0
80007fac:	1a 42       	add %d15,%d2,%d4
80007fae:	42 3f       	add %d15,%d3
80007fb0:	42 23       	add %d3,%d2
80007fb2:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
80007fb4:	40 5f       	mov.aa %a15,%a5
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80007fb6:	82 06       	mov %d6,0
80007fb8:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80007fbc:	6f f3 03 00 	jz.t %d3,15,80007fc2 <Ifx_CircularBuffer_read8+0x20>
80007fc0:	82 0f       	mov %d15,0
    uint8 *Dest = (uint8 *)data;

    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
80007fc2:	b9 43 04 00 	ld.hu %d3,[%a4]4
80007fc6:	d4 42       	ld.a %a2,[%a4]
80007fc8:	60 33       	mov.a %a3,%d3
80007fca:	30 32       	add.a %a2,%a3
80007fcc:	14 23       	ld.bu %d3,[%a2]
80007fce:	24 f3       	st.b [%a15+],%d3
        Dest  = &Dest[1];
        buffer->index++;
80007fd0:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
80007fd4:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
        Dest  = &Dest[1];
        buffer->index++;
80007fd8:	c2 13       	add %d3,1
80007fda:	37 03 70 30 	extr.u %d3,%d3,0,16
80007fde:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
80007fe2:	3f 53 04 80 	jlt.u %d3,%d5,80007fea <Ifx_CircularBuffer_read8+0x48>
        {
            buffer->index = 0;
80007fe6:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
80007fea:	9f 0f ec ff 	jned %d15,0,80007fc2 <Ifx_CircularBuffer_read8+0x20>
80007fee:	c2 f4       	add %d4,-1
80007ff0:	37 04 50 40 	extr %d4,%d4,0,16
80007ff4:	8b 04 40 43 	max %d4,%d4,0
80007ff8:	c2 14       	add %d4,1

    return Dest;
}
80007ffa:	1a 42       	add %d15,%d2,%d4
80007ffc:	60 f2       	mov.a %a2,%d15
80007ffe:	00 90       	ret 

80008000 <Ifx_CircularBuffer_read32>:


void *Ifx_CircularBuffer_read32(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
80008000:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
80008004:	d4 42       	ld.a %a2,[%a4]
80008006:	1b f4 ff 5f 	addi %d5,%d4,-1
8000800a:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
8000800e:	b9 46 06 00 	ld.hu %d6,[%a4]6
80008012:	82 03       	mov %d3,0
80008014:	37 05 70 20 	extr.u %d2,%d5,0,16
80008018:	6f f5 03 00 	jz.t %d5,15,8000801e <Ifx_CircularBuffer_read32+0x1e>
8000801c:	82 02       	mov %d2,0
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
8000801e:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
80008020:	c2 4f       	add %d15,4
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
80008022:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
80008024:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
80008028:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
8000802c:	c2 13       	add %d3,1
8000802e:	68 05       	st.w [%a15]0,%d5
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008030:	0b 6f 30 51 	lt.u %d5,%d15,%d6
80008034:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
80008038:	9f 02 f3 ff 	jned %d2,0,8000801e <Ifx_CircularBuffer_read32+0x1e>
8000803c:	c2 f4       	add %d4,-1
8000803e:	37 04 50 40 	extr %d4,%d4,0,16
80008042:	ac 42       	st.h [%a4]4,%d15
80008044:	8b 04 40 43 	max %d4,%d4,0
80008048:	c2 14       	add %d4,1

    return Dest;
}
8000804a:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
8000804e:	00 90       	ret 

80008050 <Ifx_CircularBuffer_write8>:


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008050:	80 52       	mov.d %d2,%a5
80008052:	37 04 70 40 	extr.u %d4,%d4,0,16
80008056:	8f 02 60 31 	nor %d3,%d2,0
8000805a:	1a 42       	add %d15,%d2,%d4
8000805c:	42 3f       	add %d15,%d3
8000805e:	42 23       	add %d3,%d2
80008060:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
80008062:	40 5f       	mov.aa %a15,%a5
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008064:	82 06       	mov %d6,0
80008066:	37 0f 70 f0 	extr.u %d15,%d15,0,16
8000806a:	6f f3 03 00 	jz.t %d3,15,80008070 <Ifx_CircularBuffer_write8+0x20>
8000806e:	82 0f       	mov %d15,0
    const uint8 *source = (const uint8 *)data;

    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
80008070:	b9 43 04 00 	ld.hu %d3,[%a4]4
80008074:	d4 42       	ld.a %a2,[%a4]
80008076:	60 33       	mov.a %a3,%d3
80008078:	04 f5       	ld.bu %d5,[%a15+]
8000807a:	30 32       	add.a %a2,%a3
8000807c:	34 25       	st.b [%a2],%d5
        source                                 = &source[1];
        buffer->index++;
8000807e:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
80008082:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
        source                                 = &source[1];
        buffer->index++;
80008086:	c2 13       	add %d3,1
80008088:	37 03 70 30 	extr.u %d3,%d3,0,16
8000808c:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
80008090:	3f 53 04 80 	jlt.u %d3,%d5,80008098 <Ifx_CircularBuffer_write8+0x48>
        {
            buffer->index = 0;
80008094:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
80008098:	9f 0f ec ff 	jned %d15,0,80008070 <Ifx_CircularBuffer_write8+0x20>
8000809c:	c2 f4       	add %d4,-1
8000809e:	37 04 50 40 	extr %d4,%d4,0,16
800080a2:	8b 04 40 43 	max %d4,%d4,0
800080a6:	c2 14       	add %d4,1

    return source;
}
800080a8:	1a 42       	add %d15,%d2,%d4
800080aa:	60 f2       	mov.a %a2,%d15
800080ac:	00 90       	ret 

800080ae <Ifx_CircularBuffer_write32>:


const void *Ifx_CircularBuffer_write32(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
800080ae:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
800080b2:	d4 42       	ld.a %a2,[%a4]
800080b4:	1b f4 ff 5f 	addi %d5,%d4,-1
800080b8:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *((uint32 *)(&base[buffer->index])) = *source;
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
800080bc:	b9 46 06 00 	ld.hu %d6,[%a4]6
800080c0:	82 03       	mov %d3,0
800080c2:	37 05 70 20 	extr.u %d2,%d5,0,16
800080c6:	6f f5 03 00 	jz.t %d5,15,800080cc <Ifx_CircularBuffer_write32+0x1e>
800080ca:	82 02       	mov %d2,0
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
800080cc:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
800080d0:	c2 13       	add %d3,1
800080d2:	48 05       	ld.w %d5,[%a15]0
800080d4:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
800080d6:	c2 4f       	add %d15,4
800080d8:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
800080dc:	68 05       	st.w [%a15]0,%d5
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800080de:	0b 6f 30 51 	lt.u %d5,%d15,%d6
800080e2:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
800080e6:	9f 02 f3 ff 	jned %d2,0,800080cc <Ifx_CircularBuffer_write32+0x1e>
800080ea:	c2 f4       	add %d4,-1
800080ec:	37 04 50 40 	extr %d4,%d4,0,16
800080f0:	ac 42       	st.h [%a4]4,%d15
800080f2:	8b 04 40 43 	max %d4,%d4,0
800080f6:	c2 14       	add %d4,1

    return source;
}
800080f8:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
800080fc:	00 90       	ret 

800080fe <Ifx_Fifo_destroy>:
}


void Ifx_Fifo_destroy(Ifx_Fifo *fifo)
{
    free(fifo);
800080fe:	1d 00 d0 20 	j 8000c29e <free>

80008102 <Ifx_Fifo_init>:
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
80008102:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
80008104:	80 42       	mov.d %d2,%a4
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
80008106:	e9 4f 1c 00 	st.b [%a4]28,%d15
        fifo->eventWriter        = TRUE;
8000810a:	82 1f       	mov %d15,1
8000810c:	e9 4f 1d 00 	st.b [%a4]29,%d15
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
80008110:	1b 72 02 f0 	addi %d15,%d2,39
80008114:	8f 7f c0 f1 	andn %d15,%d15,7
80008118:	6c 40       	st.w [%a4]0,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
8000811a:	c2 34       	add %d4,3
    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
8000811c:	82 0f       	mov %d15,0
8000811e:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
80008120:	ac 48       	st.h [%a4]16,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
80008122:	8f 34 c0 41 	andn %d4,%d4,3
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
80008126:	82 0f       	mov %d15,0
    free(fifo);
}


Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
80008128:	40 42       	mov.aa %a2,%a4
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
8000812a:	6c 43       	st.w [%a4]12,%d15
8000812c:	6c 42       	st.w [%a4]8,%d15
        fifo->startIndex         = fifo->endIndex = 0;
8000812e:	ac 4b       	st.h [%a4]22,%d15
80008130:	ac 4a       	st.h [%a4]20,%d15
        fifo->size               = size;
80008132:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
80008136:	f9 45 1a 00 	st.h [%a4]26,%d5
    }

    return fifo;
}
8000813a:	00 90       	ret 

8000813c <Ifx_Fifo_create>:
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
8000813c:	c2 34       	add %d4,3
8000813e:	37 04 50 f0 	extr %d15,%d4,0,16
 * This is valid is an OS is used.
 *
 */
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
80008142:	02 58       	mov %d8,%d5
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
80008144:	8f 3f c0 f1 	andn %d15,%d15,3

    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
80008148:	1b 8f 02 40 	addi %d4,%d15,40
8000814c:	6d 00 a3 20 	call 8000c292 <malloc>
80008150:	40 24       	mov.aa %a4,%a2

    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
80008152:	bc 25       	jz.a %a2,8000815c <Ifx_Fifo_create+0x20>
    {
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
80008154:	0b f8 10 48 	mov %e4,%d8,%d15
80008158:	1d ff d5 ff 	j 80008102 <Ifx_Fifo_init>
    }

    return fifo;
}
8000815c:	00 90       	ret 

8000815e <Ifx_Fifo_canReadCount>:
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
8000815e:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
80008160:	82 02       	mov %d2,0
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
80008162:	3f f4 6a 00 	jlt %d4,%d15,80008236 <Ifx_Fifo_canReadCount+0xd8>
80008166:	8c 4c       	ld.h %d15,[%a4]24
80008168:	3f 4f 67 00 	jlt %d15,%d4,80008236 <Ifx_Fifo_canReadCount+0xd8>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000816c:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
80008170:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008174:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008178:	00 00       	nop 
    else
    {
        boolean interruptState;
        sint32  waitCount;
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);
8000817a:	8c 42       	ld.h %d15,[%a4]4
8000817c:	a2 f4       	sub %d4,%d15

        if (waitCount <= 0)
8000817e:	4e 4c       	jgtz %d4,80008196 <Ifx_Fifo_canReadCount+0x38>
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE;
80008180:	82 1f       	mov %d15,1
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);

        if (waitCount <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008182:	59 42 08 00 	st.w [%a4]8,%d2
            fifo->eventReader        = TRUE;
80008186:	e9 4f 1c 00 	st.b [%a4]28,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
8000818a:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000818c:	df 00 55 00 	jeq %d0,0,80008236 <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
80008190:	0d 00 00 03 	enable 
80008194:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008196:	82 f2       	mov %d2,-1
80008198:	06 f2       	sh %d2,-1
8000819a:	ba f6       	eq %d15,%d6,-1
8000819c:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800081a0:	82 f5       	mov %d5,-1
800081a2:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800081a4:	ee 16       	jnz %d15,800081d0 <Ifx_Fifo_canReadCount+0x72>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800081a6:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800081aa:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800081ae:	0d 00 40 03 	disable 
800081b2:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800081b4:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800081b8:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800081bc:	02 15       	mov %d5,%d1
800081be:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800081c2:	76 23       	jz %d2,800081c8 <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
800081c4:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800081c8:	0b 65 40 50 	addx %d5,%d5,%d6
800081cc:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
800081d0:	82 0f       	mov %d15,0
800081d2:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
800081d6:	59 44 08 00 	st.w [%a4]8,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800081da:	76 03       	jz %d0,800081e0 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
800081dc:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800081e0:	82 f6       	mov %d6,-1
800081e2:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800081e4:	39 4f 1c 00 	ld.bu %d15,[%a4]28
800081e8:	6e 08       	jz %d15,800081f8 <Ifx_Fifo_canReadCount+0x9a>
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
            result = fifo->eventReader == TRUE;
800081ea:	39 42 1c 00 	ld.bu %d2,[%a4]28
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
800081ee:	82 0f       	mov %d15,0
800081f0:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
800081f2:	8b 12 00 22 	eq %d2,%d2,1
800081f6:	00 90       	ret 
800081f8:	ba f5       	eq %d15,%d5,-1
800081fa:	0b 36 00 f2 	and.eq %d15,%d6,%d3
800081fe:	ee f3       	jnz %d15,800081e4 <Ifx_Fifo_canReadCount+0x86>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008200:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008204:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008208:	0d 00 40 03 	disable 
8000820c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000820e:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008212:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008216:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000821a:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000821e:	76 23       	jz %d2,80008224 <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
80008220:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
            fifo->shared.readerWaitx = waitCount;
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008224:	0b 3f 00 21 	eq %d2,%d15,%d3
80008228:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
8000822c:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008230:	df 02 da ff 	jne %d2,0,800081e4 <Ifx_Fifo_canReadCount+0x86>
80008234:	3c db       	j 800081ea <Ifx_Fifo_canReadCount+0x8c>
            result = fifo->eventReader == TRUE;
        }
    }

    return result;
}
80008236:	00 90       	ret 

80008238 <Ifx_Fifo_read>:
    return count - blockSize;
}

#include <stdio.h>
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
80008238:	20 08       	sub.a %sp,8
8000823a:	40 4f       	mov.aa %a15,%a4
8000823c:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
8000823e:	df 04 b6 00 	jeq %d4,0,800083aa <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
80008242:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008244:	82 f2       	mov %d2,-1
80008246:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
80008248:	8c 4c       	ld.h %d15,[%a4]24
8000824a:	06 f2       	sh %d2,-1
8000824c:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
8000824e:	8c 4a       	ld.h %d15,[%a4]20
    {
        deadLine = TIME_INFINITE;
80008250:	82 fa       	mov %d10,-1
80008252:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008254:	ba f6       	eq %d15,%d6,-1
80008256:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
8000825a:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000825c:	ee 16       	jnz %d15,80008288 <Ifx_Fifo_read+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000825e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008262:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008266:	0d 00 40 03 	disable 
8000826a:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000826c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008270:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008274:	02 3a       	mov %d10,%d3
80008276:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000827a:	76 23       	jz %d2,80008280 <Ifx_Fifo_read+0x48>
    {
        __enable();
8000827c:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008280:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008284:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008288:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
8000828a:	82 0d       	mov %d13,0
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventReader        = FALSE;
8000828c:	82 0e       	mov %d14,0
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
8000828e:	a0 0c       	mov.a %a12,0
80008290:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008292:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80008296:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000829a:	0d 00 40 03 	disable 
8000829e:	00 00       	nop 
{
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
800082a0:	88 2b       	ld.h %d11,[%a15]4
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800082a2:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
800082a6:	8c fd       	ld.h %d15,[%a15]26
800082a8:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventReader        = FALSE;
800082ac:	e9 fe 1c 00 	st.b [%a15]28,%d14
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
800082b0:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
800082b4:	88 c2       	ld.h %d2,[%a15]24
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
800082b6:	a2 3b       	sub %d11,%d3
800082b8:	37 0b 70 b0 	extr.u %d11,%d11,0,16
800082bc:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
800082c0:	0b f9 80 30 	sub %d3,%d9,%d15
800082c4:	0b 23 80 21 	min %d2,%d3,%d2
800082c8:	68 22       	st.w [%a15]8,%d2
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800082ca:	76 43       	jz %d4,800082d0 <Ifx_Fifo_read+0x98>
    {
        __enable();
800082cc:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginRead(fifo, count);

            if (blockSize != 0)
800082d0:	6e 20       	jz %d15,80008310 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
800082d2:	40 a4       	mov.aa %a4,%sp
800082d4:	02 f4       	mov %d4,%d15
800082d6:	6d ff 66 fe 	call 80007fa2 <Ifx_CircularBuffer_read8>
800082da:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800082dc:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800082e0:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800082e4:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800082e8:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
800082ea:	88 23       	ld.h %d3,[%a15]4
800082ec:	a2 b3       	sub %d3,%d11
800082ee:	a8 23       	st.h [%a15]4,%d3

    if (fifo->shared.writerWaitx != 0)
800082f0:	48 33       	ld.w %d3,[%a15]12
800082f2:	76 39       	jz %d3,80008304 <Ifx_Fifo_read+0xcc>
    {
        fifo->shared.writerWaitx -= blockSize;
800082f4:	5a f3       	sub %d15,%d3,%d15

        if (fifo->shared.writerWaitx <= 0)
800082f6:	8e f3       	jlez %d15,800082fc <Ifx_Fifo_read+0xc4>

    fifo->shared.count -= blockSize;

    if (fifo->shared.writerWaitx != 0)
    {
        fifo->shared.writerWaitx -= blockSize;
800082f8:	68 3f       	st.w [%a15]12,%d15
800082fa:	3c 05       	j 80008304 <Ifx_Fifo_read+0xcc>

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE; /* Signal the writer */
800082fc:	82 1f       	mov %d15,1
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
800082fe:	e8 3c       	st.a [%a15]12,%a12
            fifo->eventWriter        = TRUE; /* Signal the writer */
80008300:	e9 ff 1d 00 	st.b [%a15]29,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008304:	76 23       	jz %d2,8000830a <Ifx_Fifo_read+0xd2>
    {
        __enable();
80008306:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
8000830a:	a2 b9       	sub %d9,%d11
8000830c:	37 09 50 90 	extr %d9,%d9,0,16
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008310:	76 d4       	jz %d13,80008318 <Ifx_Fifo_read+0xe0>
            {
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
80008312:	82 0f       	mov %d15,0
80008314:	68 2f       	st.w [%a15]8,%d15
                break;
80008316:	3c 48       	j 800083a6 <Ifx_Fifo_read+0x16e>
80008318:	ba fa       	eq %d15,%d10,-1
8000831a:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
8000831e:	ee 1b       	jnz %d15,80008354 <Ifx_Fifo_read+0x11c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008320:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008324:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008328:	0d 00 40 03 	disable 
8000832c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000832e:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008332:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008336:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000833a:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000833e:	76 23       	jz %d2,80008344 <Ifx_Fifo_read+0x10c>
    {
        __enable();
80008340:	0d 00 00 03 	enable 
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008344:	0b 8f 00 21 	eq %d2,%d15,%d8
80008348:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
8000834c:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008350:	df 02 e1 ff 	jne %d2,0,80008312 <Ifx_Fifo_read+0xda>
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
                break;
            }

            if (count != 0)
80008354:	df 09 29 00 	jeq %d9,0,800083a6 <Ifx_Fifo_read+0x16e>
            {
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008358:	39 ff 1c 00 	ld.bu %d15,[%a15]28
8000835c:	ee 1f       	jnz %d15,8000839a <Ifx_Fifo_read+0x162>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000835e:	ba fa       	eq %d15,%d10,-1
80008360:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008364:	ee fa       	jnz %d15,80008358 <Ifx_Fifo_read+0x120>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008366:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000836a:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000836e:	0d 00 40 03 	disable 
80008372:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008374:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008378:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000837c:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008380:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008384:	76 23       	jz %d2,8000838a <Ifx_Fifo_read+0x152>
    {
        __enable();
80008386:	0d 00 00 03 	enable 
8000838a:	0b 8f 00 21 	eq %d2,%d15,%d8
8000838e:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
80008392:	0b 8f 90 22 	or.lt %d2,%d15,%d8
80008396:	df 02 e1 ff 	jne %d2,0,80008358 <Ifx_Fifo_read+0x120>
                {}

                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
8000839a:	39 fd 1c 00 	ld.bu %d13,[%a15]28
8000839e:	8b 0d 00 d2 	eq %d13,%d13,0
800083a2:	1d ff 78 ff 	j 80008292 <Ifx_Fifo_read+0x5a>
            }
        } while (count != 0);

        fifo->startIndex = buffer.index;
800083a6:	8c a2       	ld.h %d15,[%sp]4
800083a8:	a8 af       	st.h [%a15]20,%d15
    }

    return count;
}
800083aa:	02 92       	mov %d2,%d9
800083ac:	00 90       	ret 

800083ae <Ifx_Fifo_clear>:
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083ae:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800083b2:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083b6:	0d 00 40 03 	disable 
800083ba:	00 00       	nop 
{
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();

    if (fifo->shared.writerWaitx != 0)
800083bc:	4c 43       	ld.w %d15,[%a4]12
800083be:	6e 06       	jz %d15,800083ca <Ifx_Fifo_clear+0x1c>
    {
        fifo->shared.writerWaitx = 0;
800083c0:	82 0f       	mov %d15,0
800083c2:	6c 43       	st.w [%a4]12,%d15
        fifo->eventWriter        = TRUE; /* Signal the writer */
800083c4:	82 1f       	mov %d15,1
800083c6:	e9 4f 1d 00 	st.b [%a4]29,%d15
    }

    fifo->eventReader        = FALSE;
800083ca:	82 0f       	mov %d15,0
800083cc:	e9 4f 1c 00 	st.b [%a4]28,%d15
    fifo->shared.readerWaitx = 0;
800083d0:	82 0f       	mov %d15,0
800083d2:	6c 42       	st.w [%a4]8,%d15
    fifo->shared.count       = 0;
800083d4:	ac 42       	st.h [%a4]4,%d15
    fifo->shared.maxcount    = 0;
800083d6:	ac 48       	st.h [%a4]16,%d15
    fifo->startIndex         = fifo->endIndex;
800083d8:	8c 4b       	ld.h %d15,[%a4]22
800083da:	ac 4a       	st.h [%a4]20,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083dc:	76 23       	jz %d2,800083e2 <Ifx_Fifo_clear+0x34>
    {
        __enable();
800083de:	0d 00 00 03 	enable 
800083e2:	00 90       	ret 

800083e4 <Ifx_Fifo_canWriteCount>:
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800083e4:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be written to the buffer */
        result = FALSE;
800083e6:	82 02       	mov %d2,0
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800083e8:	3f f4 75 00 	jlt %d4,%d15,800084d2 <Ifx_Fifo_canWriteCount+0xee>
800083ec:	8c 4c       	ld.h %d15,[%a4]24
800083ee:	3f 4f 72 00 	jlt %d15,%d4,800084d2 <Ifx_Fifo_canWriteCount+0xee>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083f2:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
800083f6:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083fa:	0d 00 40 03 	disable 
800083fe:	00 00       	nop 
    else
    {
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
80008400:	c9 43 18 00 	ld.h %d3,[%a4]24
80008404:	8c 42       	ld.h %d15,[%a4]4
80008406:	5a f3       	sub %d15,%d3,%d15
80008408:	3f 4f 0d 00 	jlt %d15,%d4,80008422 <Ifx_Fifo_canWriteCount+0x3e>
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE;
8000840c:	82 1f       	mov %d15,1
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
        {
            fifo->shared.writerWaitx = 0;
8000840e:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
80008412:	e9 4f 1d 00 	st.b [%a4]29,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
80008416:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008418:	df 00 5d 00 	jeq %d0,0,800084d2 <Ifx_Fifo_canWriteCount+0xee>
    {
        __enable();
8000841c:	0d 00 00 03 	enable 
80008420:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008422:	82 f2       	mov %d2,-1
80008424:	06 f2       	sh %d2,-1
80008426:	ba f6       	eq %d15,%d6,-1
80008428:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
8000842c:	82 f5       	mov %d5,-1
8000842e:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008430:	ee 16       	jnz %d15,8000845c <Ifx_Fifo_canWriteCount+0x78>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008432:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008436:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000843a:	0d 00 40 03 	disable 
8000843e:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008440:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008444:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008448:	02 15       	mov %d5,%d1
8000844a:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000844e:	76 23       	jz %d2,80008454 <Ifx_Fifo_canWriteCount+0x70>
    {
        __enable();
80008450:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008454:	0b 65 40 50 	addx %d5,%d5,%d6
80008458:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
8000845c:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
8000845e:	c9 42 04 00 	ld.h %d2,[%a4]4
            result                   = TRUE;
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
80008462:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
80008466:	8c 4c       	ld.h %d15,[%a4]24
80008468:	5a f2       	sub %d15,%d2,%d15
8000846a:	42 f4       	add %d4,%d15
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000846c:	82 02       	mov %d2,0
8000846e:	0b 42 a0 41 	max %d4,%d2,%d4
80008472:	59 44 0c 00 	st.w [%a4]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008476:	76 03       	jz %d0,8000847c <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
80008478:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000847c:	82 f6       	mov %d6,-1
8000847e:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008480:	39 4f 1d 00 	ld.bu %d15,[%a4]29
80008484:	6e 08       	jz %d15,80008494 <Ifx_Fifo_canWriteCount+0xb0>
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
            result = fifo->eventWriter == TRUE;
80008486:	39 42 1d 00 	ld.bu %d2,[%a4]29
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
8000848a:	82 0f       	mov %d15,0
8000848c:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
8000848e:	8b 12 00 22 	eq %d2,%d2,1
80008492:	00 90       	ret 
80008494:	ba f5       	eq %d15,%d5,-1
80008496:	0b 36 00 f2 	and.eq %d15,%d6,%d3
8000849a:	ee f3       	jnz %d15,80008480 <Ifx_Fifo_canWriteCount+0x9c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000849c:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084a0:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084a4:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800084a8:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800084aa:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800084ae:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800084b2:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800084b6:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084ba:	76 23       	jz %d2,800084c0 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
800084bc:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800084c0:	0b 3f 00 21 	eq %d2,%d15,%d3
800084c4:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
800084c8:	0b 3f 90 22 	or.lt %d2,%d15,%d3
800084cc:	df 02 da ff 	jne %d2,0,80008480 <Ifx_Fifo_canWriteCount+0x9c>
800084d0:	3c db       	j 80008486 <Ifx_Fifo_canWriteCount+0xa2>
            result = fifo->eventWriter == TRUE;
        }
    }

    return result;
}
800084d2:	00 90       	ret 

800084d4 <Ifx_Fifo_write>:
}


#include <stdio.h>
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
800084d4:	20 08       	sub.a %sp,8
800084d6:	40 4f       	mov.aa %a15,%a4
800084d8:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
800084da:	df 04 be 00 	jeq %d4,0,80008656 <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
800084de:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084e0:	82 f2       	mov %d2,-1
800084e2:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
800084e4:	8c 4c       	ld.h %d15,[%a4]24
800084e6:	06 f2       	sh %d2,-1
800084e8:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
800084ea:	8c 4b       	ld.h %d15,[%a4]22
    {
        deadLine = TIME_INFINITE;
800084ec:	82 fa       	mov %d10,-1
800084ee:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084f0:	ba f6       	eq %d15,%d6,-1
800084f2:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800084f6:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084f8:	ee 16       	jnz %d15,80008524 <Ifx_Fifo_write+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084fa:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084fe:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008502:	0d 00 40 03 	disable 
80008506:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008508:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000850c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008510:	02 3a       	mov %d10,%d3
80008512:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008516:	76 23       	jz %d2,8000851c <Ifx_Fifo_write+0x48>
    {
        __enable();
80008518:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
8000851c:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008520:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008524:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
80008526:	82 0d       	mov %d13,0
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventWriter        = FALSE;
80008528:	82 0e       	mov %d14,0
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
8000852a:	a0 0c       	mov.a %a12,0
8000852c:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000852e:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
80008532:	37 05 e1 57 	extr.u %d5,%d5,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008536:	0d 00 40 03 	disable 
8000853a:	00 00       	nop 
{
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
8000853c:	88 c4       	ld.h %d4,[%a15]24
8000853e:	88 2b       	ld.h %d11,[%a15]4
80008540:	0b b4 80 b0 	sub %d11,%d4,%d11
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008544:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
80008548:	8c fd       	ld.h %d15,[%a15]26
8000854a:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
8000854e:	e9 fe 1d 00 	st.b [%a15]29,%d14
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
80008552:	4b f2 01 22 	div %e2,%d2,%d15
80008556:	a2 3b       	sub %d11,%d3
80008558:	37 0b 70 b0 	extr.u %d11,%d11,0,16
8000855c:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
80008560:	0b f9 80 20 	sub %d2,%d9,%d15
80008564:	0b 42 80 41 	min %d4,%d2,%d4
80008568:	68 34       	st.w [%a15]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000856a:	76 53       	jz %d5,80008570 <Ifx_Fifo_write+0x9c>
    {
        __enable();
8000856c:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
80008570:	6e 26       	jz %d15,800085bc <Ifx_Fifo_write+0xe8>
            {

                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
80008572:	40 a4       	mov.aa %a4,%sp
80008574:	02 f4       	mov %d4,%d15
80008576:	6d ff 6d fd 	call 80008050 <Ifx_CircularBuffer_write8>
8000857a:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000857c:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80008580:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008584:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008588:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
8000858a:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
8000858c:	88 84       	ld.h %d4,[%a15]16
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
8000858e:	42 b2       	add %d2,%d11
80008590:	37 02 50 20 	extr %d2,%d2,0,16
80008594:	a8 22       	st.h [%a15]4,%d2
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008596:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
8000859a:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
8000859c:	48 22       	ld.w %d2,[%a15]8
8000859e:	76 29       	jz %d2,800085b0 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
800085a0:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
800085a2:	8e f3       	jlez %d15,800085a8 <Ifx_Fifo_write+0xd4>
    fifo->shared.count   += blockSize;
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */

    if (fifo->shared.readerWaitx != 0)
    {
        fifo->shared.readerWaitx -= blockSize;
800085a4:	68 2f       	st.w [%a15]8,%d15
800085a6:	3c 05       	j 800085b0 <Ifx_Fifo_write+0xdc>

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
800085a8:	82 1f       	mov %d15,1
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
800085aa:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
800085ac:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085b0:	76 33       	jz %d3,800085b6 <Ifx_Fifo_write+0xe2>
    {
        __enable();
800085b2:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
800085b6:	a2 b9       	sub %d9,%d11
800085b8:	37 09 50 90 	extr %d9,%d9,0,16
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800085bc:	76 d4       	jz %d13,800085c4 <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
800085be:	82 0f       	mov %d15,0
800085c0:	68 3f       	st.w [%a15]12,%d15
                break;
800085c2:	3c 48       	j 80008652 <Ifx_Fifo_write+0x17e>
800085c4:	ba fa       	eq %d15,%d10,-1
800085c6:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800085ca:	ee 1b       	jnz %d15,80008600 <Ifx_Fifo_write+0x12c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085cc:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085d0:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085d4:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800085d8:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800085da:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800085de:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800085e2:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800085e6:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085ea:	76 23       	jz %d2,800085f0 <Ifx_Fifo_write+0x11c>
    {
        __enable();
800085ec:	0d 00 00 03 	enable 
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800085f0:	0b 8f 00 21 	eq %d2,%d15,%d8
800085f4:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
800085f8:	0b f8 90 22 	or.lt %d2,%d8,%d15
800085fc:	df 02 e1 ff 	jne %d2,0,800085be <Ifx_Fifo_write+0xea>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
80008600:	df 09 29 00 	jeq %d9,0,80008652 <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008604:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80008608:	ee 1f       	jnz %d15,80008646 <Ifx_Fifo_write+0x172>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000860a:	ba fa       	eq %d15,%d10,-1
8000860c:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008610:	ee fa       	jnz %d15,80008604 <Ifx_Fifo_write+0x130>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008612:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008616:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000861a:	0d 00 40 03 	disable 
8000861e:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008620:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008624:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008628:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000862c:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008630:	76 23       	jz %d2,80008636 <Ifx_Fifo_write+0x162>
    {
        __enable();
80008632:	0d 00 00 03 	enable 
80008636:	0b 8f 00 21 	eq %d2,%d15,%d8
8000863a:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
8000863e:	0b 8f 90 22 	or.lt %d2,%d15,%d8
80008642:	df 02 e1 ff 	jne %d2,0,80008604 <Ifx_Fifo_write+0x130>
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
80008646:	39 fd 1d 00 	ld.bu %d13,[%a15]29
8000864a:	8b 0d 00 d2 	eq %d13,%d13,0
8000864e:	1d ff 70 ff 	j 8000852e <Ifx_Fifo_write+0x5a>
            }
        } while (count != 0);

        fifo->endIndex = buffer.index;
80008652:	8c a2       	ld.h %d15,[%sp]4
80008654:	a8 bf       	st.h [%a15]22,%d15
    }

    return count;
}
80008656:	02 92       	mov %d2,%d9
80008658:	00 90       	ret 

8000865a <osEE_tc_core0_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000865a:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
8000865e:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008662:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008666:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000866a:	54 25       	ld.w %d5,[%a2]
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
8000866c:	48 08       	ld.w %d8,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000866e:	37 05 6e 51 	extr.u %d5,%d5,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008672:	37 08 6e 81 	extr.u %d8,%d8,2,14
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
80008676:	91 20 00 f7 	movh.a %a15,28674
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
8000867a:	8f f5 83 51 	xor %d5,%d5,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
8000867e:	8f f8 83 81 	xor %d8,%d8,63
80008682:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
80008686:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80008688:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
8000868c:	3b 00 b8 f0 	mov %d15,2944
80008690:	cd 4f e0 0f 	mtcr $psw,%d15
80008694:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008698:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
8000869c:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
800086a0:	cd 0f e0 0f 	mtcr $pcxi,%d15
800086a4:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
800086a8:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
800086ac:	82 12       	mov %d2,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
800086ae:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
800086b2:	cd 42 20 09 	mtcr $pcon1,%d2
800086b6:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800086ba:	53 cf 20 f0 	mul %d15,%d15,12
800086be:	10 22       	addsc.a %a2,%a2,%d15,0
800086c0:	54 22       	ld.w %d2,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
800086c2:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800086c4:	37 02 6e 21 	extr.u %d2,%d2,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
800086c8:	d9 2f 00 46 	lea %a15,[%a2]24832
800086cc:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800086d0:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
800086d2:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800086d6:	2e 16       	jz.t %d15,1,800086e2 <osEE_tc_core0_start+0x88>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800086d8:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800086dc:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800086e0:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
800086e2:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
800086e6:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800086ea:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
800086ec:	4c f0       	ld.w %d15,[%a15]0
800086ee:	6f 0f ff ff 	jnz.t %d15,0,800086ec <osEE_tc_core0_start+0x92>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
800086f2:	82 0f       	mov %d15,0
800086f4:	cd cf 20 09 	mtcr $pcon0,%d15
800086f8:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800086fc:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800086fe:	2e 16       	jz.t %d15,1,8000870a <osEE_tc_core0_start+0xb0>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008700:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008704:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008708:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
8000870a:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
8000870e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008712:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008714:	4c f0       	ld.w %d15,[%a15]0
80008716:	6f 0f ff 7f 	jz.t %d15,0,80008714 <osEE_tc_core0_start+0xba>
8000871a:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
8000871e:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008722:	91 30 00 ff 	movh.a %a15,61443
80008726:	53 cf 20 f0 	mul %d15,%d15,12
8000872a:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000872e:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008730:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008732:	48 02       	ld.w %d2,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008734:	d9 2f 00 46 	lea %a15,[%a2]24832
80008738:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000873c:	37 02 6e 21 	extr.u %d2,%d2,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008740:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008742:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008746:	2e 16       	jz.t %d15,1,80008752 <osEE_tc_core0_start+0xf8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008748:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000874c:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008750:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008752:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008756:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000875a:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
8000875c:	4c f0       	ld.w %d15,[%a15]0
8000875e:	6f 0f ff ff 	jnz.t %d15,0,8000875c <osEE_tc_core0_start+0x102>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
80008762:	82 0f       	mov %d15,0
80008764:	cd 0f 04 09 	mtcr $dcon0,%d15
80008768:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
8000876c:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000876e:	2e 16       	jz.t %d15,1,8000877a <osEE_tc_core0_start+0x120>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008770:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008774:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008778:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
8000877a:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
8000877e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008782:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008784:	4c f0       	ld.w %d15,[%a15]0
80008786:	6f 0f ff 7f 	jz.t %d15,0,80008784 <osEE_tc_core0_start+0x12a>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
8000878a:	91 30 00 ff 	movh.a %a15,61443
8000878e:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008792:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008794:	2e 16       	jz.t %d15,1,800087a0 <osEE_tc_core0_start+0x146>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008796:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000879a:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
8000879e:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
800087a0:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
800087a4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800087a8:	91 30 00 ff 	movh.a %a15,61443
800087ac:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800087b0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
800087b2:	4c f0       	ld.w %d15,[%a15]0
800087b4:	91 30 00 2f 	movh.a %a2,61443
800087b8:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800087bc:	6f 0f fb ff 	jnz.t %d15,0,800087b2 <osEE_tc_core0_start+0x158>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(0U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB0);
800087c0:	7b 00 00 f8 	movh %d15,32768
800087c4:	1b 0f 30 f1 	addi %d15,%d15,4864
800087c8:	cd 4f e2 0f 	mtcr $btv,%d15
800087cc:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB0);
800087d0:	7b 00 00 f8 	movh %d15,32768
800087d4:	1b 0f 00 f2 	addi %d15,%d15,8192
800087d8:	cd 0f e2 0f 	mtcr $biv,%d15
800087dc:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK0);
800087e0:	7b 20 00 f7 	movh %d15,28674
800087e4:	1b 0f b0 f9 	addi %d15,%d15,-25856
800087e8:	cd 8f e2 0f 	mtcr $isp,%d15
800087ec:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800087f0:	4c 20       	ld.w %d15,[%a2]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800087f2:	2e 16       	jz.t %d15,1,800087fe <osEE_tc_core0_start+0x1a4>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800087f4:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800087f8:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800087fc:	6c 20       	st.w [%a2]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800087fe:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008802:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008806:	91 30 00 ff 	movh.a %a15,61443
8000880a:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000880e:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008810:	4c f0       	ld.w %d15,[%a15]0
80008812:	6f 0f ff 7f 	jz.t %d15,0,80008810 <osEE_tc_core0_start+0x1b6>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(0U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
80008816:	91 10 00 f7 	movh.a %a15,28673
8000881a:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
8000881e:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
80008820:	91 10 00 f8 	movh.a %a15,32769
80008824:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <Ifx_CircularBuffer_read32>>
80008828:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
8000882a:	91 10 00 f8 	movh.a %a15,32769
8000882e:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <Ifx_CircularBuffer_read32>>
80008832:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_SINGLECORE)) || (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
#else
  osEE_tc_setareg(a9, &osEE_cdb_var_core0);
80008834:	91 00 00 f8 	movh.a %a15,32768
80008838:	d9 ff 04 60 	lea %a15,[%a15]388 <80000184 <osEE_cdb_var_core0>>
8000883c:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
8000883e:	7b 20 00 f7 	movh %d15,28674
80008842:	7b 20 00 47 	movh %d4,28674
80008846:	1b 0f c0 69 	addi %d6,%d15,-25600
8000884a:	1b 04 c0 4b 	addi %d4,%d4,-17408
8000884e:	a2 64       	sub %d4,%d6
80008850:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
80008852:	82 02       	mov %d2,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
80008854:	df 04 16 00 	jeq %d4,0,80008880 <osEE_tc_core0_start+0x226>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80008858:	9a f4       	add %d15,%d4,-1
8000885a:	06 6f       	sh %d15,6
8000885c:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
8000885e:	60 3f       	mov.a %a15,%d3
80008860:	82 00       	mov %d0,0
80008862:	68 00       	st.w [%a15]0,%d0
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008864:	60 4f       	mov.a %a15,%d4
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008866:	8f 43 1e 20 	sh %d2,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
8000886a:	37 03 70 73 	extr.u %d7,%d3,6,16
8000886e:	1b 0f fc ff 	addi %d15,%d15,-64

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008872:	b0 ff       	add.a %a15,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008874:	37 27 10 28 	insert %d2,%d7,%d2,16,16
80008878:	42 6f       	add %d15,%d6

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
8000887a:	82 53       	mov %d3,5
8000887c:	fd f0 11 01 	loop %a15,80008a9e <osEE_tc_core0_start+0x444>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
80008880:	cd 82 e3 0f 	mtcr $fcx,%d2
80008884:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008888:	91 30 00 ff 	movh.a %a15,61443
8000888c:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008890:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008892:	2e 16       	jz.t %d15,1,8000889e <osEE_tc_core0_start+0x244>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008894:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008898:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
8000889c:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
8000889e:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
800088a2:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800088a6:	91 30 00 ff 	movh.a %a15,61443
800088aa:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800088ae:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
800088b0:	40 f2       	mov.aa %a2,%a15
800088b2:	4c 20       	ld.w %d15,[%a2]0
800088b4:	91 30 00 ff 	movh.a %a15,61443
800088b8:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800088bc:	6f 0f fb ff 	jnz.t %d15,0,800088b2 <osEE_tc_core0_start+0x258>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
800088c0:	4c f1       	ld.w %d15,[%a15]4
800088c2:	96 08       	or %d15,8
800088c4:	68 1f       	st.w [%a15]4,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800088c6:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800088c8:	2e 16       	jz.t %d15,1,800088d4 <osEE_tc_core0_start+0x27a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800088ca:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800088ce:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800088d2:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800088d4:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800088d8:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800088dc:	91 30 00 ff 	movh.a %a15,61443
800088e0:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800088e4:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800088e6:	4c f0       	ld.w %d15,[%a15]0
800088e8:	6f 0f ff 7f 	jz.t %d15,0,800088e6 <osEE_tc_core0_start+0x28c>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800088ec:	91 30 00 ff 	movh.a %a15,61443
800088f0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800088f4:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800088f6:	2e 16       	jz.t %d15,1,80008902 <osEE_tc_core0_start+0x2a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800088f8:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800088fc:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008900:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
80008902:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
80008906:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
8000890a:	91 30 00 ff 	movh.a %a15,61443
8000890e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008912:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
80008914:	40 f2       	mov.aa %a2,%a15
80008916:	4c 20       	ld.w %d15,[%a2]0
80008918:	91 30 00 ff 	movh.a %a15,61443
8000891c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008920:	6f 0f fb ff 	jnz.t %d15,0,80008916 <osEE_tc_core0_start+0x2bc>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
80008924:	4c f1       	ld.w %d15,[%a15]4
80008926:	96 08       	or %d15,8
80008928:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
8000892a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
8000892c:	2e 16       	jz.t %d15,1,80008938 <osEE_tc_core0_start+0x2de>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
8000892e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008932:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008936:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008938:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
8000893c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008940:	91 30 00 ff 	movh.a %a15,61443
80008944:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008948:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
8000894a:	4c f0       	ld.w %d15,[%a15]0
8000894c:	6f 0f ff 7f 	jz.t %d15,0,8000894a <osEE_tc_core0_start+0x2f0>
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80008950:	91 00 00 48 	movh.a %a4,32768
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
        *block_to_clear.p_ull = 0ULL;
80008954:	d2 02       	mov %e2,0
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80008956:	d9 44 2c 31 	lea %a4,[%a4]4332 <800010ec <__clear_table>>
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
        *block_to_clear.p_ui = 0x0U;
8000895a:	82 07       	mov %d7,0
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
        *block_to_clear.p_us = 0x0U;
8000895c:	82 06       	mov %d6,0
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
        *block_to_clear.p_uc = 0x0U;
8000895e:	82 05       	mov %d5,0

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
80008960:	4c 41       	ld.w %d15,[%a4]4
  while (p_clear_table != NULL) {
    OsEE_tc_init_table_entry_ptr  block_to_clear;
    MemSize                       table_entry_length;

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;
80008962:	d4 43       	ld.a %a3,[%a4]

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80008964:	9e f6       	jeq %d15,-1,80008990 <osEE_tc_core0_start+0x336>
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80008966:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
8000896a:	76 49       	jz %d4,8000897c <osEE_tc_core0_start+0x322>
        *block_to_clear.p_ull = 0ULL;
8000896c:	60 4f       	mov.a %a15,%d4
8000896e:	40 32       	mov.aa %a2,%a3
80008970:	b0 ff       	add.a %a15,-1
80008972:	89 22 48 01 	st.d [%a2+]8,%e2
80008976:	fc fe       	loop %a15,80008972 <osEE_tc_core0_start+0x318>
80008978:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
        ++block_to_clear.p_ull;
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
8000897c:	2e 22       	jz.t %d15,2,80008980 <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
8000897e:	64 37       	st.w [%a3+],%d7
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80008980:	2e 12       	jz.t %d15,1,80008984 <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
80008982:	a4 36       	st.h [%a3+],%d6
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80008984:	2e 02       	jz.t %d15,0,80008988 <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
80008986:	34 35       	st.b [%a3],%d5
      }

/* Prepare the table pointer for the next iteration */
      ++p_clear_table;
80008988:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
  while (p_clear_table != NULL) {
8000898c:	bd 04 ea ff 	jnz.a %a4,80008960 <osEE_tc_core0_start+0x306>
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
80008990:	91 00 00 68 	movh.a %a6,32768
80008994:	d9 66 14 51 	lea %a6,[%a6]4436 <80001154 <__copy_table>>

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
80008998:	4c 62       	ld.w %d15,[%a6]8
    OsEE_tc_init_table_entry_ptr  block_src;
    OsEE_tc_init_table_entry_ptr  block_dest;
    MemSize                       table_entry_length;

/* Get pointer to the data source block */
    block_src = p_copy_table->block_src;
8000899a:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
8000899c:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
800089a0:	df ff 21 00 	jeq %d15,-1,800089e2 <osEE_tc_core0_start+0x388>
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
800089a4:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
800089a8:	76 4f       	jz %d4,800089c6 <osEE_tc_core0_start+0x36c>
800089aa:	60 4f       	mov.a %a15,%d4
800089ac:	40 43       	mov.aa %a3,%a4
800089ae:	40 52       	mov.aa %a2,%a5
800089b0:	b0 ff       	add.a %a15,-1
        *block_dest.p_ull = *block_src.p_ull;
800089b2:	09 22 48 01 	ld.d %e2,[%a2+]8
800089b6:	89 32 48 01 	st.d [%a3+]8,%e2
800089ba:	fc fc       	loop %a15,800089b2 <osEE_tc_core0_start+0x358>
800089bc:	06 34       	sh %d4,3
800089be:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
800089c2:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
        ++block_dest.p_ull;
        --ull_cnt;
      }

/* Copy the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
800089c6:	2e 23       	jz.t %d15,2,800089cc <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
800089c8:	44 52       	ld.w %d2,[%a5+]
800089ca:	64 42       	st.w [%a4+],%d2
        ++block_src.p_ui;
        ++block_dest.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
800089cc:	2e 14       	jz.t %d15,1,800089d4 <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
800089ce:	09 52 c2 00 	ld.hu %d2,[%a5+]2
800089d2:	a4 42       	st.h [%a4+],%d2
        ++block_src.p_us;
        ++block_dest.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
800089d4:	2e 03       	jz.t %d15,0,800089da <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
800089d6:	0c 50       	ld.bu %d15,[%a5]0
800089d8:	2c 40       	st.b [%a4]0,%d15
      }

/* Prepare the table pointer for the next iteration */
      ++p_copy_table;
800089da:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
(
  const OsEE_tc_copy_table * p_copy_table_param
)
{
  const OsEE_tc_copy_table * p_copy_table = p_copy_table_param;
  while (p_copy_table != NULL) {
800089de:	bd 06 dd ff 	jnz.a %a6,80008998 <osEE_tc_core0_start+0x33e>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800089e2:	91 30 00 ff 	movh.a %a15,61443
800089e6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800089ea:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800089ec:	2e 16       	jz.t %d15,1,800089f8 <osEE_tc_core0_start+0x39e>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800089ee:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800089f2:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800089f6:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800089f8:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800089fc:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
80008a00:	91 30 00 ff 	movh.a %a15,61443
80008a04:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008a08:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
80008a0a:	4c f0       	ld.w %d15,[%a15]0
80008a0c:	6f 0f ff ff 	jnz.t %d15,0,80008a0a <osEE_tc_core0_start+0x3b0>
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON8_OFF) = OSEE_TC_SCU_CCUCON8_INIT;
#endif /* OSEE_TC_SCU_CCUCON8_INIT */

/* BUS Divisors */
/* Configure CCUCON0 */
  OSEE_TC_SCU_CCUCON0.reg = OSEE_TC_SCU_CCUCON0_INIT;
80008a10:	7b 20 22 f1 	movh %d15,4642
80008a14:	91 30 00 ff 	movh.a %a15,61443
80008a18:	1b 1f 10 f0 	addi %d15,%d15,257
80008a1c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80008a20:	68 0f       	st.w [%a15]0,%d15
#if (defined(OSEE_TC_SCU_CCUCON5_INIT))
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON5_OFF) = OSEE_TC_SCU_CCUCON5_INIT;
#endif /* OSEE_TC_SCU_CCUCON5_INIT */
/* Configure CCUCON1 and Update CCU 0, 1 & 5. Forced INSEL to 1 even for
   external configuration, otherwise PLL initialization won't work. */
  OSEE_TC_SCU_CCUCON1.reg = OSEE_TC_SCU_CCUCON1_INIT |
80008a22:	7b 00 00 f5 	movh %d15,20480
80008a26:	91 30 00 ff 	movh.a %a15,61443
80008a2a:	1b 0f 10 f1 	addi %d15,%d15,4352
80008a2e:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008a32:	68 0f       	st.w [%a15]0,%d15
{
  /*
   * Default System Oscillator Configuration
   * MODE:    0   -> External Crystal
   */
  OSEE_TC_SCU_OSCCON.reg = OSEE_TC_SCU_OSCCON_OSCRES |
80008a34:	7b 70 00 f0 	movh %d15,7
80008a38:	91 30 00 ff 	movh.a %a15,61443
80008a3c:	1b cf 01 f0 	addi %d15,%d15,28
80008a40:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80008a44:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_OSCCON_GAINSEL | OSEE_TC_SCU_OSCCON_MODE(0U) |
    OSEE_TC_SCU_OSCCON_OSCVAL((OSEE_TC_BOARD_FOSC / 2500000U) - 1U);

  while (OSEE_TC_SCU_OSCCON.bits.plllv == 0U) {
80008a46:	4c f0       	ld.w %d15,[%a15]0
80008a48:	6f 1f ff 7f 	jz.t %d15,1,80008a46 <osEE_tc_core0_start+0x3ec>
    ; /* Oscillator not too low */
  }

  while (OSEE_TC_SCU_OSCCON.bits.pllhv == 0U) {
80008a4c:	91 30 00 ff 	movh.a %a15,61443
80008a50:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80008a54:	4c f0       	ld.w %d15,[%a15]0
80008a56:	6f 8f ff 7f 	jz.t %d15,8,80008a54 <osEE_tc_core0_start+0x3fa>
/*===================== Configure CCU Clock Control =========================*/
  osEE_tc_conf_clock_ctrl();
/*===================== Configure Oscillator Control ========================*/
  osEE_tc_conf_osc_ctrl();
/*============================ Configure PLL ================================*/
  osEE_tc_set_pll_fsource(OSEE_CPU_CLOCK);
80008a5a:	7b c0 be 40 	movh %d4,3052
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008a5e:	91 30 00 ff 	movh.a %a15,61443
80008a62:	1b 04 20 4c 	addi %d4,%d4,-15872
80008a66:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008a6a:	6d 00 88 03 	call 8000917a <osEE_tc_set_pll_fsource>
80008a6e:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008a70:	2e 16       	jz.t %d15,1,80008a7c <osEE_tc_core0_start+0x422>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008a72:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008a76:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008a7a:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008a7c:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008a80:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008a84:	91 30 00 ff 	movh.a %a15,61443
80008a88:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008a8c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008a8e:	4c f0       	ld.w %d15,[%a15]0
80008a90:	6f 0f ff 7f 	jz.t %d15,0,80008a8e <osEE_tc_core0_start+0x434>
  osEE_tc_set_safety_endinit(safety_wdt_pw);
#endif /* OSEE_CPU_CLOCK */
#endif /* !OSEE_BYPASS_CLOCK_CONFIGURATION */
#endif /* !OSEE_TRICORE_ILLD && !OSEE_TC_2G */

  OSEE_EXIT(main());
80008a94:	6d ff de dc 	call 80004450 <main>
80008a98:	02 24       	mov %d4,%d2
80008a9a:	6d 00 83 35 	call 8000f5a0 <_exit>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008a9e:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008aa0:	8f 4f 1e 40 	sh %d4,%d15,-28
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008aa4:	74 22       	st.w [%a2],%d2
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008aa6:	c2 f3       	add %d3,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008aa8:	37 0f 70 23 	extr.u %d2,%d15,6,16
80008aac:	37 42 10 28 	insert %d2,%d2,%d4,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
80008ab0:	76 36       	jz %d3,80008abc <osEE_tc_core0_start+0x462>
80008ab2:	1b 0f fc ff 	addi %d15,%d15,-64
80008ab6:	fc f4       	loop %a15,80008a9e <osEE_tc_core0_start+0x444>
80008ab8:	1d ff e4 fe 	j 80008880 <osEE_tc_core0_start+0x226>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
80008abc:	cd c2 e3 0f 	mtcr $lcx,%d2
80008ac0:	0d 00 c0 04 	isync 
80008ac4:	3c f7       	j 80008ab2 <osEE_tc_core0_start+0x458>

80008ac6 <osEE_tc_core1_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ac6:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008aca:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ace:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008ad2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ad6:	19 22 0c 00 	ld.w %d2,[%a2]12 <f003000c <_SMALL_DATA4_+0x4002800c>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008ada:	48 06       	ld.w %d6,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008adc:	37 02 6e 21 	extr.u %d2,%d2,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008ae0:	37 06 6e 61 	extr.u %d6,%d6,2,14
80008ae4:	91 20 00 f6 	movh.a %a15,24578
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008ae8:	8f f2 83 21 	xor %d2,%d2,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008aec:	8f f6 83 61 	xor %d6,%d6,63
80008af0:	d9 ff 40 8b 	lea %a15,[%a15]-18944 <6001b600 <__USTACK1>>
80008af4:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80008af6:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
80008afa:	3b 00 b8 f0 	mov %d15,2944
80008afe:	cd 4f e0 0f 	mtcr $psw,%d15
80008b02:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008b06:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008b0a:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008b0e:	cd 0f e0 0f 	mtcr $pcxi,%d15
80008b12:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80008b16:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008b1a:	82 13       	mov %d3,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008b1c:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008b20:	cd 43 20 09 	mtcr $pcon1,%d3
80008b24:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008b28:	53 cf 20 f0 	mul %d15,%d15,12
80008b2c:	10 22       	addsc.a %a2,%a2,%d15,0
80008b2e:	54 23       	ld.w %d3,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008b30:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008b32:	37 03 6e 31 	extr.u %d3,%d3,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008b36:	d9 2f 00 46 	lea %a15,[%a2]24832
80008b3a:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008b3e:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008b40:	8f f3 83 31 	xor %d3,%d3,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008b44:	2e 16       	jz.t %d15,1,80008b50 <osEE_tc_core1_start+0x8a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008b46:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008b4a:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008b4e:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008b50:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008b54:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008b58:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008b5a:	4c f0       	ld.w %d15,[%a15]0
80008b5c:	6f 0f ff ff 	jnz.t %d15,0,80008b5a <osEE_tc_core1_start+0x94>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
80008b60:	82 0f       	mov %d15,0
80008b62:	cd cf 20 09 	mtcr $pcon0,%d15
80008b66:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008b6a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008b6c:	2e 16       	jz.t %d15,1,80008b78 <osEE_tc_core1_start+0xb2>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008b6e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008b72:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008b76:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008b78:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008b7c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008b80:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008b82:	4c f0       	ld.w %d15,[%a15]0
80008b84:	6f 0f ff 7f 	jz.t %d15,0,80008b82 <osEE_tc_core1_start+0xbc>
80008b88:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008b8c:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008b90:	91 30 00 ff 	movh.a %a15,61443
80008b94:	53 cf 20 f0 	mul %d15,%d15,12
80008b98:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008b9c:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008b9e:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ba0:	48 03       	ld.w %d3,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008ba2:	d9 2f 00 46 	lea %a15,[%a2]24832
80008ba6:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008baa:	37 03 6e 31 	extr.u %d3,%d3,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008bae:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008bb0:	8f f3 83 31 	xor %d3,%d3,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008bb4:	2e 16       	jz.t %d15,1,80008bc0 <osEE_tc_core1_start+0xfa>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008bb6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008bba:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008bbe:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008bc0:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008bc4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008bc8:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008bca:	4c f0       	ld.w %d15,[%a15]0
80008bcc:	6f 0f ff ff 	jnz.t %d15,0,80008bca <osEE_tc_core1_start+0x104>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
80008bd0:	82 0f       	mov %d15,0
80008bd2:	cd 0f 04 09 	mtcr $dcon0,%d15
80008bd6:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008bda:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008bdc:	2e 16       	jz.t %d15,1,80008be8 <osEE_tc_core1_start+0x122>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008bde:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008be2:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008be6:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008be8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008bec:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008bf0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008bf2:	4c f0       	ld.w %d15,[%a15]0
80008bf4:	6f 0f ff 7f 	jz.t %d15,0,80008bf2 <osEE_tc_core1_start+0x12c>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008bf8:	91 30 00 ff 	movh.a %a15,61443
80008bfc:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008c00:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008c02:	2e 16       	jz.t %d15,1,80008c0e <osEE_tc_core1_start+0x148>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008c04:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008c08:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008c0c:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008c0e:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008c12:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008c16:	91 30 00 ff 	movh.a %a15,61443
80008c1a:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008c1e:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008c20:	40 f2       	mov.aa %a2,%a15
80008c22:	4c 20       	ld.w %d15,[%a2]0
80008c24:	91 30 00 ff 	movh.a %a15,61443
80008c28:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008c2c:	6f 0f fb ff 	jnz.t %d15,0,80008c22 <osEE_tc_core1_start+0x15c>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(1U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB1);
80008c30:	7b 00 00 f8 	movh %d15,32768
80008c34:	1b 0f 30 f1 	addi %d15,%d15,4864
80008c38:	cd 4f e2 0f 	mtcr $btv,%d15
80008c3c:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB1);
80008c40:	7b 10 00 f8 	movh %d15,32769
80008c44:	1b 0f 00 f0 	addi %d15,%d15,0
80008c48:	cd 0f e2 0f 	mtcr $biv,%d15
80008c4c:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK1);
80008c50:	7b 20 00 f6 	movh %d15,24578
80008c54:	1b 0f b0 fb 	addi %d15,%d15,-17664
80008c58:	cd 8f e2 0f 	mtcr $isp,%d15
80008c5c:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008c60:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008c62:	2e 16       	jz.t %d15,1,80008c6e <osEE_tc_core1_start+0x1a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008c64:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008c68:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008c6c:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008c6e:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008c72:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008c76:	91 30 00 ff 	movh.a %a15,61443
80008c7a:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008c7e:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008c80:	4c f0       	ld.w %d15,[%a15]0
80008c82:	6f 0f ff 7f 	jz.t %d15,0,80008c80 <osEE_tc_core1_start+0x1ba>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(1U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
80008c86:	91 10 00 f7 	movh.a %a15,28673
80008c8a:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
80008c8e:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
80008c90:	91 10 00 f8 	movh.a %a15,32769
80008c94:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <Ifx_CircularBuffer_read32>>
80008c98:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
80008c9a:	91 10 00 f8 	movh.a %a15,32769
80008c9e:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <Ifx_CircularBuffer_read32>>
80008ca2:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
#else
  osEE_tc_setareg(a9, &osEE_cdb_var_core1);
80008ca4:	91 00 00 f8 	movh.a %a15,32768
80008ca8:	d9 ff 18 50 	lea %a15,[%a15]344 <80000158 <osEE_cdb_var_core1>>
80008cac:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
80008cae:	7b 20 00 36 	movh %d3,24578
80008cb2:	7b 20 00 56 	movh %d5,24578
80008cb6:	1b 03 c0 7b 	addi %d7,%d3,-17408
80008cba:	1b 05 c0 5d 	addi %d5,%d5,-9216
80008cbe:	a2 75       	sub %d5,%d7
80008cc0:	86 a5       	sha %d5,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
80008cc2:	82 0f       	mov %d15,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
80008cc4:	df 05 1d 00 	jeq %d5,0,80008cfe <osEE_tc_core1_start+0x238>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80008cc8:	1b f5 ff 3f 	addi %d3,%d5,-1
80008ccc:	06 63       	sh %d3,6
80008cce:	0b 73 00 40 	add %d4,%d3,%d7

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008cd2:	60 4f       	mov.a %a15,%d4
80008cd4:	82 01       	mov %d1,0
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008cd6:	8f 44 1e f0 	sh %d15,%d4,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008cda:	37 04 70 03 	extr.u %d0,%d4,6,16
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008cde:	68 01       	st.w [%a15]0,%d1
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008ce0:	60 5f       	mov.a %a15,%d5
80008ce2:	1b 03 fc 3f 	addi %d3,%d3,-64
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008ce6:	37 f0 10 f8 	insert %d15,%d0,%d15,16,16
80008cea:	42 73       	add %d3,%d7

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008cec:	82 54       	mov %d4,5
80008cee:	b0 ff       	add.a %a15,-1
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008cf0:	8f 43 1e 70 	sh %d7,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008cf4:	37 03 70 53 	extr.u %d5,%d3,6,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008cf8:	c2 f4       	add %d4,-1
80008cfa:	fd f0 71 00 	loop %a15,80008ddc <osEE_tc_core1_start+0x316>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
80008cfe:	cd 8f e3 0f 	mtcr $fcx,%d15
80008d02:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008d06:	91 30 00 ff 	movh.a %a15,61443
80008d0a:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008d0e:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008d10:	2e 16       	jz.t %d15,1,80008d1c <osEE_tc_core1_start+0x256>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008d12:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008d16:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008d1a:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008d1c:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008d20:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008d24:	91 30 00 ff 	movh.a %a15,61443
80008d28:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008d2c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008d2e:	40 f2       	mov.aa %a2,%a15
80008d30:	4c 20       	ld.w %d15,[%a2]0
80008d32:	91 30 00 ff 	movh.a %a15,61443
80008d36:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008d3a:	6f 0f fb ff 	jnz.t %d15,0,80008d30 <osEE_tc_core1_start+0x26a>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
80008d3e:	91 30 00 2f 	movh.a %a2,61443
80008d42:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008d46:	4c 24       	ld.w %d15,[%a2]16
80008d48:	96 08       	or %d15,8
80008d4a:	6c 24       	st.w [%a2]16,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008d4c:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008d4e:	2e 16       	jz.t %d15,1,80008d5a <osEE_tc_core1_start+0x294>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008d50:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008d54:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008d58:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008d5a:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008d5e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008d62:	91 30 00 ff 	movh.a %a15,61443
80008d66:	d9 ff 0c 46 	lea %a15,[%a15]24844 <f003610c <_SMALL_DATA4_+0x4002e10c>>
80008d6a:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008d6c:	4c f0       	ld.w %d15,[%a15]0
80008d6e:	6f 0f ff 7f 	jz.t %d15,0,80008d6c <osEE_tc_core1_start+0x2a6>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008d72:	91 30 00 ff 	movh.a %a15,61443
80008d76:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008d7a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008d7c:	2e 16       	jz.t %d15,1,80008d88 <osEE_tc_core1_start+0x2c2>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008d7e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008d82:	37 6f 0e f1 	insert %d15,%d15,%d6,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008d86:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
80008d88:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
80008d8c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
80008d90:	91 30 00 ff 	movh.a %a15,61443
80008d94:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008d98:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
80008d9a:	40 f2       	mov.aa %a2,%a15
80008d9c:	4c 20       	ld.w %d15,[%a2]0
80008d9e:	91 30 00 ff 	movh.a %a15,61443
80008da2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008da6:	6f 0f fb ff 	jnz.t %d15,0,80008d9c <osEE_tc_core1_start+0x2d6>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
80008daa:	4c f1       	ld.w %d15,[%a15]4
80008dac:	96 08       	or %d15,8
80008dae:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008db0:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008db2:	2e 16       	jz.t %d15,1,80008dbe <osEE_tc_core1_start+0x2f8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008db4:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008db8:	37 6f 0e f1 	insert %d15,%d15,%d6,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008dbc:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008dbe:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008dc2:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008dc6:	91 30 00 ff 	movh.a %a15,61443
80008dca:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008dce:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008dd0:	4c f0       	ld.w %d15,[%a15]0
80008dd2:	6f 0f ff 7f 	jz.t %d15,0,80008dd0 <osEE_tc_core1_start+0x30a>
/* C core 1 private initialization */
  _c_init_tc1();
#endif /* __TASKING__ */

/* Call main function */
  (void)main();
80008dd6:	6d ff 3d db 	call 80004450 <main>

/* TODO: handle main return */
  for (;;) {
    ;
  }
80008dda:	3c 00       	j 80008dda <osEE_tc_core1_start+0x314>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008ddc:	60 32       	mov.a %a2,%d3
80008dde:	6c 20       	st.w [%a2]0,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008de0:	37 75 10 f8 	insert %d15,%d5,%d7,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
80008de4:	76 44       	jz %d4,80008dec <osEE_tc_core1_start+0x326>
80008de6:	1b 03 fc 3f 	addi %d3,%d3,-64
80008dea:	3c 83       	j 80008cf0 <osEE_tc_core1_start+0x22a>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
80008dec:	cd cf e3 0f 	mtcr $lcx,%d15
80008df0:	0d 00 c0 04 	isync 
80008df4:	3c f9       	j 80008de6 <osEE_tc_core1_start+0x320>

80008df6 <osEE_tc_core2_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008df6:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008dfa:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008dfe:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008e02:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008e06:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x40028018>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008e0a:	48 06       	ld.w %d6,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008e0c:	37 02 6e 21 	extr.u %d2,%d2,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008e10:	37 06 6e 61 	extr.u %d6,%d6,2,14
80008e14:	91 20 00 f5 	movh.a %a15,20482
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008e18:	8f f2 83 21 	xor %d2,%d2,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008e1c:	8f f6 83 61 	xor %d6,%d6,63
80008e20:	d9 ff 40 8b 	lea %a15,[%a15]-18944 <5001b600 <__USTACK2>>
80008e24:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80008e26:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
80008e2a:	3b 00 b8 f0 	mov %d15,2944
80008e2e:	cd 4f e0 0f 	mtcr $psw,%d15
80008e32:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008e36:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008e3a:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008e3e:	cd 0f e0 0f 	mtcr $pcxi,%d15
80008e42:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80008e46:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008e4a:	82 13       	mov %d3,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008e4c:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008e50:	cd 43 20 09 	mtcr $pcon1,%d3
80008e54:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008e58:	53 cf 20 f0 	mul %d15,%d15,12
80008e5c:	10 22       	addsc.a %a2,%a2,%d15,0
80008e5e:	54 23       	ld.w %d3,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008e60:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008e62:	37 03 6e 31 	extr.u %d3,%d3,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008e66:	d9 2f 00 46 	lea %a15,[%a2]24832
80008e6a:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008e6e:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008e70:	8f f3 83 31 	xor %d3,%d3,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008e74:	2e 16       	jz.t %d15,1,80008e80 <osEE_tc_core2_start+0x8a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008e76:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008e7a:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008e7e:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008e80:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008e84:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008e88:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008e8a:	4c f0       	ld.w %d15,[%a15]0
80008e8c:	6f 0f ff ff 	jnz.t %d15,0,80008e8a <osEE_tc_core2_start+0x94>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
80008e90:	82 0f       	mov %d15,0
80008e92:	cd cf 20 09 	mtcr $pcon0,%d15
80008e96:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008e9a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008e9c:	2e 16       	jz.t %d15,1,80008ea8 <osEE_tc_core2_start+0xb2>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008e9e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008ea2:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008ea6:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008ea8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008eac:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008eb0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008eb2:	4c f0       	ld.w %d15,[%a15]0
80008eb4:	6f 0f ff 7f 	jz.t %d15,0,80008eb2 <osEE_tc_core2_start+0xbc>
80008eb8:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008ebc:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ec0:	91 30 00 ff 	movh.a %a15,61443
80008ec4:	53 cf 20 f0 	mul %d15,%d15,12
80008ec8:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008ecc:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008ece:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ed0:	48 03       	ld.w %d3,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008ed2:	d9 2f 00 46 	lea %a15,[%a2]24832
80008ed6:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008eda:	37 03 6e 31 	extr.u %d3,%d3,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008ede:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008ee0:	8f f3 83 31 	xor %d3,%d3,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008ee4:	2e 16       	jz.t %d15,1,80008ef0 <osEE_tc_core2_start+0xfa>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008ee6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008eea:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008eee:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008ef0:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008ef4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008ef8:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008efa:	4c f0       	ld.w %d15,[%a15]0
80008efc:	6f 0f ff ff 	jnz.t %d15,0,80008efa <osEE_tc_core2_start+0x104>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
80008f00:	82 0f       	mov %d15,0
80008f02:	cd 0f 04 09 	mtcr $dcon0,%d15
80008f06:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008f0a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008f0c:	2e 16       	jz.t %d15,1,80008f18 <osEE_tc_core2_start+0x122>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008f0e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008f12:	37 3f 0e f1 	insert %d15,%d15,%d3,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008f16:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008f18:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008f1c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008f20:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008f22:	4c f0       	ld.w %d15,[%a15]0
80008f24:	6f 0f ff 7f 	jz.t %d15,0,80008f22 <osEE_tc_core2_start+0x12c>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008f28:	91 30 00 ff 	movh.a %a15,61443
80008f2c:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80008f30:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008f32:	2e 16       	jz.t %d15,1,80008f3e <osEE_tc_core2_start+0x148>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008f34:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008f38:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008f3c:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008f3e:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008f42:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008f46:	91 30 00 ff 	movh.a %a15,61443
80008f4a:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80008f4e:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008f50:	40 f2       	mov.aa %a2,%a15
80008f52:	4c 20       	ld.w %d15,[%a2]0
80008f54:	91 30 00 ff 	movh.a %a15,61443
80008f58:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80008f5c:	6f 0f fb ff 	jnz.t %d15,0,80008f52 <osEE_tc_core2_start+0x15c>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(2U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB2);
80008f60:	7b 00 00 f8 	movh %d15,32768
80008f64:	1b 0f 30 f1 	addi %d15,%d15,4864
80008f68:	cd 4f e2 0f 	mtcr $btv,%d15
80008f6c:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB2);
80008f70:	7b 10 00 f8 	movh %d15,32769
80008f74:	1b 0f 00 f2 	addi %d15,%d15,8192
80008f78:	cd 0f e2 0f 	mtcr $biv,%d15
80008f7c:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK2);
80008f80:	7b 20 00 f5 	movh %d15,20482
80008f84:	1b 0f b0 fb 	addi %d15,%d15,-17664
80008f88:	cd 8f e2 0f 	mtcr $isp,%d15
80008f8c:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008f90:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008f92:	2e 16       	jz.t %d15,1,80008f9e <osEE_tc_core2_start+0x1a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008f94:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008f98:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008f9c:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008f9e:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008fa2:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008fa6:	91 30 00 ff 	movh.a %a15,61443
80008faa:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
80008fae:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008fb0:	4c f0       	ld.w %d15,[%a15]0
80008fb2:	6f 0f ff 7f 	jz.t %d15,0,80008fb0 <osEE_tc_core2_start+0x1ba>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(2U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
80008fb6:	91 10 00 f7 	movh.a %a15,28673
80008fba:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
80008fbe:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
80008fc0:	91 10 00 f8 	movh.a %a15,32769
80008fc4:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <Ifx_CircularBuffer_read32>>
80008fc8:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
80008fca:	91 10 00 f8 	movh.a %a15,32769
80008fce:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <Ifx_CircularBuffer_read32>>
80008fd2:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
#else
  osEE_tc_setareg(a9, &osEE_cdb_var_core2);
80008fd4:	91 00 00 f8 	movh.a %a15,32768
80008fd8:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_cdb_var_core2>>
80008fdc:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
80008fde:	7b 20 00 35 	movh %d3,20482
80008fe2:	7b 20 00 55 	movh %d5,20482
80008fe6:	1b 03 c0 7b 	addi %d7,%d3,-17408
80008fea:	1b 05 c0 5d 	addi %d5,%d5,-9216
80008fee:	a2 75       	sub %d5,%d7
80008ff0:	86 a5       	sha %d5,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
80008ff2:	82 0f       	mov %d15,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
80008ff4:	df 05 1d 00 	jeq %d5,0,8000902e <osEE_tc_core2_start+0x238>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80008ff8:	1b f5 ff 3f 	addi %d3,%d5,-1
80008ffc:	06 63       	sh %d3,6
80008ffe:	0b 73 00 40 	add %d4,%d3,%d7

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80009002:	60 4f       	mov.a %a15,%d4
80009004:	82 01       	mov %d1,0
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80009006:	8f 44 1e f0 	sh %d15,%d4,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
8000900a:	37 04 70 03 	extr.u %d0,%d4,6,16
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
8000900e:	68 01       	st.w [%a15]0,%d1
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009010:	60 5f       	mov.a %a15,%d5
80009012:	1b 03 fc 3f 	addi %d3,%d3,-64
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80009016:	37 f0 10 f8 	insert %d15,%d0,%d15,16,16
8000901a:	42 73       	add %d3,%d7

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
8000901c:	82 54       	mov %d4,5
8000901e:	b0 ff       	add.a %a15,-1
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80009020:	8f 43 1e 70 	sh %d7,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80009024:	37 03 70 53 	extr.u %d5,%d3,6,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009028:	c2 f4       	add %d4,-1
8000902a:	fd f0 71 00 	loop %a15,8000910c <osEE_tc_core2_start+0x316>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
8000902e:	cd 8f e3 0f 	mtcr $fcx,%d15
80009032:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009036:	91 30 00 ff 	movh.a %a15,61443
8000903a:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
8000903e:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009040:	2e 16       	jz.t %d15,1,8000904c <osEE_tc_core2_start+0x256>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009042:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009046:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
8000904a:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
8000904c:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80009050:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009054:	91 30 00 ff 	movh.a %a15,61443
80009058:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
8000905c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
8000905e:	40 f2       	mov.aa %a2,%a15
80009060:	4c 20       	ld.w %d15,[%a2]0
80009062:	91 30 00 ff 	movh.a %a15,61443
80009066:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
8000906a:	6f 0f fb ff 	jnz.t %d15,0,80009060 <osEE_tc_core2_start+0x26a>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
8000906e:	91 30 00 2f 	movh.a %a2,61443
80009072:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009076:	4c 27       	ld.w %d15,[%a2]28
80009078:	96 08       	or %d15,8
8000907a:	6c 27       	st.w [%a2]28,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
8000907c:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000907e:	2e 16       	jz.t %d15,1,8000908a <osEE_tc_core2_start+0x294>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009080:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009084:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009088:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
8000908a:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
8000908e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009092:	91 30 00 ff 	movh.a %a15,61443
80009096:	d9 ff 18 46 	lea %a15,[%a15]24856 <f0036118 <_SMALL_DATA4_+0x4002e118>>
8000909a:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
8000909c:	4c f0       	ld.w %d15,[%a15]0
8000909e:	6f 0f ff 7f 	jz.t %d15,0,8000909c <osEE_tc_core2_start+0x2a6>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800090a2:	91 30 00 ff 	movh.a %a15,61443
800090a6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800090aa:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800090ac:	2e 16       	jz.t %d15,1,800090b8 <osEE_tc_core2_start+0x2c2>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800090ae:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800090b2:	37 6f 0e f1 	insert %d15,%d15,%d6,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800090b6:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800090b8:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800090bc:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800090c0:	91 30 00 ff 	movh.a %a15,61443
800090c4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800090c8:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800090ca:	40 f2       	mov.aa %a2,%a15
800090cc:	4c 20       	ld.w %d15,[%a2]0
800090ce:	91 30 00 ff 	movh.a %a15,61443
800090d2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800090d6:	6f 0f fb ff 	jnz.t %d15,0,800090cc <osEE_tc_core2_start+0x2d6>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
800090da:	4c f1       	ld.w %d15,[%a15]4
800090dc:	96 08       	or %d15,8
800090de:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800090e0:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800090e2:	2e 16       	jz.t %d15,1,800090ee <osEE_tc_core2_start+0x2f8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800090e4:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800090e8:	37 6f 0e f1 	insert %d15,%d15,%d6,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800090ec:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
800090ee:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
800090f2:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
800090f6:	91 30 00 ff 	movh.a %a15,61443
800090fa:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800090fe:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80009100:	4c f0       	ld.w %d15,[%a15]0
80009102:	6f 0f ff 7f 	jz.t %d15,0,80009100 <osEE_tc_core2_start+0x30a>
/* C core 2 private initialization */
  _c_init_tc2();
#endif /* __TASKING__ */

/* Call main function */
  (void)main();
80009106:	6d ff a5 d9 	call 80004450 <main>
  
/* TODO: handle main return */
  for (;;) {
    ;
  }
8000910a:	3c 00       	j 8000910a <osEE_tc_core2_start+0x314>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
8000910c:	60 32       	mov.a %a2,%d3
8000910e:	6c 20       	st.w [%a2]0,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80009110:	37 75 10 f8 	insert %d15,%d5,%d7,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
80009114:	76 44       	jz %d4,8000911c <osEE_tc_core2_start+0x326>
80009116:	1b 03 fc 3f 	addi %d3,%d3,-64
8000911a:	3c 83       	j 80009020 <osEE_tc_core2_start+0x22a>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
8000911c:	cd cf e3 0f 	mtcr $lcx,%d15
80009120:	0d 00 c0 04 	isync 
80009124:	3c f9       	j 80009116 <osEE_tc_core2_start+0x320>

80009126 <osEE_tc_stm_us_ticks>:
#if (defined(__TASKING__))
#define OS_STOP_SEC_GLOBAL_VAR_CLEARED
#include "Os_MemMap.h"
#endif /* __TASKING__ */

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
80009126:	40 ae       	mov.aa %a14,%sp
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
80009128:	91 00 00 f7 	movh.a %a15,28672
8000912c:	19 ff a0 c0 	ld.w %d15,[%a15]2848 <70000b20 <osEE_tc_stm_freq_khz>>
80009130:	3b 80 3e 20 	mov %d2,1000
80009134:	3f 2f 0c 80 	jlt.u %d15,%d2,8000914c <osEE_tc_stm_us_ticks+0x26>
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
80009138:	7b 20 06 21 	movh %d2,4194
8000913c:	1b 32 dd 24 	addi %d2,%d2,19923
80009140:	73 2f 68 20 	mul.u %e2,%d15,%d2
80009144:	8f a3 1f 20 	sh %d2,%d3,-6
80009148:	e2 42       	mul %d2,%d4
8000914a:	00 90       	ret 
  } else if (usec >= OSEE_KILO) {
8000914c:	02 25       	mov %d5,%d2
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
8000914e:	73 f4 0a 20 	mul %d2,%d4,%d15
80009152:	7b 20 06 31 	movh %d3,4194
80009156:	1b 33 dd 34 	addi %d3,%d3,19923
8000915a:	73 32 68 20 	mul.u %e2,%d2,%d3
8000915e:	8f a3 1f 20 	sh %d2,%d3,-6

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
  } else if (usec >= OSEE_KILO) {
80009162:	3f 54 0b 80 	jlt.u %d4,%d5,80009178 <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
80009166:	7b 20 06 21 	movh %d2,4194
8000916a:	1b 32 dd 24 	addi %d2,%d2,19923
8000916e:	73 24 68 40 	mul.u %e4,%d4,%d2
80009172:	8f a5 1f 20 	sh %d2,%d5,-6
80009176:	e2 f2       	mul %d2,%d15
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
  }
  return ticks;
}
80009178:	00 90       	ret 

8000917a <osEE_tc_set_pll_fsource>:
#define OSEE_TC_K2_MIN      (1U)
#define OSEE_TC_N_MAX       (128U)  /* '7 bits */
#define OSEE_TC_N_MIN       (1U)
#define OSEE_TC_DEV_ALLOWED (2U)

void osEE_tc_set_pll_fsource(OsEE_reg fpll) {
8000917a:	40 ae       	mov.aa %a14,%sp
  fPllLeastError  = OSEE_TC_CLOCK_MAX;
  fPllError       = OSEE_TC_CLOCK_MAX;

  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
8000917c:	7b e0 e4 20 	movh %d2,3662
80009180:	1b 12 c0 21 	addi %d2,%d2,7169
80009184:	0b 24 30 f1 	lt.u %d15,%d4,%d2
80009188:	82 22       	mov %d2,2
8000918a:	ab 12 80 ff 	sel %d15,%d15,%d2,1
8000918e:	60 f4       	mov.a %a4,%d15
80009190:	53 ff 20 f0 	mul %d15,%d15,15
80009194:	60 f5       	mov.a %a5,%d15
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80009196:	3b 00 01 e0 	mov %d14,16
8000919a:	82 03       	mov %d3,0
8000919c:	7b c0 be 20 	movh %d2,3052
800091a0:	1b 02 20 2c 	addi %d2,%d2,-15872
800091a4:	02 28       	mov %d8,%d2
800091a6:	82 01       	mov %d1,0
800091a8:	82 0b       	mov %d11,0
800091aa:	82 0d       	mov %d13,0
800091ac:	82 0c       	mov %d12,0
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
800091ae:	7b 10 13 a0 	movh %d10,305
800091b2:	1b 0a d0 a2 	addi %d10,%d10,11520

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
800091b6:	91 40 0f 60 	movh.a %a6,244
800091ba:	d9 66 41 02 	lea %a6,[%a6]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
    {
      for (
800091be:	a0 1d       	mov.a %a13,1
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
800091c0:	53 14 40 60 	mul.u %e6,%d4,1
800091c4:	60 62       	mov.a %a2,%d6
800091c6:	60 73       	mov.a %a3,%d7

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
800091c8:	91 80 7d f1 	movh.a %a15,6104
800091cc:	d9 ff 41 08 	lea %a15,[%a15]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
        {
          for (
800091d0:	a0 1c       	mov.a %a12,1
800091d2:	3c 5e       	j 8000928e <osEE_tc_set_pll_fsource+0x114>
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
800091d4:	4b ea 11 62 	div.u %e6,%d10,%d14
800091d8:	82 07       	mov %d7,0

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
800091da:	7b 60 f8 ff 	movh %d15,65414
800091de:	1b 0f e0 fe 	addi %d15,%d15,-4608
800091e2:	0b f6 40 60 	addx %d6,%d6,%d15
800091e6:	8b f7 bf 50 	addc %d5,%d7,-1
800091ea:	ba 05       	eq %d15,%d5,0
800091ec:	80 67       	mov.d %d7,%a6
800091ee:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
800091f2:	8b 05 00 f5 	or.ne %d15,%d5,0
800091f6:	ee 4a       	jnz %d15,8000928a <osEE_tc_set_pll_fsource+0x110>
    {
      for (
800091f8:	df 00 56 00 	jeq %d0,0,800092a4 <osEE_tc_set_pll_fsource+0x12a>
800091fc:	02 e9       	mov %d9,%d14
800091fe:	80 d0       	mov.d %d0,%a13
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80009200:	60 e7       	mov.a %a7,%d14
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
80009202:	80 2f       	mov.d %d15,%a2
80009204:	73 f0 68 60 	mul.u %e6,%d0,%d15
80009208:	80 3f       	mov.d %d15,%a3
8000920a:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
8000920e:	7b 80 82 fe 	movh %d15,59432
80009212:	1b 0f c0 f7 	addi %d15,%d15,31744
80009216:	0b f6 40 60 	addx %d6,%d6,%d15
8000921a:	8b f7 bf 50 	addc %d5,%d7,-1
8000921e:	ba 05       	eq %d15,%d5,0
80009220:	80 f7       	mov.d %d7,%a15
80009222:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80009226:	8b 05 00 f5 	or.ne %d15,%d5,0
8000922a:	ee 25       	jnz %d15,80009274 <osEE_tc_set_pll_fsource+0xfa>
        {
          for (
8000922c:	0f 23 a0 f0 	or %d15,%d3,%d2
80009230:	6e 2d       	jz %d15,8000928a <osEE_tc_set_pll_fsource+0x110>
80009232:	80 c6       	mov.d %d6,%a12
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
80009234:	4b 96 11 22 	div.u %e2,%d6,%d9
80009238:	02 2f       	mov %d15,%d2
8000923a:	e2 af       	mul %d15,%d10
8000923c:	a2 4f       	sub %d15,%d4
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
8000923e:	53 1f 40 20 	mul.u %e2,%d15,1
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80009242:	df 0f ac 00 	jeq %d15,0,8000939a <osEE_tc_set_pll_fsource+0x220>
              bestK2         = k2;
              bestN          = n;
              bestP          = p;
            }

            if (fPllLeastError > fPllError)
80009246:	0b 13 00 51 	eq %d5,%d3,%d1
8000924a:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
8000924e:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
80009252:	ab 01 80 15 	sel %d1,%d5,%d1,0
80009256:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
8000925a:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
8000925e:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
80009262:	c2 16       	add %d6,1
      {
        fVco = ((uint64_t)fpll) * k2;

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
80009264:	8b 16 68 52 	lt.u %d5,%d6,129
80009268:	8b 0f 20 54 	and.ne %d5,%d15,0
8000926c:	df 05 e4 ff 	jne %d5,0,80009234 <osEE_tc_set_pll_fsource+0xba>
80009270:	02 d6       	mov %d6,%d13
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80009272:	02 6d       	mov %d13,%d6
    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
80009274:	80 4f       	mov.d %d15,%a4
80009276:	42 f0       	add %d0,%d15
80009278:	80 56       	mov.d %d6,%a5
8000927a:	42 69       	add %d9,%d6

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
8000927c:	0f 32 a0 50 	or %d5,%d2,%d3
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
80009280:	8b d0 61 f2 	lt.u %d15,%d0,29
80009284:	8b 05 20 f4 	and.ne %d15,%d5,0
80009288:	ee bd       	jnz %d15,80009202 <osEE_tc_set_pll_fsource+0x88>
8000928a:	01 45 20 50 	sub.a %a5,%a5,%a4
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
8000928e:	c2 fe       	add %d14,-1
    k2Steps = 1;
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
80009290:	0f 32 a0 f0 	or %d15,%d2,%d3
80009294:	8b 0f 20 02 	ne %d0,%d15,0
  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
  }

  for (
80009298:	8b 0e 20 52 	ne %d5,%d14,0
8000929c:	8b 0f 20 54 	and.ne %d5,%d15,0
800092a0:	df 05 9a ff 	jne %d5,0,800091d4 <osEE_tc_set_pll_fsource+0x5a>
      }
    }
  }

  /* Percent ALLOWED_DEVIATION error allowed */
  fpll_maxerrorallowed = (fpll * OSEE_TC_DEV_ALLOWED) / ((OsEE_reg)100U);
800092a4:	06 14       	sh %d4,1
800092a6:	7b c0 1e f5 	movh %d15,20972
800092aa:	1b ff 51 f8 	addi %d15,%d15,-31457
800092ae:	73 f4 68 40 	mul.u %e4,%d4,%d15
800092b2:	8f b5 1f 20 	sh %d2,%d5,-5
  if (fPllLeastError < (uint64_t)fpll_maxerrorallowed)
800092b6:	ba 01       	eq %d15,%d1,0
800092b8:	0b 28 50 f2 	and.ge.u %d15,%d8,%d2
800092bc:	8b 01 00 f5 	or.ne %d15,%d1,0
800092c0:	ee 73       	jnz %d15,800093a6 <osEE_tc_set_pll_fsource+0x22c>
  {
    /* Divide by K2DIV + 1 */
    OSEE_TC_SCU_PLLCON1.bits.k2div = (uint8_t)(bestK2 - 1U);
800092c2:	c2 fc       	add %d12,-1
800092c4:	91 30 00 ff 	movh.a %a15,61443
800092c8:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800092cc:	4c f0       	ld.w %d15,[%a15]0
800092ce:	37 cf 07 c0 	insert %d12,%d15,%d12,0,7
800092d2:	68 0c       	st.w [%a15]0,%d12

    while (OSEE_TC_SCU_PLLSTAT.bits.k2rdy == 0U) {
800092d4:	91 30 00 ff 	movh.a %a15,61443
800092d8:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800092dc:	4c f0       	ld.w %d15,[%a15]0
800092de:	6f 5f ff 7f 	jz.t %d15,5,800092dc <osEE_tc_set_pll_fsource+0x162>
    }

    /* K1 divider default value */

    /* Enabled the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 1U;
800092e2:	91 30 00 ff 	movh.a %a15,61443
800092e6:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800092ea:	4c f0       	ld.w %d15,[%a15]0
800092ec:	96 01       	or %d15,1
800092ee:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
800092f0:	91 30 00 ff 	movh.a %a15,61443
800092f4:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800092f8:	4c f0       	ld.w %d15,[%a15]0
800092fa:	6f 0f ff 7f 	jz.t %d15,0,800092f8 <osEE_tc_set_pll_fsource+0x17e>
      ; /* Wait until prescaler mode is entered */
    }

    /* I will use n=80 and p=2. Because I can get al the
       needed values */
    OSEE_TC_SCU_PLLCON0.bits.pdiv = (uint8_t)(bestP - 1U);
800092fe:	9a fb       	add %d15,%d11,-1
80009300:	91 30 00 ff 	movh.a %a15,61443
80009304:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009308:	16 0f       	and %d15,15
8000930a:	8f 8f 01 f0 	sh %d15,%d15,24
8000930e:	48 02       	ld.w %d2,[%a15]0
80009310:	b7 02 04 2c 	insert %d2,%d2,0,24,4
80009314:	a6 2f       	or %d15,%d2
80009316:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_PLLCON0.bits.ndiv = (uint8_t)(bestN - 1U);
80009318:	9a fd       	add %d15,%d13,-1
8000931a:	16 7f       	and %d15,127
8000931c:	8f 9f 00 f0 	sh %d15,%d15,9
80009320:	48 02       	ld.w %d2,[%a15]0
80009322:	b7 02 87 24 	insert %d2,%d2,0,9,7
80009326:	a6 2f       	or %d15,%d2
80009328:	68 0f       	st.w [%a15]0,%d15

    /* Power down VCO Normal Behavior */
    OSEE_TC_SCU_PLLCON0.bits.vcopwd = 0U;
8000932a:	4c f0       	ld.w %d15,[%a15]0
8000932c:	8f 2f c0 f1 	andn %d15,%d15,2
80009330:	68 0f       	st.w [%a15]0,%d15

    /***** Configure PLL normal mode. *****/

    /* Automatic oscillator disconnect disabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 1U;
80009332:	4c f0       	ld.w %d15,[%a15]0
80009334:	96 40       	or %d15,64
80009336:	68 0f       	st.w [%a15]0,%d15
    /* Connect VCO to the oscillator */
    OSEE_TC_SCU_PLLCON0.bits.clrfindis = 1U;
80009338:	4c f0       	ld.w %d15,[%a15]0
8000933a:	96 20       	or %d15,32
8000933c:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.findis == 1U) {
8000933e:	91 30 00 ff 	movh.a %a15,61443
80009342:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009346:	4c f0       	ld.w %d15,[%a15]0
80009348:	6f 3f ff ff 	jnz.t %d15,3,80009346 <osEE_tc_set_pll_fsource+0x1cc>
      ; /* Wait until oscillator is connected to the VCO */
    }

    /* Restart VCO lock detection */
    OSEE_TC_SCU_PLLCON0.bits.resld = 1U;
8000934c:	91 30 00 ff 	movh.a %a15,61443
80009350:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009354:	4c f0       	ld.w %d15,[%a15]0
80009356:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
8000935a:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
8000935c:	91 30 00 ff 	movh.a %a15,61443
80009360:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009364:	4c f0       	ld.w %d15,[%a15]0
80009366:	6f 2f ff 7f 	jz.t %d15,2,80009364 <osEE_tc_set_pll_fsource+0x1ea>
      ; /* Wait until the VCO becomes locked */
    }

    /* Disable the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 0U;
8000936a:	91 30 00 ff 	movh.a %a15,61443
8000936e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009372:	4c f0       	ld.w %d15,[%a15]0
80009374:	8f 1f c0 f1 	andn %d15,%d15,1
80009378:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
8000937a:	91 30 00 ff 	movh.a %a15,61443
8000937e:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009382:	4c f0       	ld.w %d15,[%a15]0
80009384:	6f 0f ff ff 	jnz.t %d15,0,80009382 <osEE_tc_set_pll_fsource+0x208>
      ; /* Wait until normal mode is entered */
    }

    /* Automatic oscillator disconnect enabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
80009388:	91 30 00 ff 	movh.a %a15,61443
8000938c:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009390:	4c f0       	ld.w %d15,[%a15]0
80009392:	8f 0f c4 f1 	andn %d15,%d15,64
80009396:	68 0f       	st.w [%a15]0,%d15
80009398:	00 90       	ret 
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
            {
              fPllLeastError = fPllError;
8000939a:	02 28       	mov %d8,%d2
8000939c:	02 31       	mov %d1,%d3
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
8000939e:	80 7b       	mov.d %d11,%a7
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800093a0:	02 0c       	mov %d12,%d0
800093a2:	1d ff 68 ff 	j 80009272 <osEE_tc_set_pll_fsource+0xf8>
800093a6:	00 90       	ret 

800093a8 <osEE_tc_get_fsource>:
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
  }

}

OsEE_reg osEE_tc_get_fsource(void) {
800093a8:	40 ae       	mov.aa %a14,%sp
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
800093aa:	91 30 00 ff 	movh.a %a15,61443
800093ae:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800093b2:	4c f0       	ld.w %d15,[%a15]0
800093b4:	37 0f 62 fe 	extr.u %d15,%d15,28,2
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
      }
    }
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
800093b8:	7b 60 5f 20 	movh %d2,1526
800093bc:	1b 02 10 2e 	addi %d2,%d2,-7936

OsEE_reg osEE_tc_get_fsource(void) {
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
800093c0:	6e 45       	jz %d15,8000944a <osEE_tc_get_fsource+0xa2>
    /* PLL */
    /* PLL dividers */
    OsEE_reg k1, k2, p, n;
    /* Prescaler mode */
    if (OSEE_TC_SCU_PLLSTAT.bits.vcobyst != 0U)
800093c2:	91 30 00 ff 	movh.a %a15,61443
800093c6:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800093ca:	4c f0       	ld.w %d15,[%a15]0
800093cc:	6f 0f 11 00 	jz.t %d15,0,800093ee <osEE_tc_get_fsource+0x46>
    {
      k1 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k1div + 1U;
800093d0:	91 30 00 ff 	movh.a %a15,61443
800093d4:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800093d8:	48 02       	ld.w %d2,[%a15]0
800093da:	37 02 67 28 	extr.u %d2,%d2,16,7
800093de:	c2 12       	add %d2,1
      fsource = OSEE_TC_BOARD_FOSC / k1;
800093e0:	7b 10 13 f0 	movh %d15,305
800093e4:	1b 0f d0 f2 	addi %d15,%d15,11520
800093e8:	4b 2f 11 22 	div.u %e2,%d15,%d2
800093ec:	00 90       	ret 
    } else {
      /* Free running mode */
      if (OSEE_TC_SCU_PLLSTAT.bits.findis != 0U)
800093ee:	4c f0       	ld.w %d15,[%a15]0
800093f0:	6f 3f 11 00 	jz.t %d15,3,80009412 <osEE_tc_get_fsource+0x6a>
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
800093f4:	91 30 00 ff 	movh.a %a15,61443
800093f8:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800093fc:	48 02       	ld.w %d2,[%a15]0
800093fe:	8f f2 07 21 	and %d2,%d2,127
80009402:	9a 12       	add %d15,%d2,1
        fsource = OSEE_TC_BOARD_FOSC / k2;
80009404:	7b 10 13 20 	movh %d2,305
80009408:	1b 02 d0 22 	addi %d2,%d2,11520
8000940c:	4b f2 11 22 	div.u %e2,%d2,%d15
80009410:	00 90       	ret 
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009412:	91 30 00 ff 	movh.a %a15,61443
80009416:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
8000941a:	4c f0       	ld.w %d15,[%a15]0
8000941c:	8f ff 07 51 	and %d5,%d15,127
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
80009420:	91 30 00 ff 	movh.a %a15,61443
80009424:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009428:	4c f0       	ld.w %d15,[%a15]0
8000942a:	37 0f 64 3c 	extr.u %d3,%d15,24,4
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;
8000942e:	48 02       	ld.w %d2,[%a15]0
80009430:	37 02 e7 44 	extr.u %d4,%d2,9,7
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
        fsource = OSEE_TC_BOARD_FOSC / k2;
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009434:	9a 15       	add %d15,%d5,1
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;

        /* cpu clock value fclk = (fosc * n)/(P * k2) */
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
80009436:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
8000943a:	7b 10 13 20 	movh %d2,305
8000943e:	1b 02 d0 22 	addi %d2,%d2,11520
80009442:	4b f2 11 22 	div.u %e2,%d2,%d15
80009446:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
  }
  return fsource;
}
8000944a:	00 90       	ret 

8000944c <osEE_tc_stm_set_clockpersec>:
  return ticks;
}

/* Set inside std time reference  */
void osEE_tc_stm_set_clockpersec(void)
{
8000944c:	40 ae       	mov.aa %a14,%sp
#if (defined(__TASKING__))
  /* I don't know where is declared */
  extern unsigned long long setfoschz ( unsigned long long );
#endif /* __TASKING__ */
  /* fSOURCE Frequency */
  OsEE_reg const fsource  = osEE_tc_get_fsource();
8000944e:	6d ff ad ff 	call 800093a8 <osEE_tc_get_fsource>
  /* Standard Timer Module period rounded */
  OsEE_reg const fstm     = (fsource + 1U) / OSEE_SCU_HW_FSTM_DIV;
80009452:	91 30 00 ff 	movh.a %a15,61443
80009456:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000945a:	4c f0       	ld.w %d15,[%a15]0
8000945c:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80009460:	c2 12       	add %d2,1
80009462:	4b f2 11 22 	div.u %e2,%d2,%d15

  /* Set Global variable with freq in Khz value */
  osEE_tc_stm_freq_khz = fstm / OSEE_KILO;
80009466:	7b 20 06 f1 	movh %d15,4194
8000946a:	1b 3f dd f4 	addi %d15,%d15,19923
8000946e:	73 f2 68 20 	mul.u %e2,%d2,%d15
80009472:	8f a3 1f f0 	sh %d15,%d3,-6
80009476:	91 00 00 f7 	movh.a %a15,28672
8000947a:	59 ff a0 c0 	st.w [%a15]2848 <70000b20 <osEE_tc_stm_freq_khz>>,%d15
8000947e:	00 90       	ret 

80009480 <osEE_tc_stm_set_sr0>:
    that qualifier on pointers.
 */

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0(OsEE_reg usec,
    OsEE_tc_isr_hw_prio intvec)
{
80009480:	40 ae       	mov.aa %a14,%sp
80009482:	02 59       	mov %d9,%d5
80009484:	4d c0 e1 8f 	mfcr %d8,$core_id
    5U;
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80009488:	6d ff 4f fe 	call 80009126 <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
8000948c:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
80009490:	8f 38 00 f1 	and %d15,%d8,3
80009494:	9b 0f 0f 40 	addih %d4,%d15,240
80009498:	8f 84 00 40 	sh %d4,%d4,8
8000949c:	60 4f       	mov.a %a15,%d4
 *  \return The timer lower word value read.
 */
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_tc_stm_get_time_lower_word(OsEE_reg stm_id)
{
  return OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_TIM0_OFF);
8000949e:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
800094a0:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
800094a2:	68 c2       	st.w [%a15]48,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
800094a4:	df 09 23 00 	jeq %d9,0,800094ea <osEE_tc_stm_set_sr0+0x6a>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
800094a8:	48 e2       	ld.w %d2,[%a15]56
800094aa:	b7 02 05 24 	insert %d2,%d2,0,8,5
800094ae:	68 e2       	st.w [%a15]56,%d2
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
800094b0:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize0   = size_of_compare;
800094b4:	48 e2       	ld.w %d2,[%a15]56
800094b6:	37 32 05 30 	insert %d3,%d2,%d3,0,5
800094ba:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 0 with Compare Register 0 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0os     = 0U;
800094bc:	48 f2       	ld.w %d2,[%a15]60
800094be:	8f 42 c0 21 	andn %d2,%d2,4
800094c2:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en     = 1U;
800094c4:	48 f2       	ld.w %d2,[%a15]60
800094c6:	8f 12 40 21 	or %d2,%d2,1
800094ca:	68 f2       	st.w [%a15]60,%d2

/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 0U), intvec);
800094cc:	06 3f       	sh %d15,3
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800094ce:	60 f2       	mov.a %a2,%d15
800094d0:	d9 2f 50 28 	lea %a15,[%a2]-31600
800094d4:	11 4f 00 ff 	addih.a %a15,%a15,61444
800094d8:	b7 89 99 93 	insert %d9,%d9,8,7,25
800094dc:	8f 38 00 81 	and %d8,%d8,3
800094e0:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
800094e4:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800094e6:	68 09       	st.w [%a15]0,%d9
800094e8:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en                 = 0U;
800094ea:	48 f2       	ld.w %d2,[%a15]60
800094ec:	8f 12 c0 21 	andn %d2,%d2,1
800094f0:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 0U)) = 0U;
800094f2:	1b 2f 09 f7 	addi %d15,%d15,28818
800094f6:	9b 0f e0 f1 	addih %d15,%d15,7680
800094fa:	06 3f       	sh %d15,3
800094fc:	82 02       	mov %d2,0
800094fe:	60 ff       	mov.a %a15,%d15
80009500:	68 02       	st.w [%a15]0,%d2
80009502:	00 90       	ret 

80009504 <osEE_tc_stm_set_sr0_next_match>:
  }
}

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0_next_match(OsEE_reg usec)
{
80009504:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009506:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP0IRR bit 0 => 0x1 | CMP0IRS bit 1 => 0x2 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x1U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) += osEE_tc_stm_us_ticks(usec);
8000950a:	6d ff 0e fe 	call 80009126 <osEE_tc_stm_us_ticks>
8000950e:	16 03       	and %d15,3
80009510:	9b 0f 0f f0 	addih %d15,%d15,240
80009514:	8f 8f 00 f0 	sh %d15,%d15,8
80009518:	60 ff       	mov.a %a15,%d15
8000951a:	4c fc       	ld.w %d15,[%a15]48
8000951c:	42 f2       	add %d2,%d15
8000951e:	68 c2       	st.w [%a15]48,%d2
80009520:	00 90       	ret 

80009522 <osEE_tc_stm_set_sr1>:
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1(OsEE_reg usec,
  OsEE_tc_isr_hw_prio intvec)
{
80009522:	40 ae       	mov.aa %a14,%sp
80009524:	02 59       	mov %d9,%d5
80009526:	4d c0 e1 8f 	mfcr %d8,$core_id
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
8000952a:	6d ff fe fd 	call 80009126 <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
8000952e:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
80009532:	8f 38 00 f1 	and %d15,%d8,3
80009536:	9b 0f 0f 40 	addih %d4,%d15,240
8000953a:	8f 84 00 40 	sh %d4,%d4,8
8000953e:	60 4f       	mov.a %a15,%d4
80009540:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
80009542:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
80009544:	68 d2       	st.w [%a15]52,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
80009546:	df 09 28 00 	jeq %d9,0,80009596 <osEE_tc_stm_set_sr1+0x74>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
8000954a:	48 e2       	ld.w %d2,[%a15]56
8000954c:	b7 02 05 2c 	insert %d2,%d2,0,24,5
80009550:	68 e2       	st.w [%a15]56,%d2
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
80009552:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize1   = size_of_compare;
80009556:	8f f3 01 31 	and %d3,%d3,31
8000955a:	8f 03 01 30 	sh %d3,%d3,16
8000955e:	48 e2       	ld.w %d2,[%a15]56
80009560:	b7 02 05 28 	insert %d2,%d2,0,16,5
80009564:	a6 23       	or %d3,%d2
80009566:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 1 with Compare Register 1 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1os     = 1U;
80009568:	48 f2       	ld.w %d2,[%a15]60
8000956a:	8f 02 44 21 	or %d2,%d2,64
8000956e:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en     = 1U;
80009570:	48 f2       	ld.w %d2,[%a15]60
80009572:	8f 02 41 21 	or %d2,%d2,16
80009576:	68 f2       	st.w [%a15]60,%d2
/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 1U), intvec);
80009578:	06 3f       	sh %d15,3
8000957a:	60 f2       	mov.a %a2,%d15
8000957c:	d9 2f 54 28 	lea %a15,[%a2]-31596
80009580:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009584:	b7 89 99 93 	insert %d9,%d9,8,7,25
80009588:	8f 38 00 81 	and %d8,%d8,3
8000958c:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
80009590:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80009592:	68 09       	st.w [%a15]0,%d9
80009594:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en                 = 0U;
80009596:	48 f2       	ld.w %d2,[%a15]60
80009598:	8f 02 c1 21 	andn %d2,%d2,16
8000959c:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 1U)) = 0U;
8000959e:	06 3f       	sh %d15,3
800095a0:	60 f2       	mov.a %a2,%d15
800095a2:	d9 2f 54 28 	lea %a15,[%a2]-31596
800095a6:	11 4f 00 ff 	addih.a %a15,%a15,61444
800095aa:	82 0f       	mov %d15,0
800095ac:	68 0f       	st.w [%a15]0,%d15
800095ae:	00 90       	ret 

800095b0 <osEE_tc_stm_set_sr1_next_match>:
  }
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1_next_match(OsEE_reg usec)
{
800095b0:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
800095b2:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP1IRR bit 2 => 0x4 | CMP1IRS bit 3 => 0x8 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x4U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) += osEE_tc_stm_us_ticks(usec);
800095b6:	6d ff b8 fd 	call 80009126 <osEE_tc_stm_us_ticks>
800095ba:	16 03       	and %d15,3
800095bc:	9b 0f 0f f0 	addih %d15,%d15,240
800095c0:	8f 8f 00 f0 	sh %d15,%d15,8
800095c4:	60 ff       	mov.a %a15,%d15
800095c6:	4c fd       	ld.w %d15,[%a15]52
800095c8:	42 f2       	add %d2,%d15
800095ca:	68 d2       	st.w [%a15]52,%d2
800095cc:	00 90       	ret 

800095ce <osEE_tc_delay>:
}

void osEE_tc_delay(OsEE_reg usec)
{
800095ce:	40 ae       	mov.aa %a14,%sp
800095d0:	4d c0 e1 ff 	mfcr %d15,$core_id
800095d4:	16 03       	and %d15,3
800095d6:	9b 0f 0f f0 	addih %d15,%d15,240
800095da:	8f 8f 00 f0 	sh %d15,%d15,8
800095de:	60 f2       	mov.a %a2,%d15
800095e0:	d9 2f 10 00 	lea %a15,[%a2]16
800095e4:	19 28 10 00 	ld.w %d8,[%a2]16
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
  /* Read Start Point */
  OsEE_reg    const start = osEE_tc_stm_get_time_lower_word(stm_id);
  /* Evaluate End Point */
  OsEE_reg    const ticks = osEE_tc_stm_us_ticks(usec);
800095e8:	6d ff 9f fd 	call 80009126 <osEE_tc_stm_us_ticks>
800095ec:	4c f0       	ld.w %d15,[%a15]0

  while (ticks > (osEE_tc_stm_get_time_lower_word(stm_id) - start)) {
800095ee:	a2 8f       	sub %d15,%d8
800095f0:	3f 2f fe ff 	jlt.u %d15,%d2,800095ec <osEE_tc_delay+0x1e>
    ; /* Wait */
  }
}
800095f4:	00 90       	ret 

800095f6 <osEE_tc_isr2_wrapper>:

#if (defined(__GNUC__))
#pragma section
#endif /* __GNUC__ */

static void OSEE_COMPILER_KEEP osEE_tc_isr2_wrapper(TaskType isr2_tid) {
800095f6:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_SINGLECORE))
  if (isr2_tid == INVALID_TASK) {
800095f8:	df f4 5c 80 	jne %d4,-1,800096b0 <osEE_tc_isr2_wrapper+0xba>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800095fc:	4d c0 e2 ff 	mfcr %d15,$icr
    OsEE_icr icr  = osEE_tc_get_icr();
    if (icr.bits.ccpn == 1U) {
80009600:	16 ff       	and %d15,255
80009602:	df 1f 59 80 	jne %d15,1,800096b4 <osEE_tc_isr2_wrapper+0xbe>
      CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
      CONSTP2CONST(OsEE_KCB, AUTOMATIC, OS_APPL_DATA) p_kcb = p_kdb->p_kcb;
80009606:	91 00 00 f8 	movh.a %a15,32768
8000960a:	99 f2 00 40 	ld.a %a2,[%a15]256 <80000100 <osEE_kdb_var>>
8000960e:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009612:	8f f8 0f f1 	and %d15,%d8,255
80009616:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000961a:	ee 0a       	jnz %d15,8000962e <osEE_tc_isr2_wrapper+0x38>
    OsEE_icr icr_temp = icr;
8000961c:	02 8f       	mov %d15,%d8
8000961e:	3b 30 01 20 	mov %d2,19
80009622:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009626:	cd cf e2 0f 	mtcr $icr,%d15
8000962a:	0d 00 c0 04 	isync 
8000962e:	4d c0 e1 2f 	mfcr %d2,$core_id
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_ack_signal(void)
{
  CoreIdType core_id = osEE_get_curr_core_id();

  OSEE_TC_SRC_REG(OSEE_TC_GPSR_SRC_OFFSET(OSEE_TC_GPSR_G, core_id)) |=
80009632:	8f f2 0f f1 	and %d15,%d2,255
80009636:	91 40 00 ff 	movh.a %a15,61444
8000963a:	d9 ff 00 09 	lea %a15,[%a15]-28672 <f0039000 <_SMALL_DATA4_+0x40031000>>
8000963e:	ff 4f 0b 80 	jge.u %d15,4,80009654 <osEE_tc_isr2_wrapper+0x5e>
80009642:	37 02 48 20 	extr %d2,%d2,0,8
80009646:	60 23       	mov.a %a3,%d2
80009648:	d9 3f 40 0e 	lea %a15,[%a3]-7168
8000964c:	11 1f c0 f3 	addih.a %a15,%a15,15361
80009650:	30 ff       	add.a %a15,%a15
80009652:	30 ff       	add.a %a15,%a15
80009654:	4c f0       	ld.w %d15,[%a15]0
80009656:	7b 00 20 24 	movh %d2,16896
8000965a:	a6 2f       	or %d15,%d2
8000965c:	68 0f       	st.w [%a15]0,%d15

      /* Ack IIRQ */
      osEE_tc_ack_signal();

      /* Check for ShutdownAllCores */
      if (p_kcb->ar_shutdown_all_cores_flag) {
8000965e:	0c 2e       	ld.bu %d15,[%a2]14
80009660:	6e 12       	jz %d15,80009684 <osEE_tc_isr2_wrapper+0x8e>
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
80009662:	40 93       	mov.aa %a3,%a9
        CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
          p_curr_cdb = osEE_get_curr_core();
        osEE_shutdown_os(p_curr_cdb,
80009664:	39 22 0d 00 	ld.bu %d2,[%a2]13
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009668:	cc 33       	ld.a %a15,[%a3]12
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
8000966a:	39 ff 10 00 	ld.bu %d15,[%a15]16 <f0030003 <_SMALL_DATA4_+0x40028003>>

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
8000966e:	82 33       	mov %d3,3
80009670:	e9 f3 10 00 	st.b [%a15]16,%d3
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
80009674:	e9 f2 12 00 	st.b [%a15]18,%d2

  if (os_status == OSEE_KERNEL_STARTED) {
80009678:	5e 25       	jne %d15,2,80009682 <osEE_tc_isr2_wrapper+0x8c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
8000967a:	99 34 14 00 	ld.a %a4,[%a3]20 <f0030014 <_SMALL_DATA4_+0x40028014>>
8000967e:	6d 00 aa 0f 	call 8000b5d2 <osEE_idle_task_terminate>
80009682:	3c 00       	j 80009682 <osEE_tc_isr2_wrapper+0x8c>
          p_kcb->ar_shutdown_all_cores_error);
      } else {
        (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
80009684:	91 00 00 48 	movh.a %a4,32768
80009688:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000968c:	6d 00 56 0d 	call 8000b138 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009690:	4d c0 e2 3f 	mfcr %d3,$icr
80009694:	02 3f       	mov %d15,%d3
80009696:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000969a:	8f f8 0f 21 	and %d2,%d8,255
8000969e:	5f 23 0b 00 	jeq %d3,%d2,800096b4 <osEE_tc_isr2_wrapper+0xbe>
800096a2:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800096a6:	cd cf e2 0f 	mtcr $icr,%d15
800096aa:	0d 00 c0 04 	isync 
800096ae:	3c 03       	j 800096b4 <osEE_tc_isr2_wrapper+0xbe>
    }
    /* TODO: handle other internal priorities? System Timer? */
  } else
#endif /* !OSEE_SINGLECORE */
  {
    osEE_activate_isr2(isr2_tid);
800096b0:	6d 00 ca 0b 	call 8000ae44 <osEE_activate_isr2>
  __asm__ volatile ("svlcx" : : : "memory");
}

/** The rslcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rslcx(void) {
  __asm__ volatile ("rslcx" : : : "memory");
800096b4:	0d 00 40 02 	rslcx 
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
800096b8:	00 80       	rfe 
800096ba:	00 90       	ret 

800096bc <osEE_shutdown_os>:
  osEE_shutdown_os
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
800096bc:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
800096be:	cc 43       	ld.a %a15,[%a4]12
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
800096c0:	39 ff 10 00 	ld.bu %d15,[%a15]16

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
800096c4:	82 32       	mov %d2,3
800096c6:	e9 f2 10 00 	st.b [%a15]16,%d2
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
800096ca:	e9 f4 12 00 	st.b [%a15]18,%d4

  if (os_status == OSEE_KERNEL_STARTED) {
800096ce:	5e 25       	jne %d15,2,800096d8 <osEE_shutdown_os+0x1c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
800096d0:	99 44 14 00 	ld.a %a4,[%a4]20
800096d4:	6d 00 7f 0f 	call 8000b5d2 <osEE_idle_task_terminate>
  } else {
    osEE_call_shutdown_hook(p_ccb, Error);
  }
  for (;;) {
    ; /* Endless Loop (entered only if Kernel Not Started) */
  }
800096d8:	3c 00       	j 800096d8 <osEE_shutdown_os+0x1c>

800096da <DisableAllInterrupts>:
FUNC(void, OS_CODE)
  DisableAllInterrupts
(
  void
)
{
800096da:	40 ae       	mov.aa %a14,%sp
800096dc:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800096de:	c8 3f       	ld.a %a15,[%a15]12
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
800096e0:	0d 00 40 03 	disable 
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
800096e4:	82 1f       	mov %d15,1
800096e6:	e9 ff 22 00 	st.b [%a15]34,%d15
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
    p_ccb->service_id            = service_id;
800096ea:	da 0c       	mov %d15,12
800096ec:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
800096f0:	82 0f       	mov %d15,0
800096f2:	e9 ff 23 00 	st.b [%a15]35,%d15
800096f6:	00 90       	ret 

800096f8 <EnableAllInterrupts>:
FUNC(void, OS_CODE)
  EnableAllInterrupts
(
  void
)
{
800096f8:	40 ae       	mov.aa %a14,%sp
800096fa:	40 9f       	mov.aa %a15,%a9
   * ResumeOSInterrupts() are called and no corresponding DisableAllInterupts()
   * /SuspendAllInterrupts()/SuspendOSInterrupts() was done before, the
   * Operating System module shall not perform this Operating System service.
   * (SRS_Os_11009) */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800096fc:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
800096fe:	da 0f       	mov %d15,15
80009700:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009704:	82 1f       	mov %d15,1
80009706:	e9 ff 23 00 	st.b [%a15]35,%d15

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_EnableAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->d_isr_all_cnt > 0U) {
8000970a:	39 ff 22 00 	ld.bu %d15,[%a15]34
8000970e:	6e 09       	jz %d15,80009720 <EnableAllInterrupts+0x28>
    p_ccb->d_isr_all_cnt = 0U;
80009710:	82 0f       	mov %d15,0
80009712:	e9 ff 22 00 	st.b [%a15]34,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009716:	0d 00 00 03 	enable 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000971a:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000971e:	5e 17       	jne %d15,1,8000972c <EnableAllInterrupts+0x34>
    p_ccb->service_id            = service_id;
80009720:	da 0e       	mov %d15,14
80009722:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009726:	82 0f       	mov %d15,0
80009728:	e9 ff 23 00 	st.b [%a15]35,%d15
8000972c:	00 90       	ret 

8000972e <SuspendAllInterrupts>:
FUNC(void, OS_CODE)
  SuspendAllInterrupts
(
  void
)
{
8000972e:	40 ae       	mov.aa %a14,%sp
80009730:	40 94       	mov.aa %a4,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009732:	cc 43       	ld.a %a15,[%a4]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009734:	da 11       	mov %d15,17
80009736:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000973a:	82 1f       	mov %d15,1
8000973c:	e9 ff 23 00 	st.b [%a15]35,%d15
(
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb,
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb
)
{
  if (p_ccb->s_isr_all_cnt == 0U) {
80009740:	39 ff 20 00 	ld.bu %d15,[%a15]32
80009744:	ee 0c       	jnz %d15,8000975c <SuspendAllInterrupts+0x2e>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009746:	4d c0 e2 ff 	mfcr %d15,$icr
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
8000974a:	0d 00 40 03 	disable 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_suspendIRQ();
    p_ccb->prev_s_isr_all_status = flags;
8000974e:	68 6f       	st.w [%a15]24,%d15
    ++p_ccb->s_isr_all_cnt;
80009750:	39 ff 20 00 	ld.bu %d15,[%a15]32
80009754:	c2 1f       	add %d15,1
80009756:	e9 ff 20 00 	st.b [%a15]32,%d15
8000975a:	3c 0b       	j 80009770 <SuspendAllInterrupts+0x42>
  } else if (p_ccb->s_isr_all_cnt < OSEE_MAX_BYTE) {
8000975c:	8b ff 0f 22 	eq %d2,%d15,255
80009760:	f6 25       	jnz %d2,8000976a <SuspendAllInterrupts+0x3c>
    ++p_ccb->s_isr_all_cnt;
80009762:	c2 1f       	add %d15,1
80009764:	e9 ff 20 00 	st.b [%a15]32,%d15
80009768:	3c 04       	j 80009770 <SuspendAllInterrupts+0x42>
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
8000976a:	3b 90 01 40 	mov %d4,25
8000976e:	3c a7       	j 800096bc <osEE_shutdown_os>
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009770:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009774:	5e 17       	jne %d15,1,80009782 <SuspendAllInterrupts+0x54>
    p_ccb->service_id            = service_id;
80009776:	da 10       	mov %d15,16
80009778:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000977c:	82 0f       	mov %d15,0
8000977e:	e9 ff 23 00 	st.b [%a15]35,%d15
80009782:	00 90       	ret 

80009784 <ResumeAllInterrupts>:
FUNC(void, OS_CODE)
  ResumeAllInterrupts
(
  void
)
{
80009784:	40 ae       	mov.aa %a14,%sp
80009786:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009788:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000978a:	da 13       	mov %d15,19
8000978c:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009790:	82 1f       	mov %d15,1
80009792:	e9 ff 23 00 	st.b [%a15]35,%d15

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_all_cnt > 0U) {
80009796:	39 ff 20 00 	ld.bu %d15,[%a15]32
8000979a:	6e 0e       	jz %d15,800097b6 <ResumeAllInterrupts+0x32>
    --p_ccb->s_isr_all_cnt;
8000979c:	c2 ff       	add %d15,-1
8000979e:	16 ff       	and %d15,255
800097a0:	e9 ff 20 00 	st.b [%a15]32,%d15

    if (p_ccb->s_isr_all_cnt == 0U) {
800097a4:	ee 06       	jnz %d15,800097b0 <ResumeAllInterrupts+0x2c>
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800097a6:	4c f6       	ld.w %d15,[%a15]24
800097a8:	cd cf e2 0f 	mtcr $icr,%d15
800097ac:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
800097b0:	39 ff 23 00 	ld.bu %d15,[%a15]35
800097b4:	5e 17       	jne %d15,1,800097c2 <ResumeAllInterrupts+0x3e>
    p_ccb->service_id            = service_id;
800097b6:	da 12       	mov %d15,18
800097b8:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
800097bc:	82 0f       	mov %d15,0
800097be:	e9 ff 23 00 	st.b [%a15]35,%d15
800097c2:	00 90       	ret 

800097c4 <SuspendOSInterrupts>:
FUNC(void, OS_CODE)
  SuspendOSInterrupts
(
  void
)
{
800097c4:	40 ae       	mov.aa %a14,%sp
800097c6:	40 94       	mov.aa %a4,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800097c8:	cc 43       	ld.a %a15,[%a4]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
800097ca:	da 15       	mov %d15,21
800097cc:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
800097d0:	82 1f       	mov %d15,1
800097d2:	e9 ff 23 00 	st.b [%a15]35,%d15

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_SuspendOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt == 0U) {
800097d6:	39 ff 21 00 	ld.bu %d15,[%a15]33
800097da:	ee 18       	jnz %d15,8000980a <SuspendOSInterrupts+0x46>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800097dc:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800097e0:	8f f2 0f f1 	and %d15,%d2,255
800097e4:	8b 3f a1 f2 	ge.u %d15,%d15,19
800097e8:	ee 0a       	jnz %d15,800097fc <SuspendOSInterrupts+0x38>
    OsEE_icr icr_temp = icr;
800097ea:	02 2f       	mov %d15,%d2
800097ec:	3b 30 01 30 	mov %d3,19
800097f0:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800097f4:	cd cf e2 0f 	mtcr $icr,%d15
800097f8:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_begin_nested_primitive();
    p_ccb->prev_s_isr_os_status = flags;
800097fc:	68 72       	st.w [%a15]28,%d2
    ++p_ccb->s_isr_os_cnt;
800097fe:	39 ff 21 00 	ld.bu %d15,[%a15]33
80009802:	c2 1f       	add %d15,1
80009804:	e9 ff 21 00 	st.b [%a15]33,%d15
80009808:	3c 0c       	j 80009820 <SuspendOSInterrupts+0x5c>
  } else if (p_ccb->s_isr_os_cnt < OSEE_MAX_BYTE) {
8000980a:	8b ff 0f 22 	eq %d2,%d15,255
8000980e:	f6 25       	jnz %d2,80009818 <SuspendOSInterrupts+0x54>
    ++p_ccb->s_isr_os_cnt;
80009810:	c2 1f       	add %d15,1
80009812:	e9 ff 21 00 	st.b [%a15]33,%d15
80009816:	3c 05       	j 80009820 <SuspendOSInterrupts+0x5c>
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
80009818:	3b 90 01 40 	mov %d4,25
8000981c:	1d ff 50 ff 	j 800096bc <osEE_shutdown_os>
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009820:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009824:	5e 17       	jne %d15,1,80009832 <SuspendOSInterrupts+0x6e>
    p_ccb->service_id            = service_id;
80009826:	da 14       	mov %d15,20
80009828:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000982c:	82 0f       	mov %d15,0
8000982e:	e9 ff 23 00 	st.b [%a15]35,%d15
80009832:	00 90       	ret 

80009834 <ResumeOSInterrupts>:
FUNC(void, OS_CODE)
  ResumeOSInterrupts
(
  void
)
{
80009834:	40 ae       	mov.aa %a14,%sp
80009836:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009838:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000983a:	da 17       	mov %d15,23
8000983c:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009840:	82 1f       	mov %d15,1
80009842:	e9 ff 23 00 	st.b [%a15]35,%d15

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt > 0U) {
80009846:	39 ff 21 00 	ld.bu %d15,[%a15]33
8000984a:	6e 19       	jz %d15,8000987c <ResumeOSInterrupts+0x48>
    --p_ccb->s_isr_os_cnt;
8000984c:	c2 ff       	add %d15,-1
8000984e:	16 ff       	and %d15,255
80009850:	e9 ff 21 00 	st.b [%a15]33,%d15

    if (p_ccb->s_isr_os_cnt == 0U) {
80009854:	ee 11       	jnz %d15,80009876 <ResumeOSInterrupts+0x42>
      osEE_hal_end_nested_primitive(p_ccb->prev_s_isr_os_status);
80009856:	48 72       	ld.w %d2,[%a15]28
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009858:	4d c0 e2 3f 	mfcr %d3,$icr
8000985c:	02 3f       	mov %d15,%d3
8000985e:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009862:	8f f2 0f 21 	and %d2,%d2,255
80009866:	5f 23 08 00 	jeq %d3,%d2,80009876 <ResumeOSInterrupts+0x42>
8000986a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000986e:	cd cf e2 0f 	mtcr $icr,%d15
80009872:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009876:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000987a:	5e 17       	jne %d15,1,80009888 <ResumeOSInterrupts+0x54>
    p_ccb->service_id            = service_id;
8000987c:	da 16       	mov %d15,22
8000987e:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009882:	82 0f       	mov %d15,0
80009884:	e9 ff 23 00 	st.b [%a15]35,%d15
80009888:	00 90       	ret 

8000988a <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
8000988a:	40 ae       	mov.aa %a14,%sp
8000988c:	20 10       	sub.a %sp,16
8000988e:	02 49       	mov %d9,%d4
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009890:	4d c0 e1 8f 	mfcr %d8,$core_id
  VAR(StatusType, AUTOMATIC)                      ev = E_OK;
  VAR(AppModeType, AUTOMATIC)                     real_mode = Mode;
#if (!defined(OSEE_SINGLECORE))
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
80009894:	91 00 00 f8 	movh.a %a15,32768
80009898:	99 fc 00 40 	ld.a %a12,[%a15]256 <80000100 <osEE_kdb_var>>
8000989c:	40 9d       	mov.aa %a13,%a9
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000989e:	cc d3       	ld.a %a15,[%a13]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800098a0:	4d c0 e2 ef 	mfcr %d14,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800098a4:	8f fe 0f f1 	and %d15,%d14,255
800098a8:	8b 3f a1 f2 	ge.u %d15,%d15,19
800098ac:	ee 0a       	jnz %d15,800098c0 <StartOS+0x36>
    OsEE_icr icr_temp = icr;
800098ae:	02 ef       	mov %d15,%d14
800098b0:	3b 30 01 20 	mov %d2,19
800098b4:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800098b8:	cd cf e2 0f 	mtcr $icr,%d15
800098bc:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
800098c0:	da 4b       	mov %d15,75
800098c2:	e9 ff 13 00 	st.b [%a15]19 <80000013 <BootModeHeader0+0x13>>,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
800098c6:	82 1f       	mov %d15,1
800098c8:	e9 ff 23 00 	st.b [%a15]35 <80000023 <_start+0x3>>,%d15
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800098cc:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000010 <BootModeHeader0+0x10>>
800098d0:	df 0f f1 80 	jne %d15,0,80009ab2 <StartOS+0x228>
800098d4:	37 08 48 80 	extr %d8,%d8,0,8
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
800098d8:	df 08 3f 81 	jne %d8,0,80009b56 <StartOS+0x2cc>
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800098dc:	6d 00 8e 0e 	call 8000b5f8 <osEE_cpu_startos>
800098e0:	df 02 03 01 	jeq %d2,0,80009ae6 <StartOS+0x25c>
800098e4:	1d 00 19 01 	j 80009b16 <StartOS+0x28c>
    if (
      (p_kcb->ar_core_mask & ((CoreMaskType)1U << (OsEE_reg)curr_core_id)) ==
        0U
    )
    {
      for(;;) {}  /* Endless Loop */
800098e8:	3c 00       	j 800098e8 <StartOS+0x5e>
    /* Initialize Slaves Hardware after First synchronization point:
       This ensures that all the Master Initializations have been done. */
    if (curr_core_id != OS_CORE_ID_MASTER) {
      if (!osEE_cpu_startos()) {
        /* Enter in an endless loop if it happens */
        for(;;) {}
800098ea:	3c 00       	j 800098ea <StartOS+0x60>
    and shall enter an endless loop on every core. (SRS_Os_80006) */
    {
      VAR(CoreNumType, AUTOMATIC)  i;

      for (i = 0U; i <= OSEE_CORE_ID_MAX; ++i) {
        if ((p_kcb->ar_core_mask & ((CoreMaskType)1U << i)) != 0U) {
800098ec:	54 c2       	ld.w %d2,[%a12]
800098ee:	57 02 61 2e 	extr.u %d2,%d2,%d14,1
800098f2:	df 02 15 00 	jeq %d2,0,8000991c <StartOS+0x92>
          CONST(AppModeType, AUTOMATIC)
            /* MISRA-C 2012: Rule 10.5 deviation. Cast back from
               unsigned to enum is safe here, since we are in a loop
               with the right limits. */
            current_mode = osEE_get_core((CoreIdType)i)->p_ccb->app_mode;
800098f6:	37 0e 48 40 	extr %d4,%d14,0,8
800098fa:	6d 00 3b 0f 	call 8000b770 <osEE_get_core>
800098fe:	99 22 0c 00 	ld.a %a2,[%a2]12
80009902:	39 22 11 00 	ld.bu %d2,[%a2]17

          if (current_mode != DONOTCARE) {
80009906:	8b f2 0f 32 	eq %d3,%d2,255
8000990a:	f6 39       	jnz %d3,8000991c <StartOS+0x92>
            if (real_mode == DONOTCARE) {
8000990c:	8b ff 0f 32 	eq %d3,%d15,255
80009910:	f6 33       	jnz %d3,80009916 <StartOS+0x8c>
              real_mode = current_mode;
            } else if (real_mode != current_mode) {
80009912:	3e 24       	jeq %d15,%d2,8000991a <StartOS+0x90>
            /* Error condition specified by SWS_Os_00608 requirement:
               enter in an endless loop */
              for(;;) {}
80009914:	3c 00       	j 80009914 <StartOS+0x8a>
               with the right limits. */
            current_mode = osEE_get_core((CoreIdType)i)->p_ccb->app_mode;

          if (current_mode != DONOTCARE) {
            if (real_mode == DONOTCARE) {
              real_mode = current_mode;
80009916:	02 2f       	mov %d15,%d2
80009918:	3c 02       	j 8000991c <StartOS+0x92>
8000991a:	02 2f       	mov %d15,%d2
8000991c:	c2 1e       	add %d14,1
    StartOS shall not start the scheduling, shall not call any StartupHooks,
    and shall enter an endless loop on every core. (SRS_Os_80006) */
    {
      VAR(CoreNumType, AUTOMATIC)  i;

      for (i = 0U; i <= OSEE_CORE_ID_MAX; ++i) {
8000991e:	df 3e e7 ff 	jne %d14,3,800098ec <StartOS+0x62>
            }
          }
        }
      }

      if (real_mode != DONOTCARE) {
80009922:	8b ff 0f 22 	eq %d2,%d15,255
80009926:	f6 27       	jnz %d2,80009934 <StartOS+0xaa>
        /* Set mode for this core as real_mode */
        if (Mode == DONOTCARE) {
80009928:	8b f9 2f 92 	ne %d9,%d9,255
8000992c:	f6 98       	jnz %d9,8000993c <StartOS+0xb2>
          p_ccb->app_mode = real_mode;
8000992e:	e9 ff 11 00 	st.b [%a15]17 <80000011 <BootModeHeader0+0x11>>,%d15
80009932:	3c 05       	j 8000993c <StartOS+0xb2>
        }
      } else {
        /* XXX: It is not specified how to handle the condition that no cores
                defines an AppMode different from DONOTCARE.
                I choose to handle it using OSDEFAULTAPPMODE */
        p_ccb->app_mode = OSDEFAULTAPPMODE;
80009934:	82 0f       	mov %d15,0
80009936:	e9 ff 11 00 	st.b [%a15]17 <80000011 <BootModeHeader0+0x11>>,%d15
#if (defined(OSEE_HAS_AUTOSTART_TRIGGER)) || (defined(OSEE_HAS_AUTOSTART_TASK))
        real_mode = OSDEFAULTAPPMODE;
8000993a:	82 0f       	mov %d15,0
#if (defined(OSEE_HAS_AUTOSTART_TRIGGER))
    {
      VAR(MemSize, AUTOMATIC) i;
      VAR(MemSize, AUTOMATIC) trigger_size;
      CONSTP2VAR(OsEE_autostart_trigger, AUTOMATIC, OS_APPL_CONST)
        p_auto_triggers = &(*p_cdb->p_autostart_trigger_array)[real_mode];
8000993c:	19 d2 20 00 	ld.w %d2,[%a13]32
80009940:	02 f9       	mov %d9,%d15
      P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_CONST) p_alarm_db_tmp;  /* MISRA R13.2 */
#endif /* OSEE_HAS_ALARMS */
      P2VAR(OsEE_SchedTabDB, AUTOMATIC, OS_APPL_CONST) p_st_db_tmp;   /* MISRA R13.2 */
#endif /* OSEE_HAS_SCHEDULE_TABLES */

      trigger_size = p_auto_triggers->trigger_array_size;
80009942:	60 23       	mov.a %a3,%d2
80009944:	d0 32       	addsc.a %a2,%a3,%d15,3
80009946:	4c 21       	ld.w %d15,[%a2]4
80009948:	59 ef f4 ff 	st.w [%a14]-12,%d15
      for (i = 0U; i < trigger_size; ++i) {
8000994c:	6e 17       	jz %d15,8000997a <StartOS+0xf0>
8000994e:	82 0f       	mov %d15,0
        CONSTP2VAR(OsEE_autostart_trigger_info, AUTOMATIC, OS_APPL_CONST)
          p_trigger_to_act_info = &(*p_auto_triggers->p_trigger_ptr_array)[i];
80009950:	13 89 20 e2 	madd %d14,%d2,%d9,8
80009954:	60 e2       	mov.a %a2,%d14
80009956:	54 22       	ld.w %d2,[%a2]
        CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_CONST)
          p_trigger_to_act_db   = p_trigger_to_act_info->p_trigger_db;
80009958:	13 cf 20 32 	madd %d3,%d2,%d15,12
8000995c:	60 32       	mov.a %a2,%d3
8000995e:	d4 25       	ld.a %a5,[%a2]
#if (!defined(OSEE_HAS_SCHEDULE_TABLES))
        (void)osEE_alarm_set_rel(
80009960:	99 54 04 00 	ld.a %a4,[%a5]4
80009964:	19 24 04 00 	ld.w %d4,[%a2]4
80009968:	19 25 08 00 	ld.w %d5,[%a2]8
8000996c:	6d 00 36 0d 	call 8000b3d8 <osEE_alarm_set_rel>
#endif /* OSEE_HAS_ALARMS */
      P2VAR(OsEE_SchedTabDB, AUTOMATIC, OS_APPL_CONST) p_st_db_tmp;   /* MISRA R13.2 */
#endif /* OSEE_HAS_SCHEDULE_TABLES */

      trigger_size = p_auto_triggers->trigger_array_size;
      for (i = 0U; i < trigger_size; ++i) {
80009970:	c2 1f       	add %d15,1
80009972:	19 e4 f4 ff 	ld.w %d4,[%a14]-12
80009976:	5f 4f ef ff 	jne %d15,%d4,80009954 <StartOS+0xca>
#if (defined(OSEE_HAS_AUTOSTART_TASK))
    {
      VAR(MemSize, AUTOMATIC) i;
      VAR(MemSize, AUTOMATIC) tdbsize;
      CONSTP2VAR(OsEE_autostart_tdb, AUTOMATIC, OS_APPL_CONST)
        p_auto_tdb  = &(*p_cdb->p_autostart_tdb_array)[real_mode];
8000997a:	19 d2 18 00 	ld.w %d2,[%a13]24
#if (!defined(OSEE_ALLOW_TASK_MIGRATION))
      CONSTP2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)
        p_rq        = &p_ccb->rq;
8000997e:	d9 f2 04 00 	lea %a2,[%a15]4 <80000004 <BootModeHeader0+0x4>>
80009982:	b5 e2 f4 ff 	st.a [%a14]-12 <80000004 <BootModeHeader0+0x4>>,%a2
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
80009986:	99 d2 10 00 	ld.a %a2,[%a13]16 <80000004 <BootModeHeader0+0x4>>
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000998a:	82 1a       	mov %d10,1
8000998c:	82 0b       	mov %d11,0
8000998e:	0b ab 10 48 	mov %e4,%d11,%d10
80009992:	49 24 c0 08 	cmpswap.w [%a2]0,%e4
80009996:	02 4f       	mov %d15,%d4
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
80009998:	df 04 f9 ff 	jne %d4,0,8000998a <StartOS+0x100>
        p_rq        = &p_kcb->rq;
      CONSTP2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)
        pp_free_sn  = &p_ccb->p_free_sn;
#endif /* !OSEE_ALLOW_TASK_MIGRATION */

      tdbsize = p_auto_tdb->tdb_array_size;
8000999c:	60 23       	mov.a %a3,%d2
8000999e:	01 39 03 26 	addsc.a %a2,%a3,%d9,3
800099a2:	19 2a 04 00 	ld.w %d10,[%a2]4
      for (i = 0U; i < tdbsize; ++i) {
800099a6:	df 0a 1c 00 	jeq %d10,0,800099de <StartOS+0x154>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
          p_tdb_to_act = (*p_auto_tdb->p_tdb_ptr_array)[i];
800099aa:	13 89 20 92 	madd %d9,%d2,%d9,8
        CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
          p_tcb_to_act = p_tdb_to_act->p_tcb;

        /* Mark the autostart-TASK as Activated */
        ++p_tcb_to_act->current_num_of_act;
        p_tcb_to_act->status = OSEE_TASK_READY;
800099ae:	82 1b       	mov %d11,1
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
  (*pp_first)              = p_sn_allocated->p_next;
  p_sn_allocated->p_next  = NULL;
800099b0:	82 0e       	mov %d14,0
#endif /* !OSEE_ALLOW_TASK_MIGRATION */

      tdbsize = p_auto_tdb->tdb_array_size;
      for (i = 0U; i < tdbsize; ++i) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
          p_tdb_to_act = (*p_auto_tdb->p_tdb_ptr_array)[i];
800099b2:	60 93       	mov.a %a3,%d9
800099b4:	d4 32       	ld.a %a2,[%a3]
800099b6:	90 22       	addsc.a %a2,%a2,%d15,2
800099b8:	d4 26       	ld.a %a6,[%a2]
        CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
          p_tcb_to_act = p_tdb_to_act->p_tcb;
800099ba:	99 62 0c 00 	ld.a %a2,[%a6]12

        /* Mark the autostart-TASK as Activated */
        ++p_tcb_to_act->current_num_of_act;
800099be:	14 22       	ld.bu %d2,[%a2]
800099c0:	c2 12       	add %d2,1
800099c2:	34 22       	st.b [%a2],%d2
        p_tcb_to_act->status = OSEE_TASK_READY;
800099c4:	e9 2b 02 00 	st.b [%a2]2,%d11
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
800099c8:	c8 25       	ld.a %a5,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
800099ca:	54 52       	ld.w %d2,[%a5]
800099cc:	68 22       	st.w [%a15]8,%d2
  p_sn_allocated->p_next  = NULL;
800099ce:	74 5e       	st.w [%a5],%d14

        (void)osEE_scheduler_rq_insert(
800099d0:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
800099d4:	6d 00 c7 09 	call 8000ad62 <osEE_scheduler_rq_insert>
      CONSTP2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)
        pp_free_sn  = &p_ccb->p_free_sn;
#endif /* !OSEE_ALLOW_TASK_MIGRATION */

      tdbsize = p_auto_tdb->tdb_array_size;
      for (i = 0U; i < tdbsize; ++i) {
800099d8:	c2 1f       	add %d15,1
800099da:	5f af ec ff 	jne %d15,%d10,800099b2 <StartOS+0x128>
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
800099de:	99 d2 10 00 	ld.a %a2,[%a13]16
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
800099e2:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
800099e6:	82 0f       	mov %d15,0
800099e8:	6c 20       	st.w [%a2]0,%d15
    Specification paragraph 7.9.4 Multi-Core start-up concept:
    "This release of the AUTOSAR specification does not support timeouts
    during the synchronization phase. Cores that are activated with
    StartCore but do not call StartOS may cause the system to hang.
    It is in the responsibility of the integrator to avoid such behavior." */
    osEE_hal_sync_barrier(p_kdb->p_barrier, &p_kcb->ar_core_mask,
800099ea:	91 00 00 28 	movh.a %a2,32768
800099ee:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
800099f2:	99 24 08 00 	ld.a %a4,[%a2]8 <80000008 <BootModeHeader0+0x8>>
800099f6:	99 e5 fc ff 	ld.a %a5,[%a14]-4 <80000008 <BootModeHeader0+0x8>>
800099fa:	a0 06       	mov.a %a6,0
800099fc:	6d 00 7f 0e 	call 8000b6fa <osEE_hal_sync_barrier>
      OSEE_STARTOS_2ND_SYNC_BARRIER_CB);
/* After second synchronization I'm sure that no more AR cores will be
   started: I initialize the Shutdown(AllCores) mask in master core */
    if (curr_core_id == OS_CORE_ID_MASTER) {
80009a00:	f6 84       	jnz %d8,80009a08 <StartOS+0x17e>
      p_kcb->ar_shutdown_mask = p_kcb->ar_core_mask;
80009a02:	54 c3       	ld.w %d3,[%a12]
80009a04:	59 c3 08 00 	st.w [%a12]8,%d3
    }
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
80009a08:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000010 <BootModeHeader0+0x10>>
80009a0c:	5e 14       	jne %d15,1,80009a14 <StartOS+0x18a>
      p_ccb->os_status = OSEE_KERNEL_STARTED;
80009a0e:	82 2f       	mov %d15,2
80009a10:	e9 ff 10 00 	st.b [%a15]16 <80000010 <BootModeHeader0+0x10>>,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009a14:	39 ff 23 00 	ld.bu %d15,[%a15]35 <80000023 <_start+0x3>>
80009a18:	5e 17       	jne %d15,1,80009a26 <StartOS+0x19c>
    p_ccb->service_id            = service_id;
80009a1a:	da 4a       	mov %d15,74
80009a1c:	e9 ff 13 00 	st.b [%a15]19 <80000013 <BootModeHeader0+0x13>>,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009a20:	82 0f       	mov %d15,0
80009a22:	e9 ff 23 00 	st.b [%a15]35 <80000023 <_start+0x3>>,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */

    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);

#if (!defined(OSEE_STARTOS_RETURN)) && (!defined(OSEE_API_DYNAMIC))
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
80009a26:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000010 <BootModeHeader0+0x10>>
80009a2a:	5e 2f       	jne %d15,2,80009a48 <StartOS+0x1be>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
80009a2c:	99 ef f8 ff 	ld.a %a15,[%a14]-8
80009a30:	48 14       	ld.w %d4,[%a15]4
80009a32:	59 e4 f0 ff 	st.w [%a14]-16,%d4
80009a36:	40 f4       	mov.aa %a4,%a15
80009a38:	60 45       	mov.a %a5,%d4
80009a3a:	60 46       	mov.a %a6,%d4
80009a3c:	6d 00 06 0f 	call 8000b848 <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
80009a40:	99 e4 f8 ff 	ld.a %a4,[%a14]-8
80009a44:	6d 00 ca 09 	call 8000add8 <osEE_task_end>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009a48:	0d 00 40 03 	disable 
 *  \brief Locks the kernel.
 *  
 *  Locks the kernel using the KDB p_lock spinlock.
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_lock_kernel(void) {
  osEE_hal_spin_lock(osEE_kdb_var.p_lock);
80009a4c:	91 00 00 f8 	movh.a %a15,32768
80009a50:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
80009a54:	c8 1f       	ld.a %a15,[%a15]4
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
80009a56:	82 1c       	mov %d12,1
80009a58:	82 0d       	mov %d13,0
80009a5a:	0b cd 10 28 	mov %e2,%d13,%d12
80009a5e:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
80009a62:	df 02 fa ff 	jne %d2,0,80009a56 <StartOS+0x1cc>
#if (!defined(OSEE_SINGLECORE))
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)
      p_kdb = osEE_lock_and_get_kernel();
    CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)
      p_kcb = p_kdb->p_kcb;
80009a66:	91 00 00 28 	movh.a %a2,32768
80009a6a:	99 25 00 40 	ld.a %a5,[%a2]256 <80000100 <osEE_kdb_var>>

    if (p_kcb->ar_shutdown_all_cores_flag) {
80009a6e:	0c 5e       	ld.bu %d15,[%a5]14
80009a70:	6e 0e       	jz %d15,80009a8c <StartOS+0x202>
80009a72:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
80009a76:	82 0f       	mov %d15,0
80009a78:	68 0f       	st.w [%a15]0,%d15
         participating to shutdown */
      osEE_unlock_kernel();

      /* [OS587]: Before calling the global ShutdownHook, all cores shall be
          synchronized. (BSW4080007) */
      osEE_hal_sync_barrier(p_kdb->p_barrier, &p_kcb->ar_shutdown_mask,
80009a7a:	d9 2f 00 40 	lea %a15,[%a2]256 <80000100 <osEE_kdb_var>>
80009a7e:	c8 24       	ld.a %a4,[%a15]8
80009a80:	d9 55 08 00 	lea %a5,[%a5]8 <80000002 <BootModeHeader0+0x2>>
80009a84:	a0 06       	mov.a %a6,0
80009a86:	6d 00 3a 0e 	call 8000b6fa <osEE_hal_sync_barrier>
80009a8a:	3c 13       	j 80009ab0 <StartOS+0x226>
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009a8c:	4d c0 e1 ff 	mfcr %d15,$core_id
        OSEE_SHUTDOWNOS_SYNC_BARRIER_CB);
    } else {
      /* Remove this core from the waiting mask: this core has already reached
         the barrier/ it's already shutdown */
      p_kcb->ar_shutdown_mask &=
        (~((CoreMaskType)1U << (OsEE_reg)osEE_get_curr_core_id()));
80009a90:	37 0f 48 f0 	extr %d15,%d15,0,8
      osEE_hal_sync_barrier(p_kdb->p_barrier, &p_kcb->ar_shutdown_mask,
        OSEE_SHUTDOWNOS_SYNC_BARRIER_CB);
    } else {
      /* Remove this core from the waiting mask: this core has already reached
         the barrier/ it's already shutdown */
      p_kcb->ar_shutdown_mask &=
80009a94:	19 52 08 00 	ld.w %d2,[%a5]8
80009a98:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80009a9c:	6c 52       	st.w [%a5]8,%d15
 *  \brief Unlocks the kernel.
 *  
 *  Unlock the kernel by releasing the KDB p_lock spinlock.
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_unlock_kernel(void) {
  osEE_hal_spin_unlock(osEE_kdb_var.p_lock);
80009a9e:	91 00 00 f8 	movh.a %a15,32768
80009aa2:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
80009aa6:	c8 1f       	ld.a %a15,[%a15]4
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80009aa8:	0d 00 80 04 	dsync 
80009aac:	82 0f       	mov %d15,0
80009aae:	68 0f       	st.w [%a15]0,%d15
    }
#if (!defined(OSEE_SHUTDOWN_DO_NOT_RETURN_ON_MAIN))
    osEE_hal_disableIRQ();
    osEE_shutdown_os_extra();
    osEE_call_shutdown_hook(p_ccb, p_ccb->last_error);
    for(;;) {} /* Endless Loop */
80009ab0:	3c 00       	j 80009ab0 <StartOS+0x226>

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
80009ab2:	82 12       	mov %d2,1
80009ab4:	3c 03       	j 80009aba <StartOS+0x230>
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
      osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
      ev = E_OS_SYS_INIT;
80009ab6:	3b 80 01 20 	mov %d2,24
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
    p_ccb->service_id            = service_id;
80009aba:	da 4a       	mov %d15,74
80009abc:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009ac0:	82 0f       	mov %d15,0
80009ac2:	e9 ff 23 00 	st.b [%a15]35,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009ac6:	4d c0 e2 4f 	mfcr %d4,$icr
80009aca:	02 4f       	mov %d15,%d4
80009acc:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009ad0:	8f fe 0f 31 	and %d3,%d14,255
80009ad4:	5f 34 50 00 	jeq %d4,%d3,80009b74 <StartOS+0x2ea>
80009ad8:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009adc:	cd cf e2 0f 	mtcr $icr,%d15
80009ae0:	0d 00 c0 04 	isync 
80009ae4:	00 90       	ret 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009ae6:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009aea:	3b 80 01 20 	mov %d2,24
80009aee:	df 1f ec ff 	jne %d15,1,80009ac6 <StartOS+0x23c>
80009af2:	3c e2       	j 80009ab6 <StartOS+0x22c>
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
80009af4:	02 9f       	mov %d15,%d9
80009af6:	82 0e       	mov %d14,0
80009af8:	1d ff fa fe 	j 800098ec <StartOS+0x62>
          "This release of the AUTOSAR specification does not support timeouts
          during the synchronization phase. Cores that are activated with
          StartCore but do not call StartOS may cause the system to hang.
          It is in the responsibility of the integrator to avoid such
          behavior." */
    osEE_hal_sync_barrier(p_kdb->p_barrier, &p_kcb->ar_core_mask,
80009afc:	b5 ec fc ff 	st.a [%a14]-4,%a12
80009b00:	91 00 00 28 	movh.a %a2,32768
80009b04:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009b08:	99 24 08 00 	ld.a %a4,[%a2]8 <80000008 <BootModeHeader0+0x8>>
80009b0c:	40 c5       	mov.aa %a5,%a12
80009b0e:	a0 06       	mov.a %a6,0
80009b10:	6d 00 f5 0d 	call 8000b6fa <osEE_hal_sync_barrier>
80009b14:	3c f0       	j 80009af4 <StartOS+0x26a>
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
80009b16:	99 d2 14 00 	ld.a %a2,[%a13]20
80009b1a:	b5 e2 f8 ff 	st.a [%a14]-8,%a2
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
80009b1e:	82 1f       	mov %d15,1
80009b20:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
80009b24:	e9 f9 11 00 	st.b [%a15]17,%d9
/* [SWS_Os_00610] At least one core shall define an AppMode other than
     "DONOTCARE". (SRS_Os_80006) */
/* [SWS_Os_00611] If the IOC is configured, StartOS shall initialize the data
     structures of the IOC. (SRS_Os_80020) */
    if (
      (p_kcb->ar_core_mask & ((CoreMaskType)1U << (OsEE_reg)curr_core_id)) ==
80009b28:	4c c0       	ld.w %d15,[%a12]0
80009b2a:	57 0f 61 f8 	extr.u %d15,%d15,%d8,1
    shall be used. (SRS_Os_80006) */
/* [SWS_Os_00610] At least one core shall define an AppMode other than
     "DONOTCARE". (SRS_Os_80006) */
/* [SWS_Os_00611] If the IOC is configured, StartOS shall initialize the data
     structures of the IOC. (SRS_Os_80020) */
    if (
80009b2e:	df 0f dd 7e 	jeq %d15,0,800098e8 <StartOS+0x5e>
80009b32:	3c e5       	j 80009afc <StartOS+0x272>
          "This release of the AUTOSAR specification does not support timeouts
          during the synchronization phase. Cores that are activated with
          StartCore but do not call StartOS may cause the system to hang.
          It is in the responsibility of the integrator to avoid such
          behavior." */
    osEE_hal_sync_barrier(p_kdb->p_barrier, &p_kcb->ar_core_mask,
80009b34:	b5 ec fc ff 	st.a [%a14]-4,%a12
80009b38:	91 00 00 28 	movh.a %a2,32768
80009b3c:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009b40:	99 24 08 00 	ld.a %a4,[%a2]8 <80000008 <BootModeHeader0+0x8>>
80009b44:	40 c5       	mov.aa %a5,%a12
80009b46:	a0 06       	mov.a %a6,0
80009b48:	6d 00 d9 0d 	call 8000b6fa <osEE_hal_sync_barrier>
      OSEE_STARTOS_1ST_SYNC_BARRIER_CB);

    /* Initialize Slaves Hardware after First synchronization point:
       This ensures that all the Master Initializations have been done. */
    if (curr_core_id != OS_CORE_ID_MASTER) {
      if (!osEE_cpu_startos()) {
80009b4c:	6d 00 56 0d 	call 8000b5f8 <osEE_cpu_startos>
80009b50:	df 02 cd 7e 	jeq %d2,0,800098ea <StartOS+0x60>
80009b54:	3c d0       	j 80009af4 <StartOS+0x26a>
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
80009b56:	99 d3 14 00 	ld.a %a3,[%a13]20
80009b5a:	b5 e3 f8 ff 	st.a [%a14]-8,%a3
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
80009b5e:	82 1f       	mov %d15,1
80009b60:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
80009b64:	e9 f9 11 00 	st.b [%a15]17,%d9
/* [SWS_Os_00610] At least one core shall define an AppMode other than
     "DONOTCARE". (SRS_Os_80006) */
/* [SWS_Os_00611] If the IOC is configured, StartOS shall initialize the data
     structures of the IOC. (SRS_Os_80020) */
    if (
      (p_kcb->ar_core_mask & ((CoreMaskType)1U << (OsEE_reg)curr_core_id)) ==
80009b68:	4c c0       	ld.w %d15,[%a12]0
80009b6a:	57 0f 61 f8 	extr.u %d15,%d15,%d8,1
    shall be used. (SRS_Os_80006) */
/* [SWS_Os_00610] At least one core shall define an AppMode other than
     "DONOTCARE". (SRS_Os_80006) */
/* [SWS_Os_00611] If the IOC is configured, StartOS shall initialize the data
     structures of the IOC. (SRS_Os_80020) */
    if (
80009b6e:	df 0f bd 7e 	jeq %d15,0,800098e8 <StartOS+0x5e>
80009b72:	3c e1       	j 80009b34 <StartOS+0x2aa>
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
80009b74:	00 90       	ret 

80009b76 <GetActiveApplicationMode>:
FUNC(AppModeType, OS_CODE)
  GetActiveApplicationMode
(
  void
)
{
80009b76:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
80009b78:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
80009b7a:	c8 3f       	ld.a %a15,[%a15]12

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009b7c:	39 ff 10 00 	ld.bu %d15,[%a15]16 <3 <_.+0x2>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
80009b80:	3b f0 0f 20 	mov %d2,255

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009b84:	6e 03       	jz %d15,80009b8a <GetActiveApplicationMode+0x14>
    app_mode = p_ccb->app_mode;
80009b86:	39 f2 11 00 	ld.bu %d2,[%a15]17
    p_ccb->service_id            = service_id;
80009b8a:	da 46       	mov %d15,70
80009b8c:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009b90:	82 0f       	mov %d15,0
80009b92:	e9 ff 23 00 	st.b [%a15]35,%d15
  }

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetActiveApplicationMode);

  return app_mode;
}
80009b96:	00 90       	ret 

80009b98 <ActivateTask>:
FUNC(StatusType, OS_CODE)
  ActivateTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009b98:	40 ae       	mov.aa %a14,%sp
80009b9a:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009b9c:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009b9e:	82 1f       	mov %d15,1
80009ba0:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009ba4:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009ba8:	91 00 00 28 	movh.a %a2,32768
80009bac:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009bb0:	4c 24       	ld.w %d15,[%a2]16
80009bb2:	82 38       	mov %d8,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009bb4:	7f f4 3d 80 	jge.u %d4,%d15,80009c2e <ActivateTask+0x96>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009bb8:	91 00 00 28 	movh.a %a2,32768
80009bbc:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009bc0:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009bc4:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009bc8:	d4 2c       	ld.a %a12,[%a2]

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009bca:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009bce:	ff 2f 30 80 	jge.u %d15,2,80009c2e <ActivateTask+0x96>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009bd2:	4d c0 e2 9f 	mfcr %d9,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009bd6:	8f f9 0f f1 	and %d15,%d9,255
80009bda:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009bde:	ee 0a       	jnz %d15,80009bf2 <ActivateTask+0x5a>
    OsEE_icr icr_temp = icr;
80009be0:	02 9f       	mov %d15,%d9
80009be2:	3b 30 01 20 	mov %d2,19
80009be6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009bea:	cd cf e2 0f 	mtcr $icr,%d15
80009bee:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
80009bf2:	40 c4       	mov.aa %a4,%a12
80009bf4:	6d 00 d2 08 	call 8000ad98 <osEE_task_activated>
80009bf8:	02 28       	mov %d8,%d2

      if (ev == E_OK) {
80009bfa:	f6 28       	jnz %d2,80009c0a <ActivateTask+0x72>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
80009bfc:	91 00 00 48 	movh.a %a4,32768
80009c00:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
80009c04:	40 c5       	mov.aa %a5,%a12
80009c06:	6d 00 43 09 	call 8000ae8c <osEE_scheduler_task_activated>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c0a:	4d c0 e2 3f 	mfcr %d3,$icr
80009c0e:	02 3f       	mov %d15,%d3
80009c10:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009c14:	8f f9 0f 21 	and %d2,%d9,255
80009c18:	5f 23 08 00 	jeq %d3,%d2,80009c28 <ActivateTask+0x90>
80009c1c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c20:	cd cf e2 0f 	mtcr $icr,%d15
80009c24:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009c28:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009c2c:	5e 16       	jne %d15,1,80009c38 <ActivateTask+0xa0>
    p_ccb->service_id            = service_id;
80009c2e:	82 0f       	mov %d15,0
80009c30:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009c34:	e9 ff 23 00 	st.b [%a15]35,%d15
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009c38:	02 82       	mov %d2,%d8
80009c3a:	00 90       	ret 

80009c3c <ChainTask>:
FUNC(StatusType, OS_CODE)
  ChainTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009c3c:	40 ae       	mov.aa %a14,%sp
80009c3e:	40 9f       	mov.aa %a15,%a9
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb = p_cdb->p_ccb;
80009c40:	c8 3f       	ld.a %a15,[%a15]12
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009c42:	48 03       	ld.w %d3,[%a15]0
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009c44:	82 5f       	mov %d15,5
80009c46:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009c4a:	82 1f       	mov %d15,1
80009c4c:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009c50:	91 00 00 28 	movh.a %a2,32768
80009c54:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009c58:	4c 24       	ld.w %d15,[%a2]16
80009c5a:	82 32       	mov %d2,3
  )
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009c5c:	7f f4 4e 80 	jge.u %d4,%d15,80009cf8 <ChainTask+0xbc>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009c60:	91 00 00 28 	movh.a %a2,32768
80009c64:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009c68:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009c6c:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009c70:	d4 2c       	ld.a %a12,[%a2]
      ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
    } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009c72:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009c76:	ff 2f 41 80 	jge.u %d15,2,80009cf8 <ChainTask+0xbc>
      VAR(OsEE_reg, AUTOMATIC)  flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009c7a:	39 ff 20 00 	ld.bu %d15,[%a15]32
80009c7e:	6e 09       	jz %d15,80009c90 <ChainTask+0x54>
        p_ccb->s_isr_all_cnt = 0U;
80009c80:	82 0f       	mov %d15,0
80009c82:	e9 ff 20 00 	st.b [%a15]32,%d15
80009c86:	4c f6       	ld.w %d15,[%a15]24
80009c88:	cd cf e2 0f 	mtcr $icr,%d15
80009c8c:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009c90:	39 ff 22 00 	ld.bu %d15,[%a15]34
80009c94:	6e 06       	jz %d15,80009ca0 <ChainTask+0x64>
        p_ccb->d_isr_all_cnt = 0U;
80009c96:	82 0f       	mov %d15,0
80009c98:	e9 ff 22 00 	st.b [%a15]34,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009c9c:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009ca0:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009ca4:	8f f8 0f f1 	and %d15,%d8,255
80009ca8:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009cac:	ee 0a       	jnz %d15,80009cc0 <ChainTask+0x84>
    OsEE_icr icr_temp = icr;
80009cae:	02 8f       	mov %d15,%d8
80009cb0:	3b 30 01 20 	mov %d2,19
80009cb4:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009cb8:	cd cf e2 0f 	mtcr $icr,%d15
80009cbc:	0d 00 c0 04 	isync 
      }
#endif /* !OSEE_HAS_SERVICE_PROTECTION */

      flags = osEE_begin_primitive();

      if (p_tdb_act == p_curr) {
80009cc0:	80 cf       	mov.d %d15,%a12
80009cc2:	7e 35       	jne %d15,%d3,80009ccc <ChainTask+0x90>
        /* If the Task chain on it self, flag it. */
        p_tdb_act->p_tcb->status = OSEE_TASK_CHAINED;
80009cc4:	cc c3       	ld.a %a15,[%a12]12
80009cc6:	82 5f       	mov %d15,5
80009cc8:	28 2f       	st.b [%a15]2,%d15
80009cca:	3c 1e       	j 80009d06 <ChainTask+0xca>
        ev = E_OK;
      } else {
        ev = osEE_task_activated(p_tdb_act);
80009ccc:	40 c4       	mov.aa %a4,%a12
80009cce:	6d 00 65 08 	call 8000ad98 <osEE_task_activated>
        if (ev == E_OK) {
80009cd2:	df 02 21 80 	jne %d2,0,80009d14 <ChainTask+0xd8>
          (void)osEE_scheduler_task_insert(p_kdb, p_tdb_act);
80009cd6:	91 00 00 48 	movh.a %a4,32768
80009cda:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
80009cde:	40 c5       	mov.aa %a5,%a12
80009ce0:	6d 00 41 09 	call 8000af62 <osEE_scheduler_task_insert>
80009ce4:	3c 11       	j 80009d06 <ChainTask+0xca>
80009ce6:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
80009cea:	cd cf e2 0f 	mtcr $icr,%d15
80009cee:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009cf2:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009cf6:	de 19       	jne %d15,1,80009d28 <ChainTask+0xec>
    p_ccb->service_id            = service_id;
80009cf8:	82 4f       	mov %d15,4
80009cfa:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009cfe:	82 0f       	mov %d15,0
80009d00:	e9 ff 23 00 	st.b [%a15]35,%d15
80009d04:	00 90       	ret 
80009d06:	40 9f       	mov.aa %a15,%a9
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
80009d08:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
80009d0a:	c8 0f       	ld.a %a15,[%a15]0
80009d0c:	c8 14       	ld.a %a4,[%a15]4
80009d0e:	a0 05       	mov.a %a5,0
80009d10:	1d 00 d3 0d 	j 8000b8b6 <osEE_hal_terminate_ctx>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009d14:	4d c0 e2 3f 	mfcr %d3,$icr
80009d18:	02 3f       	mov %d15,%d3
80009d1a:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009d1e:	8f f8 0f 81 	and %d8,%d8,255
80009d22:	5f 83 e2 ff 	jne %d3,%d8,80009ce6 <ChainTask+0xaa>
80009d26:	3c e6       	j 80009cf2 <ChainTask+0xb6>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);

  return ev;
}
80009d28:	00 90       	ret 

80009d2a <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
80009d2a:	40 ae       	mov.aa %a14,%sp
80009d2c:	40 9f       	mov.aa %a15,%a9
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
80009d2e:	c8 3f       	ld.a %a15,[%a15]12
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009d30:	c8 02       	ld.a %a2,[%a15]0
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009d32:	82 3f       	mov %d15,3
80009d34:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009d38:	82 1f       	mov %d15,1
80009d3a:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009d3e:	39 ff 20 00 	ld.bu %d15,[%a15]32
80009d42:	6e 09       	jz %d15,80009d54 <TerminateTask+0x2a>
        p_ccb->s_isr_all_cnt = 0U;
80009d44:	82 0f       	mov %d15,0
80009d46:	e9 ff 20 00 	st.b [%a15]32,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009d4a:	4c f6       	ld.w %d15,[%a15]24
80009d4c:	cd cf e2 0f 	mtcr $icr,%d15
80009d50:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009d54:	39 ff 22 00 	ld.bu %d15,[%a15]34
80009d58:	6e 06       	jz %d15,80009d64 <TerminateTask+0x3a>
        p_ccb->d_isr_all_cnt = 0U;
80009d5a:	82 0f       	mov %d15,0
80009d5c:	e9 ff 22 00 	st.b [%a15]34,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009d60:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009d64:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009d68:	8f ff 0f 21 	and %d2,%d15,255
80009d6c:	8b 32 a1 22 	ge.u %d2,%d2,19
80009d70:	f6 29       	jnz %d2,80009d82 <TerminateTask+0x58>
80009d72:	3b 30 01 20 	mov %d2,19
80009d76:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009d7a:	cd cf e2 0f 	mtcr $icr,%d15
80009d7e:	0d 00 c0 04 	isync 
80009d82:	99 24 04 00 	ld.a %a4,[%a2]4
80009d86:	a0 05       	mov.a %a5,0
80009d88:	1d 00 97 0d 	j 8000b8b6 <osEE_hal_terminate_ctx>

80009d8c <Schedule>:
FUNC(StatusType, OS_CODE)
  Schedule
(
  void
)
{
80009d8c:	40 ae       	mov.aa %a14,%sp
80009d8e:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb  = p_cdb->p_ccb;
80009d90:	c8 3f       	ld.a %a15,[%a15]12
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_curr = p_ccb->p_curr;
80009d92:	c8 0c       	ld.a %a12,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb  = p_curr->p_tcb;
80009d94:	99 cd 0c 00 	ld.a %a13,[%a12]12 <0 <NULL>>
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009d98:	82 7f       	mov %d15,7
80009d9a:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009d9e:	82 1f       	mov %d15,1
80009da0:	e9 ff 23 00 	st.b [%a15]35,%d15
    ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
  } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
  if (p_tcb->current_prio == p_curr->dispatch_prio)
80009da4:	39 d2 01 00 	ld.bu %d2,[%a13]1
80009da8:	39 cf 1d 00 	ld.bu %d15,[%a12]29
80009dac:	5f f2 30 80 	jne %d2,%d15,80009e0c <Schedule+0x80>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009db0:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009db4:	8f f8 0f f1 	and %d15,%d8,255
80009db8:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009dbc:	ee 0a       	jnz %d15,80009dd0 <Schedule+0x44>
    OsEE_icr icr_temp = icr;
80009dbe:	02 8f       	mov %d15,%d8
80009dc0:	3b 30 01 20 	mov %d2,19
80009dc4:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009dc8:	cd cf e2 0f 	mtcr $icr,%d15
80009dcc:	0d 00 c0 04 	isync 
  {
    /* Begin primitive */
    CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

    /* Release internal resources */
    p_tcb->current_prio = p_curr->ready_prio;
80009dd0:	39 cf 1c 00 	ld.bu %d15,[%a12]28
80009dd4:	2c d1       	st.b [%a13]1,%d15
    /* Try preemption */
    (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
80009dd6:	91 00 00 48 	movh.a %a4,32768
80009dda:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
80009dde:	6d 00 ad 09 	call 8000b138 <osEE_scheduler_task_preemption_point>
    /* Restore internal resources */
    p_tcb->current_prio = p_curr->dispatch_prio;
80009de2:	39 cf 1d 00 	ld.bu %d15,[%a12]29
80009de6:	2c d1       	st.b [%a13]1,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009de8:	4d c0 e2 3f 	mfcr %d3,$icr
80009dec:	02 3f       	mov %d15,%d3
80009dee:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009df2:	8f f8 0f 21 	and %d2,%d8,255
80009df6:	5f 23 08 00 	jeq %d3,%d2,80009e06 <Schedule+0x7a>
80009dfa:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009dfe:	cd cf e2 0f 	mtcr $icr,%d15
80009e02:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009e06:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009e0a:	5e 17       	jne %d15,1,80009e18 <Schedule+0x8c>
    p_ccb->service_id            = service_id;
80009e0c:	82 6f       	mov %d15,6
80009e0e:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009e12:	82 0f       	mov %d15,0
80009e14:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_Schedule);

  return ev;
}
80009e18:	82 02       	mov %d2,0
80009e1a:	00 90       	ret 

80009e1c <ShutdownOS>:
FUNC(StatusType, OS_CODE)
  ShutdownOS
(
  VAR(StatusType, AUTOMATIC) Error
)
{
80009e1c:	40 ae       	mov.aa %a14,%sp
80009e1e:	40 94       	mov.aa %a4,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009e20:	cc 43       	ld.a %a15,[%a4]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e22:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009e26:	8f f2 0f f1 	and %d15,%d2,255
80009e2a:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009e2e:	ee 0a       	jnz %d15,80009e42 <ShutdownOS+0x26>
    OsEE_icr icr_temp = icr;
80009e30:	02 2f       	mov %d15,%d2
80009e32:	3b 30 01 30 	mov %d3,19
80009e36:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e3a:	cd cf e2 0f 	mtcr $icr,%d15
80009e3e:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009e42:	39 ff 10 00 	ld.bu %d15,[%a15]16
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009e46:	3b 90 04 30 	mov %d3,73
80009e4a:	e9 f3 13 00 	st.b [%a15]19,%d3
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009e4e:	82 13       	mov %d3,1
80009e50:	e9 f3 23 00 	st.b [%a15]35,%d3
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  {
    if ((os_status == OSEE_KERNEL_STARTED) ||
80009e54:	c2 ff       	add %d15,-1
80009e56:	16 ff       	and %d15,255
80009e58:	ff 2f 04 80 	jge.u %d15,2,80009e60 <ShutdownOS+0x44>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
80009e5c:	1d ff 30 fc 	j 800096bc <osEE_shutdown_os>
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
    p_ccb->service_id            = service_id;
80009e60:	da 48       	mov %d15,72
80009e62:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009e66:	82 0f       	mov %d15,0
80009e68:	e9 ff 23 00 	st.b [%a15]35,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e6c:	4d c0 e2 3f 	mfcr %d3,$icr
80009e70:	02 3f       	mov %d15,%d3
80009e72:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009e76:	8f f2 0f 21 	and %d2,%d2,255
80009e7a:	5f 23 08 00 	jeq %d3,%d2,80009e8a <ShutdownOS+0x6e>
80009e7e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e82:	cd cf e2 0f 	mtcr $icr,%d15
80009e86:	0d 00 c0 04 	isync 

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ShutdownOS);
  osEE_end_primitive(flags);

  return ev;
}
80009e8a:	82 72       	mov %d2,7
80009e8c:	00 90       	ret 

80009e8e <GetTaskID>:
FUNC(StatusType, OS_CODE)
  GetTaskID
(
  VAR(TaskRefType, AUTOMATIC) TaskID
)
{
80009e8e:	40 ae       	mov.aa %a14,%sp
80009e90:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009e92:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009e94:	da 09       	mov %d15,9
80009e96:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009e9a:	82 1f       	mov %d15,1
80009e9c:	e9 ff 23 00 	st.b [%a15]35,%d15
  /* [OS566]: The Operating System API shall check in extended mode all pointer
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
80009ea0:	bd 04 2a 00 	jz.a %a4,80009ef4 <GetTaskID+0x66>
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_tdb = p_ccb->p_curr;
80009ea4:	c8 02       	ld.a %a2,[%a15]0
       value to return. If it its ISR2 we have to follow the chain and
       find the first task in the list (which is the running task
       which was preempted by the ISR, which could be the idle task),
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009ea6:	39 2f 14 00 	ld.bu %d15,[%a2]20 <0 <NULL>>
80009eaa:	ff 2f 05 80 	jge.u %d15,2,80009eb4 <GetTaskID+0x26>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
80009eae:	19 22 10 00 	ld.w %d2,[%a2]16
80009eb2:	3c 1b       	j 80009ee8 <GetTaskID+0x5a>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009eb4:	82 f2       	mov %d2,-1
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
    } else if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009eb6:	de 29       	jne %d15,2,80009ee8 <GetTaskID+0x5a>
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;
80009eb8:	c8 32       	ld.a %a2,[%a15]12
80009eba:	d4 22       	ld.a %a2,[%a2]

      while (p_sn != NULL) {
80009ebc:	bd 02 16 00 	jz.a %a2,80009ee8 <GetTaskID+0x5a>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009ec0:	99 23 04 00 	ld.a %a3,[%a2]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009ec4:	39 3f 14 00 	ld.bu %d15,[%a3]20
80009ec8:	ff 2f 0c 80 	jge.u %d15,2,80009ee0 <GetTaskID+0x52>
80009ecc:	3c 07       	j 80009eda <GetTaskID+0x4c>
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009ece:	99 23 04 00 	ld.a %a3,[%a2]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009ed2:	39 3f 14 00 	ld.bu %d15,[%a3]20
80009ed6:	ff 2f 05 80 	jge.u %d15,2,80009ee0 <GetTaskID+0x52>
          tid = p_searched_tdb->tid;
80009eda:	19 32 10 00 	ld.w %d2,[%a3]16
          break;
80009ede:	3c 05       	j 80009ee8 <GetTaskID+0x5a>
        } else {
          p_sn = p_sn->p_next;
80009ee0:	d4 22       	ld.a %a2,[%a2]
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
80009ee2:	bd 02 f6 ff 	jnz.a %a2,80009ece <GetTaskID+0x40>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009ee6:	82 f2       	mov %d2,-1
    } else {
      /* This is the case of the IDLE task. we do nothing because tid
         is already initialized */
    }
    /* XXX: This SHALL be atomic. */
    (*TaskID) = tid;
80009ee8:	74 42       	st.w [%a4],%d2
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009eea:	39 ff 23 00 	ld.bu %d15,[%a15]35
    ev = E_OK;
80009eee:	82 02       	mov %d2,0
80009ef0:	5e 1a       	jne %d15,1,80009f04 <GetTaskID+0x76>
80009ef2:	3c 03       	j 80009ef8 <GetTaskID+0x6a>
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
80009ef4:	3b e0 00 20 	mov %d2,14
    p_ccb->service_id            = service_id;
80009ef8:	da 08       	mov %d15,8
80009efa:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009efe:	82 0f       	mov %d15,0
80009f00:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskID);

  return ev;
}
80009f04:	00 90       	ret 

80009f06 <GetTaskState>:
  GetTaskState
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(TaskStateRefType, AUTOMATIC)  State
)
{
80009f06:	40 ae       	mov.aa %a14,%sp
80009f08:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009f0a:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009f0c:	da 0b       	mov %d15,11
80009f0e:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009f12:	82 1f       	mov %d15,1
80009f14:	e9 ff 23 00 	st.b [%a15]35,%d15
  /* [SWS_Os_00566]: The Operating System API shall check in extended mode all
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
80009f18:	bd 04 40 00 	jz.a %a4,80009f98 <GetTaskState+0x92>
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009f1c:	91 00 00 28 	movh.a %a2,32768
80009f20:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009f24:	4c 24       	ld.w %d15,[%a2]16
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009f26:	82 32       	mov %d2,3
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009f28:	7f f4 31 80 	jge.u %d4,%d15,80009f8a <GetTaskState+0x84>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009f2c:	91 00 00 28 	movh.a %a2,32768
80009f30:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009f34:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009f38:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
80009f3c:	d4 22       	ld.a %a2,[%a2]
80009f3e:	99 22 0c 00 	ld.a %a2,[%a2]12
    switch (local_state) {
80009f42:	0c 22       	ld.bu %d15,[%a2]2
80009f44:	ff 6f 1f 80 	jge.u %d15,6,80009f82 <GetTaskState+0x7c>
80009f48:	91 10 00 28 	movh.a %a2,32769
80009f4c:	d9 22 d4 d9 	lea %a2,[%a2]-24748 <80009f54 <GetTaskState+0x4e>>
80009f50:	90 22       	addsc.a %a2,%a2,%d15,2
80009f52:	dc 02       	ji %a2
80009f54:	1d 00 0c 00 	j 80009f6c <GetTaskState+0x66>
80009f58:	1d 00 0d 00 	j 80009f72 <GetTaskState+0x6c>
80009f5c:	1d 00 0b 00 	j 80009f72 <GetTaskState+0x6c>
80009f60:	1d 00 0c 00 	j 80009f78 <GetTaskState+0x72>
80009f64:	1d 00 0d 00 	j 80009f7e <GetTaskState+0x78>
80009f68:	1d 00 0b 00 	j 80009f7e <GetTaskState+0x78>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
80009f6c:	82 0f       	mov %d15,0
80009f6e:	2c 40       	st.b [%a4]0,%d15
        break;
80009f70:	3c 09       	j 80009f82 <GetTaskState+0x7c>
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
80009f72:	82 1f       	mov %d15,1
80009f74:	2c 40       	st.b [%a4]0,%d15
        break;
80009f76:	3c 06       	j 80009f82 <GetTaskState+0x7c>
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
80009f78:	82 3f       	mov %d15,3
80009f7a:	2c 40       	st.b [%a4]0,%d15
        break;
80009f7c:	3c 03       	j 80009f82 <GetTaskState+0x7c>
      case OSEE_TASK_RUNNING:
      case OSEE_TASK_CHAINED:
        (*State) = RUNNING;
80009f7e:	82 4f       	mov %d15,4
80009f80:	2c 40       	st.b [%a4]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
80009f82:	39 ff 23 00 	ld.bu %d15,[%a15]35
80009f86:	82 02       	mov %d2,0
80009f88:	5e 1b       	jne %d15,1,80009f9e <GetTaskState+0x98>
    p_ccb->service_id            = service_id;
80009f8a:	da 0a       	mov %d15,10
80009f8c:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
80009f90:	82 0f       	mov %d15,0
80009f92:	e9 ff 23 00 	st.b [%a15]35,%d15
80009f96:	00 90       	ret 
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
80009f98:	3b e0 00 20 	mov %d2,14
80009f9c:	3c f7       	j 80009f8a <GetTaskState+0x84>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskState);

  return ev;
}
80009f9e:	00 90       	ret 

80009fa0 <SetRelAlarm>:
(
  VAR(AlarmType,  AUTOMATIC)  AlarmID,
  VAR(TickType,   AUTOMATIC)  increment,
  VAR(TickType,   AUTOMATIC)  cycle
)
{
80009fa0:	40 ae       	mov.aa %a14,%sp
80009fa2:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009fa4:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
80009fa6:	da 29       	mov %d15,41
80009fa8:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
80009fac:	82 1f       	mov %d15,1
80009fae:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (alarm_id < p_kdb->p_kcb->free_alarm_index);
#else
  return (alarm_id < p_kdb->alarm_array_size);
80009fb2:	91 00 00 28 	movh.a %a2,32768
80009fb6:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009fba:	4c 28       	ld.w %d15,[%a2]32
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
80009fbc:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
80009fbe:	7f f4 33 80 	jge.u %d4,%d15,8000a024 <SetRelAlarm+0x84>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)
      p_alarm_db = (*p_kdb->p_alarm_ptr_array)[AlarmID];
80009fc2:	91 00 00 28 	movh.a %a2,32768
80009fc6:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
80009fca:	99 22 1c 00 	ld.a %a2,[%a2]28 <8000001c <BootModeHeader0+0x1c>>
80009fce:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009fd2:	d4 25       	ld.a %a5,[%a2]
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
      p_counter_db = osEE_alarm_get_trigger_db(p_alarm_db)->p_counter_db;
80009fd4:	99 54 04 00 	ld.a %a4,[%a5]4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009fd8:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009fdc:	8f f8 0f f1 	and %d15,%d8,255
80009fe0:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009fe4:	ee 0a       	jnz %d15,80009ff8 <SetRelAlarm+0x58>
    OsEE_icr icr_temp = icr;
80009fe6:	02 8f       	mov %d15,%d8
80009fe8:	3b 30 01 20 	mov %d2,19
80009fec:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ff0:	cd cf e2 0f 	mtcr $icr,%d15
80009ff4:	0d 00 c0 04 	isync 
80009ff8:	02 54       	mov %d4,%d5
#endif /* OSEE_HAS_CHECKS */
    {
      CONST(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      ev = osEE_alarm_set_rel(p_counter_db, p_alarm_db, increment, cycle);
80009ffa:	02 65       	mov %d5,%d6
80009ffc:	6d 00 ee 09 	call 8000b3d8 <osEE_alarm_set_rel>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a000:	4d c0 e2 4f 	mfcr %d4,$icr
8000a004:	02 4f       	mov %d15,%d4
8000a006:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a00a:	8f f8 0f 31 	and %d3,%d8,255
8000a00e:	5f 34 08 00 	jeq %d4,%d3,8000a01e <SetRelAlarm+0x7e>
8000a012:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a016:	cd cf e2 0f 	mtcr $icr,%d15
8000a01a:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a01e:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a022:	5e 17       	jne %d15,1,8000a030 <SetRelAlarm+0x90>
    p_ccb->service_id            = service_id;
8000a024:	da 28       	mov %d15,40
8000a026:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a02a:	82 0f       	mov %d15,0
8000a02c:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetRelAlarm);

  return ev;
}
8000a030:	00 90       	ret 

8000a032 <SetAbsAlarm>:
(
  VAR(AlarmType,  AUTOMATIC)  AlarmID,
  VAR(TickType,   AUTOMATIC)  start,
  VAR(TickType,   AUTOMATIC)  cycle
)
{
8000a032:	40 ae       	mov.aa %a14,%sp
8000a034:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a036:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a038:	da 2b       	mov %d15,43
8000a03a:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a03e:	82 1f       	mov %d15,1
8000a040:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (alarm_id < p_kdb->p_kcb->free_alarm_index);
#else
  return (alarm_id < p_kdb->alarm_array_size);
8000a044:	91 00 00 28 	movh.a %a2,32768
8000a048:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a04c:	4c 28       	ld.w %d15,[%a2]32
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
8000a04e:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
8000a050:	7f f4 33 80 	jge.u %d4,%d15,8000a0b6 <SetAbsAlarm+0x84>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)
      p_alarm_db = (*p_kdb->p_alarm_ptr_array)[AlarmID];
8000a054:	91 00 00 28 	movh.a %a2,32768
8000a058:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a05c:	99 22 1c 00 	ld.a %a2,[%a2]28 <8000001c <BootModeHeader0+0x1c>>
8000a060:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a064:	d4 25       	ld.a %a5,[%a2]
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
      p_counter_db = osEE_alarm_get_trigger_db(p_alarm_db)->p_counter_db;
8000a066:	99 54 04 00 	ld.a %a4,[%a5]4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a06a:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a06e:	8f f8 0f f1 	and %d15,%d8,255
8000a072:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a076:	ee 0a       	jnz %d15,8000a08a <SetAbsAlarm+0x58>
    OsEE_icr icr_temp = icr;
8000a078:	02 8f       	mov %d15,%d8
8000a07a:	3b 30 01 20 	mov %d2,19
8000a07e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a082:	cd cf e2 0f 	mtcr $icr,%d15
8000a086:	0d 00 c0 04 	isync 
8000a08a:	02 54       	mov %d4,%d5
#endif /* OSEE_HAS_CHECKS */
    {
      CONST(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      ev = osEE_alarm_set_abs(p_counter_db, p_alarm_db, start, cycle);
8000a08c:	02 65       	mov %d5,%d6
8000a08e:	6d 00 e7 09 	call 8000b45c <osEE_alarm_set_abs>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a092:	4d c0 e2 4f 	mfcr %d4,$icr
8000a096:	02 4f       	mov %d15,%d4
8000a098:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a09c:	8f f8 0f 31 	and %d3,%d8,255
8000a0a0:	5f 34 08 00 	jeq %d4,%d3,8000a0b0 <SetAbsAlarm+0x7e>
8000a0a4:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a0a8:	cd cf e2 0f 	mtcr $icr,%d15
8000a0ac:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a0b0:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a0b4:	5e 17       	jne %d15,1,8000a0c2 <SetAbsAlarm+0x90>
    p_ccb->service_id            = service_id;
8000a0b6:	da 2a       	mov %d15,42
8000a0b8:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a0bc:	82 0f       	mov %d15,0
8000a0be:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetAbsAlarm);

  return ev;
}
8000a0c2:	00 90       	ret 

8000a0c4 <CancelAlarm>:
FUNC(StatusType, OS_CODE)
  CancelAlarm
(
  VAR(AlarmType, AUTOMATIC) AlarmID
)
{
8000a0c4:	40 ae       	mov.aa %a14,%sp
8000a0c6:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a0c8:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a0ca:	da 2d       	mov %d15,45
8000a0cc:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a0d0:	82 1f       	mov %d15,1
8000a0d2:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (alarm_id < p_kdb->p_kcb->free_alarm_index);
#else
  return (alarm_id < p_kdb->alarm_array_size);
8000a0d6:	91 00 00 28 	movh.a %a2,32768
8000a0da:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a0de:	4c 28       	ld.w %d15,[%a2]32
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
8000a0e0:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
8000a0e2:	7f f4 2f 80 	jge.u %d4,%d15,8000a140 <CancelAlarm+0x7c>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)
      p_alarm_db  = (*p_kdb->p_alarm_ptr_array)[AlarmID];
8000a0e6:	91 00 00 28 	movh.a %a2,32768
8000a0ea:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a0ee:	99 22 1c 00 	ld.a %a2,[%a2]28 <8000001c <BootModeHeader0+0x1c>>
8000a0f2:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a0f6:	d4 24       	ld.a %a4,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a0f8:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a0fc:	8f f8 0f f1 	and %d15,%d8,255
8000a100:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a104:	ee 0a       	jnz %d15,8000a118 <CancelAlarm+0x54>
    OsEE_icr icr_temp = icr;
8000a106:	02 8f       	mov %d15,%d8
8000a108:	3b 30 01 20 	mov %d2,19
8000a10c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a110:	cd cf e2 0f 	mtcr $icr,%d15
8000a114:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    ev = osEE_alarm_cancel(p_alarm_db);
8000a118:	6d 00 d7 09 	call 8000b4c6 <osEE_alarm_cancel>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a11c:	4d c0 e2 4f 	mfcr %d4,$icr
8000a120:	02 4f       	mov %d15,%d4
8000a122:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a126:	8f f8 0f 31 	and %d3,%d8,255
8000a12a:	5f 34 08 00 	jeq %d4,%d3,8000a13a <CancelAlarm+0x76>
8000a12e:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a132:	cd cf e2 0f 	mtcr $icr,%d15
8000a136:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a13a:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a13e:	5e 17       	jne %d15,1,8000a14c <CancelAlarm+0x88>
    p_ccb->service_id            = service_id;
8000a140:	da 2c       	mov %d15,44
8000a142:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a146:	82 0f       	mov %d15,0
8000a148:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_CancelAlarm);

  return ev;
}
8000a14c:	00 90       	ret 

8000a14e <GetAlarm>:
  GetAlarm
(
  VAR(AlarmType, AUTOMATIC)   AlarmID,
  VAR(TickRefType, AUTOMATIC) Tick
)
{
8000a14e:	40 ae       	mov.aa %a14,%sp
8000a150:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a152:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a154:	da 27       	mov %d15,39
8000a156:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a15a:	82 1f       	mov %d15,1
8000a15c:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (alarm_id < p_kdb->p_kcb->free_alarm_index);
#else
  return (alarm_id < p_kdb->alarm_array_size);
8000a160:	91 00 00 28 	movh.a %a2,32768
8000a164:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a168:	4c 28       	ld.w %d15,[%a2]32
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
8000a16a:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_POSTTASKHOOK_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
8000a16c:	7f f4 33 80 	jge.u %d4,%d15,8000a1d2 <GetAlarm+0x84>
    ev = E_OS_ID;
  } else
  if (Tick == NULL) {
8000a170:	bd 04 38 00 	jz.a %a4,8000a1e0 <GetAlarm+0x92>
    ev = E_OS_PARAM_POINTER;
  } else
  {
    CONSTP2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)
      p_alarm_db = (*p_kdb->p_alarm_ptr_array)[AlarmID];
8000a174:	91 00 00 28 	movh.a %a2,32768
8000a178:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a17c:	99 22 1c 00 	ld.a %a2,[%a2]28 <8000001c <BootModeHeader0+0x1c>>
8000a180:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a184:	d4 22       	ld.a %a2,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a186:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a18a:	8f f8 0f f1 	and %d15,%d8,255
8000a18e:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a192:	ee 0a       	jnz %d15,8000a1a6 <GetAlarm+0x58>
    OsEE_icr icr_temp = icr;
8000a194:	02 8f       	mov %d15,%d8
8000a196:	3b 30 01 20 	mov %d2,19
8000a19a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a19e:	cd cf e2 0f 	mtcr $icr,%d15
8000a1a2:	0d 00 c0 04 	isync 
8000a1a6:	40 45       	mov.aa %a5,%a4
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    ev = osEE_alarm_get(p_alarm_db, Tick);
8000a1a8:	40 24       	mov.aa %a4,%a2
8000a1aa:	6d 00 bd 09 	call 8000b524 <osEE_alarm_get>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a1ae:	4d c0 e2 4f 	mfcr %d4,$icr
8000a1b2:	02 4f       	mov %d15,%d4
8000a1b4:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a1b8:	8f f8 0f 31 	and %d3,%d8,255
8000a1bc:	5f 34 08 00 	jeq %d4,%d3,8000a1cc <GetAlarm+0x7e>
8000a1c0:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a1c4:	cd cf e2 0f 	mtcr $icr,%d15
8000a1c8:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a1cc:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a1d0:	5e 1b       	jne %d15,1,8000a1e6 <GetAlarm+0x98>
    p_ccb->service_id            = service_id;
8000a1d2:	da 26       	mov %d15,38
8000a1d4:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a1d8:	82 0f       	mov %d15,0
8000a1da:	e9 ff 23 00 	st.b [%a15]35,%d15
8000a1de:	00 90       	ret 
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
  } else
  if (Tick == NULL) {
    ev = E_OS_PARAM_POINTER;
8000a1e0:	3b e0 00 20 	mov %d2,14
8000a1e4:	3c f7       	j 8000a1d2 <GetAlarm+0x84>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetAlarm);

  return ev;
}
8000a1e6:	00 90       	ret 

8000a1e8 <GetAlarmBase>:
  GetAlarmBase
(
  VAR(AlarmType, AUTOMATIC)         AlarmID,
  VAR(AlarmBaseRefType, AUTOMATIC)  Info
)
{
8000a1e8:	40 ae       	mov.aa %a14,%sp
8000a1ea:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a1ec:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a1ee:	da 25       	mov %d15,37
8000a1f0:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a1f4:	82 1f       	mov %d15,1
8000a1f6:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (alarm_id < p_kdb->p_kcb->free_alarm_index);
#else
  return (alarm_id < p_kdb->alarm_array_size);
8000a1fa:	91 00 00 28 	movh.a %a2,32768
8000a1fe:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a202:	4c 28       	ld.w %d15,[%a2]32
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
8000a204:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_POSTTASKHOOK_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
8000a206:	7f f4 17 80 	jge.u %d4,%d15,8000a234 <GetAlarmBase+0x4c>
    ev = E_OS_ID;
  } else
  if (Info == NULL) {
8000a20a:	bd 04 1c 00 	jz.a %a4,8000a242 <GetAlarmBase+0x5a>
    ev = E_OS_PARAM_POINTER;
  } else
  {
    CONSTP2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)
      p_alarm_db = (*p_kdb->p_alarm_ptr_array)[AlarmID];
8000a20e:	91 00 00 28 	movh.a %a2,32768
8000a212:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a216:	99 22 1c 00 	ld.a %a2,[%a2]28 <8000001c <BootModeHeader0+0x1c>>
8000a21a:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
      p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
      p_counter_db = p_trigger_db->p_counter_db;
8000a21e:	d4 22       	ld.a %a2,[%a2]
8000a220:	99 22 04 00 	ld.a %a2,[%a2]4

    *Info = p_counter_db->info;
8000a224:	09 22 44 09 	ld.d %e2,[%a2]4
8000a228:	89 42 40 09 	st.d [%a4],%e2
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a22c:	39 ff 23 00 	ld.bu %d15,[%a15]35

    ev = E_OK;
8000a230:	82 02       	mov %d2,0
8000a232:	5e 1b       	jne %d15,1,8000a248 <GetAlarmBase+0x60>
    p_ccb->service_id            = service_id;
8000a234:	da 24       	mov %d15,36
8000a236:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a23a:	82 0f       	mov %d15,0
8000a23c:	e9 ff 23 00 	st.b [%a15]35,%d15
8000a240:	00 90       	ret 
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
  } else
  if (Info == NULL) {
    ev = E_OS_PARAM_POINTER;
8000a242:	3b e0 00 20 	mov %d2,14
8000a246:	3c f7       	j 8000a234 <GetAlarmBase+0x4c>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetAlarmBase);

  return ev;
}
8000a248:	00 90       	ret 

8000a24a <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000a24a:	40 ae       	mov.aa %a14,%sp
8000a24c:	40 9d       	mov.aa %a13,%a9
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
8000a24e:	99 dc 0c 00 	ld.a %a12,[%a13]12 <f003000c <_SMALL_DATA4_+0x4002800c>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
8000a252:	54 ca       	ld.w %d10,[%a12]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
8000a254:	60 a3       	mov.a %a3,%d10
8000a256:	19 38 0c 00 	ld.w %d8,[%a3]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a25a:	da 23       	mov %d15,35
8000a25c:	e9 cf 13 00 	st.b [%a12]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a260:	82 1f       	mov %d15,1
8000a262:	e9 cf 23 00 	st.b [%a12]35,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a266:	4d c0 e2 9f 	mfcr %d9,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a26a:	8f f9 0f f1 	and %d15,%d9,255
8000a26e:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a272:	ee 0a       	jnz %d15,8000a286 <WaitEvent+0x3c>
    OsEE_icr icr_temp = icr;
8000a274:	02 9f       	mov %d15,%d9
8000a276:	3b 30 01 50 	mov %d5,19
8000a27a:	37 5f 08 f0 	insert %d15,%d15,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a27e:	cd cf e2 0f 	mtcr $icr,%d15
8000a282:	0d 00 c0 04 	isync 
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000a286:	cc d4       	ld.a %a15,[%a13]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a288:	82 12       	mov %d2,1
8000a28a:	82 03       	mov %d3,0
8000a28c:	0b 23 10 68 	mov %e6,%d3,%d2
8000a290:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a294:	df 06 fa ff 	jne %d6,0,8000a288 <WaitEvent+0x3e>
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);

    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
8000a298:	60 83       	mov.a %a3,%d8
8000a29a:	4c 33       	ld.w %d15,[%a3]12
8000a29c:	26 4f       	and %d15,%d4
8000a29e:	ee 1b       	jnz %d15,8000a2d4 <WaitEvent+0x8a>
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;
8000a2a0:	59 34 08 00 	st.w [%a3]8,%d4

      p_curr_tcb->p_own_sn =
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
8000a2a4:	40 d4       	mov.aa %a4,%a13
8000a2a6:	d9 c5 04 00 	lea %a5,[%a12]4
8000a2aa:	6d 00 63 05 	call 8000ad70 <osEE_scheduler_core_pop_running>
    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;

      p_curr_tcb->p_own_sn =
8000a2ae:	60 83       	mov.a %a3,%d8
8000a2b0:	b5 32 10 00 	st.a [%a3]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
8000a2b4:	82 3f       	mov %d15,3
8000a2b6:	2c 32       	st.b [%a3]2,%d15
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000a2b8:	cc d4       	ld.a %a15,[%a13]16
8000a2ba:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000a2be:	82 0f       	mov %d15,0
8000a2c0:	68 0f       	st.w [%a15]0,%d15

      osEE_unlock_core(p_cdb);

      osEE_change_context_from_running(p_curr, p_ccb->p_curr);
8000a2c2:	60 a4       	mov.a %a4,%d10
8000a2c4:	d4 c5       	ld.a %a5,[%a12]
8000a2c6:	6d 00 62 09 	call 8000b58a <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
8000a2ca:	82 02       	mov %d2,0
8000a2cc:	60 83       	mov.a %a3,%d8
8000a2ce:	59 32 08 00 	st.w [%a3]8,%d2
8000a2d2:	3c 06       	j 8000a2de <WaitEvent+0x94>
8000a2d4:	cc d4       	ld.a %a15,[%a13]16
8000a2d6:	0d 00 80 04 	dsync 
8000a2da:	82 0f       	mov %d15,0
8000a2dc:	68 0f       	st.w [%a15]0,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a2de:	4d c0 e2 3f 	mfcr %d3,$icr
8000a2e2:	02 3f       	mov %d15,%d3
8000a2e4:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a2e8:	8f f9 0f 21 	and %d2,%d9,255
8000a2ec:	5f 23 08 00 	jeq %d3,%d2,8000a2fc <WaitEvent+0xb2>
8000a2f0:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a2f4:	cd cf e2 0f 	mtcr $icr,%d15
8000a2f8:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a2fc:	39 cf 23 00 	ld.bu %d15,[%a12]35
8000a300:	5e 17       	jne %d15,1,8000a30e <WaitEvent+0xc4>
    p_ccb->service_id            = service_id;
8000a302:	da 22       	mov %d15,34
8000a304:	e9 cf 13 00 	st.b [%a12]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a308:	82 0f       	mov %d15,0
8000a30a:	e9 cf 23 00 	st.b [%a12]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
8000a30e:	82 02       	mov %d2,0
8000a310:	00 90       	ret 

8000a312 <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000a312:	40 ae       	mov.aa %a14,%sp
8000a314:	20 08       	sub.a %sp,8
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000a316:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb  = p_cdb->p_ccb;
8000a318:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a31a:	da 1d       	mov %d15,29
8000a31c:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a320:	82 1f       	mov %d15,1
8000a322:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
8000a326:	91 00 00 28 	movh.a %a2,32768
8000a32a:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a32e:	4c 24       	ld.w %d15,[%a2]16
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000a330:	3f f4 06 80 	jlt.u %d4,%d15,8000a33c <SetEvent+0x2a>
    ev = E_OS_ID;
8000a334:	82 3f       	mov %d15,3
8000a336:	e9 ef ff ff 	st.b [%a14]-1,%d15
8000a33a:	3c 3d       	j 8000a3b4 <SetEvent+0xa2>
  } else {
    P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_sn;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000a33c:	91 00 00 28 	movh.a %a2,32768
8000a340:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a344:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
8000a348:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a34c:	d4 24       	ld.a %a4,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a34e:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a352:	8f f8 0f f1 	and %d15,%d8,255
8000a356:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a35a:	ee 0a       	jnz %d15,8000a36e <SetEvent+0x5c>
    OsEE_icr icr_temp = icr;
8000a35c:	02 8f       	mov %d15,%d8
8000a35e:	3b 30 01 20 	mov %d2,19
8000a362:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a366:	cd cf e2 0f 	mtcr $icr,%d15
8000a36a:	0d 00 c0 04 	isync 
8000a36e:	02 54       	mov %d4,%d5
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    p_sn = osEE_task_event_set_mask(p_tdb_waking_up, Mask, &ev);
8000a370:	d9 e5 ff ff 	lea %a5,[%a14]-1
8000a374:	6d 00 41 05 	call 8000adf6 <osEE_task_event_set_mask>

    if (p_sn != NULL) {
8000a378:	bc 2f       	jz.a %a2,8000a396 <SetEvent+0x84>
      /* Release the TASK (and the SN) */
      if (osEE_scheduler_task_unblocked(p_kdb, p_sn))
8000a37a:	91 00 00 48 	movh.a %a4,32768
8000a37e:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000a382:	40 25       	mov.aa %a5,%a2
8000a384:	6d 00 37 06 	call 8000aff2 <osEE_scheduler_task_unblocked>
8000a388:	76 27       	jz %d2,8000a396 <SetEvent+0x84>
      {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
8000a38a:	91 00 00 48 	movh.a %a4,32768
8000a38e:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000a392:	6d 00 d3 06 	call 8000b138 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a396:	4d c0 e2 3f 	mfcr %d3,$icr
8000a39a:	02 3f       	mov %d15,%d3
8000a39c:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a3a0:	8f f8 0f 21 	and %d2,%d8,255
8000a3a4:	5f 23 08 00 	jeq %d3,%d2,8000a3b4 <SetEvent+0xa2>
8000a3a8:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a3ac:	cd cf e2 0f 	mtcr $icr,%d15
8000a3b0:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a3b4:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a3b8:	5e 17       	jne %d15,1,8000a3c6 <SetEvent+0xb4>
    p_ccb->service_id            = service_id;
8000a3ba:	da 1c       	mov %d15,28
8000a3bc:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a3c0:	82 0f       	mov %d15,0
8000a3c2:	e9 ff 23 00 	st.b [%a15]35,%d15
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
8000a3c6:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
8000a3ca:	00 90       	ret 

8000a3cc <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
8000a3cc:	40 ae       	mov.aa %a14,%sp
8000a3ce:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
8000a3d0:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a3d2:	da 21       	mov %d15,33
8000a3d4:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a3d8:	82 1f       	mov %d15,1
8000a3da:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
8000a3de:	91 00 00 28 	movh.a %a2,32768
8000a3e2:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a3e6:	4c 24       	ld.w %d15,[%a2]16
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
8000a3e8:	82 32       	mov %d2,3
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000a3ea:	7f f4 14 80 	jge.u %d4,%d15,8000a412 <GetEvent+0x46>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000a3ee:	91 00 00 28 	movh.a %a2,32768
8000a3f2:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a3f6:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
8000a3fa:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
8000a3fe:	d4 22       	ld.a %a2,[%a2]
8000a400:	99 22 0c 00 	ld.a %a2,[%a2]12
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
8000a404:	bc 4e       	jz.a %a4,8000a420 <GetEvent+0x54>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      /* N.B. XXX This MUST Be ATOMIC! */
      (*Event) = p_tcb_event->event_mask;
8000a406:	4c 23       	ld.w %d15,[%a2]12
8000a408:	6c 40       	st.w [%a4]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a40a:	39 ff 23 00 	ld.bu %d15,[%a15]35

      ev = E_OK;
8000a40e:	82 02       	mov %d2,0
8000a410:	5e 1b       	jne %d15,1,8000a426 <GetEvent+0x5a>
    p_ccb->service_id            = service_id;
8000a412:	da 20       	mov %d15,32
8000a414:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a418:	82 0f       	mov %d15,0
8000a41a:	e9 ff 23 00 	st.b [%a15]35,%d15
8000a41e:	00 90       	ret 
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
8000a420:	3b e0 00 20 	mov %d2,14
8000a424:	3c f7       	j 8000a412 <GetEvent+0x46>
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
8000a426:	00 90       	ret 

8000a428 <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000a428:	40 ae       	mov.aa %a14,%sp
8000a42a:	40 93       	mov.aa %a3,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
8000a42c:	99 32 0c 00 	ld.a %a2,[%a3]12 <f003000c <_SMALL_DATA4_+0x4002800c>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
8000a430:	cc 20       	ld.a %a15,[%a2]0
8000a432:	c8 34       	ld.a %a4,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a434:	da 1f       	mov %d15,31
8000a436:	e9 2f 13 00 	st.b [%a2]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a43a:	82 1f       	mov %d15,1
8000a43c:	e9 2f 23 00 	st.b [%a2]35,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a440:	4d c0 e2 5f 	mfcr %d5,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a444:	8f f5 0f f1 	and %d15,%d5,255
8000a448:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a44c:	ee 0a       	jnz %d15,8000a460 <ClearEvent+0x38>
    OsEE_icr icr_temp = icr;
8000a44e:	02 5f       	mov %d15,%d5
8000a450:	3b 30 01 60 	mov %d6,19
8000a454:	37 6f 08 f0 	insert %d15,%d15,%d6,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a458:	cd cf e2 0f 	mtcr $icr,%d15
8000a45c:	0d 00 c0 04 	isync 
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000a460:	cc 34       	ld.a %a15,[%a3]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a462:	82 12       	mov %d2,1
8000a464:	82 03       	mov %d3,0
8000a466:	0b 23 10 68 	mov %e6,%d3,%d2
8000a46a:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a46e:	df 06 fa ff 	jne %d6,0,8000a462 <ClearEvent+0x3a>
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);
    /* XXX: Maybe we need to introduce an HAL for atomic Load-Modify-Store
            Operations */
    p_curr_tcb->event_mask &= ~Mask;
8000a472:	4c 43       	ld.w %d15,[%a4]12
8000a474:	0f 4f e0 40 	andn %d4,%d15,%d4
8000a478:	59 44 0c 00 	st.w [%a4]12,%d4
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000a47c:	cc 34       	ld.a %a15,[%a3]16
8000a47e:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000a482:	82 0f       	mov %d15,0
8000a484:	68 0f       	st.w [%a15]0,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a486:	4d c0 e2 3f 	mfcr %d3,$icr
8000a48a:	02 3f       	mov %d15,%d3
8000a48c:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a490:	8f f5 0f 21 	and %d2,%d5,255
8000a494:	5f 23 08 00 	jeq %d3,%d2,8000a4a4 <ClearEvent+0x7c>
8000a498:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a49c:	cd cf e2 0f 	mtcr $icr,%d15
8000a4a0:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a4a4:	39 2f 23 00 	ld.bu %d15,[%a2]35
8000a4a8:	5e 17       	jne %d15,1,8000a4b6 <ClearEvent+0x8e>
    p_ccb->service_id            = service_id;
8000a4aa:	da 1e       	mov %d15,30
8000a4ac:	e9 2f 13 00 	st.b [%a2]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a4b0:	82 0f       	mov %d15,0
8000a4b2:	e9 2f 23 00 	st.b [%a2]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
8000a4b6:	82 02       	mov %d2,0
8000a4b8:	00 90       	ret 

8000a4ba <GetCounterValue>:
  GetCounterValue
(
  VAR(CounterType, AUTOMATIC) CounterID,
  VAR(TickRefType, AUTOMATIC) Value
)
{
8000a4ba:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000a4bc:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a4be:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a4c0:	da 31       	mov %d15,49
8000a4c2:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a4c6:	82 1f       	mov %d15,1
8000a4c8:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (counter_id < p_kdb->p_kcb->free_counter_index);
#else
  return (counter_id < p_kdb->counter_array_size);
8000a4cc:	91 00 00 28 	movh.a %a2,32768
8000a4d0:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a4d4:	4c 26       	ld.w %d15,[%a2]24
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00376] If the input parameter <CounterID> in a call of
    GetCounterValue() is not valid, GetCounterValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
    ev = E_OS_ID;
8000a4d6:	82 32       	mov %d2,3
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00376] If the input parameter <CounterID> in a call of
    GetCounterValue() is not valid, GetCounterValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
8000a4d8:	7f f4 1e 80 	jge.u %d4,%d15,8000a514 <GetCounterValue+0x5a>
    ev = E_OS_ID;
  } else
  if (Value == NULL) {
8000a4dc:	bd 04 23 00 	jz.a %a4,8000a522 <GetCounterValue+0x68>
    ev = E_OS_PARAM_POINTER;
  } else
  {
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_CONST)
      p_counter_db = (*p_kdb->p_counter_ptr_array)[CounterID];
8000a4e0:	91 00 00 28 	movh.a %a2,32768
8000a4e4:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a4e8:	99 22 14 00 	ld.a %a2,[%a2]20 <80000014 <BootModeHeader0+0x14>>
8000a4ec:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a4f0:	d4 22       	ld.a %a2,[%a2]
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000a4f2:	4d c0 e1 ff 	mfcr %d15,$core_id
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) curr_core_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != curr_core_id) {
8000a4f6:	79 23 0c 00 	ld.b %d3,[%a2]12
8000a4fa:	37 0f 48 f0 	extr %d15,%d15,0,8
      ev = E_OS_CORE;
8000a4fe:	3b 70 01 20 	mov %d2,23
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) curr_core_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != curr_core_id) {
8000a502:	5f f3 06 80 	jne %d3,%d15,8000a50e <GetCounterValue+0x54>
    of hardware timers (which drive counters) in such that the lowest value is
    zero and consecutive reads return an increasing count value until the timer
    wraps at its modulus. (SRS_Frt_00030, SRS_Frt_00031) */
/* EG  TODO: Add support for HARDWARE counters */

      (*Value) = p_counter_db->p_counter_cb->value;
8000a506:	d4 22       	ld.a %a2,[%a2]
8000a508:	4c 21       	ld.w %d15,[%a2]4
8000a50a:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
8000a50c:	82 02       	mov %d2,0
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a50e:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a512:	5e 1b       	jne %d15,1,8000a528 <GetCounterValue+0x6e>
    p_ccb->service_id            = service_id;
8000a514:	da 30       	mov %d15,48
8000a516:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a51a:	82 0f       	mov %d15,0
8000a51c:	e9 ff 23 00 	st.b [%a15]35,%d15
8000a520:	00 90       	ret 
    GetCounterValue() is not valid, GetCounterValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
    ev = E_OS_ID;
  } else
  if (Value == NULL) {
    ev = E_OS_PARAM_POINTER;
8000a522:	3b e0 00 20 	mov %d2,14
8000a526:	3c f7       	j 8000a514 <GetCounterValue+0x5a>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetCounterValue);

  return ev;
}
8000a528:	00 90       	ret 

8000a52a <GetElapsedValue>:
(
  VAR(CounterType, AUTOMATIC) CounterID,
  VAR(TickRefType, AUTOMATIC) Value,
  VAR(TickRefType, AUTOMATIC) ElapsedValue
)
{
8000a52a:	40 ae       	mov.aa %a14,%sp
8000a52c:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a52e:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a530:	da 33       	mov %d15,51
8000a532:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a536:	82 1f       	mov %d15,1
8000a538:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (counter_id < p_kdb->p_kcb->free_counter_index);
#else
  return (counter_id < p_kdb->counter_array_size);
8000a53c:	91 00 00 28 	movh.a %a2,32768
8000a540:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a544:	4c 26       	ld.w %d15,[%a2]24
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
 /* [SWS_Os_00381] If the input parameter <CounterID> in a call of
    GetElapsedValue() is not valid GetElapsedValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
    ev = E_OS_ID;
8000a546:	82 32       	mov %d2,3
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
 /* [SWS_Os_00381] If the input parameter <CounterID> in a call of
    GetElapsedValue() is not valid GetElapsedValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
8000a548:	7f f4 30 80 	jge.u %d4,%d15,8000a5a8 <GetElapsedValue+0x7e>
    ev = E_OS_ID;
  } else
  if ((Value == NULL) || (ElapsedValue == NULL)) {
8000a54c:	80 42       	mov.d %d2,%a4
8000a54e:	80 53       	mov.d %d3,%a5
8000a550:	ba 02       	eq %d15,%d2,0
8000a552:	8b 03 e0 f4 	or.eq %d15,%d3,0
    ev = E_OS_PARAM_POINTER;
8000a556:	3b e0 00 20 	mov %d2,14
 /* [SWS_Os_00381] If the input parameter <CounterID> in a call of
    GetElapsedValue() is not valid GetElapsedValue() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
    ev = E_OS_ID;
  } else
  if ((Value == NULL) || (ElapsedValue == NULL)) {
8000a55a:	ee 27       	jnz %d15,8000a5a8 <GetElapsedValue+0x7e>
    ev = E_OS_PARAM_POINTER;
  } else
  {
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
      p_counter_db = (*p_kdb->p_counter_ptr_array)[CounterID];
8000a55c:	91 00 00 28 	movh.a %a2,32768
8000a560:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a564:	99 22 14 00 	ld.a %a2,[%a2]20 <80000014 <BootModeHeader0+0x14>>
8000a568:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a56c:	d4 22       	ld.a %a2,[%a2]
    CONST(TickType, AUTOMATIC)
      local_value = (*Value);
8000a56e:	54 44       	ld.w %d4,[%a4]
8000a570:	4d c0 e1 ff 	mfcr %d15,$core_id
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) curr_core_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != curr_core_id) {
8000a574:	79 23 0c 00 	ld.b %d3,[%a2]12
8000a578:	37 0f 48 f0 	extr %d15,%d15,0,8
      ev = E_OS_CORE;
8000a57c:	3b 70 01 20 	mov %d2,23
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) curr_core_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != curr_core_id) {
8000a580:	5f f3 11 80 	jne %d3,%d15,8000a5a2 <GetElapsedValue+0x78>
/* [SWS_Os_00382] If the input parameters in a call of GetElapsedValue()
     are valid, GetElapsedValue() shall return the number of elapsed ticks
     since the given <Value> value via <ElapsedValue> and shall return
     E_OK. (SRS_Frt_00034) */
      CONST(TickType, AUTOMATIC)
        local_curr_value = p_counter_db->p_counter_cb->value;
8000a584:	d4 23       	ld.a %a3,[%a2]
8000a586:	4c 31       	ld.w %d15,[%a3]4
    <Value> value a second (or multiple) time, the result returned is wrong.
    The reason is that the service can not detect such a relative overflow. */
/* EG  TODO: Add support for HARDWARE counters */
      (*ElapsedValue) = (local_curr_value >= local_value)?
        /* Timer did not pass the <value> yet */
        (local_curr_value - local_value):
8000a588:	3f 4f 04 80 	jlt.u %d15,%d4,8000a590 <GetElapsedValue+0x66>
8000a58c:	52 44       	sub %d4,%d15,%d4
8000a58e:	3c 07       	j 8000a59c <GetElapsedValue+0x72>
8000a590:	19 22 04 00 	ld.w %d2,[%a2]4
8000a594:	42 f2       	add %d2,%d15
8000a596:	c2 12       	add %d2,1
8000a598:	0b 42 80 40 	sub %d4,%d2,%d4

/* [SWS_Os_00533] Caveats of GetElapsedValue(): If the timer already passed the
    <Value> value a second (or multiple) time, the result returned is wrong.
    The reason is that the service can not detect such a relative overflow. */
/* EG  TODO: Add support for HARDWARE counters */
      (*ElapsedValue) = (local_curr_value >= local_value)?
8000a59c:	74 54       	st.w [%a5],%d4
        ((p_counter_db->info.maxallowedvalue -
          (local_value - local_curr_value)) + 1U);

/* [SWS_Os_00460] GetElapsedValue() shall return the current tick value of the
    counter in the <Value> parameter. */
      (*Value) = local_curr_value;
8000a59e:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
8000a5a0:	82 02       	mov %d2,0
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a5a2:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a5a6:	5e 17       	jne %d15,1,8000a5b4 <GetElapsedValue+0x8a>
    p_ccb->service_id            = service_id;
8000a5a8:	da 32       	mov %d15,50
8000a5aa:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a5ae:	82 0f       	mov %d15,0
8000a5b0:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetElapsedValue);

  return ev;
}
8000a5b4:	00 90       	ret 

8000a5b6 <IncrementCounter>:
FUNC(StatusType, OS_CODE)
  IncrementCounter
(
  VAR(CounterType, AUTOMATIC) CounterID
)
{
8000a5b6:	40 ae       	mov.aa %a14,%sp
8000a5b8:	40 9f       	mov.aa %a15,%a9
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000a5ba:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a5bc:	da 2f       	mov %d15,47
8000a5be:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a5c2:	82 1f       	mov %d15,1
8000a5c4:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (counter_id < p_kdb->p_kcb->free_counter_index);
#else
  return (counter_id < p_kdb->counter_array_size);
8000a5c8:	91 00 00 28 	movh.a %a2,32768
8000a5cc:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a5d0:	4c 26       	ld.w %d15,[%a2]24
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00285] If the input parameter <CounterID> in a call of
    IncrementCounter() is not valid OR the counter is a hardware counter,
    IncrementCounter() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
    ev = E_OS_ID;
8000a5d2:	82 32       	mov %d2,3
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00285] If the input parameter <CounterID> in a call of
    IncrementCounter() is not valid OR the counter is a hardware counter,
    IncrementCounter() shall return E_OS_ID. */
  if (!osEE_is_valid_counter_id(p_kdb, CounterID)) {
8000a5d4:	7f f4 48 80 	jge.u %d4,%d15,8000a664 <IncrementCounter+0xae>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
      p_counter_db = (*p_kdb->p_counter_ptr_array)[CounterID];
8000a5d8:	91 00 00 28 	movh.a %a2,32768
8000a5dc:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a5e0:	99 22 14 00 	ld.a %a2,[%a2]20 <80000014 <BootModeHeader0+0x14>>
8000a5e4:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000a5e8:	d4 24       	ld.a %a4,[%a2]
8000a5ea:	4d c0 e1 ff 	mfcr %d15,$core_id
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) current_cpu_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != current_cpu_id) {
8000a5ee:	79 43 0c 00 	ld.b %d3,[%a4]12
8000a5f2:	37 0f 48 f0 	extr %d15,%d15,0,8
      ev = E_OS_CORE;
8000a5f6:	3b 70 01 20 	mov %d2,23
/* [SWS_Os_00589] All functions that are not allowed to operate cross core
    shall return E_OS_CORE in extended status if called with parameters that
    require a cross core operation. (SRS_Os_80013) */
#if (!defined(OSEE_SINGLECORE))
    CONST(CoreIdType, AUTOMATIC) current_cpu_id = osEE_get_curr_core_id();
    if (p_counter_db->core_id != current_cpu_id) {
8000a5fa:	5f f3 32 80 	jne %d3,%d15,8000a65e <IncrementCounter+0xa8>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a5fe:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a602:	8f f8 0f f1 	and %d15,%d8,255
8000a606:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a60a:	ee 0a       	jnz %d15,8000a61e <IncrementCounter+0x68>
    OsEE_icr icr_temp = icr;
8000a60c:	02 8f       	mov %d15,%d8
8000a60e:	3b 30 01 20 	mov %d2,19
8000a612:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a616:	cd cf e2 0f 	mtcr $icr,%d15
8000a61a:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();

/* N.B. Multi-core critical sections are handled inside
   TODO: Pass flags to osEE_counter_increment so it could re-enable
         interrupts/lower IPL outside critical sections. */
      osEE_counter_increment(p_counter_db);
8000a61e:	6d 00 33 06 	call 8000b284 <osEE_counter_increment>
8000a622:	40 92       	mov.aa %a2,%a9
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
8000a624:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>

/* [SWS_Os_00529] Caveats of IncrementCounter(): If called from a task,
    rescheduling may take place. */
      if (osEE_get_curr_task()->task_type <= OSEE_TASK_TYPE_EXTENDED) {
8000a628:	d4 22       	ld.a %a2,[%a2]
8000a62a:	39 2f 14 00 	ld.bu %d15,[%a2]20 <8000000c <BootModeHeader0+0xc>>
8000a62e:	ff 2f 08 80 	jge.u %d15,2,8000a63e <IncrementCounter+0x88>
        (void)osEE_scheduler_task_preemption_point(p_kdb);
8000a632:	91 00 00 48 	movh.a %a4,32768
8000a636:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000a63a:	6d 00 7f 05 	call 8000b138 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a63e:	4d c0 e2 3f 	mfcr %d3,$icr
8000a642:	02 3f       	mov %d15,%d3
8000a644:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a648:	8f f8 0f 21 	and %d2,%d8,255
8000a64c:	5f 23 08 00 	jeq %d3,%d2,8000a65c <IncrementCounter+0xa6>
8000a650:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a654:	cd cf e2 0f 	mtcr $icr,%d15
8000a658:	0d 00 c0 04 	isync 
      }

      osEE_end_primitive(flags);

      ev = E_OK;
8000a65c:	82 02       	mov %d2,0
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a65e:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000a662:	5e 17       	jne %d15,1,8000a670 <IncrementCounter+0xba>
    p_ccb->service_id            = service_id;
8000a664:	da 2e       	mov %d15,46
8000a666:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a66a:	82 0f       	mov %d15,0
8000a66c:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_IncrementCounter);

  return ev;
}
8000a670:	00 90       	ret 

8000a672 <GetISRID>:
FUNC(ISRType, OS_CODE)
  GetISRID
(
  void
)
{
8000a672:	40 ae       	mov.aa %a14,%sp
8000a674:	40 9f       	mov.aa %a15,%a9
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
8000a676:	c8 3f       	ld.a %a15,[%a15]12
8000a678:	c8 0f       	ld.a %a15,[%a15]0
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a67a:	39 ff 14 00 	ld.bu %d15,[%a15]20 <0 <NULL>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
8000a67e:	82 f2       	mov %d2,-1
{
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a680:	5e 22       	jne %d15,2,8000a684 <GetISRID+0x12>
    isr_id = p_tdb->tid;
8000a682:	48 42       	ld.w %d2,[%a15]16
  } else {
    isr_id = INVALID_ISR;
  }

  return isr_id;
}
8000a684:	00 90       	ret 

8000a686 <GetNumberOfActivatedCores>:
FUNC(CoreNumType, OS_CODE)
  GetNumberOfActivatedCores
(
  void
)
{
8000a686:	40 ae       	mov.aa %a14,%sp
  /* [SWS_Os_00673] The return value of GetNumberOfActivatedCores shall be less
      or equal to the configured value of "OsNumberOfCores". (SRS_Os_80001) */
  return osEE_get_kernel()->p_kcb->ar_num_core_started;
8000a688:	91 00 00 f8 	movh.a %a15,32768
8000a68c:	99 ff 00 40 	ld.a %a15,[%a15]256 <80000100 <osEE_kdb_var>>
}
8000a690:	08 c2       	ld.bu %d2,[%a15]12
8000a692:	00 90       	ret 

8000a694 <StartCore>:
  StartCore
(
  VAR(CoreIdType, AUTOMATIC)                  CoreID,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  Status
)
{
8000a694:	40 ae       	mov.aa %a14,%sp
8000a696:	40 4c       	mov.aa %a12,%a4
    osEE_unlock_kernel();

    osEE_end_primitive(flags);
  } else {
    /* CoreID >= OS_CORE_ID_ARR_SIZE */
    ev = E_OS_ID;
8000a698:	82 35       	mov %d5,3
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  Status
)
{
  /* Error Value */
  VAR(StatusType, AUTOMATIC) ev = E_OK;
  if (CoreID < OS_CORE_ID_ARR_SIZE) {
8000a69a:	ff 34 56 00 	jge %d4,3,8000a746 <StartCore+0xb2>
8000a69e:	40 9f       	mov.aa %a15,%a9
    CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
      p_cdb       = osEE_get_curr_core();
    CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
      p_ccb       = p_cdb->p_ccb;
8000a6a0:	c8 33       	ld.a %a3,[%a15]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a6a2:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a6a6:	8f f8 0f f1 	and %d15,%d8,255
8000a6aa:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a6ae:	ee 0a       	jnz %d15,8000a6c2 <StartCore+0x2e>
    OsEE_icr icr_temp = icr;
8000a6b0:	02 8f       	mov %d15,%d8
8000a6b2:	3b 30 01 50 	mov %d5,19
8000a6b6:	37 5f 08 f0 	insert %d15,%d15,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a6ba:	cd cf e2 0f 	mtcr $icr,%d15
8000a6be:	0d 00 c0 04 	isync 
 *  \brief Locks the kernel.
 *  
 *  Locks the kernel using the KDB p_lock spinlock.
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_lock_kernel(void) {
  osEE_hal_spin_lock(osEE_kdb_var.p_lock);
8000a6c2:	91 00 00 f8 	movh.a %a15,32768
8000a6c6:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
8000a6ca:	c8 1f       	ld.a %a15,[%a15]4
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a6cc:	82 12       	mov %d2,1
8000a6ce:	82 03       	mov %d3,0
8000a6d0:	0b 23 10 68 	mov %e6,%d3,%d2
8000a6d4:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a6d8:	df 06 fa ff 	jne %d6,0,8000a6cc <StartCore+0x38>
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)
      p_kdb = osEE_lock_and_get_kernel();
    CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)
      p_kcb = p_kdb->p_kcb;
8000a6dc:	91 00 00 28 	movh.a %a2,32768
8000a6e0:	99 22 00 40 	ld.a %a2,[%a2]256 <80000100 <osEE_kdb_var>>
    /* Variable introduced to meet MISRA 12.1 in the next else if statement */
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      ar_core_mask = p_kcb->ar_core_mask;
8000a6e4:	54 23       	ld.w %d3,[%a2]
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      core_id_mask =  ((CoreMaskType)1U << (OsEE_reg)CoreID);
8000a6e6:	82 1f       	mov %d15,1
8000a6e8:	0f 4f 00 f0 	sh %d15,%d15,%d4

    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
8000a6ec:	8f 7f 00 21 	and %d2,%d15,7
      ev = E_OS_ID;
8000a6f0:	82 35       	mov %d5,3
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      ar_core_mask = p_kcb->ar_core_mask;
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      core_id_mask =  ((CoreMaskType)1U << (OsEE_reg)CoreID);

    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
8000a6f2:	df 02 17 00 	jeq %d2,0,8000a720 <StartCore+0x8c>
      ev = E_OS_ID;
    } else if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
8000a6f6:	39 32 10 00 	ld.bu %d2,[%a3]16
         If StartCore is called after StartOS it shall return with E_OS_ACCESS
         in extended status. (SRS_Os_80001) */
      /* [SWS_Os_00678] Calls to the StartCore function after StartOS()
         shall return with E_OS_ACCESS and the core shall not be started.
         (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ACCESS;
8000a6fa:	82 15       	mov %d5,1
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      core_id_mask =  ((CoreMaskType)1U << (OsEE_reg)CoreID);

    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
      ev = E_OS_ID;
    } else if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
8000a6fc:	df 02 12 80 	jne %d2,0,8000a720 <StartCore+0x8c>
         in extended status. (SRS_Os_80001) */
      /* [SWS_Os_00678] Calls to the StartCore function after StartOS()
         shall return with E_OS_ACCESS and the core shall not be started.
         (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ACCESS;
    } else if (((ar_core_mask | p_kcb->not_ar_core_mask) & core_id_mask) != 0U)
8000a700:	19 22 04 00 	ld.w %d2,[%a2]4
8000a704:	a6 32       	or %d2,%d3
8000a706:	26 f2       	and %d2,%d15
          (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      /* [SWS_Os_00680] If the parameter CoreID refers to a core that was
         already started by the function StartNonAutosarCore the related core
         is ignored and E_OS_STATE shall be returned.
         (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_STATE;
8000a708:	82 75       	mov %d5,7
         in extended status. (SRS_Os_80001) */
      /* [SWS_Os_00678] Calls to the StartCore function after StartOS()
         shall return with E_OS_ACCESS and the core shall not be started.
         (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ACCESS;
    } else if (((ar_core_mask | p_kcb->not_ar_core_mask) & core_id_mask) != 0U)
8000a70a:	f6 2b       	jnz %d2,8000a720 <StartCore+0x8c>
        ++p_kcb->ar_num_core_started;

        osEE_hal_start_core(CoreID);
      }

      ev = E_OK;
8000a70c:	82 05       	mov %d5,0
         is ignored and E_OS_STATE shall be returned.
         (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_STATE;
    } else {
      /* Really start the core if we are not in MASTER core */
      if (CoreID != OS_CORE_ID_MASTER) {
8000a70e:	76 49       	jz %d4,8000a720 <StartCore+0x8c>
        /* [SWS_Os_00677] The function StartCore shall start one core that
           shall run under the control of the AUTOSAR OS.
           (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
        /* Flag that core is started as Autosar core */
        p_kcb->ar_core_mask |= core_id_mask;
8000a710:	a6 3f       	or %d15,%d3
8000a712:	6c 20       	st.w [%a2]0,%d15
        /* Increment the Autosar Cores counter */
        ++p_kcb->ar_num_core_started;
8000a714:	0c 2c       	ld.bu %d15,[%a2]12
8000a716:	c2 1f       	add %d15,1
8000a718:	2c 2c       	st.b [%a2]12,%d15

        osEE_hal_start_core(CoreID);
8000a71a:	6d 00 40 08 	call 8000b79a <osEE_hal_start_core>
      }

      ev = E_OK;
8000a71e:	82 05       	mov %d5,0
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
8000a720:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000a724:	82 0f       	mov %d15,0
8000a726:	68 0f       	st.w [%a15]0,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a728:	4d c0 e2 3f 	mfcr %d3,$icr
8000a72c:	02 3f       	mov %d15,%d3
8000a72e:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a732:	8f f8 0f 21 	and %d2,%d8,255
8000a736:	5f 23 08 00 	jeq %d3,%d2,8000a746 <StartCore+0xb2>
8000a73a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a73e:	cd cf e2 0f 	mtcr $icr,%d15
8000a742:	0d 00 c0 04 	isync 
    /* CoreID >= OS_CORE_ID_ARR_SIZE */
    ev = E_OS_ID;
  }
  /* [SWS_Os_00681] There is no call to the ErrorHook() if an error occurs
       during StartCore(); (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
  if (Status != NULL) {
8000a746:	bc c2       	jz.a %a12,8000a74a <StartCore+0xb6>
    *Status = ev;
8000a748:	34 c5       	st.b [%a12],%d5
8000a74a:	00 90       	ret 

8000a74c <StartNonAutosarCore>:
  StartNonAutosarCore
(
  VAR(CoreIdType, AUTOMATIC)                  CoreID,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  Status
)
{
8000a74c:	40 ae       	mov.aa %a14,%sp
8000a74e:	40 4c       	mov.aa %a12,%a4
    osEE_end_primitive(flags);
  } else {
    /* [SWS_Os_00685] If the parameter CoreID refers to an unknown core the
        function StartNonAutosarCore has no effect and sets "Status" to
        E_OS_ID. (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
    ev = E_OS_ID;
8000a750:	82 35       	mov %d5,3
)
{
  /* Error Value */
  VAR(StatusType, AUTOMATIC) ev;

  if (CoreID < OS_CORE_ID_ARR_SIZE) {
8000a752:	ff 34 4c 00 	jge %d4,3,8000a7ea <StartNonAutosarCore+0x9e>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a756:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a75a:	8f f8 0f f1 	and %d15,%d8,255
8000a75e:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a762:	ee 0a       	jnz %d15,8000a776 <StartNonAutosarCore+0x2a>
    OsEE_icr icr_temp = icr;
8000a764:	02 8f       	mov %d15,%d8
8000a766:	3b 30 01 50 	mov %d5,19
8000a76a:	37 5f 08 f0 	insert %d15,%d15,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a76e:	cd cf e2 0f 	mtcr $icr,%d15
8000a772:	0d 00 c0 04 	isync 
8000a776:	91 00 00 f8 	movh.a %a15,32768
8000a77a:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
8000a77e:	c8 1f       	ld.a %a15,[%a15]4
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a780:	82 12       	mov %d2,1
8000a782:	82 03       	mov %d3,0
8000a784:	0b 23 10 68 	mov %e6,%d3,%d2
8000a788:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a78c:	df 06 fa ff 	jne %d6,0,8000a780 <StartNonAutosarCore+0x34>
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)
      p_kdb = osEE_lock_and_get_kernel();
    CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)
      p_kcb = p_kdb->p_kcb;
8000a790:	91 00 00 28 	movh.a %a2,32768
8000a794:	99 22 00 40 	ld.a %a2,[%a2]256 <80000100 <osEE_kdb_var>>
    /* Variable introduced to meet MISRA 12.1 in the next else if statement */
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      ar_core_mask = p_kcb->ar_core_mask;
8000a798:	54 23       	ld.w %d3,[%a2]
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      core_id_mask =  ((CoreMaskType)1U << (OsEE_reg)CoreID);
8000a79a:	82 1f       	mov %d15,1
8000a79c:	0f 4f 00 f0 	sh %d15,%d15,%d4

    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
8000a7a0:	8f 7f 00 21 	and %d2,%d15,7
      /* [SWS_Os_00685] If the parameter CoreID refers to an unknown core the
          function StartNonAutosarCore has no effect and sets "Status" to
          E_OS_ID. (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ID;
8000a7a4:	82 35       	mov %d5,3
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      ar_core_mask = p_kcb->ar_core_mask;
    CONST(OSEE_CORE_MASK_TYPE, AUTOMATIC)
      core_id_mask =  ((CoreMaskType)1U << (OsEE_reg)CoreID);

    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
8000a7a6:	76 2f       	jz %d2,8000a7c4 <StartNonAutosarCore+0x78>
      /* [SWS_Os_00685] If the parameter CoreID refers to an unknown core the
          function StartNonAutosarCore has no effect and sets "Status" to
          E_OS_ID. (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ID;
    } else if (((ar_core_mask | p_kcb->not_ar_core_mask) & core_id_mask) != 0U)
8000a7a8:	19 26 04 00 	ld.w %d6,[%a2]4
8000a7ac:	0f 36 a0 20 	or %d2,%d6,%d3
8000a7b0:	26 f2       	and %d2,%d15
    {
      /* [SWS_Os_00680] If the parameter CoreID refers to a core that was
          already started by the function StartNonAutosarCore the related core
          is ignored and E_OS_STATE shall be returned.
          (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_STATE;
8000a7b2:	82 75       	mov %d5,7
    if ((core_id_mask & OSEE_CORE_ID_VALID_MASK) == 0U) {
      /* [SWS_Os_00685] If the parameter CoreID refers to an unknown core the
          function StartNonAutosarCore has no effect and sets "Status" to
          E_OS_ID. (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_ID;
    } else if (((ar_core_mask | p_kcb->not_ar_core_mask) & core_id_mask) != 0U)
8000a7b4:	f6 28       	jnz %d2,8000a7c4 <StartNonAutosarCore+0x78>
        /* Flag that core is started as non Autosar core */
        p_kcb->not_ar_core_mask |= core_id_mask;
        osEE_hal_start_core(CoreID);
      }

      ev = E_OK;
8000a7b6:	82 05       	mov %d5,0
          is ignored and E_OS_STATE shall be returned.
          (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
      ev = E_OS_STATE;
    } else {
      /* Really start the core if we are not in MASTER core */
      if (CoreID != OS_CORE_ID_MASTER) {
8000a7b8:	76 46       	jz %d4,8000a7c4 <StartNonAutosarCore+0x78>
        /* [SWS_Os_00683] The function StartNonAutosarCore shall start a core
            that is not controlled by the AUTOSAR OS.
            (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
        /* Flag that core is started as non Autosar core */
        p_kcb->not_ar_core_mask |= core_id_mask;
8000a7ba:	a6 6f       	or %d15,%d6
8000a7bc:	6c 21       	st.w [%a2]4,%d15
        osEE_hal_start_core(CoreID);
8000a7be:	6d 00 ee 07 	call 8000b79a <osEE_hal_start_core>
      }

      ev = E_OK;
8000a7c2:	82 05       	mov %d5,0
8000a7c4:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000a7c8:	82 0f       	mov %d15,0
8000a7ca:	68 0f       	st.w [%a15]0,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a7cc:	4d c0 e2 3f 	mfcr %d3,$icr
8000a7d0:	02 3f       	mov %d15,%d3
8000a7d2:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a7d6:	8f f8 0f 21 	and %d2,%d8,255
8000a7da:	5f 23 08 00 	jeq %d3,%d2,8000a7ea <StartNonAutosarCore+0x9e>
8000a7de:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a7e2:	cd cf e2 0f 	mtcr $icr,%d15
8000a7e6:	0d 00 c0 04 	isync 
        function StartNonAutosarCore has no effect and sets "Status" to
        E_OS_ID. (SRS_Os_80006, SRS_Os_80026, SRS_Os_80027) */
    ev = E_OS_ID;
  }

  if (Status != NULL) {
8000a7ea:	bc c2       	jz.a %a12,8000a7ee <StartNonAutosarCore+0xa2>
    *Status = ev;
8000a7ec:	34 c5       	st.b [%a12],%d5
8000a7ee:	00 90       	ret 

8000a7f0 <ShutdownAllCores>:
FUNC(void, OS_CODE) 
  ShutdownAllCores
(
  VAR(StatusType, AUTOMATIC)  Error
)
{
8000a7f0:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000a7f2:	40 94       	mov.aa %a4,%a9
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
8000a7f4:	cc 43       	ld.a %a15,[%a4]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a7f6:	4d c0 e2 5f 	mfcr %d5,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a7fa:	8f f5 0f f1 	and %d15,%d5,255
8000a7fe:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a802:	ee 0a       	jnz %d15,8000a816 <ShutdownAllCores+0x26>
    OsEE_icr icr_temp = icr;
8000a804:	02 5f       	mov %d15,%d5
8000a806:	3b 30 01 60 	mov %d6,19
8000a80a:	37 6f 08 f0 	insert %d15,%d15,%d6,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a80e:	cd cf e2 0f 	mtcr $icr,%d15
8000a812:	0d 00 c0 04 	isync 
 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
8000a816:	39 ff 10 00 	ld.bu %d15,[%a15]16
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a81a:	3b d0 04 60 	mov %d6,77
8000a81e:	e9 f6 13 00 	st.b [%a15]19,%d6
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a822:	82 16       	mov %d6,1
8000a824:	e9 f6 23 00 	st.b [%a15]35,%d6
#endif /* OSEE_HAS_SERVICE_PROTECTION */
#ifdef OSEE_HAS_OSAPPLICATIONS
  /* [Os_SWS_00716]: If ShutdownAllCores is called from non trusted code the call
      shall be ignored. (SRS_Os_80007) */
#endif /* EE_HAS_OSAPPLICATIONS__ */
  if ((os_status == OSEE_KERNEL_STARTED) || (os_status == OSEE_KERNEL_STARTING))
8000a828:	c2 ff       	add %d15,-1
8000a82a:	16 ff       	and %d15,255
8000a82c:	ff 2f 4c 80 	jge.u %d15,2,8000a8c4 <ShutdownAllCores+0xd4>
 *  \brief Locks the kernel.
 *  
 *  Locks the kernel using the KDB p_lock spinlock.
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_lock_kernel(void) {
  osEE_hal_spin_lock(osEE_kdb_var.p_lock);
8000a830:	91 00 00 f8 	movh.a %a15,32768
8000a834:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
8000a838:	c8 1f       	ld.a %a15,[%a15]4
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a83a:	82 12       	mov %d2,1
8000a83c:	82 03       	mov %d3,0
8000a83e:	0b 23 10 68 	mov %e6,%d3,%d2
8000a842:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a846:	df 06 fa ff 	jne %d6,0,8000a83a <ShutdownAllCores+0x4a>
  {
    VAR(CoreNumType, AUTOMATIC) i;
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)
      p_kdb = osEE_lock_and_get_kernel();
    CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)
      p_kcb = p_kdb->p_kcb;
8000a84a:	91 00 00 28 	movh.a %a2,32768
8000a84e:	99 22 00 40 	ld.a %a2,[%a2]256 <80000100 <osEE_kdb_var>>
    /* If the procedure have been already started (by another core), just shut
       this core down, after have released all spinlocks */
    if (p_kcb->ar_shutdown_all_cores_flag) {
8000a852:	0c 2e       	ld.bu %d15,[%a2]14
8000a854:	6e 09       	jz %d15,8000a866 <ShutdownAllCores+0x76>
8000a856:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000a85a:	82 0f       	mov %d15,0
8000a85c:	68 0f       	st.w [%a15]0,%d15
      /* Release the kernel spinlock */
      osEE_unlock_kernel();
      /* This won't never return */
      osEE_shutdown_os(p_cdb, p_kcb->ar_shutdown_all_cores_error);
8000a85e:	39 24 0d 00 	ld.bu %d4,[%a2]13
8000a862:	1d ff 2d f7 	j 800096bc <osEE_shutdown_os>
    } else {
      /* Save the Error parameter to be used in all other cores */
      p_kcb->ar_shutdown_all_cores_error = Error;
8000a866:	e9 24 0d 00 	st.b [%a2]13,%d4
      /* Set ShutdownAllCores global flag */
      p_kcb->ar_shutdown_all_cores_flag = OSEE_TRUE;
8000a86a:	82 1f       	mov %d15,1
8000a86c:	2c 2e       	st.b [%a2]14,%d15
8000a86e:	7b 40 00 5f 	movh %d5,61444
8000a872:	1b 05 00 59 	addi %d5,%d5,-28672
8000a876:	82 0f       	mov %d15,0
/* Signal the core "cpu" (0/1/2/3/4/6) by sending an IIRQ. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_signal_core(CoreIdType core_id)
{

  OSEE_TC_SRC_REG(OSEE_TC_GPSR_SRC_OFFSET(OSEE_TC_GPSR_G, core_id)) |=
8000a878:	02 56       	mov %d6,%d5
8000a87a:	8f ff 0f 21 	and %d2,%d15,255
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000a87e:	4d c0 e1 3f 	mfcr %d3,$core_id

      for (i = 0U; i <= OSEE_CORE_ID_MAX; ++i) {
        if (i != (CoreNumType)osEE_get_curr_core_id()) {
8000a882:	8f f3 0f 31 	and %d3,%d3,255
8000a886:	5f 23 0f 00 	jeq %d3,%d2,8000a8a4 <ShutdownAllCores+0xb4>
          if ((p_kcb->ar_core_mask & ((CoreMaskType)1U << i)) != 0U) {
8000a88a:	54 23       	ld.w %d3,[%a2]
8000a88c:	57 03 61 3f 	extr.u %d3,%d3,%d15,1
8000a890:	76 3a       	jz %d3,8000a8a4 <ShutdownAllCores+0xb4>
8000a892:	8b 42 60 22 	lt.u %d2,%d2,4
8000a896:	2b 65 40 22 	sel %d2,%d2,%d5,%d6
8000a89a:	60 2f       	mov.a %a15,%d2
8000a89c:	48 02       	ld.w %d2,[%a15]0
8000a89e:	b7 f2 01 2d 	insert %d2,%d2,15,26,1
8000a8a2:	68 02       	st.w [%a15]0,%d2
8000a8a4:	c2 1f       	add %d15,1
8000a8a6:	c2 45       	add %d5,4
      /* Save the Error parameter to be used in all other cores */
      p_kcb->ar_shutdown_all_cores_error = Error;
      /* Set ShutdownAllCores global flag */
      p_kcb->ar_shutdown_all_cores_flag = OSEE_TRUE;

      for (i = 0U; i <= OSEE_CORE_ID_MAX; ++i) {
8000a8a8:	df 3f e9 ff 	jne %d15,3,8000a87a <ShutdownAllCores+0x8a>
 *  \brief Unlocks the kernel.
 *  
 *  Unlock the kernel by releasing the KDB p_lock spinlock.
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_unlock_kernel(void) {
  osEE_hal_spin_unlock(osEE_kdb_var.p_lock);
8000a8ac:	91 00 00 f8 	movh.a %a15,32768
8000a8b0:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
8000a8b4:	c8 1f       	ld.a %a15,[%a15]4
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
8000a8b6:	0d 00 80 04 	dsync 
8000a8ba:	82 0f       	mov %d15,0
8000a8bc:	68 0f       	st.w [%a15]0,%d15

      /* Release the kernel spinlock */
      osEE_unlock_kernel();
      /* After signaling the shutdown all cores status: shut this core down:
         This won't never return */
      osEE_shutdown_os(osEE_get_curr_core(), Error);
8000a8be:	40 94       	mov.aa %a4,%a9
8000a8c0:	1d ff fe f6 	j 800096bc <osEE_shutdown_os>
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
    p_ccb->service_id            = service_id;
8000a8c4:	da 4c       	mov %d15,76
8000a8c6:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a8ca:	82 0f       	mov %d15,0
8000a8cc:	e9 ff 23 00 	st.b [%a15]35,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a8d0:	4d c0 e2 2f 	mfcr %d2,$icr
8000a8d4:	02 2f       	mov %d15,%d2
8000a8d6:	8f f2 0f 21 	and %d2,%d2,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a8da:	8f f5 0f 51 	and %d5,%d5,255
8000a8de:	5f 52 08 00 	jeq %d2,%d5,8000a8ee <ShutdownAllCores+0xfe>
8000a8e2:	37 5f 08 f0 	insert %d15,%d15,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a8e6:	cd cf e2 0f 	mtcr $icr,%d15
8000a8ea:	0d 00 c0 04 	isync 
8000a8ee:	00 90       	ret 

8000a8f0 <GetSpinlock>:
FUNC(StatusType, OS_CODE)
  GetSpinlock
(
  VAR(SpinlockIdType, AUTOMATIC) SpinlockID
)
{
8000a8f0:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000a8f2:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)
    p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000a8f4:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a8f6:	da 41       	mov %d15,65
8000a8f8:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a8fc:	82 1f       	mov %d15,1
8000a8fe:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (spinlock_id < p_kdb->p_kcb->free_spinlock_index);
#else
  return (spinlock_id < p_kdb->spinlock_array_size);
8000a902:	91 00 00 28 	movh.a %a2,32768
8000a906:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a90a:	4c 2a       	ld.w %d15,[%a2]40
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00689]: The function GetSpinlock shall return E_OS_ID if the parameter
      SpinlockID refers to a spinlock that does not exist. (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
    ev = E_OS_ID;
8000a90c:	82 32       	mov %d2,3
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00689]: The function GetSpinlock shall return E_OS_ID if the parameter
      SpinlockID refers to a spinlock that does not exist. (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
8000a90e:	7f f4 4a 80 	jge.u %d4,%d15,8000a9a2 <GetSpinlock+0xb2>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_spinlock_db = &(*p_kdb->p_spinlock_array)[SpinlockID];
8000a912:	91 00 00 28 	movh.a %a2,32768
8000a916:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a91a:	19 22 24 00 	ld.w %d2,[%a2]36 <80000024 <_start+0x4>>
8000a91e:	13 c4 20 82 	madd %d8,%d2,%d4,12
8000a922:	60 83       	mov.a %a3,%d8
    CONSTP2VAR(OsEE_SpinlockCB, AUTOMATIC, OS_APPL_DATA)
      p_spinlock_cb = p_spinlock_db->p_cb;
8000a924:	d4 34       	ld.a %a4,[%a3]
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_curr = p_ccb->p_curr;
8000a926:	c8 06       	ld.a %a6,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_CONST)
      p_curr_tcb = p_curr->p_tcb;
8000a928:	99 65 0c 00 	ld.a %a5,[%a6]12
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_core_last_spinlock_db = p_ccb->p_last_spinlock;
8000a92c:	48 50       	ld.w %d0,[%a15]20
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_last_m = p_curr_tcb->p_last_m;
8000a92e:	19 55 04 00 	ld.w %d5,[%a5]4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a932:	4d c0 e2 3f 	mfcr %d3,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a936:	8f f3 0f f1 	and %d15,%d3,255
8000a93a:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a93e:	ee 0a       	jnz %d15,8000a952 <GetSpinlock+0x62>
    OsEE_icr icr_temp = icr;
8000a940:	02 3f       	mov %d15,%d3
8000a942:	3b 30 01 10 	mov %d1,19
8000a946:	37 1f 08 f0 	insert %d15,%d15,%d1,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a94a:	cd cf e2 0f 	mtcr $icr,%d15
8000a94e:	0d 00 c0 04 	isync 
          already occupied, GetSpinlock shall keep on trying to occupy the
          spinlock until it succeeds. (SRS_Os_80018, SRS_Os_80021)
          Same of [SWS_Os_00687] */

      /* Spin until get the lock */
      osEE_hal_spin_lock(p_spinlock_db->p_spinlock_arch);
8000a952:	13 c4 20 92 	madd %d9,%d2,%d4,12
8000a956:	60 92       	mov.a %a2,%d9
8000a958:	99 22 04 00 	ld.a %a2,[%a2]4
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000a95c:	82 16       	mov %d6,1
8000a95e:	82 07       	mov %d7,0
8000a960:	0b 67 10 88 	mov %e8,%d7,%d6
8000a964:	49 28 c0 08 	cmpswap.w [%a2]0,%e8
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000a968:	df 08 fa ff 	jne %d8,0,8000a95c <GetSpinlock+0x6c>

      /* Populate M Stack for Current TASK and Spinlock Stack for CCB */
      p_spinlock_cb->p_next = (p_last_m != NULL)?
        p_last_m: p_core_last_spinlock_db;
8000a96c:	2b 05 40 55 	sel %d5,%d5,%d5,%d0

      /* Spin until get the lock */
      osEE_hal_spin_lock(p_spinlock_db->p_spinlock_arch);

      /* Populate M Stack for Current TASK and Spinlock Stack for CCB */
      p_spinlock_cb->p_next = (p_last_m != NULL)?
8000a970:	74 45       	st.w [%a4],%d5
        p_last_m: p_core_last_spinlock_db;

      /* Update Heads pointers: Current TASK and CCB */
      p_curr_tcb->p_last_m = p_spinlock_db;
8000a972:	b5 53 04 00 	st.a [%a5]4,%a3
      p_ccb->p_last_spinlock = p_spinlock_db;
8000a976:	e8 53       	st.a [%a15]20,%a3

      /* Set Current TASK/ISR2 as spinlock locker */
      p_spinlock_cb->p_owner = p_curr;
8000a978:	b5 46 08 00 	st.a [%a4]8,%a6
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a97c:	4d c0 e2 4f 	mfcr %d4,$icr
8000a980:	02 4f       	mov %d15,%d4
8000a982:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a986:	8f f3 0f 21 	and %d2,%d3,255
8000a98a:	5f 24 08 00 	jeq %d4,%d2,8000a99a <GetSpinlock+0xaa>
8000a98e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a992:	cd cf e2 0f 	mtcr $icr,%d15
8000a996:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000a99a:	39 ff 23 00 	ld.bu %d15,[%a15]35
#endif /* OSEE_SPINLOCKS_HAS_LOCK_METHOD */

    /* [SWS_Os_00688]: The function GetSpinlock shall return E_OK if no error
        was detected. The spinlock is now occupied by the calling TASK/ISR2 on
        the calling core. */
      ev = E_OK;
8000a99e:	82 02       	mov %d2,0
8000a9a0:	5e 17       	jne %d15,1,8000a9ae <GetSpinlock+0xbe>
    p_ccb->service_id            = service_id;
8000a9a2:	da 40       	mov %d15,64
8000a9a4:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000a9a8:	82 0f       	mov %d15,0
8000a9aa:	e9 ff 23 00 	st.b [%a15]35,%d15
  }
#endif /* OSEE_HAS_ERRORHOOK */
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetSpinlock);

  return ev;
}
8000a9ae:	00 90       	ret 

8000a9b0 <ReleaseSpinlock>:
FUNC(StatusType, OS_CODE)
  ReleaseSpinlock
(
  VAR(SpinlockIdType, AUTOMATIC) SpinlockID
)
{
8000a9b0:	40 ae       	mov.aa %a14,%sp
8000a9b2:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)
    p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000a9b4:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000a9b6:	da 43       	mov %d15,67
8000a9b8:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000a9bc:	82 1f       	mov %d15,1
8000a9be:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (spinlock_id < p_kdb->p_kcb->free_spinlock_index);
#else
  return (spinlock_id < p_kdb->spinlock_array_size);
8000a9c2:	91 00 00 28 	movh.a %a2,32768
8000a9c6:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a9ca:	4c 2a       	ld.w %d15,[%a2]40
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00698] The function ReleaseSpinlock shall return E_OS_ID if the
    parameter SpinlockID refers to a spinlock that does not exist.
    (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
    ev = E_OS_ID;
8000a9cc:	82 32       	mov %d2,3
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00698] The function ReleaseSpinlock shall return E_OS_ID if the
    parameter SpinlockID refers to a spinlock that does not exist.
    (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
8000a9ce:	7f f4 40 80 	jge.u %d4,%d15,8000aa4e <ReleaseSpinlock+0x9e>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_spinlock_db = &(*p_kdb->p_spinlock_array)[SpinlockID];
8000a9d2:	91 00 00 28 	movh.a %a2,32768
8000a9d6:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000a9da:	19 22 24 00 	ld.w %d2,[%a2]36 <80000024 <_start+0x4>>
    CONSTP2VAR(OsEE_SpinlockCB, AUTOMATIC, OS_APPL_DATA)
      p_spinlock_cb = p_spinlock_db->p_cb;
8000a9de:	13 c4 20 f2 	madd %d15,%d2,%d4,12
8000a9e2:	60 f2       	mov.a %a2,%d15
8000a9e4:	d4 22       	ld.a %a2,[%a2]
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_curr = p_ccb->p_curr;
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_CONST)
      p_curr_tcb = p_curr->p_tcb;
8000a9e6:	c8 03       	ld.a %a3,[%a15]0
8000a9e8:	99 33 0c 00 	ld.a %a3,[%a3]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a9ec:	4d c0 e2 3f 	mfcr %d3,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a9f0:	8f f3 0f f1 	and %d15,%d3,255
8000a9f4:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a9f8:	ee 0a       	jnz %d15,8000aa0c <ReleaseSpinlock+0x5c>
    OsEE_icr icr_temp = icr;
8000a9fa:	02 3f       	mov %d15,%d3
8000a9fc:	3b 30 01 50 	mov %d5,19
8000aa00:	37 5f 08 f0 	insert %d15,%d15,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000aa04:	cd cf e2 0f 	mtcr $icr,%d15
8000aa08:	0d 00 c0 04 	isync 
/*  [SWS_Os_00697] The function ReleaseSpinlock shall return E_OK if no error
     was detected. The spinlock is now free and can be occupied by the same or
     other TASKs. (SRS_Os_80021) */

      /* Release the spinlock from its owner */
      p_spinlock_cb->p_owner = NULL;
8000aa0c:	82 05       	mov %d5,0
8000aa0e:	59 25 08 00 	st.w [%a2]8,%d5

      /* Pop M Stack for Current TASK */
      p_curr_tcb->p_last_m = p_spinlock_cb->p_next;
8000aa12:	4c 20       	ld.w %d15,[%a2]0
8000aa14:	6c 31       	st.w [%a3]4,%d15

      /* Look for the new last spinlock */
      p_ccb->p_last_spinlock = osEE_task_get_last_spinlock_db(p_curr_tcb);
8000aa16:	68 5f       	st.w [%a15]20,%d15

      /* Release the spinlock */
      osEE_hal_spin_unlock(p_spinlock_db->p_spinlock_arch);
8000aa18:	13 c4 20 f2 	madd %d15,%d2,%d4,12
8000aa1c:	60 f2       	mov.a %a2,%d15
8000aa1e:	99 22 04 00 	ld.a %a2,[%a2]4
8000aa22:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000aa26:	74 25       	st.w [%a2],%d5
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000aa28:	4d c0 e2 4f 	mfcr %d4,$icr
8000aa2c:	02 4f       	mov %d15,%d4
8000aa2e:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000aa32:	8f f3 0f 21 	and %d2,%d3,255
8000aa36:	5f 24 08 00 	jeq %d4,%d2,8000aa46 <ReleaseSpinlock+0x96>
8000aa3a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000aa3e:	cd cf e2 0f 	mtcr $icr,%d15
8000aa42:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000aa46:	39 ff 23 00 	ld.bu %d15,[%a15]35
#endif
       /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
#endif /* OSEE_SPINLOCKS_HAS_LOCK_METHOD */

      ev = E_OK;
8000aa4a:	82 02       	mov %d2,0
8000aa4c:	5e 17       	jne %d15,1,8000aa5a <ReleaseSpinlock+0xaa>
    p_ccb->service_id            = service_id;
8000aa4e:	da 42       	mov %d15,66
8000aa50:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000aa54:	82 0f       	mov %d15,0
8000aa56:	e9 ff 23 00 	st.b [%a15]35,%d15
  }
#endif /* OSEE_HAS_ERRORHOOK */
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ReleaseSpinlock);

  return ev;
}
8000aa5a:	00 90       	ret 

8000aa5c <TryToGetSpinlock>:
  TryToGetSpinlock
(
  VAR(SpinlockIdType, AUTOMATIC)                        SpinlockID,
  P2VAR(TryToGetSpinlockType, AUTOMATIC, OS_APPL_DATA)  Success
)
{
8000aa5c:	40 ae       	mov.aa %a14,%sp
8000aa5e:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)
    p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000aa60:	c8 3f       	ld.a %a15,[%a15]12
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  p_ccb->service_id = (service_id + 1U);
8000aa62:	da 45       	mov %d15,69
8000aa64:	e9 ff 13 00 	st.b [%a15]19,%d15
  p_ccb->orti_service_id_valid = OSEE_TRUE;
8000aa68:	82 1f       	mov %d15,1
8000aa6a:	e9 ff 23 00 	st.b [%a15]35,%d15
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (spinlock_id < p_kdb->p_kcb->free_spinlock_index);
#else
  return (spinlock_id < p_kdb->spinlock_array_size);
8000aa6e:	91 00 00 28 	movh.a %a2,32768
8000aa72:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000aa76:	4c 2a       	ld.w %d15,[%a2]40
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00707] The function TryToGetSpinlock shall return E_OS_ID if the
    parameter SpinlockID refers to a spinlock that does not exist.
   (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
    ev = E_OS_ID;
8000aa78:	82 32       	mov %d2,3
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
/* [SWS_Os_00707] The function TryToGetSpinlock shall return E_OS_ID if the
    parameter SpinlockID refers to a spinlock that does not exist.
   (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
8000aa7a:	7f f4 50 80 	jge.u %d4,%d15,8000ab1a <TryToGetSpinlock+0xbe>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_spinlock_db = &(*p_kdb->p_spinlock_array)[SpinlockID];
8000aa7e:	91 00 00 28 	movh.a %a2,32768
8000aa82:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000aa86:	4c 29       	ld.w %d15,[%a2]36
    CONSTP2VAR(OsEE_SpinlockCB, AUTOMATIC, OS_APPL_DATA)
      p_spinlock_cb = p_spinlock_db->p_cb;
8000aa88:	13 c4 20 2f 	madd %d2,%d15,%d4,12
8000aa8c:	60 22       	mov.a %a2,%d2
8000aa8e:	d4 26       	ld.a %a6,[%a2]
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_curr = p_ccb->p_curr;
8000aa90:	c8 05       	ld.a %a5,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_CONST)
      p_curr_tcb = p_curr->p_tcb;
8000aa92:	99 52 0c 00 	ld.a %a2,[%a5]12
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_core_last_spinlock_db = p_ccb->p_last_spinlock;
8000aa96:	48 57       	ld.w %d7,[%a15]20
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_last_m = p_curr_tcb->p_last_m;
8000aa98:	19 26 04 00 	ld.w %d6,[%a2]4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000aa9c:	4d c0 e2 5f 	mfcr %d5,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000aaa0:	8f f5 0f 21 	and %d2,%d5,255
8000aaa4:	8b 32 a1 22 	ge.u %d2,%d2,19
8000aaa8:	f6 2a       	jnz %d2,8000aabc <TryToGetSpinlock+0x60>
    OsEE_icr icr_temp = icr;
8000aaaa:	02 52       	mov %d2,%d5
8000aaac:	3b 30 01 30 	mov %d3,19
8000aab0:	37 32 08 20 	insert %d2,%d2,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000aab4:	cd c2 e2 0f 	mtcr $icr,%d2
8000aab8:	0d 00 c0 04 	isync 
      if such argument is NULL. +
      MISRA dictate NULL check for pointers always. */
  /* [SWS_Os_706]: If the function TryToGetSpinlock does not return E_OK, the
      OUT parameter "Success" shall be undefined. (SRS_Os_80021) */
    if (Success == NULL) {
      ev = E_OS_PARAM_POINTER;
8000aabc:	3b e0 00 20 	mov %d2,14
      pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER 
      if such argument is NULL. +
      MISRA dictate NULL check for pointers always. */
  /* [SWS_Os_706]: If the function TryToGetSpinlock does not return E_OK, the
      OUT parameter "Success" shall be undefined. (SRS_Os_80021) */
    if (Success == NULL) {
8000aac0:	bd 04 1b 00 	jz.a %a4,8000aaf6 <TryToGetSpinlock+0x9a>
      while a RESOURCE is occupied. (SRS_Os_80021) */
/* [SWS_Os_00704] The function TryToGetSpinlock shall atomically test the
    availability of the spinlock and if available occupy it. The result of
    success is returned. (SRS_Os_80021) */
      /* Try to get the lock */
      if (osEE_hal_try_spin_lock(p_spinlock_db->p_spinlock_arch)) {
8000aac4:	13 c4 20 2f 	madd %d2,%d15,%d4,12
8000aac8:	60 23       	mov.a %a3,%d2
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000aaca:	99 33 04 00 	ld.a %a3,[%a3]4
8000aace:	d2 12       	mov %e2,1
8000aad0:	49 32 c0 08 	cmpswap.w [%a3]0,%e2
8000aad4:	f6 2e       	jnz %d2,8000aaf0 <TryToGetSpinlock+0x94>
        /* Populate M Stack for Current TASK and Spinlock Stack for CCB */
        p_spinlock_cb->p_next = (p_last_m != NULL)?
          p_last_m: p_core_last_spinlock_db;
8000aad6:	2b 76 40 66 	sel %d6,%d6,%d6,%d7
   (SRS_Os_80021) */
  if (!osEE_is_valid_spinlock_id(p_kdb, SpinlockID)) {
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_SpinlockDB, AUTOMATIC, OS_APPL_CONST)
      p_spinlock_db = &(*p_kdb->p_spinlock_array)[SpinlockID];
8000aada:	13 c4 20 4f 	madd %d4,%d15,%d4,12
    availability of the spinlock and if available occupy it. The result of
    success is returned. (SRS_Os_80021) */
      /* Try to get the lock */
      if (osEE_hal_try_spin_lock(p_spinlock_db->p_spinlock_arch)) {
        /* Populate M Stack for Current TASK and Spinlock Stack for CCB */
        p_spinlock_cb->p_next = (p_last_m != NULL)?
8000aade:	74 66       	st.w [%a6],%d6
          p_last_m: p_core_last_spinlock_db;

        /* Update Heads pointers: Current TASK and CCB */
        p_curr_tcb->p_last_m = p_spinlock_db;
8000aae0:	59 24 04 00 	st.w [%a2]4,%d4
        p_ccb->p_last_spinlock = p_spinlock_db;
8000aae4:	68 54       	st.w [%a15]20,%d4

        /* Set Current TASK/ISR2 as spinlock locker */
        p_spinlock_cb->p_owner = p_curr;
8000aae6:	b5 65 08 00 	st.a [%a6]8,%a5

      /* [SWS_Os_00705] The function TryToGetSpinlock shall set the OUT
           parameter "Success" to TRYTOGETSPINLOCK_SUCCESS if the spinlock was
           successfully occupied, and TRYTOGETSPINLOCK_NOSUCCESS if not.
           In both cases E_OK shall be returned. (SRS_Os_80021) */
        *Success = TRYTOGETSPINLOCK_SUCCESS;
8000aaea:	82 1f       	mov %d15,1
8000aaec:	2c 40       	st.b [%a4]0,%d15
8000aaee:	3c 04       	j 8000aaf6 <TryToGetSpinlock+0x9a>
      } else {
        *Success = TRYTOGETSPINLOCK_NOSUCCESS;
8000aaf0:	82 0f       	mov %d15,0
8000aaf2:	2c 40       	st.b [%a4]0,%d15
      }

      ev = E_OK;
8000aaf4:	82 02       	mov %d2,0
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000aaf6:	4d c0 e2 4f 	mfcr %d4,$icr
8000aafa:	02 4f       	mov %d15,%d4
8000aafc:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000ab00:	8f f5 0f 31 	and %d3,%d5,255
8000ab04:	5f 34 08 00 	jeq %d4,%d3,8000ab14 <TryToGetSpinlock+0xb8>
8000ab08:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000ab0c:	cd cf e2 0f 	mtcr $icr,%d15
8000ab10:	0d 00 c0 04 	isync 
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  CONST(OSServiceIdType, AUTOMATIC) service_id
)
{
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000ab14:	39 ff 23 00 	ld.bu %d15,[%a15]35
8000ab18:	5e 17       	jne %d15,1,8000ab26 <TryToGetSpinlock+0xca>
    p_ccb->service_id            = service_id;
8000ab1a:	da 44       	mov %d15,68
8000ab1c:	e9 ff 13 00 	st.b [%a15]19,%d15
    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000ab20:	82 0f       	mov %d15,0
8000ab22:	e9 ff 23 00 	st.b [%a15]35,%d15
#endif /* OSEE_HAS_ERRORHOOK */
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_TryToGetSpinlock);

  return ev;

}
8000ab26:	00 90       	ret 

8000ab28 <osEE_release_all_m>:
static FUNC_P2VAR(OsEE_MDB, OS_APPL_CONST, OS_CODE)
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
8000ab28:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000ab2a:	99 43 0c 00 	ld.a %a3,[%a4]12

  while ((p_tcb->p_last_m != NULL)
8000ab2e:	cc 31       	ld.a %a15,[%a3]4
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
8000ab30:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000ab32:	bd 0f 1a 00 	jz.a %a15,8000ab66 <osEE_release_all_m+0x3e>
#if (defined(OSEE_HAS_SPINLOCKS))
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
8000ab36:	c8 0f       	ld.a %a15,[%a15]0
8000ab38:	4c f2       	ld.w %d15,[%a15]8
8000ab3a:	80 42       	mov.d %d2,%a4
8000ab3c:	fe 25       	jne %d15,%d2,8000ab66 <osEE_release_all_m+0x3e>
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
8000ab3e:	82 02       	mov %d2,0
8000ab40:	68 22       	st.w [%a15]8,%d2
    /* Save the first M not realesed */
    if (p_mdb == NULL) {
8000ab42:	7c 23       	jnz.a %a2,8000ab48 <osEE_release_all_m+0x20>
      p_mdb = p_tcb->p_last_m;
8000ab44:	99 32 04 00 	ld.a %a2,[%a3]4
    }
#if (defined(OSEE_HAS_SPINLOCKS))
    /* Release arch dependent spinlock */
    if (p_tcb->p_last_m->p_spinlock_arch != NULL) {
8000ab48:	99 34 04 00 	ld.a %a4,[%a3]4
8000ab4c:	99 44 04 00 	ld.a %a4,[%a4]4
8000ab50:	bc 44       	jz.a %a4,8000ab58 <osEE_release_all_m+0x30>
8000ab52:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000ab56:	74 42       	st.w [%a4],%d2
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
8000ab58:	c8 0f       	ld.a %a15,[%a15]0
8000ab5a:	ec 31       	st.a [%a3]4,%a15
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000ab5c:	bc f5       	jz.a %a15,8000ab66 <osEE_release_all_m+0x3e>
#if (defined(OSEE_HAS_SPINLOCKS))
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
8000ab5e:	c8 0f       	ld.a %a15,[%a15]0
8000ab60:	48 23       	ld.w %d3,[%a15]8
8000ab62:	5f f3 ef 7f 	jeq %d3,%d15,8000ab40 <osEE_release_all_m+0x18>
8000ab66:	40 9f       	mov.aa %a15,%a9
          I set it to NULL in any case) */
  {
    CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
      p_cdb = osEE_get_curr_core();

    p_cdb->p_ccb->p_last_spinlock = p_tcb->p_last_m;
8000ab68:	c8 3f       	ld.a %a15,[%a15]12
8000ab6a:	4c 31       	ld.w %d15,[%a3]4
8000ab6c:	68 5f       	st.w [%a15]20,%d15
    p_tcb->p_last_m = NULL;
8000ab6e:	82 0f       	mov %d15,0
8000ab70:	6c 31       	st.w [%a3]4,%d15
  }
#endif /* OSEE_HAS_SPINLOCKS */

  return p_mdb;
}
8000ab72:	00 90       	ret 

8000ab74 <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
8000ab74:	40 ae       	mov.aa %a14,%sp
8000ab76:	40 9f       	mov.aa %a15,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
#endif /* OSEE_HAS_PRETASKHOOK || OSEE_SCHEDULER_GLOBAL || OSEE_HAS_CONTEXT ||
          OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */
#if (defined(OSEE_HAS_PRETASKHOOK)) || (defined(OSEE_SCHEDULER_GLOBAL)) ||\
    (defined(OSEE_HAS_CONTEXT)) || (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000ab78:	c8 3f       	ld.a %a15,[%a15]12
          OSEE_HAS_ORTI */
#if (defined(OSEE_HAS_STACK_MONITORING))
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_STACK_MONITORING */
#if (defined(OSEE_HAS_ORTI))
  if (p_ccb->orti_service_id_valid == OSEE_TRUE) {
8000ab7a:	39 ff 23 00 	ld.bu %d15,[%a15]35 <3 <_.+0x2>>
8000ab7e:	5e 1a       	jne %d15,1,8000ab92 <osEE_scheduler_task_wrapper_restore+0x1e>
/* Reset last bit of service_id to mark OS service exit */
    p_ccb->service_id = (OSServiceIdType)
8000ab80:	39 ff 13 00 	ld.bu %d15,[%a15]19
8000ab84:	8f 1f c0 f1 	andn %d15,%d15,1
8000ab88:	e9 ff 13 00 	st.b [%a15]19,%d15
      (((OsEE_reg)p_ccb->service_id) & (~((OsEE_reg)0x1U)));

    p_ccb->orti_service_id_valid = OSEE_FALSE;
8000ab8c:	82 0f       	mov %d15,0
8000ab8e:	e9 ff 23 00 	st.b [%a15]35,%d15
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
8000ab92:	cc 43       	ld.a %a15,[%a4]12
8000ab94:	82 4f       	mov %d15,4
8000ab96:	28 2f       	st.b [%a15]2,%d15
8000ab98:	00 90       	ret 

8000ab9a <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
8000ab9a:	40 ae       	mov.aa %a14,%sp
8000ab9c:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
8000ab9e:	99 42 0c 00 	ld.a %a2,[%a4]12
8000aba2:	39 28 01 00 	ld.bu %d8,[%a2]1
  osEE_scheduler_task_wrapper_restore(p_tdb_to);
8000aba6:	6d ff e7 ff 	call 8000ab74 <osEE_scheduler_task_wrapper_restore>

  if (task_priority < OSEE_ISR_ALL_PRIO) {
8000abaa:	8b f8 0f f2 	eq %d15,%d8,255
8000abae:	ee 13       	jnz %d15,8000abd4 <osEE_scheduler_task_wrapper_run+0x3a>
8000abb0:	4d c0 e2 ff 	mfcr %d15,$icr

/* We always use virtual priorities */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_set_ipl(TaskPrio virt_prio)
{
  OsEE_icr icr  = osEE_tc_get_icr();
  icr.bits.ccpn = (virt_prio < OSEE_ISR2_PRIO_BIT)?
8000abb4:	37 08 48 30 	extr %d3,%d8,0,8
8000abb8:	82 02       	mov %d2,0
8000abba:	ce 35       	jgez %d3,8000abc4 <osEE_scheduler_task_wrapper_run+0x2a>
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000abbc:	8f f8 07 81 	and %d8,%d8,127
8000abc0:	1b 18 00 20 	addi %d2,%d8,1
8000abc4:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000abc8:	cd cf e2 0f 	mtcr $icr,%d15
8000abcc:	0d 00 c0 04 	isync 
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000abd0:	0d 00 00 03 	enable 
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
8000abd4:	c8 62       	ld.a %a2,[%a15]24
8000abd6:	2d 02 00 00 	calli %a2
8000abda:	40 92       	mov.aa %a2,%a9
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000abdc:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
8000abe0:	82 0f       	mov %d15,0
8000abe2:	e9 2f 21 00 	st.b [%a2]33,%d15
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
8000abe6:	39 2f 20 00 	ld.bu %d15,[%a2]32
8000abea:	6e 09       	jz %d15,8000abfc <osEE_scheduler_task_wrapper_run+0x62>
    p_ccb->s_isr_all_cnt = 0U;
8000abec:	82 0f       	mov %d15,0
8000abee:	e9 2f 20 00 	st.b [%a2]32,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000abf2:	4c 26       	ld.w %d15,[%a2]24
8000abf4:	cd cf e2 0f 	mtcr $icr,%d15
8000abf8:	0d 00 c0 04 	isync 
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
8000abfc:	39 2f 22 00 	ld.bu %d15,[%a2]34
8000ac00:	6e 06       	jz %d15,8000ac0c <osEE_scheduler_task_wrapper_run+0x72>
    p_ccb->d_isr_all_cnt = 0U;
8000ac02:	82 0f       	mov %d15,0
8000ac04:	e9 2f 22 00 	st.b [%a2]34,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000ac08:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000ac0c:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000ac10:	8f ff 0f 21 	and %d2,%d15,255
8000ac14:	8b 32 a1 22 	ge.u %d2,%d2,19
8000ac18:	f6 29       	jnz %d2,8000ac2a <osEE_scheduler_task_wrapper_run+0x90>
8000ac1a:	3b 30 01 20 	mov %d2,19
8000ac1e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000ac22:	cd cf e2 0f 	mtcr $icr,%d15
8000ac26:	0d 00 c0 04 	isync 

  (void)osEE_begin_primitive();

  osEE_stack_monitoring(p_cdb);

  if (p_to_term->task_type == OSEE_TASK_TYPE_ISR2) {
8000ac2a:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000ac2e:	5e 25       	jne %d15,2,8000ac38 <osEE_scheduler_task_wrapper_run+0x9e>
  /* [SWS_Os_00369]: If a Category 2 ISR calls GetResource() and ends (returns)
      without calling the corresponding ReleaseResource(), the Operating System
      module shall perform the ReleaseResource() call and shall call the
      ErrorHook() E_OS_RESOURCE */
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_mdb = osEE_release_all_m(p_to_term);
8000ac30:	40 f4       	mov.aa %a4,%a15
8000ac32:	6d ff 7b ff 	call 8000ab28 <osEE_release_all_m>
8000ac36:	3c 04       	j 8000ac3e <osEE_scheduler_task_wrapper_run+0xa4>
    osEE_call_error_hook(p_ccb, E_OS_MISSINGEND);
#if (defined(OSEE_HAS_RESOURCES)) || (defined(OSEE_HAS_SPINLOCKS))
/* [SWS_Os_0070]: If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and still holds OSEK Resources,
    the Operating System shall release them. */
    (void)osEE_release_all_m(p_to_term);
8000ac38:	40 f4       	mov.aa %a4,%a15
8000ac3a:	6d ff 77 ff 	call 8000ab28 <osEE_release_all_m>
8000ac3e:	c8 14       	ld.a %a4,[%a15]4
8000ac40:	a0 05       	mov.a %a5,0
8000ac42:	1d 00 3a 06 	j 8000b8b6 <osEE_hal_terminate_ctx>

8000ac46 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
8000ac46:	40 ae       	mov.aa %a14,%sp
8000ac48:	40 9c       	mov.aa %a12,%a9
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000ac4a:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000ac4e:	8f f8 0f f1 	and %d15,%d8,255
8000ac52:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000ac56:	ee 0a       	jnz %d15,8000ac6a <osEE_idle_hook_wrapper+0x24>
    OsEE_icr icr_temp = icr;
8000ac58:	02 8f       	mov %d15,%d8
8000ac5a:	3b 30 01 20 	mov %d2,19
8000ac5e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000ac62:	cd cf e2 0f 	mtcr $icr,%d15
8000ac66:	0d 00 c0 04 	isync 
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
8000ac6a:	91 00 00 48 	movh.a %a4,32768
8000ac6e:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000ac72:	6d 00 63 02 	call 8000b138 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000ac76:	4d c0 e2 3f 	mfcr %d3,$icr
8000ac7a:	02 3f       	mov %d15,%d3
8000ac7c:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000ac80:	8f f8 0f 21 	and %d2,%d8,255
8000ac84:	5f 23 08 00 	jeq %d3,%d2,8000ac94 <osEE_idle_hook_wrapper+0x4e>
8000ac88:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000ac8c:	cd cf e2 0f 	mtcr $icr,%d15
8000ac90:	0d 00 c0 04 	isync 
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
8000ac94:	cc c3       	ld.a %a15,[%a12]12
8000ac96:	39 ff 10 00 	ld.bu %d15,[%a15]16 <f0030003 <_SMALL_DATA4_+0x40028003>>
8000ac9a:	df 2f fe 7f 	jeq %d15,2,8000ac96 <osEE_idle_hook_wrapper+0x50>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
8000ac9e:	99 c4 14 00 	ld.a %a4,[%a12]20 <f0030014 <_SMALL_DATA4_+0x40028014>>
8000aca2:	6d 00 98 04 	call 8000b5d2 <osEE_idle_task_terminate>
8000aca6:	00 90       	ret 

8000aca8 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000aca8:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000acaa:	99 43 0c 00 	ld.a %a3,[%a4]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
8000acae:	cc 50       	ld.a %a15,[%a5]0
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
8000acb0:	99 32 0c 00 	ld.a %a2,[%a3]12

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
8000acb4:	bd 02 13 00 	jz.a %a2,8000acda <osEE_scheduler_core_rq_preempt_stk+0x32>
    p_ret_tdb = p_ret_sn->p_tdb;
8000acb8:	99 22 04 00 	ld.a %a2,[%a2]4
    if (p_rq_sn != NULL) {
8000acbc:	bd 0f 1b 00 	jz.a %a15,8000acf2 <osEE_scheduler_core_rq_preempt_stk+0x4a>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
8000acc0:	99 24 0c 00 	ld.a %a4,[%a2]12
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
8000acc4:	c8 16       	ld.a %a6,[%a15]4
8000acc6:	99 66 0c 00 	ld.a %a6,[%a6]12
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
8000acca:	39 42 01 00 	ld.bu %d2,[%a4]1
8000acce:	0c 61       	ld.bu %d15,[%a6]1
8000acd0:	7f f2 13 80 	jge.u %d2,%d15,8000acf6 <osEE_scheduler_core_rq_preempt_stk+0x4e>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
8000acd4:	82 2f       	mov %d15,2
8000acd6:	2c 42       	st.b [%a4]2,%d15
8000acd8:	3c 11       	j 8000acfa <osEE_scheduler_core_rq_preempt_stk+0x52>
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000acda:	a0 02       	mov.a %a2,0

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
8000acdc:	bd 0f 1e 00 	jz.a %a15,8000ad18 <osEE_scheduler_core_rq_preempt_stk+0x70>
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
8000ace0:	99 42 14 00 	ld.a %a2,[%a4]20
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000ace4:	99 24 0c 00 	ld.a %a4,[%a2]12
8000ace8:	82 2f       	mov %d15,2
8000acea:	2c 42       	st.b [%a4]2,%d15
8000acec:	3c 07       	j 8000acfa <osEE_scheduler_core_rq_preempt_stk+0x52>
  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    if (p_tcb->current_prio < dispatch_prio) {
      p_tcb->current_prio = dispatch_prio;
8000acee:	2c 51       	st.b [%a5]1,%d15
8000acf0:	00 90       	ret 
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000acf2:	a0 02       	mov.a %a2,0
8000acf4:	00 90       	ret 
8000acf6:	a0 02       	mov.a %a2,0
8000acf8:	00 90       	ret 
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
8000acfa:	4c f0       	ld.w %d15,[%a15]0
8000acfc:	6c 50       	st.w [%a5]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
8000acfe:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000ad00:	99 45 0c 00 	ld.a %a5,[%a4]12
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
8000ad04:	4c 33       	ld.w %d15,[%a3]12
8000ad06:	68 0f       	st.w [%a15]0,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
8000ad08:	ec 33       	st.a [%a3]12,%a15
  p_ccb->p_curr                 = p_tdb;
8000ad0a:	f4 34       	st.a [%a3],%a4

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
8000ad0c:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
8000ad10:	39 52 01 00 	ld.bu %d2,[%a5]1
8000ad14:	3f f2 ed ff 	jlt.u %d2,%d15,8000acee <osEE_scheduler_core_rq_preempt_stk+0x46>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
8000ad18:	00 90       	ret 

8000ad1a <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
8000ad1a:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
8000ad1c:	cc 51       	ld.a %a15,[%a5]4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
8000ad1e:	c8 32       	ld.a %a2,[%a15]12
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
8000ad20:	76 44       	jz %d4,8000ad28 <osEE_sn_priority_insert+0xe>
8000ad22:	39 f2 1c 00 	ld.bu %d2,[%a15]28
8000ad26:	3c 03       	j 8000ad2c <osEE_sn_priority_insert+0x12>
8000ad28:	39 22 01 00 	ld.bu %d2,[%a2]1
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
8000ad2c:	cc 40       	ld.a %a15,[%a4]0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000ad2e:	a0 06       	mov.a %a6,0
8000ad30:	7c f3       	jnz.a %a15,8000ad36 <osEE_sn_priority_insert+0x1c>
8000ad32:	3c 14       	j 8000ad5a <osEE_sn_priority_insert+0x40>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000ad34:	60 ff       	mov.a %a15,%d15
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
8000ad36:	c8 12       	ld.a %a2,[%a15]4
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
8000ad38:	99 23 0c 00 	ld.a %a3,[%a2]12

    if (as_ready) {
8000ad3c:	76 44       	jz %d4,8000ad44 <osEE_sn_priority_insert+0x2a>
      prio_to_check = p_cur_tdb->ready_prio;
8000ad3e:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000ad42:	3c 02       	j 8000ad46 <osEE_sn_priority_insert+0x2c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
8000ad44:	0c 31       	ld.bu %d15,[%a3]1
    }

    if (new_task_prio <= prio_to_check)
8000ad46:	3f 2f 06 80 	jlt.u %d15,%d2,8000ad52 <osEE_sn_priority_insert+0x38>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000ad4a:	4c f0       	ld.w %d15,[%a15]0
8000ad4c:	40 f6       	mov.aa %a6,%a15
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000ad4e:	ee f3       	jnz %d15,8000ad34 <osEE_sn_priority_insert+0x1a>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000ad50:	60 ff       	mov.a %a15,%d15
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
8000ad52:	bc 64       	jz.a %a6,8000ad5a <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
8000ad54:	f4 65       	st.a [%a6],%a5
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
8000ad56:	82 02       	mov %d2,0
8000ad58:	3c 03       	j 8000ad5e <osEE_sn_priority_insert+0x44>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
8000ad5a:	f4 45       	st.a [%a4],%a5
    head_changed  = OSEE_TRUE;
8000ad5c:	82 12       	mov %d2,1
  }

  p_sn_new->p_next = p_curr;
8000ad5e:	ec 50       	st.a [%a5]0,%a15

  return head_changed;
}
8000ad60:	00 90       	ret 

8000ad62 <osEE_scheduler_rq_insert>:
(
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
8000ad62:	40 ae       	mov.aa %a14,%sp
  p_sn_new->p_tdb = p_tdb_new;
8000ad64:	b5 56 04 00 	st.a [%a5]4,%a6

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
8000ad68:	82 14       	mov %d4,1
8000ad6a:	6d ff d8 ff 	call 8000ad1a <osEE_sn_priority_insert>
#else
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_FALSE);
#endif /* !OSEE_SCHEDULER_GLOBAL */
}
8000ad6e:	00 90       	ret 

8000ad70 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000ad70:	40 ae       	mov.aa %a14,%sp
8000ad72:	40 4d       	mov.aa %a13,%a4
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
8000ad74:	cc 43       	ld.a %a15,[%a4]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
8000ad76:	c8 3c       	ld.a %a12,[%a15]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
8000ad78:	54 c3       	ld.w %d3,[%a12]
8000ad7a:	68 33       	st.w [%a15]12,%d3
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
8000ad7c:	6d ff 96 ff 	call 8000aca8 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
8000ad80:	4c f3       	ld.w %d15,[%a15]12

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
8000ad82:	7c 29       	jnz.a %a2,8000ad94 <osEE_scheduler_core_pop_running+0x24>
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
8000ad84:	80 d3       	mov.d %d3,%a13
8000ad86:	1b 43 01 20 	addi %d2,%d3,20
8000ad8a:	92 43       	add %d3,%d15,4
8000ad8c:	6a 23       	cmovn %d3,%d15,%d2
8000ad8e:	60 3d       	mov.a %a13,%d3
8000ad90:	4c d0       	ld.w %d15,[%a13]0
8000ad92:	68 0f       	st.w [%a15]0,%d15
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
8000ad94:	40 c2       	mov.aa %a2,%a12
8000ad96:	00 90       	ret 

8000ad98 <osEE_task_activated>:

FUNC(StatusType, OS_CODE) osEE_task_activated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000ad98:	40 ae       	mov.aa %a14,%sp
8000ad9a:	40 4c       	mov.aa %a12,%a4
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
8000ad9c:	99 4d 0c 00 	ld.a %a13,[%a4]12
 *  \return The function returns a pointer to the CDB pointer
 */
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE
  osEE_lock_and_get_core(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000ada0:	79 44 1f 00 	ld.b %d4,[%a4]31
8000ada4:	6d 00 e6 04 	call 8000b770 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000ada8:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000adaa:	82 18       	mov %d8,1
8000adac:	82 09       	mov %d9,0
8000adae:	0b 89 10 28 	mov %e2,%d9,%d8
8000adb2:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000adb6:	df 02 fa ff 	jne %d2,0,8000adaa <osEE_task_activated+0x12>
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000adba:	0c d0       	ld.bu %d15,[%a13]0
8000adbc:	39 c3 1e 00 	ld.bu %d3,[%a12]30
    ++p_tcb_act->current_num_of_act;
    ev = E_OK;
  } else {
    ev = E_OS_LIMIT;
8000adc0:	82 42       	mov %d2,4
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000adc2:	7f 3f 05 80 	jge.u %d15,%d3,8000adcc <osEE_task_activated+0x34>
    ++p_tcb_act->current_num_of_act;
8000adc6:	c2 1f       	add %d15,1
8000adc8:	2c d0       	st.b [%a13]0,%d15
    ev = E_OK;
8000adca:	82 02       	mov %d2,0
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000adcc:	cc 24       	ld.a %a15,[%a2]16
8000adce:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000add2:	82 0f       	mov %d15,0
8000add4:	68 0f       	st.w [%a15]0,%d15
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return ev;
}
8000add6:	00 90       	ret 

8000add8 <osEE_task_end>:
FUNC(void, OS_CODE)
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
8000add8:	40 ae       	mov.aa %a14,%sp
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000adda:	cc 43       	ld.a %a15,[%a4]12

  p_tcb->current_prio = p_tdb->ready_prio;
8000addc:	39 4f 1c 00 	ld.bu %d15,[%a4]28
8000ade0:	28 1f       	st.b [%a15]1,%d15

  --p_tcb->current_num_of_act;
8000ade2:	0c f0       	ld.bu %d15,[%a15]0
8000ade4:	c2 ff       	add %d15,-1
8000ade6:	16 ff       	and %d15,255
8000ade8:	28 0f       	st.b [%a15]0,%d15

  if (p_tcb->current_num_of_act == 0U) {
8000adea:	ee 03       	jnz %d15,8000adf0 <osEE_task_end+0x18>
    p_tcb->status = OSEE_TASK_SUSPENDED;
8000adec:	28 2f       	st.b [%a15]2,%d15
8000adee:	00 90       	ret 
  } else {
    p_tcb->status = OSEE_TASK_READY;
8000adf0:	82 1f       	mov %d15,1
8000adf2:	28 2f       	st.b [%a15]2,%d15
8000adf4:	00 90       	ret 

8000adf6 <osEE_task_event_set_mask>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)    p_tdb_waking_up,
  VAR(EventMaskType, AUTOMATIC)               Mask,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
8000adf6:	40 ae       	mov.aa %a14,%sp
8000adf8:	02 4a       	mov %d10,%d4
8000adfa:	40 5d       	mov.aa %a13,%a5
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_waking_up = p_tdb_waking_up->p_tcb;
8000adfc:	99 4c 0c 00 	ld.a %a12,[%a4]12
 *  \return The function returns a pointer to the CDB pointer
 */
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE
  osEE_lock_and_get_core(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000ae00:	79 44 1f 00 	ld.b %d4,[%a4]31
8000ae04:	6d 00 b6 04 	call 8000b770 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000ae08:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000ae0a:	82 18       	mov %d8,1
8000ae0c:	82 09       	mov %d9,0
8000ae0e:	0b 89 10 28 	mov %e2,%d9,%d8
8000ae12:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000ae16:	df 02 fa ff 	jne %d2,0,8000ae0a <osEE_task_event_set_mask+0x14>
    *p_ev = E_OS_STATE;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;
8000ae1a:	02 ac       	mov %d12,%d10
8000ae1c:	02 ad       	mov %d13,%d10
8000ae1e:	49 cc 4c 08 	ldmst [%a12]12,%e12

    *p_ev = E_OK;
8000ae22:	34 d2       	st.b [%a13],%d2

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000ae24:	4c c2       	ld.w %d15,[%a12]8
8000ae26:	26 fa       	and %d10,%d15
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
8000ae28:	a0 0f       	mov.a %a15,0
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;

    *p_ev = E_OK;

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000ae2a:	76 a5       	jz %d10,8000ae34 <osEE_task_event_set_mask+0x3e>
      p_own_sn = p_tcb_waking_up->p_own_sn;
8000ae2c:	cc c4       	ld.a %a15,[%a12]16

      /* Set p_own_sn of waking up task to NULL so it won't be inserted in
         RQ more than once. */
      if (p_own_sn != NULL) {
8000ae2e:	bc f3       	jz.a %a15,8000ae34 <osEE_task_event_set_mask+0x3e>
        p_tcb_waking_up->p_own_sn = NULL;
8000ae30:	82 0f       	mov %d15,0
8000ae32:	6c c4       	st.w [%a12]16,%d15
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000ae34:	99 22 10 00 	ld.a %a2,[%a2]16
8000ae38:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000ae3c:	82 0f       	mov %d15,0
8000ae3e:	6c 20       	st.w [%a2]0,%d15
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
8000ae40:	40 f2       	mov.aa %a2,%a15
8000ae42:	00 90       	ret 

8000ae44 <osEE_activate_isr2>:
FUNC(void, OS_CODE)
  osEE_activate_isr2
(
  VAR(TaskType, AUTOMATIC) isr2_id
)
{
8000ae44:	40 ae       	mov.aa %a14,%sp
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
8000ae46:	91 00 00 48 	movh.a %a4,32768
8000ae4a:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000ae4e:	cc 43       	ld.a %a15,[%a4]12
8000ae50:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000ae54:	c8 05       	ld.a %a5,[%a15]0

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
8000ae56:	cc 53       	ld.a %a15,[%a5]12
8000ae58:	0c f0       	ld.bu %d15,[%a15]0
8000ae5a:	c2 1f       	add %d15,1
8000ae5c:	28 0f       	st.b [%a15]0,%d15

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
8000ae5e:	a0 06       	mov.a %a6,0
8000ae60:	6d 00 8b 01 	call 8000b176 <osEE_scheduler_task_set_running>
8000ae64:	00 90       	ret 

8000ae66 <osEE_scheduler_task_insert_rq>:
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act,
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb_act
)
{
8000ae66:	40 ae       	mov.aa %a14,%sp
8000ae68:	40 5f       	mov.aa %a15,%a5
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
8000ae6a:	0c 62       	ld.bu %d15,[%a6]2
8000ae6c:	ee 05       	jnz %d15,8000ae76 <osEE_scheduler_task_insert_rq+0x10>
    p_tcb_act->status = OSEE_TASK_READY;
8000ae6e:	82 1f       	mov %d15,1
8000ae70:	2c 62       	st.b [%a6]2,%d15
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
8000ae72:	82 0f       	mov %d15,0
8000ae74:	6c 63       	st.w [%a6]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000ae76:	99 45 08 00 	ld.a %a5,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
8000ae7a:	4c 50       	ld.w %d15,[%a5]0
8000ae7c:	6c 42       	st.w [%a4]8,%d15
  p_sn_allocated->p_next  = NULL;
8000ae7e:	82 0f       	mov %d15,0
8000ae80:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000ae82:	b0 44       	add.a %a4,4
8000ae84:	40 f6       	mov.aa %a6,%a15
8000ae86:	6d ff 6e ff 	call 8000ad62 <osEE_scheduler_rq_insert>
    osEE_sn_alloc(&p_ccb->p_free_sn), p_tdb_act);

  return rq_head_changed;
}
8000ae8a:	00 90       	ret 

8000ae8c <osEE_scheduler_task_activated>:
  osEE_scheduler_task_activated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000ae8c:	40 ae       	mov.aa %a14,%sp
8000ae8e:	40 5c       	mov.aa %a12,%a5
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
8000ae90:	19 5a 0c 00 	ld.w %d10,[%a5]12
#if (defined(OSEE_SINGLECORE))
  /* Touch unused parameter */
  (void)p_tdb;
  return osEE_get_curr_core();
#else
  return osEE_get_core(p_tdb->orig_core_id);
8000ae94:	79 54 1f 00 	ld.b %d4,[%a5]31
8000ae98:	6d 00 6c 04 	call 8000b770 <osEE_get_core>
8000ae9c:	40 2d       	mov.aa %a13,%a2
{
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
8000ae9e:	99 24 0c 00 	ld.a %a4,[%a2]12
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
8000aea2:	d4 42       	ld.a %a2,[%a4]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
8000aea4:	99 23 0c 00 	ld.a %a3,[%a2]12
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000aea8:	4d c0 e1 2f 	mfcr %d2,$core_id
8000aeac:	37 02 48 20 	extr %d2,%d2,0,8
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000aeb0:	cc d4       	ld.a %a15,[%a13]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000aeb2:	82 18       	mov %d8,1
8000aeb4:	82 09       	mov %d9,0
8000aeb6:	0b 89 10 48 	mov %e4,%d9,%d8
8000aeba:	49 f4 c0 08 	cmpswap.w [%a15]0,%e4
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000aebe:	df 04 fa ff 	jne %d4,0,8000aeb2 <osEE_scheduler_task_activated+0x26>
  (void)p_kdb;
  osEE_lock_core(p_cdb);

#if (!defined(OSEE_SINGLECORE))
  /* Check if this is a remote activation */
  if (p_tdb_act->orig_core_id != curr_core_id) {
8000aec2:	79 cf 1f 00 	ld.b %d15,[%a12]31
8000aec6:	5f 2f 23 00 	jeq %d15,%d2,8000af0c <osEE_scheduler_task_activated+0x80>
    CONST(OsEE_bool, AUTOMATIC) rq_head_changed =
8000aeca:	40 c5       	mov.aa %a5,%a12
8000aecc:	60 a6       	mov.a %a6,%d10
8000aece:	5c cc       	call 8000ae66 <osEE_scheduler_task_insert_rq>
8000aed0:	02 2f       	mov %d15,%d2
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000aed2:	cc d4       	ld.a %a15,[%a13]16
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
8000aed4:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000aed8:	82 02       	mov %d2,0
8000aeda:	68 02       	st.w [%a15]0,%d2
      osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);

    osEE_unlock_core(p_cdb);

    if (rq_head_changed) {
8000aedc:	6e 42       	jz %d15,8000af60 <osEE_scheduler_task_activated+0xd4>
      /* if RQ Head is changed, signal the remote core, it needs to
         reschedule */
      osEE_hal_signal_core(p_tdb_act->orig_core_id);
8000aede:	79 c2 1f 00 	ld.b %d2,[%a12]31
8000aee2:	8f f2 0f f1 	and %d15,%d2,255
8000aee6:	91 40 00 ff 	movh.a %a15,61444
8000aeea:	d9 ff 00 09 	lea %a15,[%a15]-28672 <f0039000 <_SMALL_DATA4_+0x40031000>>
8000aeee:	ff 4f 09 80 	jge.u %d15,4,8000af00 <osEE_scheduler_task_activated+0x74>
8000aef2:	60 22       	mov.a %a2,%d2
8000aef4:	d9 2f 40 0e 	lea %a15,[%a2]-7168
8000aef8:	11 1f c0 f3 	addih.a %a15,%a15,15361
8000aefc:	30 ff       	add.a %a15,%a15
8000aefe:	30 ff       	add.a %a15,%a15
8000af00:	4c f0       	ld.w %d15,[%a15]0
8000af02:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
8000af06:	68 0f       	st.w [%a15]0,%d15
    }
    is_preemption = OSEE_FALSE;
8000af08:	82 02       	mov %d2,0
8000af0a:	00 90       	ret 
  } else
#endif /* !OSEE_SINGLECORE */
  /* Preemption Check */
  if (p_curr_tcb->current_prio < p_tcb_act->current_prio) {
8000af0c:	39 32 01 00 	ld.bu %d2,[%a3]1
8000af10:	60 af       	mov.a %a15,%d10
8000af12:	0c f1       	ld.bu %d15,[%a15]1
8000af14:	7f f2 1d 80 	jge.u %d2,%d15,8000af4e <osEE_scheduler_task_activated+0xc2>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000af18:	cc 42       	ld.a %a15,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
8000af1a:	48 02       	ld.w %d2,[%a15]0
8000af1c:	59 42 08 00 	st.w [%a4]8,%d2
  p_sn_allocated->p_next  = NULL;
8000af20:	82 0f       	mov %d15,0
8000af22:	68 0f       	st.w [%a15]0,%d15
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

    /* Set Previous TASK status as Ready but stacked */
    p_curr_tcb->status = OSEE_TASK_READY_STACKED;
8000af24:	82 22       	mov %d2,2
8000af26:	e9 32 02 00 	st.b [%a3]2,%d2

    /* Set the activated TASK as current */
    p_new_stk->p_tdb            = p_tdb_act;
8000af2a:	e8 1c       	st.a [%a15]4,%a12
    p_new_stk->p_next           = p_ccb->p_stk_sn;
8000af2c:	19 44 0c 00 	ld.w %d4,[%a4]12
8000af30:	68 04       	st.w [%a15]0,%d4
    p_ccb->p_stk_sn             = p_new_stk;
8000af32:	ec 43       	st.a [%a4]12,%a15
    p_ccb->p_curr               = p_tdb_act;
8000af34:	f4 4c       	st.a [%a4],%a12
    osEE_task_event_reset_mask(p_tdb_act->p_tcb);
8000af36:	cc c3       	ld.a %a15,[%a12]12
8000af38:	68 3f       	st.w [%a15]12,%d15
8000af3a:	cc d4       	ld.a %a15,[%a13]16
8000af3c:	0d 00 80 04 	dsync 
8000af40:	68 0f       	st.w [%a15]0,%d15

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_tdb_act);
8000af42:	40 24       	mov.aa %a4,%a2
8000af44:	40 c5       	mov.aa %a5,%a12
8000af46:	6d 00 22 03 	call 8000b58a <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000af4a:	82 12       	mov %d2,1
8000af4c:	00 90       	ret 
  } else {
    /* Actually Insert the activated in READY Queue */
    (void)osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);
8000af4e:	40 c5       	mov.aa %a5,%a12
8000af50:	60 a6       	mov.a %a6,%d10
8000af52:	5c 8a       	call 8000ae66 <osEE_scheduler_task_insert_rq>
8000af54:	cc d4       	ld.a %a15,[%a13]16
8000af56:	0d 00 80 04 	dsync 
8000af5a:	82 0f       	mov %d15,0
8000af5c:	68 0f       	st.w [%a15]0,%d15

    osEE_unlock_core(p_cdb);

    is_preemption = OSEE_FALSE;
8000af5e:	82 02       	mov %d2,0
  }

  return is_preemption;
}
8000af60:	00 90       	ret 

8000af62 <osEE_scheduler_task_insert>:
  osEE_scheduler_task_insert
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000af62:	40 ae       	mov.aa %a14,%sp
8000af64:	40 5c       	mov.aa %a12,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
8000af66:	19 5a 0c 00 	ld.w %d10,[%a5]12
#if (defined(OSEE_SINGLECORE))
  /* Touch unused parameter */
  (void)p_tdb;
  return osEE_get_curr_core();
#else
  return osEE_get_core(p_tdb->orig_core_id);
8000af6a:	79 54 1f 00 	ld.b %d4,[%a5]31
8000af6e:	6d 00 01 04 	call 8000b770 <osEE_get_core>
8000af72:	40 2d       	mov.aa %a13,%a2
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb         = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb         = p_cdb->p_ccb;
8000af74:	99 24 0c 00 	ld.a %a4,[%a2]12
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000af78:	4d c0 e1 2f 	mfcr %d2,$core_id
8000af7c:	37 02 48 20 	extr %d2,%d2,0,8
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000af80:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000af82:	82 18       	mov %d8,1
8000af84:	82 09       	mov %d9,0
8000af86:	0b 89 10 48 	mov %e4,%d9,%d8
8000af8a:	49 f4 c0 08 	cmpswap.w [%a15]0,%e4
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000af8e:	df 04 fa ff 	jne %d4,0,8000af82 <osEE_scheduler_task_insert+0x20>
  (void)p_kdb;
  osEE_lock_core(p_cdb);

#if (!defined(OSEE_SINGLECORE))
  /* Check if this is a remote activation */
  if (p_tdb_act->orig_core_id != curr_core_id) {
8000af92:	79 cf 1f 00 	ld.b %d15,[%a12]31
8000af96:	5f 2f 24 00 	jeq %d15,%d2,8000afde <osEE_scheduler_task_insert+0x7c>
    head_changed = osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);
8000af9a:	40 c5       	mov.aa %a5,%a12
8000af9c:	60 a6       	mov.a %a6,%d10
8000af9e:	6d ff 64 ff 	call 8000ae66 <osEE_scheduler_task_insert_rq>
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000afa2:	cc d4       	ld.a %a15,[%a13]16
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
8000afa4:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000afa8:	82 0f       	mov %d15,0
8000afaa:	68 0f       	st.w [%a15]0,%d15

    osEE_unlock_core(p_cdb);

    if (head_changed) {
8000afac:	df 02 22 00 	jeq %d2,0,8000aff0 <osEE_scheduler_task_insert+0x8e>
      /* if RQ Head is changed, signal the remote core, it needs to
         reschedule */
      osEE_hal_signal_core(p_tdb_act->orig_core_id);
8000afb0:	79 c2 1f 00 	ld.b %d2,[%a12]31
8000afb4:	8f f2 0f f1 	and %d15,%d2,255
8000afb8:	91 40 00 ff 	movh.a %a15,61444
8000afbc:	d9 ff 00 09 	lea %a15,[%a15]-28672 <f0039000 <_SMALL_DATA4_+0x40031000>>
8000afc0:	ff 4f 09 80 	jge.u %d15,4,8000afd2 <osEE_scheduler_task_insert+0x70>
8000afc4:	60 22       	mov.a %a2,%d2
8000afc6:	d9 2f 40 0e 	lea %a15,[%a2]-7168
8000afca:	11 1f c0 f3 	addih.a %a15,%a15,15361
8000afce:	30 ff       	add.a %a15,%a15
8000afd0:	30 ff       	add.a %a15,%a15
8000afd2:	4c f0       	ld.w %d15,[%a15]0
8000afd4:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
8000afd8:	68 0f       	st.w [%a15]0,%d15
      head_changed = OSEE_FALSE;
8000afda:	82 02       	mov %d2,0
8000afdc:	00 90       	ret 
    }
  } else
#endif /* !OSEE_SINGLECORE */
  {
    /* Actually Insert the activated in READY Queue */
    head_changed  = osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);
8000afde:	40 c5       	mov.aa %a5,%a12
8000afe0:	60 a6       	mov.a %a6,%d10
8000afe2:	6d ff 42 ff 	call 8000ae66 <osEE_scheduler_task_insert_rq>
8000afe6:	cc d4       	ld.a %a15,[%a13]16
8000afe8:	0d 00 80 04 	dsync 
8000afec:	82 0f       	mov %d15,0
8000afee:	68 0f       	st.w [%a15]0,%d15

    osEE_unlock_core(p_cdb);
  }

  return head_changed;
}
8000aff0:	00 90       	ret 

8000aff2 <osEE_scheduler_task_unblocked>:
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
8000aff2:	40 ae       	mov.aa %a14,%sp
8000aff4:	80 5b       	mov.d %d11,%a5
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
8000aff6:	99 5c 04 00 	ld.a %a12,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
8000affa:	19 ca 0c 00 	ld.w %d10,[%a12]12
#if (defined(OSEE_SINGLECORE))
  /* Touch unused parameter */
  (void)p_tdb;
  return osEE_get_curr_core();
#else
  return osEE_get_core(p_tdb->orig_core_id);
8000affe:	79 c4 1f 00 	ld.b %d4,[%a12]31
8000b002:	6d 00 b7 03 	call 8000b770 <osEE_get_core>
8000b006:	40 2d       	mov.aa %a13,%a2
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000b008:	19 2c 0c 00 	ld.w %d12,[%a2]12

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
8000b00c:	82 2f       	mov %d15,2
8000b00e:	60 a2       	mov.a %a2,%d10
8000b010:	2c 22       	st.b [%a2]2,%d15
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
8000b012:	39 cf 1c 00 	ld.bu %d15,[%a12]28
8000b016:	2c 21       	st.b [%a2]1,%d15
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000b018:	cc d4       	ld.a %a15,[%a13]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b01a:	82 18       	mov %d8,1
8000b01c:	82 09       	mov %d9,0
8000b01e:	0b 89 10 28 	mov %e2,%d9,%d8
8000b022:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b026:	df 02 fa ff 	jne %d2,0,8000b01a <osEE_scheduler_task_unblocked+0x28>
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000b02a:	60 c4       	mov.a %a4,%d12
8000b02c:	b0 44       	add.a %a4,4
8000b02e:	60 b5       	mov.a %a5,%d11
8000b030:	40 c6       	mov.aa %a6,%a12
8000b032:	6d ff 98 fe 	call 8000ad62 <osEE_scheduler_rq_insert>
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
8000b036:	82 03       	mov %d3,0
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
8000b038:	df 12 0a 80 	jne %d2,1,8000b04c <osEE_scheduler_task_unblocked+0x5a>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
8000b03c:	60 c2       	mov.a %a2,%d12
8000b03e:	cc 20       	ld.a %a15,[%a2]0
8000b040:	c8 3f       	ld.a %a15,[%a15]12

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
8000b042:	60 a2       	mov.a %a2,%d10
8000b044:	0c 21       	ld.bu %d15,[%a2]1
8000b046:	08 13       	ld.bu %d3,[%a15]1
8000b048:	0b f3 30 31 	lt.u %d3,%d3,%d15
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b04c:	cc d4       	ld.a %a15,[%a13]16
8000b04e:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b052:	82 0f       	mov %d15,0
8000b054:	68 0f       	st.w [%a15]0,%d15

  osEE_unlock_core(p_cdb);

#if (!defined(OSEE_SINGLECORE))
  {
    CONST(CoreIdType, AUTOMATIC) tdb_core_id = p_tdb_released->orig_core_id;
8000b056:	79 cf 1f 00 	ld.b %d15,[%a12]31
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000b05a:	4d c0 e1 2f 	mfcr %d2,$core_id
    /* Check if this is a remote release */
    if (tdb_core_id != osEE_get_curr_core_id()) {
8000b05e:	37 02 48 20 	extr %d2,%d2,0,8
      if (is_preemption) {
8000b062:	0b 2f 10 21 	ne %d2,%d15,%d2
8000b066:	26 32       	and %d2,%d3
8000b068:	df 02 15 00 	jeq %d2,0,8000b092 <osEE_scheduler_task_unblocked+0xa0>
8000b06c:	8f ff 0f 21 	and %d2,%d15,255
8000b070:	91 40 00 ff 	movh.a %a15,61444
8000b074:	d9 ff 00 09 	lea %a15,[%a15]-28672 <f0039000 <_SMALL_DATA4_+0x40031000>>
8000b078:	ff 42 08 80 	jge.u %d2,4,8000b088 <osEE_scheduler_task_unblocked+0x96>
8000b07c:	1b 0f 40 fe 	addi %d15,%d15,-7168
8000b080:	9b 1f c0 f3 	addih %d15,%d15,15361
8000b084:	06 2f       	sh %d15,2
8000b086:	60 ff       	mov.a %a15,%d15
8000b088:	4c f0       	ld.w %d15,[%a15]0
8000b08a:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
8000b08e:	68 0f       	st.w [%a15]0,%d15
        osEE_hal_signal_core(tdb_core_id);
        /* If this is a remote release, it is not a preemption for this core */
        is_preemption = OSEE_FALSE;
8000b090:	82 03       	mov %d3,0
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
8000b092:	02 32       	mov %d2,%d3
8000b094:	00 90       	ret 

8000b096 <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
8000b096:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b098:	40 9d       	mov.aa %a13,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000b09a:	99 dc 0c 00 	ld.a %a12,[%a13]12 <f003000c <_SMALL_DATA4_+0x4002800c>>
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000b09e:	cc d4       	ld.a %a15,[%a13]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b0a0:	82 12       	mov %d2,1
8000b0a2:	82 03       	mov %d3,0
8000b0a4:	0b 23 10 48 	mov %e4,%d3,%d2
8000b0a8:	49 f4 c0 08 	cmpswap.w [%a15]0,%e4
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b0ac:	df 04 fa ff 	jne %d4,0,8000b0a0 <osEE_scheduler_task_terminated+0xa>
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
8000b0b0:	4c c0       	ld.w %d15,[%a12]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
8000b0b2:	60 f2       	mov.a %a2,%d15
8000b0b4:	cc 23       	ld.a %a15,[%a2]12

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
8000b0b6:	6c 50       	st.w [%a5]0,%d15

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
8000b0b8:	08 22       	ld.bu %d2,[%a15]2
8000b0ba:	df 42 18 80 	jne %d2,4,8000b0ea <osEE_scheduler_task_terminated+0x54>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
8000b0be:	40 d4       	mov.aa %a4,%a13
8000b0c0:	d9 c5 04 00 	lea %a5,[%a12]4
8000b0c4:	6d ff 56 fe 	call 8000ad70 <osEE_scheduler_core_pop_running>
8000b0c8:	80 29       	mov.d %d9,%a2

      p_tdb_to = p_ccb->p_curr;
8000b0ca:	54 c8       	ld.w %d8,[%a12]

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
8000b0cc:	3e 85       	jeq %d15,%d8,8000b0d6 <osEE_scheduler_task_terminated+0x40>
        osEE_task_end(p_tdb_term);
8000b0ce:	60 f4       	mov.a %a4,%d15
8000b0d0:	6d ff 84 fe 	call 8000add8 <osEE_task_end>
8000b0d4:	3c 04       	j 8000b0dc <osEE_scheduler_task_terminated+0x46>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
8000b0d6:	0c f0       	ld.bu %d15,[%a15]0
8000b0d8:	c2 ff       	add %d15,-1
8000b0da:	28 0f       	st.b [%a15]0,%d15
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
8000b0dc:	19 c2 08 00 	ld.w %d2,[%a12]8
8000b0e0:	60 92       	mov.a %a2,%d9
8000b0e2:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
8000b0e4:	59 c9 08 00 	st.w [%a12]8,%d9
8000b0e8:	3c 21       	j 8000b12a <osEE_scheduler_task_terminated+0x94>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
8000b0ea:	99 c5 0c 00 	ld.a %a5,[%a12]12

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
8000b0ee:	54 52       	ld.w %d2,[%a5]
8000b0f0:	59 c2 0c 00 	st.w [%a12]12,%d2
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
8000b0f4:	60 f2       	mov.a %a2,%d15
8000b0f6:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000b0fa:	28 12       	st.b [%a15]1,%d2
      p_tcb_term->status = OSEE_TASK_READY;
8000b0fc:	82 12       	mov %d2,1
8000b0fe:	28 22       	st.b [%a15]2,%d2
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
8000b100:	08 02       	ld.bu %d2,[%a15]0
8000b102:	df 12 04 80 	jne %d2,1,8000b10a <osEE_scheduler_task_terminated+0x74>
8000b106:	82 02       	mov %d2,0
8000b108:	68 32       	st.w [%a15]12,%d2
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
8000b10a:	d9 cf 04 00 	lea %a15,[%a12]4
8000b10e:	40 f4       	mov.aa %a4,%a15
8000b110:	60 f6       	mov.a %a6,%d15
8000b112:	6d ff 28 fe 	call 8000ad62 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000b116:	40 d4       	mov.aa %a4,%a13
8000b118:	40 f5       	mov.aa %a5,%a15
8000b11a:	6d ff c7 fd 	call 8000aca8 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
8000b11e:	7c 25       	jnz.a %a2,8000b128 <osEE_scheduler_task_terminated+0x92>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
8000b120:	cc c3       	ld.a %a15,[%a12]12
8000b122:	48 18       	ld.w %d8,[%a15]4
          p_ccb->p_curr           = p_tdb_to;
8000b124:	74 c8       	st.w [%a12],%d8
8000b126:	3c 02       	j 8000b12a <osEE_scheduler_task_terminated+0x94>
        } else {
          p_tdb_to = p_ccb->p_curr;
8000b128:	54 c8       	ld.w %d8,[%a12]
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b12a:	cc d4       	ld.a %a15,[%a13]16
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
8000b12c:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b130:	82 0f       	mov %d15,0
8000b132:	68 0f       	st.w [%a15]0,%d15
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
8000b134:	60 82       	mov.a %a2,%d8
8000b136:	00 90       	ret 

8000b138 <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
8000b138:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b13a:	40 9c       	mov.aa %a12,%a9
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000b13c:	99 cd 0c 00 	ld.a %a13,[%a12]12 <f003000c <_SMALL_DATA4_+0x4002800c>>
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000b140:	cc c4       	ld.a %a15,[%a12]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b142:	82 12       	mov %d2,1
8000b144:	82 03       	mov %d3,0
8000b146:	0b 23 10 48 	mov %e4,%d3,%d2
8000b14a:	49 f4 c0 08 	cmpswap.w [%a15]0,%e4
8000b14e:	02 4f       	mov %d15,%d4
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b150:	df 04 f9 ff 	jne %d4,0,8000b142 <osEE_scheduler_task_preemption_point+0xa>
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000b154:	40 c4       	mov.aa %a4,%a12
8000b156:	d9 d5 04 00 	lea %a5,[%a13]4
8000b15a:	6d ff a7 fd 	call 8000aca8 <osEE_scheduler_core_rq_preempt_stk>
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b15e:	cc c4       	ld.a %a15,[%a12]16
8000b160:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b164:	68 0f       	st.w [%a15]0,%d15

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
8000b166:	82 02       	mov %d2,0
  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
8000b168:	bc 26       	jz.a %a2,8000b174 <osEE_scheduler_task_preemption_point+0x3c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
8000b16a:	40 24       	mov.aa %a4,%a2
8000b16c:	d4 d5       	ld.a %a5,[%a13]
8000b16e:	6d 00 0e 02 	call 8000b58a <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000b172:	82 12       	mov %d2,1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
8000b174:	00 90       	ret 

8000b176 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
8000b176:	40 ae       	mov.aa %a14,%sp
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b178:	40 92       	mov.aa %a2,%a9
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000b17a:	cc 23       	ld.a %a15,[%a2]12
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
8000b17c:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
8000b17e:	48 34       	ld.w %d4,[%a15]12

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
8000b180:	99 43 0c 00 	ld.a %a3,[%a4]12 <80000003 <BootModeHeader0+0x3>>
8000b184:	0c 32       	ld.bu %d15,[%a3]2
8000b186:	5e 43       	jne %d15,4,8000b18c <osEE_scheduler_task_set_running+0x16>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000b188:	82 2f       	mov %d15,2
8000b18a:	2c 32       	st.b [%a3]2,%d15
  }
  p_ccb->p_curr                 = p_tdb;
8000b18c:	e8 05       	st.a [%a15]0,%a5

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
8000b18e:	bd 06 17 80 	jnz.a %a6,8000b1bc <osEE_scheduler_task_set_running+0x46>
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000b192:	99 23 10 00 	ld.a %a3,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b196:	82 12       	mov %d2,1
8000b198:	82 03       	mov %d3,0
8000b19a:	0b 23 10 68 	mov %e6,%d3,%d2
8000b19e:	49 36 c0 08 	cmpswap.w [%a3]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b1a2:	df 06 fa ff 	jne %d6,0,8000b196 <osEE_scheduler_task_set_running+0x20>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000b1a6:	c8 23       	ld.a %a3,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000b1a8:	54 37       	ld.w %d7,[%a3]
8000b1aa:	68 27       	st.w [%a15]8,%d7
  p_sn_allocated->p_next  = NULL;
8000b1ac:	74 36       	st.w [%a3],%d6
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
8000b1ae:	e8 33       	st.a [%a15]12,%a3
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b1b0:	99 22 10 00 	ld.a %a2,[%a2]16
8000b1b4:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b1b8:	74 26       	st.w [%a2],%d6
8000b1ba:	3c 02       	j 8000b1be <osEE_scheduler_task_set_running+0x48>
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
8000b1bc:	e8 36       	st.a [%a15]12,%a6
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
8000b1be:	c8 32       	ld.a %a2,[%a15]12
8000b1c0:	b5 25 04 00 	st.a [%a2]4,%a5
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
8000b1c4:	c8 3f       	ld.a %a15,[%a15]12
8000b1c6:	68 04       	st.w [%a15]0,%d4

  osEE_change_context_from_running(p_preempted, p_tdb);
8000b1c8:	6d 00 e1 01 	call 8000b58a <osEE_change_context_from_running>
8000b1cc:	00 90       	ret 
	...

8000b1d0 <osEE_counter_insert_abs_trigger>:
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db,
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA) p_trigger_db,
  VAR(TickType, AUTOMATIC)                       when
)
{
8000b1d0:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb  = p_counter_db->p_counter_cb;
8000b1d2:	d4 42       	ld.a %a2,[%a4]
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_previous    = NULL;
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_current     = p_counter_cb->trigger_queue;
8000b1d4:	4c 20       	ld.w %d15,[%a2]0
  CONST(TickType, AUTOMATIC)
    counter_value = p_counter_cb->value;
8000b1d6:	19 25 04 00 	ld.w %d5,[%a2]4
  VAR(OsEE_bool, AUTOMATIC)
    work_not_done = OSEE_TRUE;

  /* Update Trigger Status */
  p_trigger_db->p_trigger_cb->when   = when;
8000b1da:	cc 50       	ld.a %a15,[%a5]0
8000b1dc:	68 14       	st.w [%a15]4,%d4
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_current     = p_counter_cb->trigger_queue;
  CONST(TickType, AUTOMATIC)
    counter_value = p_counter_cb->value;
  VAR(OsEE_bool, AUTOMATIC)
    work_not_done = OSEE_TRUE;
8000b1de:	82 13       	mov %d3,1
)
{
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb  = p_counter_db->p_counter_cb;
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_previous    = NULL;
8000b1e0:	a0 03       	mov.a %a3,0
      } else {
        work_not_done = OSEE_FALSE;
      }
    } else {
      /* "Current" belong to next counter-loop */
      if ((when <= counter_value) && (when >= current_when)) {
8000b1e2:	0b 45 50 61 	ge.u %d6,%d5,%d4
         * &&
         * (when >= current_when) => "New" after "current" */
        p_previous  = p_current;
        p_current   = p_current->p_trigger_cb->p_next;
      } else {
        work_not_done = OSEE_FALSE;
8000b1e6:	82 07       	mov %d7,0
    work_not_done = OSEE_TRUE;

  /* Update Trigger Status */
  p_trigger_db->p_trigger_cb->when   = when;

  while ((p_current != NULL) && work_not_done) {
8000b1e8:	3c 17       	j 8000b216 <osEE_counter_insert_abs_trigger+0x46>
    CONST(TickType, AUTOMATIC) current_when = p_current->p_trigger_cb->when;
8000b1ea:	60 f4       	mov.a %a4,%d15
8000b1ec:	cc 40       	ld.a %a15,[%a4]0
8000b1ee:	48 12       	ld.w %d2,[%a15]4

    if (current_when > counter_value) {
8000b1f0:	7f 25 09 80 	jge.u %d5,%d2,8000b202 <osEE_counter_insert_abs_trigger+0x32>
      /* "Current" belong to this counter-loop */
      if ((when >= current_when) || (when <= counter_value)) {
8000b1f4:	02 60       	mov %d0,%d6
8000b1f6:	0b 24 c0 02 	or.ge.u %d0,%d4,%d2
8000b1fa:	76 0b       	jz %d0,8000b210 <osEE_counter_insert_abs_trigger+0x40>
8000b1fc:	60 f3       	mov.a %a3,%d15
        /* (when >= current_when) => "New" after "current", still in this loop.
           (when <= counter_value) => "New" in next loop. */
        p_previous  = p_current;
        p_current   = p_current->p_trigger_cb->p_next;
8000b1fe:	4c f0       	ld.w %d15,[%a15]0
8000b200:	3c 0b       	j 8000b216 <osEE_counter_insert_abs_trigger+0x46>
      } else {
        work_not_done = OSEE_FALSE;
      }
    } else {
      /* "Current" belong to next counter-loop */
      if ((when <= counter_value) && (when >= current_when)) {
8000b202:	0b 24 50 21 	ge.u %d2,%d4,%d2
8000b206:	26 62       	and %d2,%d6
8000b208:	76 26       	jz %d2,8000b214 <osEE_counter_insert_abs_trigger+0x44>
8000b20a:	60 f3       	mov.a %a3,%d15
        /* (when <= counter_value) => "New" in the next counter-loop.
         * &&
         * (when >= current_when) => "New" after "current" */
        p_previous  = p_current;
        p_current   = p_current->p_trigger_cb->p_next;
8000b20c:	4c f0       	ld.w %d15,[%a15]0
8000b20e:	3c 04       	j 8000b216 <osEE_counter_insert_abs_trigger+0x46>
        /* (when >= current_when) => "New" after "current", still in this loop.
           (when <= counter_value) => "New" in next loop. */
        p_previous  = p_current;
        p_current   = p_current->p_trigger_cb->p_next;
      } else {
        work_not_done = OSEE_FALSE;
8000b210:	02 73       	mov %d3,%d7
8000b212:	3c 02       	j 8000b216 <osEE_counter_insert_abs_trigger+0x46>
         * &&
         * (when >= current_when) => "New" after "current" */
        p_previous  = p_current;
        p_current   = p_current->p_trigger_cb->p_next;
      } else {
        work_not_done = OSEE_FALSE;
8000b214:	02 73       	mov %d3,%d7
    work_not_done = OSEE_TRUE;

  /* Update Trigger Status */
  p_trigger_db->p_trigger_cb->when   = when;

  while ((p_current != NULL) && work_not_done) {
8000b216:	8b 0f 20 22 	ne %d2,%d15,0
8000b21a:	8b 03 20 24 	and.ne %d2,%d3,0
8000b21e:	df 02 e6 ff 	jne %d2,0,8000b1ea <osEE_counter_insert_abs_trigger+0x1a>
        work_not_done = OSEE_FALSE;
      }
    }
  }

  if (p_previous != NULL) {
8000b222:	bc 34       	jz.a %a3,8000b22a <osEE_counter_insert_abs_trigger+0x5a>
    p_previous->p_trigger_cb->p_next  = p_trigger_db;
8000b224:	cc 30       	ld.a %a15,[%a3]0
8000b226:	e8 05       	st.a [%a15]0,%a5
8000b228:	3c 02       	j 8000b22c <osEE_counter_insert_abs_trigger+0x5c>
  } else {
    p_counter_cb->trigger_queue       = p_trigger_db;
8000b22a:	f4 25       	st.a [%a2],%a5
  }

  p_trigger_db->p_trigger_cb->p_next = p_current;
8000b22c:	cc 50       	ld.a %a15,[%a5]0
8000b22e:	68 0f       	st.w [%a15]0,%d15
8000b230:	00 90       	ret 

8000b232 <osEE_counter_insert_rel_trigger>:
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db,
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA) p_trigger_db,
  VAR(TickType, AUTOMATIC)                       delta
)
{
8000b232:	40 ae       	mov.aa %a14,%sp
{
  VAR(TickType, AUTOMATIC) when;
  CONSTP2CONST(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb    = p_counter_db->p_counter_cb;
  CONST(TickType, AUTOMATIC)
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
8000b234:	19 42 04 00 	ld.w %d2,[%a4]4
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;
8000b238:	cc 40       	ld.a %a15,[%a4]0
8000b23a:	4c f1       	ld.w %d15,[%a15]4

  if ((maxallowedvalue - delta) >= value) {
8000b23c:	0b 42 80 50 	sub %d5,%d2,%d4
8000b240:	46 02       	not %d2
    when = value + delta;
  } else {
    when = delta - (maxallowedvalue - value) - 1U;
8000b242:	42 f2       	add %d2,%d15
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;

  if ((maxallowedvalue - delta) >= value) {
    when = value + delta;
8000b244:	12 43       	add %d3,%d15,%d4
8000b246:	42 24       	add %d4,%d2
8000b248:	0b f5 30 f1 	lt.u %d15,%d5,%d15
  osEE_counter_insert_abs_trigger(p_counter_db, p_trigger_db,
8000b24c:	6a 34       	cmovn %d4,%d15,%d3
8000b24e:	6d ff c1 ff 	call 8000b1d0 <osEE_counter_insert_abs_trigger>
8000b252:	00 90       	ret 

8000b254 <osEE_counter_cancel_trigger>:
  osEE_counter_cancel_trigger
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db,
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA) p_trigger_db
)
{
8000b254:	40 ae       	mov.aa %a14,%sp
8000b256:	80 53       	mov.d %d3,%a5
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb  = p_counter_db->p_counter_cb;
8000b258:	cc 40       	ld.a %a15,[%a4]0
  CONSTP2CONST(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb  = p_trigger_db->p_trigger_cb;
8000b25a:	d4 52       	ld.a %a2,[%a5]
  P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_current     = p_counter_cb->trigger_queue;
8000b25c:	4c f0       	ld.w %d15,[%a15]0

  if (p_current == p_trigger_db) {
8000b25e:	7e 34       	jne %d15,%d3,8000b266 <osEE_counter_cancel_trigger+0x12>
    /* The trigger to be removed is the first one in the queue */
    p_counter_cb->trigger_queue = p_trigger_cb->p_next;
8000b260:	4c 20       	ld.w %d15,[%a2]0
8000b262:	68 0f       	st.w [%a15]0,%d15
8000b264:	00 90       	ret 
  } else {
    P2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA) p_previous;
    do {
      p_previous = p_current;
      p_current  = p_current->p_trigger_cb->p_next;
8000b266:	60 f3       	mov.a %a3,%d15
8000b268:	cc 30       	ld.a %a15,[%a3]0
8000b26a:	4c f0       	ld.w %d15,[%a15]0
    } while ((p_current != NULL) && (p_current != p_trigger_db));
8000b26c:	8b 0f 20 42 	ne %d4,%d15,0
8000b270:	0b 3f 10 21 	ne %d2,%d15,%d3
8000b274:	8b 0f 20 24 	and.ne %d2,%d15,0
8000b278:	df 02 f7 ff 	jne %d2,0,8000b266 <osEE_counter_cancel_trigger+0x12>

    if (p_current != NULL) {
8000b27c:	76 43       	jz %d4,8000b282 <osEE_counter_cancel_trigger+0x2e>
      /* Remove p_trigger_db from the list */
      p_previous->p_trigger_cb->p_next = p_trigger_cb->p_next;
8000b27e:	4c 20       	ld.w %d15,[%a2]0
8000b280:	68 0f       	st.w [%a15]0,%d15
8000b282:	00 90       	ret 

8000b284 <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
8000b284:	40 ae       	mov.aa %a14,%sp
8000b286:	20 10       	sub.a %sp,16
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
8000b288:	d4 43       	ld.a %a3,[%a4]
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b28a:	40 95       	mov.aa %a5,%a9
    CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
      p_cdb = osEE_get_curr_core();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
8000b28c:	19 34 04 00 	ld.w %d4,[%a3]4
8000b290:	4c 41       	ld.w %d15,[%a4]4
8000b292:	3f f4 06 80 	jlt.u %d4,%d15,8000b29e <osEE_counter_increment+0x1a>
      counter_value       = 0U;
      p_counter_cb->value = 0U;
8000b296:	82 0f       	mov %d15,0
8000b298:	6c 31       	st.w [%a3]4,%d15
      p_cdb = osEE_get_curr_core();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value       = 0U;
8000b29a:	82 04       	mov %d4,0
8000b29c:	3c 04       	j 8000b2a4 <osEE_counter_increment+0x20>
      p_counter_cb->value = 0U;
    } else {
      ++p_counter_cb->value;
8000b29e:	c2 14       	add %d4,1
8000b2a0:	59 34 04 00 	st.w [%a3]4,%d4
 *  \param [in] p_cdb The core to lock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_lock(p_cdb->p_lock);
8000b2a4:	cc 54       	ld.a %a15,[%a5]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b2a6:	82 12       	mov %d2,1
8000b2a8:	82 03       	mov %d3,0
8000b2aa:	0b 23 10 68 	mov %e6,%d3,%d2
8000b2ae:	49 f6 c0 08 	cmpswap.w [%a15]0,%e6
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b2b2:	df 06 fa ff 	jne %d6,0,8000b2a6 <osEE_counter_increment+0x22>
            to not have nested critical sections.
            To handle possible races due to cycling triggers a state
            protocol have been implemented. */
    osEE_lock_core(p_cdb);

    p_triggered_db = p_counter_cb->trigger_queue;
8000b2b6:	d4 3c       	ld.a %a12,[%a3]

    if (p_triggered_db != NULL) {
8000b2b8:	bd 0c 89 00 	jz.a %a12,8000b3ca <osEE_counter_increment+0x146>
      P2CONST(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
8000b2bc:	cc c0       	ld.a %a15,[%a12]0
8000b2be:	4c f1       	ld.w %d15,[%a15]4
8000b2c0:	40 c2       	mov.aa %a2,%a12
          /* Now I will use previous to hold the previous checked alarm */
          CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
            p_current_cb = p_current->p_trigger_cb;
          p_previous = p_current;
          /* Set this Trigger as Expired */
          p_current_cb->status = OSEE_TRIGGER_EXPIRED;
8000b2c2:	82 33       	mov %d3,3

    if (p_triggered_db != NULL) {
      P2CONST(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
8000b2c4:	3e 43       	jeq %d15,%d4,8000b2ca <osEE_counter_increment+0x46>
8000b2c6:	3c 7c       	j 8000b3be <osEE_counter_increment+0x13a>
          CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
            p_current_cb = p_current->p_trigger_cb;
          p_previous = p_current;
          /* Set this Trigger as Expired */
          p_current_cb->status = OSEE_TRIGGER_EXPIRED;
          p_current = p_current_cb->p_next;
8000b2c8:	40 f2       	mov.aa %a2,%a15
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
            p_current_cb = p_current->p_trigger_cb;
8000b2ca:	cc 20       	ld.a %a15,[%a2]0
          p_previous = p_current;
          /* Set this Trigger as Expired */
          p_current_cb->status = OSEE_TRIGGER_EXPIRED;
8000b2cc:	28 83       	st.b [%a15]8,%d3
          p_current = p_current_cb->p_next;
8000b2ce:	c8 0f       	ld.a %a15,[%a15]0
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
8000b2d0:	bc f6       	jz.a %a15,8000b2dc <osEE_counter_increment+0x58>
8000b2d2:	c8 06       	ld.a %a6,[%a15]0
8000b2d4:	19 62 04 00 	ld.w %d2,[%a6]4
            p_current_cb = p_current->p_trigger_cb;
          p_previous = p_current;
          /* Set this Trigger as Expired */
          p_current_cb->status = OSEE_TRIGGER_EXPIRED;
          p_current = p_current_cb->p_next;
        } while ((p_current != NULL) &&
8000b2d8:	5f 2f f8 7f 	jeq %d15,%d2,8000b2c8 <osEE_counter_increment+0x44>
8000b2dc:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
8000b2e0:	d4 22       	ld.a %a2,[%a2]
8000b2e2:	82 0f       	mov %d15,0
8000b2e4:	6c 20       	st.w [%a2]0,%d15
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
8000b2e6:	ec 30       	st.a [%a3]0,%a15
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b2e8:	cc 54       	ld.a %a15,[%a5]16
8000b2ea:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b2ee:	68 0f       	st.w [%a15]0,%d15
  osEE_handle_action
(
  P2VAR(OsEE_action, AUTOMATIC, OS_APPL_CONST) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev = E_OK;
8000b2f0:	82 0a       	mov %d10,0
  switch (p_action->type) {
8000b2f2:	7b 10 00 b8 	movh %d11,32769
8000b2f6:	1b cb 31 bb 	addi %d11,%d11,-19684

      p_sn = osEE_task_event_set_mask(p_tdb, mask, &ev);

      if (p_sn != NULL) {
        /* Release the TASK (and the SN) */
        (void)osEE_scheduler_task_unblocked(osEE_get_kernel(), p_sn);
8000b2fa:	91 00 00 f8 	movh.a %a15,32768
8000b2fe:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
        osEE_trigger_get_alarm_db(p_trigger_to_be_handled_db)
      )->cycle;
    if (cycle > 0U) {
      /* Reinsert the trigger in timer wheel as relative with delta equal to
         cycle */
      p_trigger_to_be_handled_cb->status = OSEE_TRIGGER_ACTIVE;
8000b302:	82 2e       	mov %d14,2
8000b304:	82 0c       	mov %d12,0
#endif /* OSEE_HAS_ALARMS || OSEE_HAS_SCHEDULE_TABLES */

          /* Prepare next trigger to be handled here, before actually handle
           * the current one, otherwise cycling triggers will mess with the
           * list of triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
8000b306:	d4 c2       	ld.a %a2,[%a12]
8000b308:	54 2d       	ld.w %d13,[%a2]
  osEE_handle_action
(
  P2VAR(OsEE_action, AUTOMATIC, OS_APPL_CONST) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev = E_OK;
8000b30a:	e9 ea ff ff 	st.b [%a14]-1,%d10
  switch (p_action->type) {
8000b30e:	39 cf 18 00 	ld.bu %d15,[%a12]24
8000b312:	ff 4f 32 80 	jge.u %d15,4,8000b376 <osEE_counter_increment+0xf2>
8000b316:	60 b3       	mov.a %a3,%d11
8000b318:	90 32       	addsc.a %a2,%a3,%d15,2
8000b31a:	dc 02       	ji %a2
8000b31c:	1d 00 08 00 	j 8000b32c <osEE_counter_increment+0xa8>
8000b320:	1d 00 14 00 	j 8000b348 <osEE_counter_increment+0xc4>
8000b324:	1d 00 20 00 	j 8000b364 <osEE_counter_increment+0xe0>
8000b328:	1d 00 23 00 	j 8000b36e <osEE_counter_increment+0xea>
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb     = p_action->param.p_tdb;
8000b32c:	99 cd 0c 00 	ld.a %a13,[%a12]12

      ev = osEE_task_activated(p_tdb);
8000b330:	40 d4       	mov.aa %a4,%a13
8000b332:	6d ff 33 fd 	call 8000ad98 <osEE_task_activated>
8000b336:	e9 e2 ff ff 	st.b [%a14]-1,%d2
      if (ev == E_OK) {
8000b33a:	df 02 1e 80 	jne %d2,0,8000b376 <osEE_counter_increment+0xf2>
        (void)osEE_scheduler_task_insert(osEE_get_kernel(), p_tdb);
8000b33e:	40 f4       	mov.aa %a4,%a15
8000b340:	40 d5       	mov.aa %a5,%a13
8000b342:	6d ff 10 fe 	call 8000af62 <osEE_scheduler_task_insert>
8000b346:	3c 18       	j 8000b376 <osEE_counter_increment+0xf2>
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
      CONST(EventMaskType, AUTOMATIC)
        mask = p_action->param.mask;

      p_sn = osEE_task_event_set_mask(p_tdb, mask, &ev);
8000b348:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000b34c:	19 c4 14 00 	ld.w %d4,[%a12]20
8000b350:	d9 e5 ff ff 	lea %a5,[%a14]-1
8000b354:	6d ff 51 fd 	call 8000adf6 <osEE_task_event_set_mask>

      if (p_sn != NULL) {
8000b358:	bc 2f       	jz.a %a2,8000b376 <osEE_counter_increment+0xf2>
        /* Release the TASK (and the SN) */
        (void)osEE_scheduler_task_unblocked(osEE_get_kernel(), p_sn);
8000b35a:	40 f4       	mov.aa %a4,%a15
8000b35c:	40 25       	mov.aa %a5,%a2
8000b35e:	6d ff 4a fe 	call 8000aff2 <osEE_scheduler_task_unblocked>
8000b362:	3c 0a       	j 8000b376 <osEE_counter_increment+0xf2>
      }
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      osEE_counter_increment(p_action->param.p_counter_db);
8000b364:	99 c4 10 00 	ld.a %a4,[%a12]16
8000b368:	6d ff 8e ff 	call 8000b284 <osEE_counter_increment>
8000b36c:	3c 05       	j 8000b376 <osEE_counter_increment+0xf2>
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
8000b36e:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b372:	2d 02 00 00 	calli %a2
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b376:	40 9d       	mov.aa %a13,%a9
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE
  osEE_lock_and_get_curr_core(void)
{
  OsEE_CDB * const p_cdb = osEE_get_curr_core();

  osEE_hal_spin_lock(p_cdb->p_lock);
8000b378:	99 d2 10 00 	ld.a %a2,[%a13]16 <f0030010 <_SMALL_DATA4_+0x40028010>>
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b37c:	82 18       	mov %d8,1
8000b37e:	82 09       	mov %d9,0
8000b380:	0b 89 10 28 	mov %e2,%d9,%d8
8000b384:	49 22 c0 08 	cmpswap.w [%a2]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b388:	df 02 fa ff 	jne %d2,0,8000b37c <osEE_counter_increment+0xf8>
  );

  /* Re-enter in critical section to reinsert alarm-trigger if needed */
  p_cdb = osEE_lock_and_get_curr_core();

  p_trigger_to_be_handled_cb = p_trigger_to_be_handled_db->p_trigger_cb;
8000b38c:	d4 c2       	ld.a %a2,[%a12]

  if (p_trigger_to_be_handled_cb->status == OSEE_TRIGGER_EXPIRED) {
8000b38e:	0c 28       	ld.bu %d15,[%a2]8
8000b390:	5e 3e       	jne %d15,3,8000b3ac <osEE_counter_increment+0x128>
    CONST(TickType, AUTOMATIC) cycle = osEE_alarm_get_cb(
8000b392:	19 24 0c 00 	ld.w %d4,[%a2]12
        osEE_trigger_get_alarm_db(p_trigger_to_be_handled_db)
      )->cycle;
    if (cycle > 0U) {
8000b396:	76 49       	jz %d4,8000b3a8 <osEE_counter_increment+0x124>
      /* Reinsert the trigger in timer wheel as relative with delta equal to
         cycle */
      p_trigger_to_be_handled_cb->status = OSEE_TRIGGER_ACTIVE;
8000b398:	e9 2e 08 00 	st.b [%a2]8,%d14
      osEE_counter_insert_rel_trigger(p_counter_db,
8000b39c:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
8000b3a0:	40 c5       	mov.aa %a5,%a12
8000b3a2:	6d ff 48 ff 	call 8000b232 <osEE_counter_insert_rel_trigger>
8000b3a6:	3c 03       	j 8000b3ac <osEE_counter_increment+0x128>
        p_trigger_to_be_handled_db, cycle);
    } else {
      p_trigger_to_be_handled_cb->status = OSEE_TRIGGER_INACTIVE;
8000b3a8:	e9 2a 08 00 	st.b [%a2]8,%d10
 *  \param [in] p_cdb The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core(OsEE_CDB * const p_cdb)
{
  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b3ac:	99 d2 10 00 	ld.a %a2,[%a13]16 <f0030010 <_SMALL_DATA4_+0x40028010>>
8000b3b0:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b3b4:	74 2c       	st.w [%a2],%d12
#endif /* OSEE_HAS_ALARMS || OSEE_HAS_SCHEDULE_TABLES */

          /* Prepare next trigger to be handled here, before actually handle
           * the current one, otherwise cycling triggers will mess with the
           * list of triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
8000b3b6:	60 dc       	mov.a %a12,%d13
#elif (defined(OSEE_HAS_SCHEDULE_TABLES))
          osEE_counter_handle_st_expiry_point(p_counter_db,
            p_trigger_to_be_handled_db);
#endif /* OSEE_COUNTER_TRIGGER_TYPES elif OSEE_HAS_ALARMS elif
          OSEE_HAS_SCHEDULE_TABLES */
        } while (p_triggered_db != NULL);
8000b3b8:	bd 0c a7 ff 	jnz.a %a12,8000b306 <osEE_counter_increment+0x82>
8000b3bc:	00 90       	ret 
8000b3be:	cc 54       	ld.a %a15,[%a5]16
8000b3c0:	0d 00 80 04 	dsync 
8000b3c4:	82 0f       	mov %d15,0
8000b3c6:	68 0f       	st.w [%a15]0,%d15
8000b3c8:	00 90       	ret 
8000b3ca:	cc 54       	ld.a %a15,[%a5]16
8000b3cc:	0d 00 80 04 	dsync 
8000b3d0:	82 0f       	mov %d15,0
8000b3d2:	68 0f       	st.w [%a15]0,%d15
8000b3d4:	00 90       	ret 
	...

8000b3d8 <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
8000b3d8:	40 ae       	mov.aa %a14,%sp
8000b3da:	40 4d       	mov.aa %a13,%a4
8000b3dc:	80 5b       	mov.d %d11,%a5
8000b3de:	02 4c       	mov %d12,%d4
8000b3e0:	02 5d       	mov %d13,%d5
)
{
#if (defined(OSEE_COUNTER_TRIGGER_TYPES))
  return p_alarm_db->p_alarm_cb;
#else
  return p_alarm_db->p_trigger_cb;
8000b3e2:	d4 5c       	ld.a %a12,[%a5]
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
#if (!defined(OSEE_SINGLECORE))
  CONST(CoreIdType, AUTOMATIC)
    counter_core_id = p_counter_db->core_id;
8000b3e4:	79 4a 0c 00 	ld.b %d10,[%a4]12
 *  \param [in] core_id The core to lock	
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b3e8:	02 a4       	mov %d4,%d10
8000b3ea:	6d 00 c3 01 	call 8000b770 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000b3ee:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b3f0:	82 18       	mov %d8,1
8000b3f2:	82 09       	mov %d9,0
8000b3f4:	0b 89 10 28 	mov %e2,%d9,%d8
8000b3f8:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b3fc:	df 02 fa ff 	jne %d2,0,8000b3f0 <osEE_alarm_set_rel+0x18>
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status > OSEE_TRIGGER_CANCELED) {
8000b400:	0c c8       	ld.bu %d15,[%a12]8
    ev = E_OS_STATE;
8000b402:	82 78       	mov %d8,7
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status > OSEE_TRIGGER_CANCELED) {
8000b404:	ff 2f 22 80 	jge.u %d15,2,8000b448 <osEE_alarm_set_rel+0x70>
    ev = E_OS_STATE;
  } else if (p_trigger_cb->status == OSEE_TRIGGER_CANCELED) {
8000b408:	de 16       	jne %d15,1,8000b434 <osEE_alarm_set_rel+0x5c>
    p_alarm_cb->cycle = cycle;
8000b40a:	59 cd 0c 00 	st.w [%a12]12,%d13
{
  VAR(TickType, AUTOMATIC) when;
  CONSTP2CONST(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb    = p_counter_db->p_counter_cb;
  CONST(TickType, AUTOMATIC)
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
8000b40e:	19 d2 04 00 	ld.w %d2,[%a13]4
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;
8000b412:	cc d0       	ld.a %a15,[%a13]0
8000b414:	4c f1       	ld.w %d15,[%a15]4

  if ((maxallowedvalue - delta) >= value) {
8000b416:	0b c2 80 40 	sub %d4,%d2,%d12
8000b41a:	46 02       	not %d2
    when = value + delta;
  } else {
    when = delta - (maxallowedvalue - value) - 1U;
8000b41c:	42 f2       	add %d2,%d15
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;

  if ((maxallowedvalue - delta) >= value) {
    when = value + delta;
8000b41e:	12 c3       	add %d3,%d15,%d12
8000b420:	42 2c       	add %d12,%d2
8000b422:	0b f4 30 f1 	lt.u %d15,%d4,%d15
8000b426:	2b 3c 40 ff 	sel %d15,%d15,%d12,%d3
    /* Re-turn on the trigger, that is in handling, since is handling I'll set
       'here' when based on increment */
    p_trigger_cb->when   = osEE_counter_eval_when(p_counter_db, increment);
8000b42a:	6c c1       	st.w [%a12]4,%d15
    p_trigger_cb->status = OSEE_TRIGGER_REENABLED;
8000b42c:	82 4f       	mov %d15,4
8000b42e:	2c c8       	st.b [%a12]8,%d15

    ev = E_OK;
8000b430:	82 08       	mov %d8,0
8000b432:	3c 0b       	j 8000b448 <osEE_alarm_set_rel+0x70>
  } else {
    p_alarm_cb->cycle = cycle;
8000b434:	59 cd 0c 00 	st.w [%a12]12,%d13
    /* Turn On the Trigger */
    p_trigger_cb->status = OSEE_TRIGGER_ACTIVE;
8000b438:	82 2f       	mov %d15,2
8000b43a:	2c c8       	st.b [%a12]8,%d15
 
    osEE_counter_insert_rel_trigger(
8000b43c:	40 d4       	mov.aa %a4,%a13
8000b43e:	60 b5       	mov.a %a5,%d11
8000b440:	02 c4       	mov %d4,%d12
8000b442:	6d ff f8 fe 	call 8000b232 <osEE_counter_insert_rel_trigger>
      p_counter_db, p_trigger_db, increment
    );
 
    ev = E_OK;
8000b446:	82 08       	mov %d8,0
 *  \param [in] core_id The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b448:	02 a4       	mov %d4,%d10
8000b44a:	6d 00 93 01 	call 8000b770 <osEE_get_core>

  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b44e:	cc 24       	ld.a %a15,[%a2]16
8000b450:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b454:	82 0f       	mov %d15,0
8000b456:	68 0f       	st.w [%a15]0,%d15
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
8000b458:	02 82       	mov %d2,%d8
8000b45a:	00 90       	ret 

8000b45c <osEE_alarm_set_abs>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      start,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
8000b45c:	40 ae       	mov.aa %a14,%sp
8000b45e:	80 4b       	mov.d %d11,%a4
8000b460:	40 5d       	mov.aa %a13,%a5
8000b462:	02 4c       	mov %d12,%d4
8000b464:	02 5d       	mov %d13,%d5
)
{
#if (defined(OSEE_COUNTER_TRIGGER_TYPES))
  return p_alarm_db->p_alarm_cb;
#else
  return p_alarm_db->p_trigger_cb;
8000b466:	d4 5c       	ld.a %a12,[%a5]
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
#if (!defined(OSEE_SINGLECORE))
  CONST(CoreIdType, AUTOMATIC)
    counter_core_id = p_counter_db->core_id;
8000b468:	79 4a 0c 00 	ld.b %d10,[%a4]12
 *  \param [in] core_id The core to lock	
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b46c:	02 a4       	mov %d4,%d10
8000b46e:	6d 00 81 01 	call 8000b770 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000b472:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b474:	82 18       	mov %d8,1
8000b476:	82 09       	mov %d9,0
8000b478:	0b 89 10 28 	mov %e2,%d9,%d8
8000b47c:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b480:	df 02 fa ff 	jne %d2,0,8000b474 <osEE_alarm_set_abs+0x18>
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status > OSEE_TRIGGER_CANCELED) {
8000b484:	0c c8       	ld.bu %d15,[%a12]8
    ev = E_OS_STATE;
8000b486:	82 78       	mov %d8,7
    counter_core_id = p_counter_db->core_id;
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status > OSEE_TRIGGER_CANCELED) {
8000b488:	ff 2f 15 80 	jge.u %d15,2,8000b4b2 <osEE_alarm_set_abs+0x56>
    ev = E_OS_STATE;
  } else if (p_trigger_cb->status == OSEE_TRIGGER_CANCELED) {
8000b48c:	5e 19       	jne %d15,1,8000b49e <osEE_alarm_set_abs+0x42>
    p_alarm_cb->cycle = cycle;
8000b48e:	59 cd 0c 00 	st.w [%a12]12,%d13
    /* Re-turn on the trigger, that is in handling, since is handling I'll set
       here 'when' based on start */
    p_trigger_cb->when   = start;
8000b492:	59 cc 04 00 	st.w [%a12]4,%d12
    p_trigger_cb->status = OSEE_TRIGGER_REENABLED;
8000b496:	82 4f       	mov %d15,4
8000b498:	2c c8       	st.b [%a12]8,%d15

    ev = E_OK;
8000b49a:	82 08       	mov %d8,0
8000b49c:	3c 0b       	j 8000b4b2 <osEE_alarm_set_abs+0x56>
  } else {
    p_alarm_cb->cycle = cycle;
8000b49e:	59 cd 0c 00 	st.w [%a12]12,%d13
    /* Turn On the Trigger */
    p_trigger_cb->status = OSEE_TRIGGER_ACTIVE;
8000b4a2:	82 2f       	mov %d15,2
8000b4a4:	2c c8       	st.b [%a12]8,%d15

    osEE_counter_insert_abs_trigger(
8000b4a6:	60 b4       	mov.a %a4,%d11
8000b4a8:	40 d5       	mov.aa %a5,%a13
8000b4aa:	02 c4       	mov %d4,%d12
8000b4ac:	6d ff 92 fe 	call 8000b1d0 <osEE_counter_insert_abs_trigger>
      p_counter_db, p_trigger_db, start
    );

    ev = E_OK;
8000b4b0:	82 08       	mov %d8,0
 *  \param [in] core_id The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b4b2:	02 a4       	mov %d4,%d10
8000b4b4:	6d 00 5e 01 	call 8000b770 <osEE_get_core>

  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b4b8:	cc 24       	ld.a %a15,[%a2]16
8000b4ba:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b4be:	82 0f       	mov %d15,0
8000b4c0:	68 0f       	st.w [%a15]0,%d15
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
8000b4c2:	02 82       	mov %d2,%d8
8000b4c4:	00 90       	ret 

8000b4c6 <osEE_alarm_cancel>:
FUNC(StatusType, OS_CODE)
  osEE_alarm_cancel
(
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db
)
{
8000b4c6:	40 ae       	mov.aa %a14,%sp
8000b4c8:	40 4c       	mov.aa %a12,%a4
  VAR(StatusType, AUTOMATIC) ev;
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
8000b4ca:	d4 4d       	ld.a %a13,[%a4]
  CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
    p_counter_db = p_trigger_db->p_counter_db;
8000b4cc:	19 4b 04 00 	ld.w %d11,[%a4]4
#if (!defined(OSEE_SINGLECORE))
  CONST(CoreIdType, AUTOMATIC)
    counter_core_id = p_counter_db->core_id;
8000b4d0:	60 bf       	mov.a %a15,%d11
8000b4d2:	79 fa 0c 00 	ld.b %d10,[%a15]12
 *  \param [in] core_id The core to lock	
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b4d6:	02 a4       	mov %d4,%d10
8000b4d8:	6d 00 4c 01 	call 8000b770 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000b4dc:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b4de:	82 18       	mov %d8,1
8000b4e0:	82 09       	mov %d9,0
8000b4e2:	0b 89 10 28 	mov %e2,%d9,%d8
8000b4e6:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b4ea:	df 02 fa ff 	jne %d2,0,8000b4de <osEE_alarm_cancel+0x18>
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status <= OSEE_TRIGGER_CANCELED) {
8000b4ee:	0c d8       	ld.bu %d15,[%a13]8
    ev = E_OS_NOFUNC;
8000b4f0:	82 58       	mov %d8,5
    counter_core_id = p_counter_db->core_id;
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status <= OSEE_TRIGGER_CANCELED) {
8000b4f2:	bf 2f 0f 80 	jlt.u %d15,2,8000b510 <osEE_alarm_cancel+0x4a>
    ev = E_OS_NOFUNC;
  } else if (p_trigger_cb->status >= OSEE_TRIGGER_EXPIRED) {
8000b4f6:	bf 3f 06 80 	jlt.u %d15,3,8000b502 <osEE_alarm_cancel+0x3c>
    p_trigger_cb->status = OSEE_TRIGGER_CANCELED;
8000b4fa:	82 1f       	mov %d15,1
8000b4fc:	2c d8       	st.b [%a13]8,%d15
    ev = E_OK;
8000b4fe:	82 08       	mov %d8,0
8000b500:	3c 08       	j 8000b510 <osEE_alarm_cancel+0x4a>
  } else {
    p_trigger_cb->status = OSEE_TRIGGER_INACTIVE;
8000b502:	82 0f       	mov %d15,0
8000b504:	2c d8       	st.b [%a13]8,%d15
    osEE_counter_cancel_trigger(p_counter_db, p_trigger_db);
8000b506:	60 b4       	mov.a %a4,%d11
8000b508:	40 c5       	mov.aa %a5,%a12
8000b50a:	6d ff a5 fe 	call 8000b254 <osEE_counter_cancel_trigger>
    ev = E_OK;
8000b50e:	82 08       	mov %d8,0
 *  \param [in] core_id The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b510:	02 a4       	mov %d4,%d10
8000b512:	6d 00 2f 01 	call 8000b770 <osEE_get_core>

  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b516:	cc 24       	ld.a %a15,[%a2]16
8000b518:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b51c:	82 0f       	mov %d15,0
8000b51e:	68 0f       	st.w [%a15]0,%d15
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
8000b520:	02 82       	mov %d2,%d8
8000b522:	00 90       	ret 

8000b524 <osEE_alarm_get>:
  osEE_alarm_get
(
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  P2VAR(TickType, AUTOMATIC, OS_APPL_DATA)        p_tick
)
{
8000b524:	40 ae       	mov.aa %a14,%sp
8000b526:	80 5b       	mov.d %d11,%a5
  VAR(StatusType, AUTOMATIC) ev;
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2CONST(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
8000b528:	d4 4d       	ld.a %a13,[%a4]
  CONSTP2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)
    p_counter_db = p_trigger_db->p_counter_db;
8000b52a:	99 4c 04 00 	ld.a %a12,[%a4]4
#if (!defined(OSEE_SINGLECORE))
  CONST(CoreIdType, AUTOMATIC)
    counter_core_id = p_counter_db->core_id;
8000b52e:	79 ca 0c 00 	ld.b %d10,[%a12]12
 *  \param [in] core_id The core to lock	
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_lock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b532:	02 a4       	mov %d4,%d10
8000b534:	6d 00 1e 01 	call 8000b770 <osEE_get_core>

  osEE_hal_spin_lock(p_cdb->p_lock);
8000b538:	cc 24       	ld.a %a15,[%a2]16
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b53a:	82 18       	mov %d8,1
8000b53c:	82 09       	mov %d9,0
8000b53e:	0b 89 10 28 	mov %e2,%d9,%d8
8000b542:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
/** @brief Acquire a spin-lock, spin inside if the spin-lock is already busy.
    @param p_lock spin-lock to be acquired. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_lock(OsEE_spin_lock * p_lock)
{
  while (osEE_tc_cmpswapw(p_lock, 1U, 0U) != 0U) {
8000b546:	df 02 fa ff 	jne %d2,0,8000b53a <osEE_alarm_get+0x16>
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status <= OSEE_TRIGGER_CANCELED) {
8000b54a:	0c d8       	ld.bu %d15,[%a13]8
    ev = E_OS_NOFUNC;
8000b54c:	82 58       	mov %d8,5
    counter_core_id = p_counter_db->core_id;
/* Lock the Core Lock to whom the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status <= OSEE_TRIGGER_CANCELED) {
8000b54e:	bf 2f 14 80 	jlt.u %d15,2,8000b576 <osEE_alarm_get+0x52>
    ev = E_OS_NOFUNC;
  } else {
    *p_tick = osEE_counter_eval_delta(p_counter_db, p_trigger_cb->when);
8000b552:	19 d2 04 00 	ld.w %d2,[%a13]4
{
  VAR(TickType, AUTOMATIC) delta;
  CONSTP2CONST(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb    = p_counter_db->p_counter_cb;
  CONST(TickType, AUTOMATIC)
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
8000b556:	19 c3 04 00 	ld.w %d3,[%a12]4
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;
8000b55a:	cc c0       	ld.a %a15,[%a12]0
8000b55c:	4c f1       	ld.w %d15,[%a15]4
8000b55e:	42 23       	add %d3,%d2

  if (when > value) {
    delta = when - value;
  } else {
    delta = (maxallowedvalue - value) + when + 1U;
8000b560:	c2 13       	add %d3,1
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;

  if (when > value) {
    delta = when - value;
8000b562:	0b f2 80 40 	sub %d4,%d2,%d15
8000b566:	a2 f3       	sub %d3,%d15
8000b568:	0b 2f 50 f1 	ge.u %d15,%d15,%d2
8000b56c:	2b 43 40 ff 	sel %d15,%d15,%d3,%d4
8000b570:	60 bf       	mov.a %a15,%d11
8000b572:	68 0f       	st.w [%a15]0,%d15
    ev = E_OK;
8000b574:	82 08       	mov %d8,0
 *  \param [in] core_id The core ID to unlock
 */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_unlock_core_id(CoreIdType core_id)
{
  OsEE_CDB * const p_cdb = osEE_get_core(core_id);
8000b576:	02 a4       	mov %d4,%d10
8000b578:	6d 00 fc 00 	call 8000b770 <osEE_get_core>

  osEE_hal_spin_unlock(p_cdb->p_lock);
8000b57c:	cc 24       	ld.a %a15,[%a2]16
8000b57e:	0d 00 80 04 	dsync 
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_hal_spin_unlock(OsEE_spin_lock * p_lock)
{
  /* Commit all the changes in memory */
  osEE_tc_dsync();
  (*p_lock) = 0U;
8000b582:	82 0f       	mov %d15,0
8000b584:	68 0f       	st.w [%a15]0,%d15
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
8000b586:	02 82       	mov %d2,%d8
8000b588:	00 90       	ret 

8000b58a <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000b58a:	40 ae       	mov.aa %a14,%sp
8000b58c:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000b58e:	99 52 0c 00 	ld.a %a2,[%a5]12
8000b592:	0c 22       	ld.bu %d15,[%a2]2
8000b594:	5e 28       	jne %d15,2,8000b5a4 <osEE_change_context_from_running+0x1a>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
8000b596:	40 54       	mov.aa %a4,%a5
8000b598:	99 55 04 00 	ld.a %a5,[%a5]4
8000b59c:	c8 16       	ld.a %a6,[%a15]4
8000b59e:	6d 00 36 01 	call 8000b80a <osEE_hal_save_ctx_and_restore_ctx>
8000b5a2:	00 90       	ret 
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
8000b5a4:	40 54       	mov.aa %a4,%a5
8000b5a6:	99 55 04 00 	ld.a %a5,[%a5]4
8000b5aa:	c8 16       	ld.a %a6,[%a15]4
8000b5ac:	6d 00 4e 01 	call 8000b848 <osEE_hal_save_ctx_and_ready2stacked>
8000b5b0:	00 90       	ret 

8000b5b2 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000b5b2:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000b5b4:	cc 53       	ld.a %a15,[%a5]12
8000b5b6:	0c f2       	ld.bu %d15,[%a15]2
8000b5b8:	5e 27       	jne %d15,2,8000b5c6 <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
8000b5ba:	40 54       	mov.aa %a4,%a5
8000b5bc:	99 55 04 00 	ld.a %a5,[%a5]4
8000b5c0:	6d 00 37 01 	call 8000b82e <osEE_hal_restore_ctx>
8000b5c4:	00 90       	ret 
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
8000b5c6:	40 54       	mov.aa %a4,%a5
8000b5c8:	99 55 04 00 	ld.a %a5,[%a5]4
8000b5cc:	6d 00 50 01 	call 8000b86c <osEE_hal_ready2stacked>
8000b5d0:	00 90       	ret 

8000b5d2 <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
8000b5d2:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
8000b5d4:	99 45 04 00 	ld.a %a5,[%a4]4
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
8000b5d8:	cc 40       	ld.a %a15,[%a4]0
8000b5da:	48 03       	ld.w %d3,[%a15]0
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
8000b5dc:	cc 50       	ld.a %a15,[%a5]0
8000b5de:	3c 02       	j 8000b5e2 <osEE_idle_task_terminate+0x10>

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
8000b5e0:	60 ff       	mov.a %a15,%d15
8000b5e2:	4c f0       	ld.w %d15,[%a15]0
  } while ((p_tos != NULL) && (p_tos != p_bos));
8000b5e4:	8b 0f 20 22 	ne %d2,%d15,0
8000b5e8:	0b 3f 10 22 	and.ne %d2,%d15,%d3
8000b5ec:	df 02 fa ff 	jne %d2,0,8000b5e0 <osEE_idle_task_terminate+0xe>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
8000b5f0:	ec 50       	st.a [%a5]0,%a15

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
8000b5f2:	6d 00 1e 01 	call 8000b82e <osEE_hal_restore_ctx>
8000b5f6:	00 90       	ret 

8000b5f8 <osEE_cpu_startos>:
}
#endif /* OSEE_SINGLECORE */
#endif /* OSEE_TC_HAS_ISR1_TO_CONF */

OsEE_bool osEE_cpu_startos(void)
{
8000b5f8:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000b5fa:	4d c0 e1 ff 	mfcr %d15,$core_id
8000b5fe:	37 0f 48 30 	extr %d3,%d15,0,8
  MemSize tdb_size;
  OsEE_KDB * const p_kdb = osEE_get_kernel();
  CoreIdType const curr_core_id = osEE_get_curr_core_id();

#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_0) {
8000b602:	df 03 17 80 	jne %d3,0,8000b630 <osEE_cpu_startos+0x38>
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000b606:	3b 10 40 20 	mov %d2,1025
8000b60a:	91 40 00 ff 	movh.a %a15,61444
8000b60e:	d9 ff 00 09 	lea %a15,[%a15]-28672 <f0039000 <_SMALL_DATA4_+0x40031000>>
8000b612:	68 02       	st.w [%a15]0,%d2
8000b614:	3b 10 c0 20 	mov %d2,3073
8000b618:	91 40 00 ff 	movh.a %a15,61444
8000b61c:	d9 ff 04 09 	lea %a15,[%a15]-28668 <f0039004 <_SMALL_DATA4_+0x40031004>>
8000b620:	68 02       	st.w [%a15]0,%d2
8000b622:	3b 10 40 21 	mov %d2,5121
8000b626:	91 40 00 ff 	movh.a %a15,61444
8000b62a:	d9 ff 08 09 	lea %a15,[%a15]-28664 <f0039008 <_SMALL_DATA4_+0x40031008>>
8000b62e:	68 02       	st.w [%a15]0,%d2
#if (!defined(OSEE_SINGLECORE))
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
8000b630:	91 00 00 f8 	movh.a %a15,32768
8000b634:	d9 ff 00 40 	lea %a15,[%a15]256 <80000100 <osEE_kdb_var>>
8000b638:	c8 4f       	ld.a %a15,[%a15]16
8000b63a:	b0 ff       	add.a %a15,-1
  for (i = 0U; i < tdb_size; ++i) {
8000b63c:	bd 0f 2d 00 	jz.a %a15,8000b696 <osEE_cpu_startos+0x9e>
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000b640:	91 00 00 28 	movh.a %a2,32768
8000b644:	d9 22 00 40 	lea %a2,[%a2]256 <80000100 <osEE_kdb_var>>
8000b648:	19 24 0c 00 	ld.w %d4,[%a2]12 <8000000c <BootModeHeader0+0xc>>
8000b64c:	16 03       	and %d15,3
8000b64e:	8f bf 00 50 	sh %d5,%d15,11
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000b652:	bb f0 ff 6f 	mov.u %d6,65535
8000b656:	82 0f       	mov %d15,0
8000b658:	b0 ff       	add.a %a15,-1
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000b65a:	60 43       	mov.a %a3,%d4
8000b65c:	90 32       	addsc.a %a2,%a3,%d15,2
8000b65e:	d4 22       	ld.a %a2,[%a2]
#if (!defined(OSEE_SINGLECORE))
    if (p_tdb->orig_core_id == curr_core_id) {
8000b660:	79 22 1f 00 	ld.b %d2,[%a2]31
8000b664:	5f 32 16 80 	jne %d2,%d3,8000b690 <osEE_cpu_startos+0x98>
#endif /* !OSEE_SINGLECORE */
      if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000b668:	39 22 14 00 	ld.bu %d2,[%a2]20
8000b66c:	df 22 12 80 	jne %d2,2,8000b690 <osEE_cpu_startos+0x98>
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000b670:	b9 22 08 00 	ld.hu %d2,[%a2]8
8000b674:	5f 62 0e 00 	jeq %d2,%d6,8000b690 <osEE_cpu_startos+0x98>
8000b678:	60 24       	mov.a %a4,%d2
8000b67a:	d9 43 00 08 	lea %a3,[%a4]-32768
8000b67e:	11 43 00 3f 	addih.a %a3,%a3,61444
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000b682:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000b686:	c2 12       	add %d2,1
8000b688:	b7 82 99 23 	insert %d2,%d2,8,7,25
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
8000b68c:	a6 52       	or %d2,%d5
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000b68e:	74 32       	st.w [%a3],%d2
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
8000b690:	c2 1f       	add %d15,1
8000b692:	fd f0 e4 7f 	loop %a15,8000b65a <osEE_cpu_startos+0x62>
  return osEE_get_core(osEE_get_curr_core_id());
}
#else
OSEE_STATIC_INLINE OsEE_CDB * OSEE_ALWAYS_INLINE osEE_get_curr_core(void) {
  OsEE_CDB * p_cdb;
  osEE_tc_getareg(a9, p_cdb);
8000b696:	40 94       	mov.aa %a4,%a9
8000b698:	40 43       	mov.aa %a3,%a4
  {
    OsEE_stack * p_stack;
    OsEE_CDB   * const p_cdb = osEE_get_curr_core();

    /* number of stacks excluded the system stack which is the last one */
    MemSize const stack_number = p_cdb->chdb.stack_num - 1U;
8000b69a:	99 42 08 00 	ld.a %a2,[%a4]8 <80000008 <BootModeHeader0+0x8>>
8000b69e:	b0 f2       	add.a %a2,-1
    /* Initialize all TASK stacks */
    for (i = 0U; i < stack_number; ++i) {
8000b6a0:	bd 02 16 00 	jz.a %a2,8000b6cc <osEE_cpu_startos+0xd4>
      /* number of words to write with the fillpattern */
      MemSize const stack_words =
        (*p_cdb->chdb.p_sdb_array)[i].stack_size / sizeof(OsEE_stack);

      p_stack = (OsEE_stack *)(*p_cdb->chdb.p_sdb_array)[i].p_bos;
      for (j = 0U; j <= stack_words; ++j)
8000b6a4:	82 05       	mov %d5,0
      {
        (*p_stack) = OSEE_FILL_PATTERN;
8000b6a6:	7b 60 5a 3a 	movh %d3,42406
8000b6aa:	1b 53 5a 3a 	addi %d3,%d3,-23131
8000b6ae:	82 04       	mov %d4,0
8000b6b0:	b0 f2       	add.a %a2,-1
    /* Initialize all TASK stacks */
    for (i = 0U; i < stack_number; ++i) {
      MemSize j;
      /* number of words to write with the fillpattern */
      MemSize const stack_words =
        (*p_cdb->chdb.p_sdb_array)[i].stack_size / sizeof(OsEE_stack);
8000b6b2:	cc 30       	ld.a %a15,[%a3]0
8000b6b4:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
    MemSize const stack_number = p_cdb->chdb.stack_num - 1U;
    /* Initialize all TASK stacks */
    for (i = 0U; i < stack_number; ++i) {
      MemSize j;
      /* number of words to write with the fillpattern */
      MemSize const stack_words =
8000b6b8:	48 12       	ld.w %d2,[%a15]4
8000b6ba:	06 e2       	sh %d2,-2
        (*p_cdb->chdb.p_sdb_array)[i].stack_size / sizeof(OsEE_stack);

      p_stack = (OsEE_stack *)(*p_cdb->chdb.p_sdb_array)[i].p_bos;
8000b6bc:	c8 0f       	ld.a %a15,[%a15]0
      for (j = 0U; j <= stack_words; ++j)
8000b6be:	02 5f       	mov %d15,%d5
      {
        (*p_stack) = OSEE_FILL_PATTERN;
8000b6c0:	64 f3       	st.w [%a15+],%d3
      /* number of words to write with the fillpattern */
      MemSize const stack_words =
        (*p_cdb->chdb.p_sdb_array)[i].stack_size / sizeof(OsEE_stack);

      p_stack = (OsEE_stack *)(*p_cdb->chdb.p_sdb_array)[i].p_bos;
      for (j = 0U; j <= stack_words; ++j)
8000b6c2:	c2 1f       	add %d15,1
8000b6c4:	7f f2 fe ff 	jge.u %d2,%d15,8000b6c0 <osEE_cpu_startos+0xc8>
    OsEE_CDB   * const p_cdb = osEE_get_curr_core();

    /* number of stacks excluded the system stack which is the last one */
    MemSize const stack_number = p_cdb->chdb.stack_num - 1U;
    /* Initialize all TASK stacks */
    for (i = 0U; i < stack_number; ++i) {
8000b6c8:	c2 14       	add %d4,1
8000b6ca:	fc 24       	loop %a2,8000b6b2 <osEE_cpu_startos+0xba>
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000b6cc:	40 af       	mov.aa %a15,%sp
8000b6ce:	80 ff       	mov.d %d15,%a15
      }
    }
    /* Initialize System Stack */
    {
      OsEE_stack const * const p_curr_sp = osEE_get_SP();
      p_stack = (OsEE_stack *)
8000b6d0:	54 42       	ld.w %d2,[%a4]
8000b6d2:	19 43 08 00 	ld.w %d3,[%a4]8 <80000008 <BootModeHeader0+0x8>>
8000b6d6:	60 22       	mov.a %a2,%d2
8000b6d8:	01 23 03 f6 	addsc.a %a15,%a2,%d3,3
8000b6dc:	99 ff f8 ff 	ld.a %a15,[%a15]-8
        (*p_cdb->chdb.p_sdb_array)[(p_cdb->chdb.stack_num - 1U)].p_bos;

      while (p_stack < p_curr_sp) {
8000b6e0:	80 f2       	mov.d %d2,%a15
8000b6e2:	7f f2 0a 80 	jge.u %d2,%d15,8000b6f6 <osEE_cpu_startos+0xfe>
        (*p_stack) = OSEE_FILL_PATTERN;
8000b6e6:	7b 60 5a 2a 	movh %d2,42406
8000b6ea:	1b 52 5a 2a 	addi %d2,%d2,-23131
8000b6ee:	64 f2       	st.w [%a15+],%d2
    {
      OsEE_stack const * const p_curr_sp = osEE_get_SP();
      p_stack = (OsEE_stack *)
        (*p_cdb->chdb.p_sdb_array)[(p_cdb->chdb.stack_num - 1U)].p_bos;

      while (p_stack < p_curr_sp) {
8000b6f0:	80 f3       	mov.d %d3,%a15
8000b6f2:	3f f3 fe ff 	jlt.u %d3,%d15,8000b6ee <osEE_cpu_startos+0xf6>
    }
  }
#endif /* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */

  return osEE_std_cpu_startos();
}
8000b6f6:	82 12       	mov %d2,1
8000b6f8:	00 90       	ret 

8000b6fa <osEE_hal_sync_barrier>:
#include "ee_internal.h"

#if (!defined(OSEE_SINGLECORE))
void osEE_hal_sync_barrier(OsEE_barrier * p_bar,
  OsEE_reg const volatile * p_wait_mask, OsEE_kernel_cb p_synch_cb)
{
8000b6fa:	40 ae       	mov.aa %a14,%sp
8000b6fc:	40 4f       	mov.aa %a15,%a4
8000b6fe:	40 5d       	mov.aa %a13,%a5
8000b700:	40 6c       	mov.aa %a12,%a6
  CoreMaskType const exit_mask  = (0xFFFFFFFFU ^
    (((CoreMaskType)0x1U << OS_CORE_ID_ARR_SIZE) - 1U));

  OsEE_reg wait_mask, all_exited;

  if ((p_bar != NULL) && (p_wait_mask != NULL)) {
8000b702:	80 52       	mov.d %d2,%a5
8000b704:	80 43       	mov.d %d3,%a4
8000b706:	8b 02 20 f2 	ne %d15,%d2,0
8000b70a:	8b 03 20 f4 	and.ne %d15,%d3,0
8000b70e:	ee 05       	jnz %d15,8000b718 <osEE_hal_sync_barrier+0x1e>
8000b710:	00 90       	ret 
    /* If not all cores have left the previous use of this barrier
       wait for it. */
    while ((p_bar->value & exit_mask) != 0U) {
      if (p_synch_cb != NULL) {
8000b712:	bc c3       	jz.a %a12,8000b718 <osEE_hal_sync_barrier+0x1e>
        p_synch_cb();
8000b714:	2d 0c 00 00 	calli %a12
  OsEE_reg wait_mask, all_exited;

  if ((p_bar != NULL) && (p_wait_mask != NULL)) {
    /* If not all cores have left the previous use of this barrier
       wait for it. */
    while ((p_bar->value & exit_mask) != 0U) {
8000b718:	4c f0       	ld.w %d15,[%a15]0
8000b71a:	8f 7f c0 f1 	andn %d15,%d15,7
8000b71e:	ee fa       	jnz %d15,8000b712 <osEE_hal_sync_barrier+0x18>
        p_synch_cb();
      }
    }

    /* Set current CPU as entered */
    osEE_tc_imask_ldmst(&p_bar->value, 0x1U,
8000b720:	80 f8       	mov.d %d8,%a15
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000b722:	4d c0 e1 2f 	mfcr %d2,$core_id
8000b726:	37 02 48 20 	extr %d2,%d2,0,8
/** Insert LDMST instruction. Note that all operands must be word-aligned. */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_imask_ldmst(OsEE_reg volatile * const p_var, OsEE_reg value,
    OsEE_reg offset, OsEE_reg width)
{
  __builtin_tricore_ldmst((volatile void *)p_var, value, offset, width);
8000b72a:	d7 10 21 22 	imask %e2,1,%d2,1
8000b72e:	49 f2 40 08 	ldmst [%a15]0,%e2
      (OsEE_reg)osEE_get_curr_core_id(), 1U);

    /* Snapshot of the wait mask */
    wait_mask = (*p_wait_mask);
8000b732:	54 d2       	ld.w %d2,[%a13]
    while ((p_bar->value & wait_mask) != wait_mask) {
8000b734:	4c f0       	ld.w %d15,[%a15]0
8000b736:	26 2f       	and %d15,%d2
8000b738:	5f f2 0a 00 	jeq %d2,%d15,8000b74c <osEE_hal_sync_barrier+0x52>
      /* Wait for all other cores/CPUs */
      if (p_synch_cb != NULL) {
8000b73c:	bc c3       	jz.a %a12,8000b742 <osEE_hal_sync_barrier+0x48>
        p_synch_cb();
8000b73e:	2d 0c 00 00 	calli %a12
      }
      /* Refresh the snapshot of the wait mask */
      wait_mask = (*p_wait_mask);
8000b742:	4c d0       	ld.w %d15,[%a13]0
    osEE_tc_imask_ldmst(&p_bar->value, 0x1U,
      (OsEE_reg)osEE_get_curr_core_id(), 1U);

    /* Snapshot of the wait mask */
    wait_mask = (*p_wait_mask);
    while ((p_bar->value & wait_mask) != wait_mask) {
8000b744:	48 02       	ld.w %d2,[%a15]0
8000b746:	26 f2       	and %d2,%d15
8000b748:	5f f2 fa ff 	jne %d2,%d15,8000b73c <osEE_hal_sync_barrier+0x42>
8000b74c:	4d c0 e1 2f 	mfcr %d2,$core_id

    all_exited = (wait_mask << OS_CORE_ID_ARR_SIZE) | wait_mask;

    /* Set current CPU as exited */
    osEE_tc_imask_ldmst(&p_bar->value, 0x1U,
      ((OsEE_reg)osEE_get_curr_core_id() + (OsEE_reg)OS_CORE_ID_ARR_SIZE), 1U);
8000b750:	37 02 48 20 	extr %d2,%d2,0,8
    } 

    all_exited = (wait_mask << OS_CORE_ID_ARR_SIZE) | wait_mask;

    /* Set current CPU as exited */
    osEE_tc_imask_ldmst(&p_bar->value, 0x1U,
8000b754:	c2 32       	add %d2,3
8000b756:	d7 10 21 22 	imask %e2,1,%d2,1
8000b75a:	60 8f       	mov.a %a15,%d8
8000b75c:	49 f2 40 08 	ldmst [%a15]0,%e2
      }
      /* Refresh the snapshot of the wait mask */
      wait_mask = (*p_wait_mask);
    } 

    all_exited = (wait_mask << OS_CORE_ID_ARR_SIZE) | wait_mask;
8000b760:	8f 3f 00 40 	sh %d4,%d15,3
#else
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_cmpswapw(
  OsEE_reg volatile * const p_var, OsEE_reg new_val, OsEE_reg expected_val
)
{
  return __builtin_tricore_cmpswapw((volatile void *)p_var, new_val,
8000b764:	d2 02       	mov %e2,0
8000b766:	0f f4 a0 30 	or %d3,%d4,%d15
8000b76a:	49 f2 c0 08 	cmpswap.w [%a15]0,%e2
8000b76e:	00 90       	ret 

8000b770 <osEE_get_core>:
    /* Try to reset the barrier */
    (void)osEE_tc_cmpswapw(&p_bar->value, 0U, all_exited);
  }
}

OsEE_CDB * osEE_get_core(CoreIdType core_id) {
8000b770:	40 ae       	mov.aa %a14,%sp
    case OS_CORE_ID_0:
      p_cdb = &osEE_cdb_var_core0;
    break;
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x02U)
    case OS_CORE_ID_1:
      p_cdb = &osEE_cdb_var_core1;
8000b772:	91 00 00 28 	movh.a %a2,32768
8000b776:	d9 22 18 50 	lea %a2,[%a2]344 <80000158 <osEE_cdb_var_core1>>
  }
}

OsEE_CDB * osEE_get_core(CoreIdType core_id) {
  OsEE_CDB * p_cdb;
  switch (core_id) {
8000b77a:	df 14 0f 00 	jeq %d4,1,8000b798 <osEE_get_core+0x28>
      p_cdb = &osEE_cdb_var_core1;
    break;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x02U */
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x04U)
    case OS_CORE_ID_2:
      p_cdb = &osEE_cdb_var_core2;
8000b77e:	91 00 00 28 	movh.a %a2,32768
8000b782:	d9 22 2c 40 	lea %a2,[%a2]300 <8000012c <osEE_cdb_var_core2>>
  }
}

OsEE_CDB * osEE_get_core(CoreIdType core_id) {
  OsEE_CDB * p_cdb;
  switch (core_id) {
8000b786:	df 24 09 00 	jeq %d4,2,8000b798 <osEE_get_core+0x28>
    case OS_CORE_ID_0:
      p_cdb = &osEE_cdb_var_core0;
8000b78a:	7b 00 00 f8 	movh %d15,32768
      p_cdb = &osEE_cdb_var_core6;
    break;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
    default:
      /* This can happen when we cycle on cores */
      p_cdb = NULL;
8000b78e:	1b 4f 18 f0 	addi %d15,%d15,388
8000b792:	ab 0f a0 f4 	seln %d15,%d4,%d15,0
8000b796:	60 f2       	mov.a %a2,%d15
    break;
  }

  return p_cdb;
}
8000b798:	00 90       	ret 

8000b79a <osEE_hal_start_core>:

void osEE_hal_start_core(CoreIdType core_id) {
8000b79a:	40 ae       	mov.aa %a14,%sp
  switch (core_id) {
8000b79c:	df 14 05 00 	jeq %d4,1,8000b7a6 <osEE_hal_start_core+0xc>
8000b7a0:	df 24 0d 00 	jeq %d4,2,8000b7ba <osEE_hal_start_core+0x20>
8000b7a4:	3c 15       	j 8000b7ce <osEE_hal_start_core+0x34>
    case OS_CORE_ID_0:
    /* Nothing to do in this case */
    break;
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x02U)
    case OS_CORE_ID_1:
      OSEE_TC_CORE_PC(OS_CORE_ID_1).reg = (uint32_t)OSEE_CORE1_START_ADDR;
8000b7a6:	91 40 88 ff 	movh.a %a15,63620
8000b7aa:	d9 ff c8 8f 	lea %a15,[%a15]-504 <f883fe08 <_SMALL_DATA4_+0x48837e08>>
8000b7ae:	7b 10 00 f8 	movh %d15,32769
8000b7b2:	1b 6f ac f8 	addi %d15,%d15,-30010
8000b7b6:	68 0f       	st.w [%a15]0,%d15
    break;
8000b7b8:	3c 0c       	j 8000b7d0 <osEE_hal_start_core+0x36>
#endif /* OSEE_CORE_ID_VALID_MASK & 0x02U */
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x04U)
    case OS_CORE_ID_2:
      OSEE_TC_CORE_PC(OS_CORE_ID_2).reg = (uint32_t)OSEE_CORE2_START_ADDR;
8000b7ba:	91 60 88 ff 	movh.a %a15,63622
8000b7be:	d9 ff c8 8f 	lea %a15,[%a15]-504 <f885fe08 <_SMALL_DATA4_+0x48857e08>>
8000b7c2:	7b 10 00 f8 	movh %d15,32769
8000b7c6:	1b 6f df f8 	addi %d15,%d15,-29194
8000b7ca:	68 0f       	st.w [%a15]0,%d15
    break;
8000b7cc:	3c 02       	j 8000b7d0 <osEE_hal_start_core+0x36>
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
    default:
      /* All possible masks have been handled above */
    break;
  }
  if (core_id != OS_CORE_ID_0) {
8000b7ce:	76 4c       	jz %d4,8000b7e6 <osEE_hal_start_core+0x4c>
#if (!defined(OSEE_TC_2G))
    OSEE_TC_CORE_DBGSR(core_id).bits.halt = OSEE_TC_DBGSR_RESET_HALT;
8000b7d0:	8f 14 01 40 	sh %d4,%d4,17
8000b7d4:	60 42       	mov.a %a2,%d4
8000b7d6:	d9 2f c0 4f 	lea %a15,[%a2]-768
8000b7da:	11 2f 88 ff 	addih.a %a15,%a15,63618
8000b7de:	4c f0       	ld.w %d15,[%a15]0
8000b7e0:	b7 2f 82 f0 	insert %d15,%d15,2,1,2
8000b7e4:	68 0f       	st.w [%a15]0,%d15
8000b7e6:	00 90       	ret 

8000b7e8 <osEE_tc_change_context_from_task_end>:
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000b7e8:	99 42 0c 00 	ld.a %a2,[%a4]12
static FUNC(void, OS_CODE) OSEE_NEVER_INLINE
  osEE_tc_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000b7ec:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000b7ee:	0c 22       	ld.bu %d15,[%a2]2
8000b7f0:	1e 27       	jeq %d15,2,8000b7fe <osEE_tc_change_context_from_task_end+0x16>
    osEE_tc_setareg(a4, p_to);
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
    osEE_tc_jump(osEE_hal_restore_ctx);
  } else {
    osEE_tc_setareg(a4, p_to);
8000b7f2:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000b7f4:	c8 1f       	ld.a %a15,[%a15]4
8000b7f6:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_ready2stacked);
8000b7f8:	1d 00 3a 00 	j 8000b86c <osEE_hal_ready2stacked>
8000b7fc:	00 90       	ret 
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    osEE_tc_setareg(a4, p_to);
8000b7fe:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000b800:	c8 1f       	ld.a %a15,[%a15]4
8000b802:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_restore_ctx);
8000b804:	1d 00 15 00 	j 8000b82e <osEE_hal_restore_ctx>
8000b808:	00 90       	ret 

8000b80a <osEE_hal_save_ctx_and_restore_ctx>:
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000b80a:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000b80c:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000b810:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000b812:	4c 60       	ld.w %d15,[%a6]0
8000b814:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000b818:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000b81c:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000b820:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000b822:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000b826:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the restore CTX */
  osEE_tc_jump(osEE_hal_restore_ctx);
8000b828:	1d 00 03 00 	j 8000b82e <osEE_hal_restore_ctx>
8000b82c:	00 90       	ret 

8000b82e <osEE_hal_restore_ctx>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_tdb,
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_to_scb
)
{
  OsEE_CTX  const * const p_ctx = p_to_scb->p_tos;
8000b82e:	cc 50       	ld.a %a15,[%a5]0
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000b830:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
8000b832:	4c f2       	ld.w %d15,[%a15]8
8000b834:	40 2b       	mov.aa %a11,%a2

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000b836:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000b83a:	0d 00 c0 04 	isync 
/* Set the return address back */
  osEE_tc_set_RA(p_ctx->ra);
/* Set the PCXI back */
  osEE_tc_csa_set_pcxi(pcxi);
/* Restore the previous Top of Stack */
  p_to_scb->p_tos = p_ctx->p_ctx;
8000b83e:	4c f0       	ld.w %d15,[%a15]0
8000b840:	6c 50       	st.w [%a5]0,%d15
/* Jump to Kernel Wrapper: it will be the "ret" inside
   osEE_scheduler_task_wrapper_restore at:
   1) Restore the CSA so the SP,
   2) Return at RA address, that is the address after change context calling
      site */
  osEE_tc_jump(osEE_scheduler_task_wrapper_restore);
8000b842:	1d ff 99 f9 	j 8000ab74 <osEE_scheduler_task_wrapper_restore>
8000b846:	00 90       	ret 

8000b848 <osEE_hal_save_ctx_and_ready2stacked>:
8000b848:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000b84a:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000b84e:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000b850:	4c 60       	ld.w %d15,[%a6]0
8000b852:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000b856:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000b85a:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000b85e:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000b860:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000b864:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the ready to stacked */
  osEE_tc_jump(osEE_hal_ready2stacked);
8000b866:	1d 00 03 00 	j 8000b86c <osEE_hal_ready2stacked>
8000b86a:	00 90       	ret 

8000b86c <osEE_hal_ready2stacked>:
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000b86c:	cc 50       	ld.a %a15,[%a5]0
8000b86e:	40 fa       	mov.aa %sp,%a15
  __asm__ volatile ("isync" : : : "memory");
}

/** The svlcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_svlcx(void) {
  __asm__ volatile ("svlcx" : : : "memory");
8000b870:	0d 00 00 02 	svlcx 
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000b874:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000b876:	d9 f2 f0 ff 	lea %a2,[%a15]-16
8000b87a:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000b87c:	4c 50       	ld.w %d15,[%a5]0
8000b87e:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000b882:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000b886:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000b88a:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000b88c:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000b890:	f4 52       	st.a [%a5],%a2
   N.B. The RA saved in this context is not useful, but I prefer to use one
        save ctx code for all the cases for code readability, instead using an
        optimized one for this case */
  osEE_tc_save_ctx(p_to_scb);
/* Jump to Kernel Wrapper */
  osEE_tc_jump(osEE_scheduler_task_wrapper_run);
8000b892:	1d ff 84 f9 	j 8000ab9a <osEE_scheduler_task_wrapper_run>
8000b896:	00 90       	ret 

8000b898 <osEE_tc_change_context_from_isr2_end>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
/* Reset PSW Call Depth Counter, so I can force a RFE */
  osEE_tc_set_csfr(OSEE_CSFR_PSW,
8000b898:	4d 40 e0 ff 	mfcr %d15,$psw
8000b89c:	8f ff c7 f1 	andn %d15,%d15,127
8000b8a0:	cd 4f e0 0f 	mtcr $psw,%d15
8000b8a4:	0d 00 c0 04 	isync 
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000b8a8:	91 10 00 f8 	movh.a %a15,32769
8000b8ac:	d9 ff 68 fb 	lea %a15,[%a15]-18456 <8000b7e8 <osEE_tc_change_context_from_task_end>>
8000b8b0:	40 fb       	mov.aa %a11,%a15
  __asm__ volatile ("rslcx" : : : "memory");
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
8000b8b2:	00 80       	rfe 
8000b8b4:	00 90       	ret 

8000b8b6 <osEE_hal_terminate_ctx>:
  osEE_hal_terminate_ctx
(
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_term_scb,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
8000b8b6:	20 08       	sub.a %sp,8

/* Returns the first CSA in the Free Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_fcx(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_FCX);
8000b8b8:	4d 80 e3 2f 	mfcr %d2,$fcx

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000b8bc:	4d 00 e0 ff 	mfcr %d15,$pcxi
    OsEE_csa_link fcx                 = osEE_tc_csa_get_fcx();
/* Obtain Previous CSA list head, That is the head of the to_free_queue
   (will be new FCX) */
    OsEE_csa_link to_free_queue_head  = osEE_tc_csa_get_pcxi();
/* Get the the of the CSA list to be freed */
    OsEE_csa_link to_free_queue_tail  = p_term_scb->p_tos->pcxi;
8000b8c0:	cc 40       	ld.a %a15,[%a4]0
8000b8c2:	48 23       	ld.w %d3,[%a15]8
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000b8c4:	b9 f4 08 00 	ld.hu %d4,[%a15]8
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000b8c8:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000b8cc:	06 64       	sh %d4,6
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000b8ce:	8f c3 01 30 	sh %d3,%d3,28
8000b8d2:	a6 43       	or %d3,%d4
8000b8d4:	60 3f       	mov.a %a15,%d3
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    l_next = p_csa->l_next;
  } else {
    l_next.reg = 0U;
8000b8d6:	82 03       	mov %d3,0
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE
  osEE_tc_csa_get_next(OsEE_csa_link l_csa_at)
{
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
8000b8d8:	bc f3       	jz.a %a15,8000b8de <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
8000b8da:	48 03       	ld.w %d3,[%a15]0
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_next(OsEE_csa_link l_csa_at, OsEE_csa_link l_next)
{
  OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    p_csa->l_next = l_next;
8000b8dc:	68 02       	st.w [%a15]0,%d2

/* Set the first CSA in the Free Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_fcx(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_FCX, l_csa.reg);
8000b8de:	cd 8f e3 0f 	mtcr $fcx,%d15
8000b8e2:	0d 00 c0 04 	isync 

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000b8e6:	cd 03 e0 0f 	mtcr $pcxi,%d3
8000b8ea:	0d 00 c0 04 	isync 
   since a TASK, not yet started with higher priority of the stacked ones,
   could have been activated. */
   osEE_tc_set_RA(p_term_scb->p_tos->ra);
#endif /* 0 */
/* Pop ERIKA's context */
   p_term_scb->p_tos = p_term_scb->p_tos->p_ctx;
8000b8ee:	cc 40       	ld.a %a15,[%a4]0
8000b8f0:	4c f0       	ld.w %d15,[%a15]0
8000b8f2:	6c 40       	st.w [%a4]0,%d15
   "osEE_hal_ready2stacked" PCXI. */
  {
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
8000b8f4:	91 00 00 48 	movh.a %a4,32768
8000b8f8:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <osEE_kdb_var>>
8000b8fc:	d9 a5 04 00 	lea %a5,[%sp]4 <80000100 <osEE_kdb_var>>
8000b900:	6d ff cb fb 	call 8000b096 <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
8000b904:	d8 01       	ld.a %a15,[%sp]4
8000b906:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000b90a:	1e 25       	jeq %d15,2,8000b914 <osEE_hal_terminate_ctx+0x5e>
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
    } else {
/* Prepare to jump to osEE_tc_change_context_from_task_end */
      osEE_tc_setareg(a4, p_to);
8000b90c:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
8000b90e:	1d ff 6d ff 	j 8000b7e8 <osEE_tc_change_context_from_task_end>
    }
  }
/* Fake infinite loop: to turn off 'noreturn' function does return warning */
  for(;;) {
    ;
  }
8000b912:	3c 00       	j 8000b912 <osEE_hal_terminate_ctx+0x5c>

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
8000b914:	40 24       	mov.aa %a4,%a2
8000b916:	6d ff c1 ff 	call 8000b898 <osEE_tc_change_context_from_isr2_end>
8000b91a:	3c fc       	j 8000b912 <osEE_hal_terminate_ctx+0x5c>

8000b91c <__lshrdi3>:
8000b91c:	6f 56 0c 80 	jnz.t %d6,5,8000b934 <__lshrdi3+0x18>
8000b920:	8b 06 02 71 	rsub %d7,%d6,32
8000b924:	32 56       	rsub %d6
8000b926:	17 45 80 27 	dextr %d2,%d5,%d4,%d7
8000b92a:	0f 65 00 30 	sh %d3,%d5,%d6
8000b92e:	2b 42 40 26 	sel %d2,%d6,%d2,%d4
8000b932:	00 90       	ret 
8000b934:	8b 06 02 60 	add %d6,%d6,32
8000b938:	32 56       	rsub %d6
8000b93a:	0f 65 00 20 	sh %d2,%d5,%d6
8000b93e:	82 03       	mov %d3,0
8000b940:	00 90       	ret 

8000b942 <__floatundisf>:
8000b942:	7b 00 02 20 	movh %d2,32
8000b946:	0b 25 30 f1 	lt.u %d15,%d5,%d2
8000b94a:	02 4a       	mov %d10,%d4
8000b94c:	02 54       	mov %d4,%d5
8000b94e:	ee 08       	jnz %d15,8000b95e <__floatundisf+0x1c>
8000b950:	b7 0a 95 f5 	insert %d15,%d10,0,11,21
8000b954:	6e 05       	jz %d15,8000b95e <__floatundisf+0x1c>
8000b956:	b7 0a 0b a0 	insert %d10,%d10,0,0,11
8000b95a:	b7 fa 81 a5 	insert %d10,%d10,15,11,1
8000b95e:	6d 00 ea 02 	call 8000bf32 <__floatunsidf>
8000b962:	0b 23 10 48 	mov %e4,%d3,%d2
8000b966:	82 06       	mov %d6,0
8000b968:	7b 00 1f 74 	movh %d7,16880
8000b96c:	6d 00 34 01 	call 8000bbd4 <__muldf3>
8000b970:	02 a4       	mov %d4,%d10
8000b972:	0b 23 10 88 	mov %e8,%d3,%d2
8000b976:	6d 00 de 02 	call 8000bf32 <__floatunsidf>
8000b97a:	0b 89 10 48 	mov %e4,%d9,%d8
8000b97e:	0b 23 10 68 	mov %e6,%d3,%d2
8000b982:	6d 00 ed 00 	call 8000bb5c <__adddf3>
8000b986:	0b 23 10 48 	mov %e4,%d3,%d2
8000b98a:	1d 00 b6 02 	j 8000bef6 <__truncdfsf2>

8000b98e <__extendsfdf2>:
8000b98e:	20 20       	sub.a %sp,32
8000b990:	d9 a4 20 00 	lea %a4,[%sp]32
8000b994:	89 44 2c f5 	st.w [+%a4]-20,%d4
8000b998:	d9 a5 10 00 	lea %a5,[%sp]16
8000b99c:	6d 00 f1 02 	call 8000bf7e <__unpack_f>
8000b9a0:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000b9a4:	39 a4 10 00 	ld.bu %d4,[%sp]16
8000b9a8:	8f e2 1f f0 	sh %d15,%d2,-2
8000b9ac:	8f e2 01 20 	sh %d2,%d2,30
8000b9b0:	74 a2       	st.w [%sp],%d2
8000b9b2:	78 01       	st.w [%sp]4,%d15
8000b9b4:	19 a5 14 00 	ld.w %d5,[%sp]20
8000b9b8:	19 a6 18 00 	ld.w %d6,[%sp]24
8000b9bc:	1d 00 8e 02 	j 8000bed8 <__make_dp>

8000b9c0 <_fpadd_parts>:
8000b9c0:	0c 40       	ld.bu %d15,[%a4]0
8000b9c2:	40 42       	mov.aa %a2,%a4
8000b9c4:	bf 2f cb 80 	jlt.u %d15,2,8000bb5a <_fpadd_parts+0x19a>
8000b9c8:	14 52       	ld.bu %d2,[%a5]
8000b9ca:	40 52       	mov.aa %a2,%a5
8000b9cc:	bf 22 c7 80 	jlt.u %d2,2,8000bb5a <_fpadd_parts+0x19a>
8000b9d0:	5e 4e       	jne %d15,4,8000b9ec <_fpadd_parts+0x2c>
8000b9d2:	40 42       	mov.aa %a2,%a4
8000b9d4:	df 42 c3 80 	jne %d2,4,8000bb5a <_fpadd_parts+0x19a>
8000b9d8:	19 42 04 00 	ld.w %d2,[%a4]4
8000b9dc:	4c 51       	ld.w %d15,[%a5]4
8000b9de:	5f f2 be 00 	jeq %d2,%d15,8000bb5a <_fpadd_parts+0x19a>
8000b9e2:	91 00 00 f8 	movh.a %a15,32768
8000b9e6:	d9 f2 c4 c0 	lea %a2,[%a15]3844 <80000f04 <__thenan_df>>
8000b9ea:	00 90       	ret 
8000b9ec:	40 52       	mov.aa %a2,%a5
8000b9ee:	df 42 b6 00 	jeq %d2,4,8000bb5a <_fpadd_parts+0x19a>
8000b9f2:	df 22 11 80 	jne %d2,2,8000ba14 <_fpadd_parts+0x54>
8000b9f6:	40 42       	mov.aa %a2,%a4
8000b9f8:	df 2f b1 80 	jne %d15,2,8000bb5a <_fpadd_parts+0x19a>
8000b9fc:	40 63       	mov.aa %a3,%a6
8000b9fe:	a0 4f       	mov.a %a15,4
8000ba00:	44 4f       	ld.w %d15,[%a4+]
8000ba02:	64 3f       	st.w [%a3+],%d15
8000ba04:	fc fe       	loop %a15,8000ba00 <_fpadd_parts+0x40>
8000ba06:	4c 21       	ld.w %d15,[%a2]4
8000ba08:	19 52 04 00 	ld.w %d2,[%a5]4
8000ba0c:	40 62       	mov.aa %a2,%a6
8000ba0e:	26 2f       	and %d15,%d2
8000ba10:	6c 61       	st.w [%a6]4,%d15
8000ba12:	00 90       	ret 
8000ba14:	40 52       	mov.aa %a2,%a5
8000ba16:	df 2f a2 00 	jeq %d15,2,8000bb5a <_fpadd_parts+0x19a>
8000ba1a:	4c 42       	ld.w %d15,[%a4]8
8000ba1c:	19 52 08 00 	ld.w %d2,[%a5]8
8000ba20:	40 6f       	mov.aa %a15,%a6
8000ba22:	52 23       	sub %d3,%d15,%d2
8000ba24:	0b 30 c0 c1 	abs %d12,%d3
8000ba28:	8b 0c 84 42 	ge %d4,%d12,64
8000ba2c:	40 5c       	mov.aa %a12,%a5
8000ba2e:	40 4d       	mov.aa %a13,%a4
8000ba30:	09 4a 4c 09 	ld.d %e10,[%a4]12
8000ba34:	09 58 4c 09 	ld.d %e8,[%a5]12
8000ba38:	df 04 35 80 	jne %d4,0,8000baa2 <_fpadd_parts+0xe2>
8000ba3c:	bf 13 19 00 	jlt %d3,1,8000ba6e <_fpadd_parts+0xae>
8000ba40:	0b 89 10 48 	mov %e4,%d9,%d8
8000ba44:	02 c6       	mov %d6,%d12
8000ba46:	6d ff 6b ff 	call 8000b91c <__lshrdi3>
8000ba4a:	d2 14       	mov %e4,1
8000ba4c:	02 c6       	mov %d6,%d12
8000ba4e:	02 2e       	mov %d14,%d2
8000ba50:	02 3d       	mov %d13,%d3
8000ba52:	6d 00 89 02 	call 8000bf64 <__ashldi3>
8000ba56:	8b f2 9f 20 	addx %d2,%d2,-1
8000ba5a:	8b f3 bf 30 	addc %d3,%d3,-1
8000ba5e:	26 82       	and %d2,%d8
8000ba60:	26 93       	and %d3,%d9
8000ba62:	a6 23       	or %d3,%d2
8000ba64:	02 e8       	mov %d8,%d14
8000ba66:	8b 03 00 85 	or.ne %d8,%d3,0
8000ba6a:	02 d9       	mov %d9,%d13
8000ba6c:	3c 21       	j 8000baae <_fpadd_parts+0xee>
8000ba6e:	df 03 20 00 	jeq %d3,0,8000baae <_fpadd_parts+0xee>
8000ba72:	0b ab 10 48 	mov %e4,%d11,%d10
8000ba76:	02 c6       	mov %d6,%d12
8000ba78:	6d ff 52 ff 	call 8000b91c <__lshrdi3>
8000ba7c:	d2 14       	mov %e4,1
8000ba7e:	02 c6       	mov %d6,%d12
8000ba80:	02 2e       	mov %d14,%d2
8000ba82:	02 3d       	mov %d13,%d3
8000ba84:	6d 00 70 02 	call 8000bf64 <__ashldi3>
8000ba88:	8b f2 9f 20 	addx %d2,%d2,-1
8000ba8c:	8b f3 bf 30 	addc %d3,%d3,-1
8000ba90:	26 a2       	and %d2,%d10
8000ba92:	26 b3       	and %d3,%d11
8000ba94:	a6 23       	or %d3,%d2
8000ba96:	02 ea       	mov %d10,%d14
8000ba98:	42 cf       	add %d15,%d12
8000ba9a:	8b 03 00 a5 	or.ne %d10,%d3,0
8000ba9e:	02 db       	mov %d11,%d13
8000baa0:	3c 07       	j 8000baae <_fpadd_parts+0xee>
8000baa2:	3f f2 05 00 	jlt %d2,%d15,8000baac <_fpadd_parts+0xec>
8000baa6:	02 2f       	mov %d15,%d2
8000baa8:	d2 0a       	mov %e10,0
8000baaa:	3c 02       	j 8000baae <_fpadd_parts+0xee>
8000baac:	d2 08       	mov %e8,0
8000baae:	19 d4 04 00 	ld.w %d4,[%a13]4
8000bab2:	19 c2 04 00 	ld.w %d2,[%a12]4
8000bab6:	5f 24 34 00 	jeq %d4,%d2,8000bb1e <_fpadd_parts+0x15e>
8000baba:	0b 8a c0 20 	subx %d2,%d10,%d8
8000babe:	0b 9b d0 30 	subc %d3,%d11,%d9
8000bac2:	76 45       	jz %d4,8000bacc <_fpadd_parts+0x10c>
8000bac4:	0b a8 c0 20 	subx %d2,%d8,%d10
8000bac8:	0b b9 d0 30 	subc %d3,%d9,%d11
8000bacc:	0e 37       	jltz %d3,8000bada <_fpadd_parts+0x11a>
8000bace:	82 04       	mov %d4,0
8000bad0:	68 14       	st.w [%a15]4,%d4
8000bad2:	68 2f       	st.w [%a15]8,%d15
8000bad4:	89 f2 4c 09 	st.d [%a15]12,%e2
8000bad8:	3c 0c       	j 8000baf0 <_fpadd_parts+0x130>
8000bada:	68 2f       	st.w [%a15]8,%d15
8000badc:	8b 03 00 f1 	rsub %d15,%d3,0
8000bae0:	82 14       	mov %d4,1
8000bae2:	8b 02 00 31 	rsub %d3,%d2,0
8000bae6:	ab ff 1f f2 	cadd %d15,%d2,%d15,-1
8000baea:	68 14       	st.w [%a15]4,%d4
8000baec:	68 33       	st.w [%a15]12,%d3
8000baee:	68 4f       	st.w [%a15]16,%d15
8000baf0:	82 f5       	mov %d5,-1
8000baf2:	06 c5       	sh %d5,-4
8000baf4:	48 32       	ld.w %d2,[%a15]12
8000baf6:	48 43       	ld.w %d3,[%a15]16
8000baf8:	8b f2 9f 60 	addx %d6,%d2,-1
8000bafc:	8b f3 bf 40 	addc %d4,%d3,-1
8000bb00:	3a 54       	eq %d15,%d4,%d5
8000bb02:	8b f6 3f f4 	and.ne %d15,%d6,-1
8000bb06:	0b 54 a0 f2 	or.lt.u %d15,%d4,%d5
8000bb0a:	6e 12       	jz %d15,8000bb2e <_fpadd_parts+0x16e>
8000bb0c:	4c f2       	ld.w %d15,[%a15]8
8000bb0e:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000bb12:	c2 ff       	add %d15,-1
8000bb14:	06 12       	sh %d2,1
8000bb16:	68 32       	st.w [%a15]12,%d2
8000bb18:	68 43       	st.w [%a15]16,%d3
8000bb1a:	68 2f       	st.w [%a15]8,%d15
8000bb1c:	3c ec       	j 8000baf4 <_fpadd_parts+0x134>
8000bb1e:	0b a8 40 20 	addx %d2,%d8,%d10
8000bb22:	68 2f       	st.w [%a15]8,%d15
8000bb24:	0b b9 50 f0 	addc %d15,%d9,%d11
8000bb28:	68 14       	st.w [%a15]4,%d4
8000bb2a:	68 32       	st.w [%a15]12,%d2
8000bb2c:	68 4f       	st.w [%a15]16,%d15
8000bb2e:	82 3f       	mov %d15,3
8000bb30:	28 0f       	st.b [%a15]0,%d15
8000bb32:	4c f4       	ld.w %d15,[%a15]16
8000bb34:	7b 00 00 42 	movh %d4,8192
8000bb38:	0b 4f 30 31 	lt.u %d3,%d15,%d4
8000bb3c:	48 32       	ld.w %d2,[%a15]12
8000bb3e:	40 f2       	mov.aa %a2,%a15
8000bb40:	f6 3d       	jnz %d3,8000bb5a <_fpadd_parts+0x19a>
8000bb42:	8f 12 00 31 	and %d3,%d2,1
8000bb46:	77 2f 80 2f 	dextr %d2,%d15,%d2,31
8000bb4a:	06 ff       	sh %d15,-1
8000bb4c:	96 00       	or %d15,0
8000bb4e:	68 4f       	st.w [%a15]16,%d15
8000bb50:	4c f2       	ld.w %d15,[%a15]8
8000bb52:	a6 32       	or %d2,%d3
8000bb54:	c2 1f       	add %d15,1
8000bb56:	68 32       	st.w [%a15]12,%d2
8000bb58:	68 2f       	st.w [%a15]8,%d15
8000bb5a:	00 90       	ret 

8000bb5c <__adddf3>:
8000bb5c:	20 50       	sub.a %sp,80
8000bb5e:	d9 a4 04 00 	lea %a4,[%sp]4
8000bb62:	d9 a5 14 00 	lea %a5,[%sp]20
8000bb66:	89 a4 44 09 	st.d [%sp]4,%e4
8000bb6a:	89 a6 4c 09 	st.d [%sp]12,%e6
8000bb6e:	6d 00 d9 02 	call 8000c120 <__unpack_d>
8000bb72:	d9 a4 0c 00 	lea %a4,[%sp]12
8000bb76:	d9 a5 28 00 	lea %a5,[%sp]40
8000bb7a:	6d 00 d3 02 	call 8000c120 <__unpack_d>
8000bb7e:	d9 a4 14 00 	lea %a4,[%sp]20
8000bb82:	d9 a5 28 00 	lea %a5,[%sp]40
8000bb86:	d9 a6 3c 00 	lea %a6,[%sp]60
8000bb8a:	6d ff 1b ff 	call 8000b9c0 <_fpadd_parts>
8000bb8e:	40 24       	mov.aa %a4,%a2
8000bb90:	1d 00 3f 02 	j 8000c00e <__pack_d>

8000bb94 <__subdf3>:
8000bb94:	20 50       	sub.a %sp,80
8000bb96:	d9 a4 04 00 	lea %a4,[%sp]4
8000bb9a:	d9 a5 14 00 	lea %a5,[%sp]20
8000bb9e:	89 a4 44 09 	st.d [%sp]4,%e4
8000bba2:	89 a6 4c 09 	st.d [%sp]12,%e6
8000bba6:	6d 00 bd 02 	call 8000c120 <__unpack_d>
8000bbaa:	d9 a4 0c 00 	lea %a4,[%sp]12
8000bbae:	d9 a5 28 00 	lea %a5,[%sp]40
8000bbb2:	6d 00 b7 02 	call 8000c120 <__unpack_d>
8000bbb6:	58 0b       	ld.w %d15,[%sp]44
8000bbb8:	d9 a4 14 00 	lea %a4,[%sp]20
8000bbbc:	8f 1f 80 f1 	xor %d15,%d15,1
8000bbc0:	d9 a5 28 00 	lea %a5,[%sp]40
8000bbc4:	d9 a6 3c 00 	lea %a6,[%sp]60
8000bbc8:	78 0b       	st.w [%sp]44,%d15
8000bbca:	6d ff fb fe 	call 8000b9c0 <_fpadd_parts>
8000bbce:	40 24       	mov.aa %a4,%a2
8000bbd0:	1d 00 1f 02 	j 8000c00e <__pack_d>

8000bbd4 <__muldf3>:
8000bbd4:	20 50       	sub.a %sp,80
8000bbd6:	d9 a4 04 00 	lea %a4,[%sp]4
8000bbda:	d9 a5 14 00 	lea %a5,[%sp]20
8000bbde:	89 a4 44 09 	st.d [%sp]4,%e4
8000bbe2:	89 a6 4c 09 	st.d [%sp]12,%e6
8000bbe6:	6d 00 9d 02 	call 8000c120 <__unpack_d>
8000bbea:	d9 a4 0c 00 	lea %a4,[%sp]12
8000bbee:	d9 a5 28 00 	lea %a5,[%sp]40
8000bbf2:	6d 00 97 02 	call 8000c120 <__unpack_d>
8000bbf6:	39 a3 14 00 	ld.bu %d3,[%sp]20
8000bbfa:	ff 23 0c 80 	jge.u %d3,2,8000bc12 <__muldf3+0x3e>
8000bbfe:	19 a2 18 00 	ld.w %d2,[%sp]24
8000bc02:	58 0b       	ld.w %d15,[%sp]44
8000bc04:	d9 a4 14 00 	lea %a4,[%sp]20
8000bc08:	0b f2 10 f1 	ne %d15,%d2,%d15
8000bc0c:	78 06       	st.w [%sp]24,%d15
8000bc0e:	1d 00 b3 00 	j 8000bd74 <__muldf3+0x1a0>
8000bc12:	39 af 28 00 	ld.bu %d15,[%sp]40
8000bc16:	ff 2f 0c 80 	jge.u %d15,2,8000bc2e <__muldf3+0x5a>
8000bc1a:	58 0b       	ld.w %d15,[%sp]44
8000bc1c:	19 a2 18 00 	ld.w %d2,[%sp]24
8000bc20:	d9 a4 28 00 	lea %a4,[%sp]40
8000bc24:	0b f2 10 f1 	ne %d15,%d2,%d15
8000bc28:	78 0b       	st.w [%sp]44,%d15
8000bc2a:	1d 00 a5 00 	j 8000bd74 <__muldf3+0x1a0>
8000bc2e:	df 43 09 80 	jne %d3,4,8000bc40 <__muldf3+0x6c>
8000bc32:	91 00 00 48 	movh.a %a4,32768
8000bc36:	d9 44 c4 c0 	lea %a4,[%a4]3844 <80000f04 <__thenan_df>>
8000bc3a:	df 2f 9d 00 	jeq %d15,2,8000bd74 <__muldf3+0x1a0>
8000bc3e:	3c e0       	j 8000bbfe <__muldf3+0x2a>
8000bc40:	5e 48       	jne %d15,4,8000bc50 <__muldf3+0x7c>
8000bc42:	91 00 00 48 	movh.a %a4,32768
8000bc46:	d9 44 c4 c0 	lea %a4,[%a4]3844 <80000f04 <__thenan_df>>
8000bc4a:	df 23 95 00 	jeq %d3,2,8000bd74 <__muldf3+0x1a0>
8000bc4e:	3c e6       	j 8000bc1a <__muldf3+0x46>
8000bc50:	df 23 d7 7f 	jeq %d3,2,8000bbfe <__muldf3+0x2a>
8000bc54:	df 2f e3 7f 	jeq %d15,2,8000bc1a <__muldf3+0x46>
8000bc58:	58 08       	ld.w %d15,[%sp]32
8000bc5a:	19 ab 38 00 	ld.w %d11,[%sp]56 <80000008 <BootModeHeader0+0x8>>
8000bc5e:	d2 00       	mov %e0,0
8000bc60:	19 a0 34 00 	ld.w %d0,[%sp]52
8000bc64:	73 bf 68 60 	mul.u %e6,%d15,%d11
8000bc68:	82 0c       	mov %d12,0
8000bc6a:	73 0f 68 40 	mul.u %e4,%d15,%d0
8000bc6e:	19 aa 24 00 	ld.w %d10,[%sp]36
8000bc72:	82 02       	mov %d2,0
8000bc74:	03 cf 0a 77 	madd %d7,%d7,%d15,%d12
8000bc78:	03 b2 0a 77 	madd %d7,%d7,%d2,%d11
8000bc7c:	03 1f 0a 55 	madd %d5,%d5,%d15,%d1
8000bc80:	03 02 0a 55 	madd %d5,%d5,%d2,%d0
8000bc84:	82 0d       	mov %d13,0
8000bc86:	03 a0 68 26 	madd.u %e2,%e6,%d0,%d10
8000bc8a:	03 d0 0a 33 	madd %d3,%d3,%d0,%d13
8000bc8e:	03 a1 0a 33 	madd %d3,%d3,%d1,%d10
8000bc92:	0b 54 10 08 	mov %e0,%d4,%d5
8000bc96:	42 20       	add %d0,%d2
8000bc98:	3a 73       	eq %d15,%d3,%d7
8000bc9a:	0b 62 50 f2 	and.ge.u %d15,%d2,%d6
8000bc9e:	0b 37 a0 f2 	or.lt.u %d15,%d7,%d3
8000bca2:	8b 0f 00 62 	eq %d6,%d15,0
8000bca6:	3a 50       	eq %d15,%d0,%d5
8000bca8:	0b 41 50 f2 	and.ge.u %d15,%d1,%d4
8000bcac:	0b 05 a0 f2 	or.lt.u %d15,%d5,%d0
8000bcb0:	ba 0f       	eq %d15,%d15,0
8000bcb2:	53 1f 40 40 	mul.u %e4,%d15,1
8000bcb6:	02 38       	mov %d8,%d3
8000bcb8:	82 09       	mov %d9,0
8000bcba:	03 ab 68 28 	madd.u %e2,%e8,%d11,%d10
8000bcbe:	02 5f       	mov %d15,%d5
8000bcc0:	03 db 0a 33 	madd %d3,%d3,%d11,%d13
8000bcc4:	42 6f       	add %d15,%d6
8000bcc6:	03 ac 0a 33 	madd %d3,%d3,%d12,%d10
8000bcca:	0b 4f 10 68 	mov %e6,%d15,%d4
8000bcce:	0b 62 40 40 	addx %d4,%d2,%d6
8000bcd2:	0b 73 50 20 	addc %d2,%d3,%d7
8000bcd6:	58 07       	ld.w %d15,[%sp]28
8000bcd8:	19 a3 30 00 	ld.w %d3,[%sp]48
8000bcdc:	19 a5 18 00 	ld.w %d5,[%sp]24
8000bce0:	42 3f       	add %d15,%d3
8000bce2:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000bce6:	c2 4f       	add %d15,4
8000bce8:	0b 35 10 31 	ne %d3,%d5,%d3
8000bcec:	59 a3 00 10 	st.w [%sp]64,%d3
8000bcf0:	7b 00 00 52 	movh %d5,8192
8000bcf4:	0b 52 50 31 	ge.u %d3,%d2,%d5
8000bcf8:	df 03 1b 00 	jeq %d3,0,8000bd2e <__muldf3+0x15a>
8000bcfc:	8f 14 00 31 	and %d3,%d4,1
8000bd00:	76 37       	jz %d3,8000bd0e <__muldf3+0x13a>
8000bd02:	8f f0 1f 30 	sh %d3,%d0,-1
8000bd06:	77 10 80 1f 	dextr %d1,%d0,%d1,31
8000bd0a:	b7 f3 81 0f 	insert %d0,%d3,15,31,1
8000bd0e:	77 42 80 4f 	dextr %d4,%d2,%d4,31
8000bd12:	c2 1f       	add %d15,1
8000bd14:	06 f2       	sh %d2,-1
8000bd16:	3c ed       	j 8000bcf0 <__muldf3+0x11c>
8000bd18:	77 42 80 20 	dextr %d2,%d2,%d4,1
8000bd1c:	06 14       	sh %d4,1
8000bd1e:	ce 04       	jgez %d0,8000bd26 <__muldf3+0x152>
8000bd20:	8f 14 40 51 	or %d5,%d4,1
8000bd24:	02 54       	mov %d4,%d5
8000bd26:	77 10 80 00 	dextr %d0,%d0,%d1,1
8000bd2a:	c2 ff       	add %d15,-1
8000bd2c:	06 11       	sh %d1,1
8000bd2e:	7b 00 00 51 	movh %d5,4096
8000bd32:	0b 52 30 31 	lt.u %d3,%d2,%d5
8000bd36:	df 03 f1 ff 	jne %d3,0,8000bd18 <__muldf3+0x144>
8000bd3a:	78 11       	st.w [%sp]68,%d15
8000bd3c:	02 4f       	mov %d15,%d4
8000bd3e:	16 ff       	and %d15,255
8000bd40:	8b 0f 28 f2 	ne %d15,%d15,128
8000bd44:	ee 0f       	jnz %d15,8000bd62 <__muldf3+0x18e>
8000bd46:	a6 10       	or %d0,%d1
8000bd48:	77 42 00 fc 	dextr %d15,%d2,%d4,24
8000bd4c:	8b 00 20 02 	ne %d0,%d0,0
8000bd50:	0f f0 e0 00 	andn %d0,%d0,%d15
8000bd54:	76 07       	jz %d0,8000bd62 <__muldf3+0x18e>
8000bd56:	8b 04 88 40 	addx %d4,%d4,128
8000bd5a:	8b 02 a0 20 	addc %d2,%d2,0
8000bd5e:	8f f4 cf 41 	andn %d4,%d4,255
8000bd62:	d9 a4 10 10 	lea %a4,[%sp]80
8000bd66:	82 3f       	mov %d15,3
8000bd68:	59 a4 08 10 	st.w [%sp]72,%d4
8000bd6c:	59 a2 0c 10 	st.w [%sp]76,%d2
8000bd70:	89 4f 2c f4 	st.b [+%a4]-20 <800003ec <IfxVadc_cfg_srcAddresses+0x90>>,%d15
8000bd74:	1d 00 4d 01 	j 8000c00e <__pack_d>

8000bd78 <__divdf3>:
8000bd78:	20 38       	sub.a %sp,56
8000bd7a:	40 a4       	mov.aa %a4,%sp
8000bd7c:	d9 a5 10 00 	lea %a5,[%sp]16
8000bd80:	89 a4 40 09 	st.d [%sp],%e4
8000bd84:	89 a6 48 09 	st.d [%sp]8,%e6
8000bd88:	6d 00 cc 01 	call 8000c120 <__unpack_d>
8000bd8c:	d9 a4 08 00 	lea %a4,[%sp]8
8000bd90:	d9 a5 24 00 	lea %a5,[%sp]36
8000bd94:	6d 00 c6 01 	call 8000c120 <__unpack_d>
8000bd98:	39 a2 10 00 	ld.bu %d2,[%sp]16
8000bd9c:	bf 22 76 80 	jlt.u %d2,2,8000be88 <__divdf3+0x110>
8000bda0:	39 af 24 00 	ld.bu %d15,[%sp]36
8000bda4:	d9 a4 24 00 	lea %a4,[%sp]36
8000bda8:	bf 2f 72 80 	jlt.u %d15,2,8000be8c <__divdf3+0x114>
8000bdac:	19 a4 14 00 	ld.w %d4,[%sp]20
8000bdb0:	19 a3 28 00 	ld.w %d3,[%sp]40
8000bdb4:	c6 43       	xor %d3,%d4
8000bdb6:	59 a3 14 00 	st.w [%sp]20,%d3
8000bdba:	1b e2 ff 3f 	addi %d3,%d2,-2
8000bdbe:	8f d3 0f 31 	and %d3,%d3,253
8000bdc2:	f6 38       	jnz %d3,8000bdd2 <__divdf3+0x5a>
8000bdc4:	91 00 00 48 	movh.a %a4,32768
8000bdc8:	d9 44 c4 c0 	lea %a4,[%a4]3844 <80000f04 <__thenan_df>>
8000bdcc:	5f f2 5e 80 	jne %d2,%d15,8000be88 <__divdf3+0x110>
8000bdd0:	3c 5e       	j 8000be8c <__divdf3+0x114>
8000bdd2:	5e 47       	jne %d15,4,8000bde0 <__divdf3+0x68>
8000bdd4:	d2 02       	mov %e2,0
8000bdd6:	82 0f       	mov %d15,0
8000bdd8:	89 a2 5c 09 	st.d [%sp]28,%e2
8000bddc:	78 06       	st.w [%sp]24,%d15
8000bdde:	3c 55       	j 8000be88 <__divdf3+0x110>
8000bde0:	5e 25       	jne %d15,2,8000bdea <__divdf3+0x72>
8000bde2:	82 4f       	mov %d15,4
8000bde4:	e9 af 10 00 	st.b [%sp]16,%d15
8000bde8:	3c 50       	j 8000be88 <__divdf3+0x110>
8000bdea:	58 06       	ld.w %d15,[%sp]24
8000bdec:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000bdf0:	09 a4 70 09 	ld.d %e4,[%sp]48
8000bdf4:	19 a6 2c 00 	ld.w %d6,[%sp]44
8000bdf8:	52 66       	sub %d6,%d15,%d6
8000bdfa:	3a 53       	eq %d15,%d3,%d5
8000bdfc:	0b 42 50 f2 	and.ge.u %d15,%d2,%d4
8000be00:	59 a6 18 00 	st.w [%sp]24,%d6
8000be04:	0b 35 a0 f2 	or.lt.u %d15,%d5,%d3
8000be08:	ee 07       	jnz %d15,8000be16 <__divdf3+0x9e>
8000be0a:	c2 f6       	add %d6,-1
8000be0c:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000be10:	59 a6 18 00 	st.w [%sp]24,%d6
8000be14:	06 12       	sh %d2,1
8000be16:	82 01       	mov %d1,0
8000be18:	7b 00 00 f1 	movh %d15,4096
8000be1c:	82 00       	mov %d0,0
8000be1e:	82 07       	mov %d7,0
8000be20:	c5 0f 3c 00 	lea %a15,3c <_.+0x3b>
8000be24:	0b 53 00 61 	eq %d6,%d3,%d5
8000be28:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000be2c:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000be30:	f6 6b       	jnz %d6,8000be46 <__divdf3+0xce>
8000be32:	0f 10 a0 80 	or %d8,%d0,%d1
8000be36:	0f f7 a0 60 	or %d6,%d7,%d15
8000be3a:	0b 42 c0 20 	subx %d2,%d2,%d4
8000be3e:	02 80       	mov %d0,%d8
8000be40:	02 67       	mov %d7,%d6
8000be42:	0b 53 d0 30 	subc %d3,%d3,%d5
8000be46:	77 1f 80 1f 	dextr %d1,%d15,%d1,31
8000be4a:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000be4e:	06 ff       	sh %d15,-1
8000be50:	06 12       	sh %d2,1
8000be52:	fd f0 e9 7f 	loop %a15,8000be24 <__divdf3+0xac>
8000be56:	02 0f       	mov %d15,%d0
8000be58:	16 ff       	and %d15,255
8000be5a:	8b 0f 28 f2 	ne %d15,%d15,128
8000be5e:	0b 70 10 48 	mov %e4,%d0,%d7
8000be62:	ee 0f       	jnz %d15,8000be80 <__divdf3+0x108>
8000be64:	a6 32       	or %d2,%d3
8000be66:	77 07 00 fc 	dextr %d15,%d7,%d0,24
8000be6a:	8b 02 20 22 	ne %d2,%d2,0
8000be6e:	0f f2 e0 20 	andn %d2,%d2,%d15
8000be72:	76 27       	jz %d2,8000be80 <__divdf3+0x108>
8000be74:	8b 00 88 00 	addx %d0,%d0,128
8000be78:	8b 07 a0 40 	addc %d4,%d7,0
8000be7c:	8f f0 cf 51 	andn %d5,%d0,255
8000be80:	59 a5 1c 00 	st.w [%sp]28,%d5
8000be84:	59 a4 20 00 	st.w [%sp]32,%d4
8000be88:	d9 a4 10 00 	lea %a4,[%sp]16
8000be8c:	1d 00 c1 00 	j 8000c00e <__pack_d>

8000be90 <__floatsidf>:
8000be90:	20 18       	sub.a %sp,24
8000be92:	82 3f       	mov %d15,3
8000be94:	2c a4       	st.b [%sp]4,%d15
8000be96:	8f 14 1e f0 	sh %d15,%d4,-31
8000be9a:	78 02       	st.w [%sp]8,%d15
8000be9c:	f6 44       	jnz %d4,8000bea4 <__floatsidf+0x14>
8000be9e:	82 2f       	mov %d15,2
8000bea0:	2c a4       	st.b [%sp]4,%d15
8000bea2:	3c 16       	j 8000bece <__floatsidf+0x3e>
8000bea4:	6e 09       	jz %d15,8000beb6 <__floatsidf+0x26>
8000bea6:	7b 00 00 f8 	movh %d15,32768
8000beaa:	82 02       	mov %d2,0
8000beac:	7b 00 1e 3c 	movh %d3,49632
8000beb0:	5f f4 13 00 	jeq %d4,%d15,8000bed6 <__floatsidf+0x46>
8000beb4:	32 54       	rsub %d4
8000beb6:	0f 04 b0 f1 	clz %d15,%d4
8000beba:	1b df 01 60 	addi %d6,%d15,29
8000bebe:	82 05       	mov %d5,0
8000bec0:	6d 00 52 00 	call 8000bf64 <__ashldi3>
8000bec4:	8b ff 01 f1 	rsub %d15,%d15,31
8000bec8:	89 a2 50 09 	st.d [%sp]16,%e2
8000becc:	78 03       	st.w [%sp]12,%d15
8000bece:	d9 a4 04 00 	lea %a4,[%sp]4
8000bed2:	6d 00 9e 00 	call 8000c00e <__pack_d>
8000bed6:	00 90       	ret 

8000bed8 <__make_dp>:
8000bed8:	20 18       	sub.a %sp,24
8000beda:	09 a2 58 09 	ld.d %e2,[%sp]24
8000bede:	d9 a4 04 00 	lea %a4,[%sp]4
8000bee2:	e9 a4 04 00 	st.b [%sp]4,%d4
8000bee6:	59 a5 08 00 	st.w [%sp]8,%d5
8000beea:	59 a6 0c 00 	st.w [%sp]12,%d6
8000beee:	89 a2 50 09 	st.d [%sp]16,%e2
8000bef2:	1d 00 8e 00 	j 8000c00e <__pack_d>

8000bef6 <__truncdfsf2>:
8000bef6:	20 20       	sub.a %sp,32
8000bef8:	d9 a4 20 00 	lea %a4,[%sp]32
8000befc:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000bf00:	d9 a5 0c 00 	lea %a5,[%sp]12
8000bf04:	6d 00 0e 01 	call 8000c120 <__unpack_d>
8000bf08:	19 a7 18 00 	ld.w %d7,[%sp]24
8000bf0c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000bf10:	39 a4 0c 00 	ld.bu %d4,[%sp]12
8000bf14:	77 72 00 21 	dextr %d2,%d2,%d7,2
8000bf18:	b7 07 02 7f 	insert %d7,%d7,0,30,2
8000bf1c:	02 23       	mov %d3,%d2
8000bf1e:	8f 12 40 21 	or %d2,%d2,1
8000bf22:	19 a5 10 00 	ld.w %d5,[%sp]16
8000bf26:	19 a6 14 00 	ld.w %d6,[%sp]20
8000bf2a:	2b 32 40 77 	sel %d7,%d7,%d2,%d3
8000bf2e:	1d 00 65 00 	j 8000bff8 <__make_fp>

8000bf32 <__floatunsidf>:
8000bf32:	20 18       	sub.a %sp,24
8000bf34:	82 0f       	mov %d15,0
8000bf36:	78 02       	st.w [%sp]8,%d15
8000bf38:	f6 44       	jnz %d4,8000bf40 <__floatunsidf+0xe>
8000bf3a:	82 2f       	mov %d15,2
8000bf3c:	2c a4       	st.b [%sp]4,%d15
8000bf3e:	3c 0f       	j 8000bf5c <__floatunsidf+0x2a>
8000bf40:	82 3f       	mov %d15,3
8000bf42:	2c a4       	st.b [%sp]4,%d15
8000bf44:	0f 04 b0 f1 	clz %d15,%d4
8000bf48:	1b df 01 60 	addi %d6,%d15,29
8000bf4c:	82 05       	mov %d5,0
8000bf4e:	6d 00 0b 00 	call 8000bf64 <__ashldi3>
8000bf52:	8b ff 01 f1 	rsub %d15,%d15,31
8000bf56:	89 a2 50 09 	st.d [%sp]16,%e2
8000bf5a:	78 03       	st.w [%sp]12,%d15
8000bf5c:	d9 a4 04 00 	lea %a4,[%sp]4
8000bf60:	1d 00 57 00 	j 8000c00e <__pack_d>

8000bf64 <__ashldi3>:
8000bf64:	6f 56 07 80 	jnz.t %d6,5,8000bf72 <__ashldi3+0xe>
8000bf68:	0f 64 00 20 	sh %d2,%d4,%d6
8000bf6c:	17 45 80 36 	dextr %d3,%d5,%d4,%d6
8000bf70:	00 90       	ret 
8000bf72:	8b 06 1e 60 	add %d6,%d6,-32
8000bf76:	82 02       	mov %d2,0
8000bf78:	0f 64 00 30 	sh %d3,%d4,%d6
8000bf7c:	00 90       	ret 

8000bf7e <__unpack_f>:
8000bf7e:	54 43       	ld.w %d3,[%a4]
8000bf80:	37 03 77 f0 	extr.u %d15,%d3,0,23
8000bf84:	37 03 e8 2b 	extr.u %d2,%d3,23,8
8000bf88:	8f 13 1e 30 	sh %d3,%d3,-31
8000bf8c:	59 53 04 00 	st.w [%a5]4,%d3
8000bf90:	df 02 18 80 	jne %d2,0,8000bfc0 <__unpack_f+0x42>
8000bf94:	ee 03       	jnz %d15,8000bf9a <__unpack_f+0x1c>
8000bf96:	82 2f       	mov %d15,2
8000bf98:	3c 19       	j 8000bfca <__unpack_f+0x4c>
8000bf9a:	3b 20 f8 2f 	mov %d2,-126
8000bf9e:	59 52 08 00 	st.w [%a5]8,%d2
8000bfa2:	82 32       	mov %d2,3
8000bfa4:	34 52       	st.b [%a5],%d2
8000bfa6:	06 7f       	sh %d15,7
8000bfa8:	3b 10 f8 2f 	mov %d2,-127
8000bfac:	7b 00 00 44 	movh %d4,16384
8000bfb0:	06 1f       	sh %d15,1
8000bfb2:	02 23       	mov %d3,%d2
8000bfb4:	c2 f2       	add %d2,-1
8000bfb6:	3f 4f fd ff 	jlt.u %d15,%d4,8000bfb0 <__unpack_f+0x32>
8000bfba:	59 53 08 00 	st.w [%a5]8,%d3
8000bfbe:	3c 1b       	j 8000bff4 <__unpack_f+0x76>
8000bfc0:	8b f2 2f 32 	ne %d3,%d2,255
8000bfc4:	f6 3f       	jnz %d3,8000bfe2 <__unpack_f+0x64>
8000bfc6:	ee 04       	jnz %d15,8000bfce <__unpack_f+0x50>
8000bfc8:	82 4f       	mov %d15,4
8000bfca:	2c 50       	st.b [%a5]0,%d15
8000bfcc:	00 90       	ret 
8000bfce:	7b 00 04 20 	movh %d2,64
8000bfd2:	26 f2       	and %d2,%d15
8000bfd4:	76 22       	jz %d2,8000bfd8 <__unpack_f+0x5a>
8000bfd6:	82 12       	mov %d2,1
8000bfd8:	b7 0f 01 fb 	insert %d15,%d15,0,22,1
8000bfdc:	34 52       	st.b [%a5],%d2
8000bfde:	06 7f       	sh %d15,7
8000bfe0:	3c 0a       	j 8000bff4 <__unpack_f+0x76>
8000bfe2:	1b 12 f8 2f 	addi %d2,%d2,-127
8000bfe6:	06 7f       	sh %d15,7
8000bfe8:	59 52 08 00 	st.w [%a5]8,%d2
8000bfec:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000bff0:	82 32       	mov %d2,3
8000bff2:	34 52       	st.b [%a5],%d2
8000bff4:	6c 53       	st.w [%a5]12,%d15
8000bff6:	00 90       	ret 

8000bff8 <__make_fp>:
8000bff8:	20 10       	sub.a %sp,16
8000bffa:	40 a4       	mov.aa %a4,%sp
8000bffc:	34 a4       	st.b [%sp],%d4
8000bffe:	59 a5 04 00 	st.w [%sp]4,%d5
8000c002:	59 a6 08 00 	st.w [%sp]8,%d6
8000c006:	59 a7 0c 00 	st.w [%sp]12,%d7
8000c00a:	1d 00 e1 00 	j 8000c1cc <__pack_f>

8000c00e <__pack_d>:
8000c00e:	14 42       	ld.bu %d2,[%a4]
8000c010:	19 49 0c 00 	ld.w %d9,[%a4]12
8000c014:	19 48 10 00 	ld.w %d8,[%a4]16
8000c018:	19 4c 04 00 	ld.w %d12,[%a4]4
8000c01c:	ff 22 0b 80 	jge.u %d2,2,8000c032 <__pack_d+0x24>
8000c020:	77 98 00 9c 	dextr %d9,%d8,%d9,24
8000c024:	06 88       	sh %d8,-8
8000c026:	02 95       	mov %d5,%d9
8000c028:	b7 18 8d 49 	insert %d4,%d8,1,19,13
8000c02c:	3b f0 7f f0 	mov %d15,2047
8000c030:	3c 6f       	j 8000c10e <__pack_d+0x100>
8000c032:	3b f0 7f f0 	mov %d15,2047
8000c036:	d2 04       	mov %e4,0
8000c038:	df 42 6b 00 	jeq %d2,4,8000c10e <__pack_d+0x100>
8000c03c:	0f 89 a0 f0 	or %d15,%d9,%d8
8000c040:	8b 22 00 32 	eq %d3,%d2,2
8000c044:	8b 0f e0 34 	or.eq %d3,%d15,0
8000c048:	82 0f       	mov %d15,0
8000c04a:	df 03 62 80 	jne %d3,0,8000c10e <__pack_d+0x100>
8000c04e:	19 42 08 00 	ld.w %d2,[%a4]8
8000c052:	3b 20 c0 ff 	mov %d15,-1022
8000c056:	7f f2 36 00 	jge %d2,%d15,8000c0c2 <__pack_d+0xb4>
8000c05a:	a2 2f       	sub %d15,%d2
8000c05c:	8b 9f 83 42 	ge %d4,%d15,57
8000c060:	82 02       	mov %d2,0
8000c062:	df 04 18 80 	jne %d4,0,8000c092 <__pack_d+0x84>
8000c066:	0b 98 10 48 	mov %e4,%d8,%d9
8000c06a:	02 f6       	mov %d6,%d15
8000c06c:	6d ff 58 fc 	call 8000b91c <__lshrdi3>
8000c070:	d2 14       	mov %e4,1
8000c072:	02 f6       	mov %d6,%d15
8000c074:	0b 32 10 a8 	mov %e10,%d2,%d3
8000c078:	6d ff 76 ff 	call 8000bf64 <__ashldi3>
8000c07c:	8b f2 9f 20 	addx %d2,%d2,-1
8000c080:	8b f3 bf 30 	addc %d3,%d3,-1
8000c084:	26 29       	and %d9,%d2
8000c086:	26 38       	and %d8,%d3
8000c088:	a6 98       	or %d8,%d9
8000c08a:	02 b2       	mov %d2,%d11
8000c08c:	8b 08 00 25 	or.ne %d2,%d8,0
8000c090:	02 a3       	mov %d3,%d10
8000c092:	02 2f       	mov %d15,%d2
8000c094:	16 ff       	and %d15,255
8000c096:	8b 0f 28 f2 	ne %d15,%d15,128
8000c09a:	ee 07       	jnz %d15,8000c0a8 <__pack_d+0x9a>
8000c09c:	8f 02 10 f1 	and %d15,%d2,256
8000c0a0:	6e 08       	jz %d15,8000c0b0 <__pack_d+0xa2>
8000c0a2:	8b 02 88 20 	addx %d2,%d2,128
8000c0a6:	3c 03       	j 8000c0ac <__pack_d+0x9e>
8000c0a8:	8b f2 87 20 	addx %d2,%d2,127
8000c0ac:	8b 03 a0 30 	addc %d3,%d3,0
8000c0b0:	7b 00 00 41 	movh %d4,4096
8000c0b4:	0b 43 50 f1 	ge.u %d15,%d3,%d4
8000c0b8:	77 23 00 5c 	dextr %d5,%d3,%d2,24
8000c0bc:	8f 83 1f 40 	sh %d4,%d3,-8
8000c0c0:	3c 27       	j 8000c10e <__pack_d+0x100>
8000c0c2:	3b 00 40 30 	mov %d3,1024
8000c0c6:	3b f0 7f f0 	mov %d15,2047
8000c0ca:	7f 32 22 00 	jge %d2,%d3,8000c10e <__pack_d+0x100>
8000c0ce:	02 9f       	mov %d15,%d9
8000c0d0:	16 ff       	and %d15,255
8000c0d2:	8b 0f 28 f2 	ne %d15,%d15,128
8000c0d6:	ee 07       	jnz %d15,8000c0e4 <__pack_d+0xd6>
8000c0d8:	8f 09 10 f1 	and %d15,%d9,256
8000c0dc:	6e 08       	jz %d15,8000c0ec <__pack_d+0xde>
8000c0de:	8b 09 88 90 	addx %d9,%d9,128
8000c0e2:	3c 03       	j 8000c0e8 <__pack_d+0xda>
8000c0e4:	8b f9 87 90 	addx %d9,%d9,127
8000c0e8:	8b 08 a0 80 	addc %d8,%d8,0
8000c0ec:	7b 00 00 32 	movh %d3,8192
8000c0f0:	0b 38 50 f1 	ge.u %d15,%d8,%d3
8000c0f4:	ee 04       	jnz %d15,8000c0fc <__pack_d+0xee>
8000c0f6:	1b f2 3f f0 	addi %d15,%d2,1023
8000c0fa:	3c 06       	j 8000c106 <__pack_d+0xf8>
8000c0fc:	77 98 80 9f 	dextr %d9,%d8,%d9,31
8000c100:	1b 02 40 f0 	addi %d15,%d2,1024
8000c104:	06 f8       	sh %d8,-1
8000c106:	77 98 00 5c 	dextr %d5,%d8,%d9,24
8000c10a:	8f 88 1f 40 	sh %d4,%d8,-8
8000c10e:	d2 02       	mov %e2,0
8000c110:	37 43 14 40 	insert %d4,%d3,%d4,0,20
8000c114:	37 f4 0b fa 	insert %d15,%d4,%d15,20,11
8000c118:	02 52       	mov %d2,%d5
8000c11a:	37 cf 81 3f 	insert %d3,%d15,%d12,31,1
8000c11e:	00 90       	ret 

8000c120 <__unpack_d>:
8000c120:	19 44 04 00 	ld.w %d4,[%a4]4
8000c124:	54 42       	ld.w %d2,[%a4]
8000c126:	37 04 74 50 	extr.u %d5,%d4,0,20
8000c12a:	37 04 6b fa 	extr.u %d15,%d4,20,11
8000c12e:	8f 14 1e 40 	sh %d4,%d4,-31
8000c132:	59 54 04 00 	st.w [%a5]4,%d4
8000c136:	02 53       	mov %d3,%d5
8000c138:	ee 21       	jnz %d15,8000c17a <__unpack_d+0x5a>
8000c13a:	0f 25 a0 f0 	or %d15,%d5,%d2
8000c13e:	ee 03       	jnz %d15,8000c144 <__unpack_d+0x24>
8000c140:	82 2f       	mov %d15,2
8000c142:	3c 23       	j 8000c188 <__unpack_d+0x68>
8000c144:	3b 20 c0 ff 	mov %d15,-1022
8000c148:	6c 52       	st.w [%a5]8,%d15
8000c14a:	82 3f       	mov %d15,3
8000c14c:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000c150:	2c 50       	st.b [%a5]0,%d15
8000c152:	8f 82 00 20 	sh %d2,%d2,8
8000c156:	3b 10 c0 ff 	mov %d15,-1023
8000c15a:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000c15e:	7b 00 00 61 	movh %d6,4096
8000c162:	0b 63 30 51 	lt.u %d5,%d3,%d6
8000c166:	02 f4       	mov %d4,%d15
8000c168:	06 12       	sh %d2,1
8000c16a:	c2 ff       	add %d15,-1
8000c16c:	df 05 f7 ff 	jne %d5,0,8000c15a <__unpack_d+0x3a>
8000c170:	59 54 08 00 	st.w [%a5]8,%d4
8000c174:	59 52 0c 00 	st.w [%a5]12,%d2
8000c178:	3c 27       	j 8000c1c6 <__unpack_d+0xa6>
8000c17a:	3b f0 7f 40 	mov %d4,2047
8000c17e:	fe 47       	jne %d15,%d4,8000c1ac <__unpack_d+0x8c>
8000c180:	0f 25 a0 f0 	or %d15,%d5,%d2
8000c184:	ee 04       	jnz %d15,8000c18c <__unpack_d+0x6c>
8000c186:	82 4f       	mov %d15,4
8000c188:	2c 50       	st.b [%a5]0,%d15
8000c18a:	00 90       	ret 
8000c18c:	7b 80 00 f0 	movh %d15,8
8000c190:	26 5f       	and %d15,%d5
8000c192:	6e 02       	jz %d15,8000c196 <__unpack_d+0x76>
8000c194:	82 1f       	mov %d15,1
8000c196:	2c 50       	st.b [%a5]0,%d15
8000c198:	b7 03 81 f9 	insert %d15,%d3,0,19,1
8000c19c:	77 2f 00 f4 	dextr %d15,%d15,%d2,8
8000c1a0:	8f 82 00 40 	sh %d4,%d2,8
8000c1a4:	59 54 0c 00 	st.w [%a5]12,%d4
8000c1a8:	6c 54       	st.w [%a5]16,%d15
8000c1aa:	00 90       	ret 
8000c1ac:	1b 1f c0 ff 	addi %d15,%d15,-1023
8000c1b0:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000c1b4:	6c 52       	st.w [%a5]8,%d15
8000c1b6:	8f 82 00 20 	sh %d2,%d2,8
8000c1ba:	82 3f       	mov %d15,3
8000c1bc:	b7 f3 01 3e 	insert %d3,%d3,15,28,1
8000c1c0:	2c 50       	st.b [%a5]0,%d15
8000c1c2:	59 52 0c 00 	st.w [%a5]12,%d2
8000c1c6:	59 53 10 00 	st.w [%a5]16,%d3
8000c1ca:	00 90       	ret 

8000c1cc <__pack_f>:
8000c1cc:	14 45       	ld.bu %d5,[%a4]
8000c1ce:	4c 43       	ld.w %d15,[%a4]12
8000c1d0:	19 47 04 00 	ld.w %d7,[%a4]4
8000c1d4:	ff 25 09 80 	jge.u %d5,2,8000c1e6 <__pack_f+0x1a>
8000c1d8:	37 0f f6 33 	extr.u %d3,%d15,7,22
8000c1dc:	b7 f3 01 3b 	insert %d3,%d3,15,22,1
8000c1e0:	3b f0 0f 40 	mov %d4,255
8000c1e4:	3c 4f       	j 8000c282 <__pack_f+0xb6>
8000c1e6:	3b f0 0f 40 	mov %d4,255
8000c1ea:	82 03       	mov %d3,0
8000c1ec:	df 45 4b 00 	jeq %d5,4,8000c282 <__pack_f+0xb6>
8000c1f0:	8b 25 00 62 	eq %d6,%d5,2
8000c1f4:	8b 0f e0 64 	or.eq %d6,%d15,0
8000c1f8:	82 04       	mov %d4,0
8000c1fa:	df 06 44 80 	jne %d6,0,8000c282 <__pack_f+0xb6>
8000c1fe:	19 45 08 00 	ld.w %d5,[%a4]8
8000c202:	8b 25 98 42 	ge %d4,%d5,-126
8000c206:	df 04 24 80 	jne %d4,0,8000c24e <__pack_f+0x82>
8000c20a:	8b 25 18 51 	rsub %d5,%d5,-126
8000c20e:	8b a5 81 42 	ge %d4,%d5,26
8000c212:	f6 4c       	jnz %d4,8000c22a <__pack_f+0x5e>
8000c214:	82 12       	mov %d2,1
8000c216:	0f 52 00 20 	sh %d2,%d2,%d5
8000c21a:	8b 05 00 31 	rsub %d3,%d5,0
8000c21e:	c2 f2       	add %d2,-1
8000c220:	0f 3f 00 30 	sh %d3,%d15,%d3
8000c224:	26 2f       	and %d15,%d2
8000c226:	8b 0f 00 35 	or.ne %d3,%d15,0
8000c22a:	8f f3 07 f1 	and %d15,%d3,127
8000c22e:	8b 0f 24 f2 	ne %d15,%d15,64
8000c232:	ee 06       	jnz %d15,8000c23e <__pack_f+0x72>
8000c234:	8f 03 08 f1 	and %d15,%d3,128
8000c238:	ab 03 04 3f 	cadd %d3,%d15,%d3,64
8000c23c:	3c 03       	j 8000c242 <__pack_f+0x76>
8000c23e:	1b f3 03 30 	addi %d3,%d3,63
8000c242:	7b 00 00 f4 	movh %d15,16384
8000c246:	0b f3 50 41 	ge.u %d4,%d3,%d15
8000c24a:	06 93       	sh %d3,-7
8000c24c:	3c 1b       	j 8000c282 <__pack_f+0xb6>
8000c24e:	8b 05 88 62 	ge %d6,%d5,128
8000c252:	3b f0 0f 40 	mov %d4,255
8000c256:	df 06 16 80 	jne %d6,0,8000c282 <__pack_f+0xb6>
8000c25a:	8f ff 07 31 	and %d3,%d15,127
8000c25e:	8b 03 24 32 	ne %d3,%d3,64
8000c262:	f6 36       	jnz %d3,8000c26e <__pack_f+0xa2>
8000c264:	8f 0f 08 31 	and %d3,%d15,128
8000c268:	ab 0f 04 f3 	cadd %d15,%d3,%d15,64
8000c26c:	3c 03       	j 8000c272 <__pack_f+0xa6>
8000c26e:	1b ff 03 f0 	addi %d15,%d15,63
8000c272:	1b f5 07 40 	addi %d4,%d5,127
8000c276:	ce f4       	jgez %d15,8000c27e <__pack_f+0xb2>
8000c278:	06 ff       	sh %d15,-1
8000c27a:	1b 05 08 40 	addi %d4,%d5,128
8000c27e:	8f 9f 1f 30 	sh %d3,%d15,-7
8000c282:	82 02       	mov %d2,0
8000c284:	37 32 17 20 	insert %d2,%d2,%d3,0,23
8000c288:	37 42 88 2b 	insert %d2,%d2,%d4,23,8
8000c28c:	37 72 81 2f 	insert %d2,%d2,%d7,31,1
8000c290:	00 90       	ret 

8000c292 <malloc>:
8000c292:	91 00 00 f7 	movh.a %a15,28672
8000c296:	99 f4 70 00 	ld.a %a4,[%a15]1072 <70000430 <_impure_ptr>>
8000c29a:	1d 00 09 00 	j 8000c2ac <_malloc_r>

8000c29e <free>:
8000c29e:	91 00 00 f7 	movh.a %a15,28672
8000c2a2:	40 45       	mov.aa %a5,%a4
8000c2a4:	99 f4 70 00 	ld.a %a4,[%a15]1072 <70000430 <_impure_ptr>>
8000c2a8:	1d 00 f7 02 	j 8000c896 <_free_r>

8000c2ac <_malloc_r>:
8000c2ac:	1b b4 00 f0 	addi %d15,%d4,11
8000c2b0:	8b 7f 61 82 	lt.u %d8,%d15,23
8000c2b4:	8f 7f c0 f1 	andn %d15,%d15,7
8000c2b8:	ab 0f a1 88 	seln %d8,%d8,%d15,16
8000c2bc:	0b 48 30 41 	lt.u %d4,%d8,%d4
8000c2c0:	8b 08 20 45 	or.lt %d4,%d8,0
8000c2c4:	40 4d       	mov.aa %a13,%a4
8000c2c6:	76 45       	jz %d4,8000c2d0 <_malloc_r+0x24>
8000c2c8:	da 0c       	mov %d15,12
8000c2ca:	6c 40       	st.w [%a4]0,%d15
8000c2cc:	1d 00 2a 02 	j 8000c720 <_malloc_r+0x474>
8000c2d0:	91 00 00 f7 	movh.a %a15,28672
8000c2d4:	8b 88 bf f2 	ge.u %d15,%d8,504
8000c2d8:	6d 00 37 02 	call 8000c746 <__malloc_lock>
8000c2dc:	d9 ff 28 00 	lea %a15,[%a15]40 <70000028 <__malloc_av_>>
8000c2e0:	ee 19       	jnz %d15,8000c312 <_malloc_r+0x66>
8000c2e2:	8f d8 1f 20 	sh %d2,%d8,-3
8000c2e6:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000c2ea:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000c2ee:	7d 2c 09 80 	jne.a %a12,%a2,8000c300 <_malloc_r+0x54>
8000c2f2:	d9 c2 08 00 	lea %a2,[%a12]8
8000c2f6:	99 cc 14 00 	ld.a %a12,[%a12]20
8000c2fa:	c2 22       	add %d2,2
8000c2fc:	7d 2c 58 00 	jeq.a %a12,%a2,8000c3ac <_malloc_r+0x100>
8000c300:	cc c3       	ld.a %a15,[%a12]12
8000c302:	99 c2 08 00 	ld.a %a2,[%a12]8
8000c306:	4c c1       	ld.w %d15,[%a12]4
8000c308:	ec 23       	st.a [%a2]12,%a15
8000c30a:	8f 3f c0 f1 	andn %d15,%d15,3
8000c30e:	e8 22       	st.a [%a15]8,%a2
8000c310:	3c 74       	j 8000c3f8 <_malloc_r+0x14c>
8000c312:	8f 78 1f f0 	sh %d15,%d8,-9
8000c316:	3b f0 03 20 	mov %d2,63
8000c31a:	6e 27       	jz %d15,8000c368 <_malloc_r+0xbc>
8000c31c:	8f a8 1f 20 	sh %d2,%d8,-6
8000c320:	1b 82 03 20 	addi %d2,%d2,56
8000c324:	bf 5f 22 80 	jlt.u %d15,5,8000c368 <_malloc_r+0xbc>
8000c328:	8b 5f a1 22 	ge.u %d2,%d15,21
8000c32c:	f6 24       	jnz %d2,8000c334 <_malloc_r+0x88>
8000c32e:	1b bf 05 20 	addi %d2,%d15,91
8000c332:	3c 1b       	j 8000c368 <_malloc_r+0xbc>
8000c334:	8b 5f a5 22 	ge.u %d2,%d15,85
8000c338:	f6 26       	jnz %d2,8000c344 <_malloc_r+0x98>
8000c33a:	8f 48 1f 20 	sh %d2,%d8,-12
8000c33e:	1b e2 06 20 	addi %d2,%d2,110
8000c342:	3c 13       	j 8000c368 <_malloc_r+0xbc>
8000c344:	8b 5f b5 22 	ge.u %d2,%d15,341
8000c348:	f6 26       	jnz %d2,8000c354 <_malloc_r+0xa8>
8000c34a:	8f 18 1f 20 	sh %d2,%d8,-15
8000c34e:	1b 72 07 20 	addi %d2,%d2,119
8000c352:	3c 0b       	j 8000c368 <_malloc_r+0xbc>
8000c354:	3b 50 55 30 	mov %d3,1365
8000c358:	3b e0 07 20 	mov %d2,126
8000c35c:	7f 3f 06 80 	jge.u %d15,%d3,8000c368 <_malloc_r+0xbc>
8000c360:	8f e8 1e 20 	sh %d2,%d8,-18
8000c364:	1b c2 07 20 	addi %d2,%d2,124
8000c368:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000c36c:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000c370:	7d 2c 1d 00 	jeq.a %a12,%a2,8000c3aa <_malloc_r+0xfe>
8000c374:	19 c4 04 00 	ld.w %d4,[%a12]4
8000c378:	8f 34 c0 41 	andn %d4,%d4,3
8000c37c:	5a 84       	sub %d15,%d4,%d8
8000c37e:	8b 0f 41 32 	lt %d3,%d15,16
8000c382:	f6 33       	jnz %d3,8000c388 <_malloc_r+0xdc>
8000c384:	c2 f2       	add %d2,-1
8000c386:	3c 12       	j 8000c3aa <_malloc_r+0xfe>
8000c388:	0e fe       	jltz %d15,8000c3a4 <_malloc_r+0xf8>
8000c38a:	cc c3       	ld.a %a15,[%a12]12
8000c38c:	99 c2 08 00 	ld.a %a2,[%a12]8
8000c390:	ec 23       	st.a [%a2]12,%a15
8000c392:	e8 22       	st.a [%a15]8,%a2
8000c394:	01 c4 00 f6 	addsc.a %a15,%a12,%d4,0
8000c398:	b7 10 21 20 	imask %e2,1,0,1
8000c39c:	49 f2 44 08 	ldmst [%a15]4,%e2
8000c3a0:	1d 00 cc 01 	j 8000c738 <_malloc_r+0x48c>
8000c3a4:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000c3a8:	3c e4       	j 8000c370 <_malloc_r+0xc4>
8000c3aa:	c2 12       	add %d2,1
8000c3ac:	c8 4c       	ld.a %a12,[%a15]16
8000c3ae:	91 00 00 37 	movh.a %a3,28672
8000c3b2:	d9 33 30 00 	lea %a3,[%a3]48 <70000030 <__malloc_av_+0x8>>
8000c3b6:	7d 3c 83 00 	jeq.a %a12,%a3,8000c4bc <_malloc_r+0x210>
8000c3ba:	4c c1       	ld.w %d15,[%a12]4
8000c3bc:	8f 3f c0 f1 	andn %d15,%d15,3
8000c3c0:	52 83       	sub %d3,%d15,%d8
8000c3c2:	8b 03 41 42 	lt %d4,%d3,16
8000c3c6:	df 04 16 80 	jne %d4,0,8000c3f2 <_malloc_r+0x146>
8000c3ca:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000c3ce:	8f 18 40 81 	or %d8,%d8,1
8000c3d2:	59 c8 04 00 	st.w [%a12]4,%d8
8000c3d6:	e8 52       	st.a [%a15]20,%a2
8000c3d8:	e8 42       	st.a [%a15]16,%a2
8000c3da:	8f 13 40 f1 	or %d15,%d3,1
8000c3de:	b5 23 0c 00 	st.a [%a2]12,%a3
8000c3e2:	b5 23 08 00 	st.a [%a2]8,%a3
8000c3e6:	6c 21       	st.w [%a2]4,%d15
8000c3e8:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000c3ec:	74 23       	st.w [%a2],%d3
8000c3ee:	1d 00 a5 01 	j 8000c738 <_malloc_r+0x48c>
8000c3f2:	e8 53       	st.a [%a15]20,%a3
8000c3f4:	e8 43       	st.a [%a15]16,%a3
8000c3f6:	0e 33       	jltz %d3,8000c3fc <_malloc_r+0x150>
8000c3f8:	10 cf       	addsc.a %a15,%a12,%d15,0
8000c3fa:	3c cf       	j 8000c398 <_malloc_r+0xec>
8000c3fc:	3b 00 20 30 	mov %d3,512
8000c400:	7f 3f 15 80 	jge.u %d15,%d3,8000c42a <_malloc_r+0x17e>
8000c404:	06 df       	sh %d15,-3
8000c406:	d0 f2       	addsc.a %a2,%a15,%d15,3
8000c408:	48 14       	ld.w %d4,[%a15]4
8000c40a:	99 24 08 00 	ld.a %a4,[%a2]8
8000c40e:	8f ef 3f 30 	sha %d3,%d15,-2
8000c412:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000c416:	b5 c4 08 00 	st.a [%a12]8,%a4
8000c41a:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
8000c41e:	b5 2c 08 00 	st.a [%a2]8,%a12
8000c422:	68 13       	st.w [%a15]4,%d3
8000c424:	b5 4c 0c 00 	st.a [%a4]12,%a12
8000c428:	3c 4a       	j 8000c4bc <_malloc_r+0x210>
8000c42a:	8f af 1f 40 	sh %d4,%d15,-6
8000c42e:	8f 7f 1f 30 	sh %d3,%d15,-9
8000c432:	1b 84 03 40 	addi %d4,%d4,56
8000c436:	bf 53 22 80 	jlt.u %d3,5,8000c47a <_malloc_r+0x1ce>
8000c43a:	8b 53 a1 42 	ge.u %d4,%d3,21
8000c43e:	f6 44       	jnz %d4,8000c446 <_malloc_r+0x19a>
8000c440:	1b b3 05 40 	addi %d4,%d3,91
8000c444:	3c 1b       	j 8000c47a <_malloc_r+0x1ce>
8000c446:	8b 53 a5 42 	ge.u %d4,%d3,85
8000c44a:	f6 46       	jnz %d4,8000c456 <_malloc_r+0x1aa>
8000c44c:	8f 4f 1f 40 	sh %d4,%d15,-12
8000c450:	1b e4 06 40 	addi %d4,%d4,110
8000c454:	3c 13       	j 8000c47a <_malloc_r+0x1ce>
8000c456:	8b 53 b5 42 	ge.u %d4,%d3,341
8000c45a:	f6 46       	jnz %d4,8000c466 <_malloc_r+0x1ba>
8000c45c:	8f 1f 1f 40 	sh %d4,%d15,-15
8000c460:	1b 74 07 40 	addi %d4,%d4,119
8000c464:	3c 0b       	j 8000c47a <_malloc_r+0x1ce>
8000c466:	3b 50 55 50 	mov %d5,1365
8000c46a:	3b e0 07 40 	mov %d4,126
8000c46e:	7f 53 06 80 	jge.u %d3,%d5,8000c47a <_malloc_r+0x1ce>
8000c472:	8f ef 1e 40 	sh %d4,%d15,-18
8000c476:	1b c4 07 40 	addi %d4,%d4,124
8000c47a:	01 f4 03 46 	addsc.a %a4,%a15,%d4,3
8000c47e:	99 42 08 00 	ld.a %a2,[%a4]8
8000c482:	7d 42 0d 80 	jne.a %a2,%a4,8000c49c <_malloc_r+0x1f0>
8000c486:	4c f1       	ld.w %d15,[%a15]4
8000c488:	86 e4       	sha %d4,-2
8000c48a:	d7 1f 01 44 	insert %d4,%d15,1,%d4,1
8000c48e:	40 24       	mov.aa %a4,%a2
8000c490:	68 14       	st.w [%a15]4,%d4
8000c492:	3c 0d       	j 8000c4ac <_malloc_r+0x200>
8000c494:	99 22 08 00 	ld.a %a2,[%a2]8
8000c498:	7d 42 08 00 	jeq.a %a2,%a4,8000c4a8 <_malloc_r+0x1fc>
8000c49c:	19 23 04 00 	ld.w %d3,[%a2]4
8000c4a0:	8f 33 c0 31 	andn %d3,%d3,3
8000c4a4:	3f 3f f8 ff 	jlt.u %d15,%d3,8000c494 <_malloc_r+0x1e8>
8000c4a8:	99 24 0c 00 	ld.a %a4,[%a2]12
8000c4ac:	b5 c4 0c 00 	st.a [%a12]12,%a4
8000c4b0:	b5 c2 08 00 	st.a [%a12]8,%a2
8000c4b4:	b5 4c 08 00 	st.a [%a4]8,%a12
8000c4b8:	b5 2c 0c 00 	st.a [%a2]12,%a12
8000c4bc:	8f e2 3f 30 	sha %d3,%d2,-2
8000c4c0:	82 1f       	mov %d15,1
8000c4c2:	0f 3f 00 f0 	sh %d15,%d15,%d3
8000c4c6:	48 13       	ld.w %d3,[%a15]4
8000c4c8:	3f f3 73 80 	jlt.u %d3,%d15,8000c5ae <_malloc_r+0x302>
8000c4cc:	0f 3f 80 40 	and %d4,%d15,%d3
8000c4d0:	f6 49       	jnz %d4,8000c4e2 <_malloc_r+0x236>
8000c4d2:	8f 32 c0 21 	andn %d2,%d2,3
8000c4d6:	06 1f       	sh %d15,1
8000c4d8:	0f 3f 80 40 	and %d4,%d15,%d3
8000c4dc:	c2 42       	add %d2,4
8000c4de:	df 04 fc 7f 	jeq %d4,0,8000c4d6 <_malloc_r+0x22a>
8000c4e2:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000c4e6:	02 24       	mov %d4,%d2
8000c4e8:	40 24       	mov.aa %a4,%a2
8000c4ea:	99 4c 0c 00 	ld.a %a12,[%a4]12
8000c4ee:	7d 4c 3c 00 	jeq.a %a12,%a4,8000c566 <_malloc_r+0x2ba>
8000c4f2:	19 c6 04 00 	ld.w %d6,[%a12]4
8000c4f6:	8f 36 c0 61 	andn %d6,%d6,3
8000c4fa:	0b 86 80 30 	sub %d3,%d6,%d8
8000c4fe:	8b 03 41 52 	lt %d5,%d3,16
8000c502:	df 05 1d 80 	jne %d5,0,8000c53c <_malloc_r+0x290>
8000c506:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000c50a:	8f 18 40 81 	or %d8,%d8,1
8000c50e:	59 c8 04 00 	st.w [%a12]4,%d8
8000c512:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000c516:	09 c5 88 05 	ld.a %a5,[+%a12]8
8000c51a:	8f 13 40 f1 	or %d15,%d3,1
8000c51e:	b5 54 0c 00 	st.a [%a5]12,%a4
8000c522:	b5 45 08 00 	st.a [%a4]8,%a5
8000c526:	e8 52       	st.a [%a15]20,%a2
8000c528:	e8 42       	st.a [%a15]16,%a2
8000c52a:	b5 23 0c 00 	st.a [%a2]12,%a3
8000c52e:	b5 23 08 00 	st.a [%a2]8,%a3
8000c532:	6c 21       	st.w [%a2]4,%d15
8000c534:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000c538:	74 23       	st.w [%a2],%d3
8000c53a:	3c 0e       	j 8000c556 <_malloc_r+0x2aa>
8000c53c:	bf 03 12 00 	jlt %d3,0,8000c560 <_malloc_r+0x2b4>
8000c540:	01 c6 00 f6 	addsc.a %a15,%a12,%d6,0
8000c544:	b7 10 21 20 	imask %e2,1,0,1
8000c548:	49 f2 44 08 	ldmst [%a15]4,%e2
8000c54c:	cc c3       	ld.a %a15,[%a12]12
8000c54e:	09 c2 88 05 	ld.a %a2,[+%a12]8
8000c552:	ec 23       	st.a [%a2]12,%a15
8000c554:	e8 22       	st.a [%a15]8,%a2
8000c556:	40 d4       	mov.aa %a4,%a13
8000c558:	6d 00 f8 00 	call 8000c748 <__malloc_unlock>
8000c55c:	1d 00 f3 00 	j 8000c742 <_malloc_r+0x496>
8000c560:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000c564:	3c c5       	j 8000c4ee <_malloc_r+0x242>
8000c566:	c2 14       	add %d4,1
8000c568:	8f 34 00 31 	and %d3,%d4,3
8000c56c:	d9 44 08 00 	lea %a4,[%a4]8
8000c570:	df 03 bd ff 	jne %d3,0,8000c4ea <_malloc_r+0x23e>
8000c574:	8f 32 00 31 	and %d3,%d2,3
8000c578:	f6 36       	jnz %d3,8000c584 <_malloc_r+0x2d8>
8000c57a:	48 12       	ld.w %d2,[%a15]4
8000c57c:	0f f2 e0 20 	andn %d2,%d2,%d15
8000c580:	68 12       	st.w [%a15]4,%d2
8000c582:	3c 07       	j 8000c590 <_malloc_r+0x2e4>
8000c584:	d9 24 f8 ff 	lea %a4,[%a2]-8
8000c588:	d4 22       	ld.a %a2,[%a2]
8000c58a:	c2 f2       	add %d2,-1
8000c58c:	7d 42 f4 7f 	jeq.a %a2,%a4,8000c574 <_malloc_r+0x2c8>
8000c590:	06 1f       	sh %d15,1
8000c592:	48 12       	ld.w %d2,[%a15]4
8000c594:	8b 0f 20 32 	ne %d3,%d15,0
8000c598:	0b f2 50 32 	and.ge.u %d3,%d2,%d15
8000c59c:	76 39       	jz %d3,8000c5ae <_malloc_r+0x302>
8000c59e:	0f 2f 80 30 	and %d3,%d15,%d2
8000c5a2:	f6 34       	jnz %d3,8000c5aa <_malloc_r+0x2fe>
8000c5a4:	c2 44       	add %d4,4
8000c5a6:	06 1f       	sh %d15,1
8000c5a8:	3c fb       	j 8000c59e <_malloc_r+0x2f2>
8000c5aa:	02 42       	mov %d2,%d4
8000c5ac:	3c 9b       	j 8000c4e2 <_malloc_r+0x236>
8000c5ae:	c8 2c       	ld.a %a12,[%a15]8
8000c5b0:	19 ca 04 00 	ld.w %d10,[%a12]4
8000c5b4:	8f 3a c0 a1 	andn %d10,%d10,3
8000c5b8:	5a 8a       	sub %d15,%d10,%d8
8000c5ba:	8b 0f 41 22 	lt %d2,%d15,16
8000c5be:	0b 8a a0 22 	or.lt.u %d2,%d10,%d8
8000c5c2:	df 02 b1 00 	jeq %d2,0,8000c724 <_malloc_r+0x478>
8000c5c6:	91 00 00 27 	movh.a %a2,28672
8000c5ca:	19 2b 98 d0 	ld.w %d11,[%a2]2904 <70000b58 <__malloc_top_pad>>
8000c5ce:	91 00 00 27 	movh.a %a2,28672
8000c5d2:	42 8b       	add %d11,%d8
8000c5d4:	19 23 20 00 	ld.w %d3,[%a2]32 <70000020 <__malloc_sbrk_base>>
8000c5d8:	1b fb 00 f1 	addi %d15,%d11,4111
8000c5dc:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000c5e0:	1b 0b 01 20 	addi %d2,%d11,16
8000c5e4:	8b f3 3f b2 	ne %d11,%d3,-1
8000c5e8:	2b 2f 40 bb 	sel %d11,%d11,%d15,%d2
8000c5ec:	40 d4       	mov.aa %a4,%a13
8000c5ee:	02 b4       	mov %d4,%d11
8000c5f0:	80 2c       	mov.d %d12,%a2
8000c5f2:	6d 00 ac 00 	call 8000c74a <_sbrk_r>
8000c5f6:	80 29       	mov.d %d9,%a2
8000c5f8:	df f9 86 00 	jeq %d9,-1,8000c704 <_malloc_r+0x458>
8000c5fc:	80 c2       	mov.d %d2,%a12
8000c5fe:	80 c3       	mov.d %d3,%a12
8000c600:	42 a2       	add %d2,%d10
8000c602:	80 f4       	mov.d %d4,%a15
8000c604:	0b 29 30 f1 	lt.u %d15,%d9,%d2
8000c608:	0b 43 10 f2 	and.ne %d15,%d3,%d4
8000c60c:	01 fc 10 d4 	ne.a %d13,%a12,%a15
8000c610:	ee 7a       	jnz %d15,8000c704 <_malloc_r+0x458>
8000c612:	91 00 00 e7 	movh.a %a14,28672
8000c616:	19 e3 a8 c0 	ld.w %d3,[%a14]2856 <70000b28 <__malloc_current_mallinfo>>
8000c61a:	42 b3       	add %d3,%d11
8000c61c:	59 e3 a8 c0 	st.w [%a14]2856 <70000b28 <__malloc_current_mallinfo>>,%d3
8000c620:	5f 29 0c 80 	jne %d9,%d2,8000c638 <_malloc_r+0x38c>
8000c624:	b7 09 14 f6 	insert %d15,%d9,0,12,20
8000c628:	ee 08       	jnz %d15,8000c638 <_malloc_r+0x38c>
8000c62a:	c8 22       	ld.a %a2,[%a15]8
8000c62c:	42 ba       	add %d10,%d11
8000c62e:	8f 1a 40 a1 	or %d10,%d10,1
8000c632:	59 2a 04 00 	st.w [%a2]4,%d10
8000c636:	3c 55       	j 8000c6e0 <_malloc_r+0x434>
8000c638:	60 c2       	mov.a %a2,%d12
8000c63a:	19 2f 20 00 	ld.w %d15,[%a2]32
8000c63e:	5e f6       	jne %d15,-1,8000c64a <_malloc_r+0x39e>
8000c640:	91 00 00 27 	movh.a %a2,28672
8000c644:	59 29 20 00 	st.w [%a2]32 <70000020 <__malloc_sbrk_base>>,%d9
8000c648:	3c 06       	j 8000c654 <_malloc_r+0x3a8>
8000c64a:	0b 29 80 20 	sub %d2,%d9,%d2
8000c64e:	42 23       	add %d3,%d2
8000c650:	59 e3 a8 c0 	st.w [%a14]2856 <70000b28 <__malloc_current_mallinfo>>,%d3
8000c654:	8f 79 00 21 	and %d2,%d9,7
8000c658:	82 0f       	mov %d15,0
8000c65a:	76 24       	jz %d2,8000c662 <_malloc_r+0x3b6>
8000c65c:	8b 82 00 f1 	rsub %d15,%d2,8
8000c660:	42 f9       	add %d9,%d15
8000c662:	42 9b       	add %d11,%d9
8000c664:	b7 0b 14 b6 	insert %d11,%d11,0,12,20
8000c668:	1b 0f 00 21 	addi %d2,%d15,4096
8000c66c:	5a b2       	sub %d15,%d2,%d11
8000c66e:	40 d4       	mov.aa %a4,%a13
8000c670:	02 f4       	mov %d4,%d15
8000c672:	6d 00 6c 00 	call 8000c74a <_sbrk_r>
8000c676:	80 22       	mov.d %d2,%a2
8000c678:	df f2 04 80 	jne %d2,-1,8000c680 <_malloc_r+0x3d4>
8000c67c:	60 92       	mov.a %a2,%d9
8000c67e:	82 0f       	mov %d15,0
8000c680:	80 2b       	mov.d %d11,%a2
8000c682:	19 e2 a8 c0 	ld.w %d2,[%a14]2856 <70000b28 <__malloc_current_mallinfo>>
8000c686:	a2 9b       	sub %d11,%d9
8000c688:	42 f2       	add %d2,%d15
8000c68a:	60 92       	mov.a %a2,%d9
8000c68c:	42 bf       	add %d15,%d11
8000c68e:	68 29       	st.w [%a15]8,%d9
8000c690:	8f 1f 40 31 	or %d3,%d15,1
8000c694:	59 e2 a8 c0 	st.w [%a14]2856 <70000b28 <__malloc_current_mallinfo>>,%d2
8000c698:	59 23 04 00 	st.w [%a2]4 <70000b28 <__malloc_current_mallinfo>>,%d3
8000c69c:	df 0d 22 00 	jeq %d13,0,8000c6e0 <_malloc_r+0x434>
8000c6a0:	8b 0a a1 f2 	ge.u %d15,%d10,16
8000c6a4:	ee 05       	jnz %d15,8000c6ae <_malloc_r+0x402>
8000c6a6:	82 12       	mov %d2,1
8000c6a8:	59 22 04 00 	st.w [%a2]4,%d2
8000c6ac:	3c 2c       	j 8000c704 <_malloc_r+0x458>
8000c6ae:	1b 4a ff af 	addi %d10,%d10,-12
8000c6b2:	8f 7a c0 f1 	andn %d15,%d10,7
8000c6b6:	10 c2       	addsc.a %a2,%a12,%d15,0
8000c6b8:	82 52       	mov %d2,5
8000c6ba:	59 22 04 00 	st.w [%a2]4,%d2
8000c6be:	59 22 08 00 	st.w [%a2]8,%d2
8000c6c2:	19 c2 04 00 	ld.w %d2,[%a12]4
8000c6c6:	8f 12 00 21 	and %d2,%d2,1
8000c6ca:	a6 f2       	or %d2,%d15
8000c6cc:	59 c2 04 00 	st.w [%a12]4,%d2
8000c6d0:	8b 0f 61 f2 	lt.u %d15,%d15,16
8000c6d4:	ee 06       	jnz %d15,8000c6e0 <_malloc_r+0x434>
8000c6d6:	40 d4       	mov.aa %a4,%a13
8000c6d8:	d9 c5 08 00 	lea %a5,[%a12]8
8000c6dc:	6d 00 dd 00 	call 8000c896 <_free_r>
8000c6e0:	91 00 00 27 	movh.a %a2,28672
8000c6e4:	19 ef a8 c0 	ld.w %d15,[%a14]2856 <70000b28 <__malloc_current_mallinfo>>
8000c6e8:	19 22 94 d0 	ld.w %d2,[%a2]2900 <70000b54 <__malloc_max_sbrked_mem>>
8000c6ec:	7f f2 04 80 	jge.u %d2,%d15,8000c6f4 <_malloc_r+0x448>
8000c6f0:	59 2f 94 d0 	st.w [%a2]2900 <70000b54 <__malloc_max_sbrked_mem>>,%d15
8000c6f4:	91 00 00 27 	movh.a %a2,28672
8000c6f8:	19 22 90 d0 	ld.w %d2,[%a2]2896 <70000b50 <__malloc_max_total_mem>>
8000c6fc:	7f f2 04 80 	jge.u %d2,%d15,8000c704 <_malloc_r+0x458>
8000c700:	59 2f 90 d0 	st.w [%a2]2896 <70000b50 <__malloc_max_total_mem>>,%d15
8000c704:	c8 22       	ld.a %a2,[%a15]8
8000c706:	19 22 04 00 	ld.w %d2,[%a2]4 <70000b50 <__malloc_max_total_mem>>
8000c70a:	8f 32 c0 21 	andn %d2,%d2,3
8000c70e:	5a 82       	sub %d15,%d2,%d8
8000c710:	8b 0f 41 32 	lt %d3,%d15,16
8000c714:	0b 82 a0 32 	or.lt.u %d3,%d2,%d8
8000c718:	76 36       	jz %d3,8000c724 <_malloc_r+0x478>
8000c71a:	40 d4       	mov.aa %a4,%a13
8000c71c:	6d 00 16 00 	call 8000c748 <__malloc_unlock>
8000c720:	a0 0c       	mov.a %a12,0
8000c722:	3c 10       	j 8000c742 <_malloc_r+0x496>
8000c724:	c8 2c       	ld.a %a12,[%a15]8
8000c726:	8f 18 40 21 	or %d2,%d8,1
8000c72a:	96 01       	or %d15,1
8000c72c:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000c730:	59 c2 04 00 	st.w [%a12]4,%d2
8000c734:	e8 22       	st.a [%a15]8,%a2
8000c736:	6c 21       	st.w [%a2]4,%d15
8000c738:	40 d4       	mov.aa %a4,%a13
8000c73a:	6d 00 07 00 	call 8000c748 <__malloc_unlock>
8000c73e:	d9 cc 08 00 	lea %a12,[%a12]8
8000c742:	40 c2       	mov.aa %a2,%a12
8000c744:	00 90       	ret 

8000c746 <__malloc_lock>:
8000c746:	00 90       	ret 

8000c748 <__malloc_unlock>:
8000c748:	00 90       	ret 

8000c74a <_sbrk_r>:
8000c74a:	82 0f       	mov %d15,0
8000c74c:	91 00 00 c7 	movh.a %a12,28672
8000c750:	59 cf a0 d0 	st.w [%a12]2912 <70000b60 <errno>>,%d15
8000c754:	40 4f       	mov.aa %a15,%a4
8000c756:	6d 00 2d 17 	call 8000f5b0 <sbrk>
8000c75a:	80 2f       	mov.d %d15,%a2
8000c75c:	5e f5       	jne %d15,-1,8000c766 <_sbrk_r+0x1c>
8000c75e:	19 cf a0 d0 	ld.w %d15,[%a12]2912 <70000b60 <errno>>
8000c762:	6e 02       	jz %d15,8000c766 <_sbrk_r+0x1c>
8000c764:	68 0f       	st.w [%a15]0,%d15
8000c766:	00 90       	ret 

8000c768 <strlen>:
8000c768:	80 42       	mov.d %d2,%a4
8000c76a:	80 4f       	mov.d %d15,%a4
8000c76c:	60 ff       	mov.a %a15,%d15
8000c76e:	79 f3 00 00 	ld.b %d3,[%a15]0
8000c772:	76 33       	jz %d3,8000c778 <strlen+0x10>
8000c774:	c2 1f       	add %d15,1
8000c776:	3c fb       	j 8000c76c <strlen+0x4>
8000c778:	52 22       	sub %d2,%d15,%d2
8000c77a:	00 90       	ret 

8000c77c <_vsnprintf_r>:
8000c77c:	20 68       	sub.a %sp,104
8000c77e:	40 4f       	mov.aa %a15,%a4
8000c780:	ce 45       	jgez %d4,8000c78a <_vsnprintf_r+0xe>
8000c782:	da 8b       	mov %d15,139
8000c784:	6c 40       	st.w [%a4]0,%d15
8000c786:	82 f2       	mov %d2,-1
8000c788:	00 90       	ret 
8000c78a:	02 4f       	mov %d15,%d4
8000c78c:	3b 80 20 20 	mov %d2,520
8000c790:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000c794:	92 f2       	add %d2,%d15,-1
8000c796:	ea 02       	cmovn %d2,%d15,0
8000c798:	f4 a5       	st.a [%sp],%a5
8000c79a:	b5 a5 10 00 	st.a [%sp]16,%a5
8000c79e:	59 a2 08 00 	st.w [%sp]8,%d2
8000c7a2:	59 a2 14 00 	st.w [%sp]20,%d2
8000c7a6:	40 a5       	mov.aa %a5,%sp
8000c7a8:	82 f2       	mov %d2,-1
8000c7aa:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000c7ae:	6d 00 4b 01 	call 8000ca44 <_svfprintf_r>
8000c7b2:	ff f2 05 00 	jge %d2,-1,8000c7bc <_vsnprintf_r+0x40>
8000c7b6:	3b b0 08 30 	mov %d3,139
8000c7ba:	68 03       	st.w [%a15]0,%d3
8000c7bc:	6e 04       	jz %d15,8000c7c4 <_vsnprintf_r+0x48>
8000c7be:	d8 00       	ld.a %a15,[%sp]0
8000c7c0:	82 0f       	mov %d15,0
8000c7c2:	28 0f       	st.b [%a15]0,%d15
8000c7c4:	00 90       	ret 

8000c7c6 <vsnprintf>:
8000c7c6:	91 00 00 37 	movh.a %a3,28672
8000c7ca:	40 42       	mov.aa %a2,%a4
8000c7cc:	99 34 70 00 	ld.a %a4,[%a3]1072 <70000430 <_impure_ptr>>
8000c7d0:	40 5f       	mov.aa %a15,%a5
8000c7d2:	40 67       	mov.aa %a7,%a6
8000c7d4:	40 25       	mov.aa %a5,%a2
8000c7d6:	40 f6       	mov.aa %a6,%a15
8000c7d8:	1d ff d2 ff 	j 8000c77c <_vsnprintf_r>

8000c7dc <_malloc_trim_r>:
8000c7dc:	02 4f       	mov %d15,%d4
8000c7de:	40 4f       	mov.aa %a15,%a4
8000c7e0:	6d ff b3 ff 	call 8000c746 <__malloc_lock>
8000c7e4:	91 00 00 c7 	movh.a %a12,28672
8000c7e8:	d9 cc 28 00 	lea %a12,[%a12]40 <70000028 <__malloc_av_>>
8000c7ec:	99 c2 08 00 	ld.a %a2,[%a12]8 <70000008 <osEE_kcb_var>>
8000c7f0:	3b 00 00 21 	mov %d2,4096
8000c7f4:	19 28 04 00 	ld.w %d8,[%a2]4
8000c7f8:	8f 38 c0 81 	andn %d8,%d8,3
8000c7fc:	5a f8       	sub %d15,%d8,%d15
8000c7fe:	1b ff fe f0 	addi %d15,%d15,4079
8000c802:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000c806:	1b 0f 00 ff 	addi %d15,%d15,-4096
8000c80a:	7f 2f 07 00 	jge %d15,%d2,8000c818 <_malloc_trim_r+0x3c>
8000c80e:	40 f4       	mov.aa %a4,%a15
8000c810:	6d ff 9c ff 	call 8000c748 <__malloc_unlock>
8000c814:	82 02       	mov %d2,0
8000c816:	00 90       	ret 
8000c818:	40 f4       	mov.aa %a4,%a15
8000c81a:	82 04       	mov %d4,0
8000c81c:	6d ff 97 ff 	call 8000c74a <_sbrk_r>
8000c820:	99 c3 08 00 	ld.a %a3,[%a12]8
8000c824:	60 84       	mov.a %a4,%d8
8000c826:	30 43       	add.a %a3,%a4
8000c828:	7d 32 f3 ff 	jne.a %a2,%a3,8000c80e <_malloc_trim_r+0x32>
8000c82c:	40 f4       	mov.aa %a4,%a15
8000c82e:	8b 0f 00 41 	rsub %d4,%d15,0
8000c832:	6d ff 8c ff 	call 8000c74a <_sbrk_r>
8000c836:	80 22       	mov.d %d2,%a2
8000c838:	df f2 1c 80 	jne %d2,-1,8000c870 <_malloc_trim_r+0x94>
8000c83c:	40 f4       	mov.aa %a4,%a15
8000c83e:	82 04       	mov %d4,0
8000c840:	6d ff 85 ff 	call 8000c74a <_sbrk_r>
8000c844:	99 c3 08 00 	ld.a %a3,[%a12]8
8000c848:	01 32 20 40 	sub.a %a4,%a2,%a3
8000c84c:	80 4f       	mov.d %d15,%a4
8000c84e:	8b 0f 41 22 	lt %d2,%d15,16
8000c852:	df 02 de ff 	jne %d2,0,8000c80e <_malloc_trim_r+0x32>
8000c856:	91 00 00 47 	movh.a %a4,28672
8000c85a:	99 44 20 00 	ld.a %a4,[%a4]32 <70000020 <__malloc_sbrk_base>>
8000c85e:	96 01       	or %d15,1
8000c860:	6c 31       	st.w [%a3]4,%d15
8000c862:	01 42 20 20 	sub.a %a2,%a2,%a4
8000c866:	91 00 00 47 	movh.a %a4,28672
8000c86a:	b5 42 a8 c0 	st.a [%a4]2856 <70000b28 <__malloc_current_mallinfo>>,%a2
8000c86e:	3c d0       	j 8000c80e <_malloc_trim_r+0x32>
8000c870:	99 c2 08 00 	ld.a %a2,[%a12]8
8000c874:	a2 f8       	sub %d8,%d15
8000c876:	8f 18 40 81 	or %d8,%d8,1
8000c87a:	59 28 04 00 	st.w [%a2]4,%d8
8000c87e:	91 00 00 27 	movh.a %a2,28672
8000c882:	19 22 a8 c0 	ld.w %d2,[%a2]2856 <70000b28 <__malloc_current_mallinfo>>
8000c886:	40 f4       	mov.aa %a4,%a15
8000c888:	5a f2       	sub %d15,%d2,%d15
8000c88a:	59 2f a8 c0 	st.w [%a2]2856 <70000b28 <__malloc_current_mallinfo>>,%d15
8000c88e:	6d ff 5d ff 	call 8000c748 <__malloc_unlock>
8000c892:	82 12       	mov %d2,1
8000c894:	00 90       	ret 

8000c896 <_free_r>:
8000c896:	40 4d       	mov.aa %a13,%a4
8000c898:	bd 05 d4 00 	jz.a %a5,8000ca40 <_free_r+0x1aa>
8000c89c:	40 5c       	mov.aa %a12,%a5
8000c89e:	6d ff 54 ff 	call 8000c746 <__malloc_lock>
8000c8a2:	19 c4 fc ff 	ld.w %d4,[%a12]-4
8000c8a6:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000c8aa:	8f 14 c0 f1 	andn %d15,%d4,1
8000c8ae:	91 00 00 27 	movh.a %a2,28672
8000c8b2:	10 f3       	addsc.a %a3,%a15,%d15,0
8000c8b4:	d9 22 28 00 	lea %a2,[%a2]40 <70000028 <__malloc_av_>>
8000c8b8:	99 24 08 00 	ld.a %a4,[%a2]8 <70000008 <osEE_kcb_var>>
8000c8bc:	19 33 04 00 	ld.w %d3,[%a3]4 <70000008 <osEE_kcb_var>>
8000c8c0:	8f 14 00 41 	and %d4,%d4,1
8000c8c4:	8f 33 c0 31 	andn %d3,%d3,3
8000c8c8:	7d 43 24 80 	jne.a %a3,%a4,8000c910 <_free_r+0x7a>
8000c8cc:	42 3f       	add %d15,%d3
8000c8ce:	f6 4d       	jnz %d4,8000c8e8 <_free_r+0x52>
8000c8d0:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000c8d4:	60 23       	mov.a %a3,%d2
8000c8d6:	42 2f       	add %d15,%d2
8000c8d8:	01 3f 20 f0 	sub.a %a15,%a15,%a3
8000c8dc:	c8 33       	ld.a %a3,[%a15]12
8000c8de:	c8 24       	ld.a %a4,[%a15]8
8000c8e0:	b5 43 0c 00 	st.a [%a4]12,%a3
8000c8e4:	b5 34 08 00 	st.a [%a3]8,%a4
8000c8e8:	8f 1f 40 21 	or %d2,%d15,1
8000c8ec:	68 12       	st.w [%a15]4,%d2
8000c8ee:	ec 22       	st.a [%a2]8,%a15
8000c8f0:	91 00 00 f7 	movh.a %a15,28672
8000c8f4:	19 f2 24 00 	ld.w %d2,[%a15]36 <70000024 <__malloc_trim_threshold>>
8000c8f8:	3f 2f 09 80 	jlt.u %d15,%d2,8000c90a <_free_r+0x74>
8000c8fc:	91 00 00 f7 	movh.a %a15,28672
8000c900:	40 d4       	mov.aa %a4,%a13
8000c902:	19 f4 98 d0 	ld.w %d4,[%a15]2904 <70000b58 <__malloc_top_pad>>
8000c906:	6d ff 6b ff 	call 8000c7dc <_malloc_trim_r>
8000c90a:	40 d4       	mov.aa %a4,%a13
8000c90c:	1d ff 1e ff 	j 8000c748 <__malloc_unlock>
8000c910:	59 33 04 00 	st.w [%a3]4,%d3
8000c914:	82 02       	mov %d2,0
8000c916:	df 04 16 80 	jne %d4,0,8000c942 <_free_r+0xac>
8000c91a:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000c91e:	60 24       	mov.a %a4,%d2
8000c920:	42 2f       	add %d15,%d2
8000c922:	01 4f 20 f0 	sub.a %a15,%a15,%a4
8000c926:	c8 25       	ld.a %a5,[%a15]8
8000c928:	91 00 00 47 	movh.a %a4,28672
8000c92c:	d9 44 30 00 	lea %a4,[%a4]48 <70000030 <__malloc_av_+0x8>>
8000c930:	82 12       	mov %d2,1
8000c932:	7d 45 08 00 	jeq.a %a5,%a4,8000c942 <_free_r+0xac>
8000c936:	c8 34       	ld.a %a4,[%a15]12
8000c938:	82 02       	mov %d2,0
8000c93a:	b5 54 0c 00 	st.a [%a5]12,%a4
8000c93e:	b5 45 08 00 	st.a [%a4]8,%a5
8000c942:	01 33 00 46 	addsc.a %a4,%a3,%d3,0
8000c946:	19 44 04 00 	ld.w %d4,[%a4]4
8000c94a:	6f 04 18 80 	jnz.t %d4,0,8000c97a <_free_r+0xe4>
8000c94e:	42 3f       	add %d15,%d3
8000c950:	99 35 08 00 	ld.a %a5,[%a3]8
8000c954:	f6 2d       	jnz %d2,8000c96e <_free_r+0xd8>
8000c956:	91 00 00 47 	movh.a %a4,28672
8000c95a:	d9 44 30 00 	lea %a4,[%a4]48 <70000030 <__malloc_av_+0x8>>
8000c95e:	7d 45 08 80 	jne.a %a5,%a4,8000c96e <_free_r+0xd8>
8000c962:	ec 25       	st.a [%a2]20,%a15
8000c964:	ec 24       	st.a [%a2]16,%a15
8000c966:	e8 35       	st.a [%a15]12,%a5
8000c968:	e8 25       	st.a [%a15]8,%a5
8000c96a:	82 12       	mov %d2,1
8000c96c:	3c 07       	j 8000c97a <_free_r+0xe4>
8000c96e:	99 33 0c 00 	ld.a %a3,[%a3]12
8000c972:	b5 53 0c 00 	st.a [%a5]12,%a3
8000c976:	b5 35 08 00 	st.a [%a3]8,%a5
8000c97a:	8f 1f 40 31 	or %d3,%d15,1
8000c97e:	10 f3       	addsc.a %a3,%a15,%d15,0
8000c980:	68 13       	st.w [%a15]4,%d3
8000c982:	6c 30       	st.w [%a3]0,%d15
8000c984:	df 02 c3 ff 	jne %d2,0,8000c90a <_free_r+0x74>
8000c988:	3b 00 20 20 	mov %d2,512
8000c98c:	7f 2f 12 80 	jge.u %d15,%d2,8000c9b0 <_free_r+0x11a>
8000c990:	19 23 04 00 	ld.w %d3,[%a2]4
8000c994:	06 df       	sh %d15,-3
8000c996:	8f ef 3f 20 	sha %d2,%d15,-2
8000c99a:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000c99e:	59 22 04 00 	st.w [%a2]4,%d2
8000c9a2:	d0 22       	addsc.a %a2,%a2,%d15,3
8000c9a4:	99 23 08 00 	ld.a %a3,[%a2]8
8000c9a8:	e8 32       	st.a [%a15]12,%a2
8000c9aa:	e8 23       	st.a [%a15]8,%a3
8000c9ac:	ec 22       	st.a [%a2]8,%a15
8000c9ae:	3c 46       	j 8000ca3a <_free_r+0x1a4>
8000c9b0:	8f af 1f 30 	sh %d3,%d15,-6
8000c9b4:	8f 7f 1f 20 	sh %d2,%d15,-9
8000c9b8:	1b 83 03 30 	addi %d3,%d3,56
8000c9bc:	bf 52 22 80 	jlt.u %d2,5,8000ca00 <_free_r+0x16a>
8000c9c0:	8b 52 a1 32 	ge.u %d3,%d2,21
8000c9c4:	f6 34       	jnz %d3,8000c9cc <_free_r+0x136>
8000c9c6:	1b b2 05 30 	addi %d3,%d2,91
8000c9ca:	3c 1b       	j 8000ca00 <_free_r+0x16a>
8000c9cc:	8b 52 a5 32 	ge.u %d3,%d2,85
8000c9d0:	f6 36       	jnz %d3,8000c9dc <_free_r+0x146>
8000c9d2:	8f 4f 1f 30 	sh %d3,%d15,-12
8000c9d6:	1b e3 06 30 	addi %d3,%d3,110
8000c9da:	3c 13       	j 8000ca00 <_free_r+0x16a>
8000c9dc:	8b 52 b5 32 	ge.u %d3,%d2,341
8000c9e0:	f6 36       	jnz %d3,8000c9ec <_free_r+0x156>
8000c9e2:	8f 1f 1f 30 	sh %d3,%d15,-15
8000c9e6:	1b 73 07 30 	addi %d3,%d3,119
8000c9ea:	3c 0b       	j 8000ca00 <_free_r+0x16a>
8000c9ec:	3b 50 55 40 	mov %d4,1365
8000c9f0:	3b e0 07 30 	mov %d3,126
8000c9f4:	7f 42 06 80 	jge.u %d2,%d4,8000ca00 <_free_r+0x16a>
8000c9f8:	8f ef 1e 30 	sh %d3,%d15,-18
8000c9fc:	1b c3 07 30 	addi %d3,%d3,124
8000ca00:	01 23 03 66 	addsc.a %a6,%a2,%d3,3
8000ca04:	99 65 08 00 	ld.a %a5,[%a6]8
8000ca08:	40 53       	mov.aa %a3,%a5
8000ca0a:	7d 65 0d 80 	jne.a %a5,%a6,8000ca24 <_free_r+0x18e>
8000ca0e:	4c 21       	ld.w %d15,[%a2]4
8000ca10:	86 e3       	sha %d3,-2
8000ca12:	d7 1f 01 33 	insert %d3,%d15,1,%d3,1
8000ca16:	59 23 04 00 	st.w [%a2]4,%d3
8000ca1a:	3c 0d       	j 8000ca34 <_free_r+0x19e>
8000ca1c:	99 33 08 00 	ld.a %a3,[%a3]8
8000ca20:	7d 63 08 00 	jeq.a %a3,%a6,8000ca30 <_free_r+0x19a>
8000ca24:	19 32 04 00 	ld.w %d2,[%a3]4
8000ca28:	8f 32 c0 21 	andn %d2,%d2,3
8000ca2c:	3f 2f f8 ff 	jlt.u %d15,%d2,8000ca1c <_free_r+0x186>
8000ca30:	99 35 0c 00 	ld.a %a5,[%a3]12
8000ca34:	e8 35       	st.a [%a15]12,%a5
8000ca36:	e8 23       	st.a [%a15]8,%a3
8000ca38:	ec 52       	st.a [%a5]8,%a15
8000ca3a:	ec 33       	st.a [%a3]12,%a15
8000ca3c:	1d ff 67 ff 	j 8000c90a <_free_r+0x74>
8000ca40:	00 90       	ret 
	...

8000ca44 <_svfprintf_r>:
8000ca44:	20 d0       	sub.a %sp,208
8000ca46:	80 5b       	mov.d %d11,%a5
8000ca48:	80 4c       	mov.d %d12,%a4
8000ca4a:	b5 a6 18 00 	st.a [%sp]24,%a6
8000ca4e:	40 7f       	mov.aa %a15,%a7
8000ca50:	6d 00 c4 0f 	call 8000e9d8 <_localeconv_r>
8000ca54:	d4 22       	ld.a %a2,[%a2]
8000ca56:	40 24       	mov.aa %a4,%a2
8000ca58:	b5 a2 34 00 	st.a [%sp]52,%a2
8000ca5c:	6d ff 86 fe 	call 8000c768 <strlen>
8000ca60:	60 b2       	mov.a %a2,%d11
8000ca62:	59 a2 20 00 	st.w [%sp]32,%d2
8000ca66:	8c 26       	ld.h %d15,[%a2]12
8000ca68:	6f 7f 16 00 	jz.t %d15,7,8000ca94 <_svfprintf_r+0x50>
8000ca6c:	4c 24       	ld.w %d15,[%a2]16
8000ca6e:	ee 13       	jnz %d15,8000ca94 <_svfprintf_r+0x50>
8000ca70:	60 c4       	mov.a %a4,%d12
8000ca72:	3b 00 04 40 	mov %d4,64
8000ca76:	6d ff 1b fc 	call 8000c2ac <_malloc_r>
8000ca7a:	60 b3       	mov.a %a3,%d11
8000ca7c:	f4 32       	st.a [%a3],%a2
8000ca7e:	b5 32 10 00 	st.a [%a3]16,%a2
8000ca82:	7c 26       	jnz.a %a2,8000ca8e <_svfprintf_r+0x4a>
8000ca84:	60 cf       	mov.a %a15,%d12
8000ca86:	da 0c       	mov %d15,12
8000ca88:	68 0f       	st.w [%a15]0,%d15
8000ca8a:	82 f2       	mov %d2,-1
8000ca8c:	00 90       	ret 
8000ca8e:	60 b2       	mov.a %a2,%d11
8000ca90:	da 40       	mov %d15,64
8000ca92:	6c 25       	st.w [%a2]20,%d15
8000ca94:	82 0f       	mov %d15,0
8000ca96:	d9 a2 10 20 	lea %a2,[%sp]144
8000ca9a:	a0 03       	mov.a %a3,0
8000ca9c:	b5 a2 1c 10 	st.a [%sp]92,%a2
8000caa0:	78 19       	st.w [%sp]100,%d15
8000caa2:	78 18       	st.w [%sp]96,%d15
8000caa4:	78 05       	st.w [%sp]20,%d15
8000caa6:	78 0b       	st.w [%sp]44,%d15
8000caa8:	78 0c       	st.w [%sp]48,%d15
8000caaa:	b5 a3 3c 00 	st.a [%sp]60,%a3
8000caae:	78 0e       	st.w [%sp]56,%d15
8000cab0:	78 0a       	st.w [%sp]40,%d15
8000cab2:	40 2e       	mov.aa %a14,%a2
8000cab4:	99 ac 18 00 	ld.a %a12,[%sp]24
8000cab8:	79 cf 00 00 	ld.b %d15,[%a12]0
8000cabc:	8b 0f 20 32 	ne %d3,%d15,0
8000cac0:	8b 5f 22 34 	and.ne %d3,%d15,37
8000cac4:	76 33       	jz %d3,8000caca <_svfprintf_r+0x86>
8000cac6:	b0 1c       	add.a %a12,1
8000cac8:	3c f8       	j 8000cab8 <_svfprintf_r+0x74>
8000caca:	99 a3 18 00 	ld.a %a3,[%sp]24
8000cace:	01 3c 20 30 	sub.a %a3,%a12,%a3
8000cad2:	80 3f       	mov.d %d15,%a3
8000cad4:	6e 23       	jz %d15,8000cb1a <_svfprintf_r+0xd6>
8000cad6:	19 a3 24 10 	ld.w %d3,[%sp]100
8000cada:	99 a3 18 00 	ld.a %a3,[%sp]24
8000cade:	42 f3       	add %d3,%d15
8000cae0:	59 a3 24 10 	st.w [%sp]100,%d3
8000cae4:	19 a3 20 10 	ld.w %d3,[%sp]96
8000cae8:	f4 e3       	st.a [%a14],%a3
8000caea:	c2 13       	add %d3,1
8000caec:	6c e1       	st.w [%a14]4,%d15
8000caee:	59 a3 20 10 	st.w [%sp]96,%d3
8000caf2:	8b 83 80 32 	ge %d3,%d3,8
8000caf6:	d9 ee 08 00 	lea %a14,[%a14]8
8000cafa:	76 3b       	jz %d3,8000cb10 <_svfprintf_r+0xcc>
8000cafc:	60 c4       	mov.a %a4,%d12
8000cafe:	60 b5       	mov.a %a5,%d11
8000cb00:	d9 a6 1c 10 	lea %a6,[%sp]92
8000cb04:	6d 00 7d 12 	call 8000effe <__ssprint_r>
8000cb08:	df 02 69 88 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000cb0c:	d9 ae 10 20 	lea %a14,[%sp]144
8000cb10:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cb14:	42 f2       	add %d2,%d15
8000cb16:	59 a2 28 00 	st.w [%sp]40,%d2
8000cb1a:	79 cf 00 00 	ld.b %d15,[%a12]0
8000cb1e:	df 0f 56 08 	jeq %d15,0,8000dbca <_svfprintf_r+0x1186>
8000cb22:	82 0f       	mov %d15,0
8000cb24:	82 02       	mov %d2,0
8000cb26:	e9 af 01 10 	st.b [%sp]65,%d15
8000cb2a:	d9 c2 01 00 	lea %a2,[%a12]1
8000cb2e:	82 0f       	mov %d15,0
8000cb30:	82 fe       	mov %d14,-1
8000cb32:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cb36:	82 0a       	mov %d10,0
8000cb38:	79 22 00 00 	ld.b %d2,[%a2]0
8000cb3c:	d9 23 01 00 	lea %a3,[%a2]1
8000cb40:	b5 a3 18 00 	st.a [%sp]24,%a3
8000cb44:	59 a2 10 00 	st.w [%sp]16,%d2
8000cb48:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cb4c:	1b 02 fe 3f 	addi %d3,%d2,-32
8000cb50:	8b 93 a5 42 	ge.u %d4,%d3,89
8000cb54:	df 04 19 84 	jne %d4,0,8000d386 <_svfprintf_r+0x942>
8000cb58:	91 10 00 28 	movh.a %a2,32769
8000cb5c:	d9 22 a8 dc 	lea %a2,[%a2]-13464 <8000cb68 <_svfprintf_r+0x124>>
8000cb60:	01 23 02 76 	addsc.a %a7,%a2,%d3,2
8000cb64:	dc 07       	ji %a7
8000cb66:	00 00       	nop 
8000cb68:	1d 00 c3 00 	j 8000ccee <_svfprintf_r+0x2aa>
8000cb6c:	1d 00 0d 04 	j 8000d386 <_svfprintf_r+0x942>
8000cb70:	1d 00 0b 04 	j 8000d386 <_svfprintf_r+0x942>
8000cb74:	1d 00 c0 00 	j 8000ccf4 <_svfprintf_r+0x2b0>
8000cb78:	1d 00 07 04 	j 8000d386 <_svfprintf_r+0x942>
8000cb7c:	1d 00 05 04 	j 8000d386 <_svfprintf_r+0x942>
8000cb80:	1d 00 03 04 	j 8000d386 <_svfprintf_r+0x942>
8000cb84:	1d 00 01 04 	j 8000d386 <_svfprintf_r+0x942>
8000cb88:	1d 00 ff 03 	j 8000d386 <_svfprintf_r+0x942>
8000cb8c:	1d 00 fd 03 	j 8000d386 <_svfprintf_r+0x942>
8000cb90:	1d 00 b5 00 	j 8000ccfa <_svfprintf_r+0x2b6>
8000cb94:	1d 00 9c 00 	j 8000cccc <_svfprintf_r+0x288>
8000cb98:	1d 00 f7 03 	j 8000d386 <_svfprintf_r+0x942>
8000cb9c:	1d 00 b8 00 	j 8000cd0c <_svfprintf_r+0x2c8>
8000cba0:	1d 00 b9 00 	j 8000cd12 <_svfprintf_r+0x2ce>
8000cba4:	1d 00 f1 03 	j 8000d386 <_svfprintf_r+0x942>
8000cba8:	1d 00 de 00 	j 8000cd64 <_svfprintf_r+0x320>
8000cbac:	1d 00 df 00 	j 8000cd6a <_svfprintf_r+0x326>
8000cbb0:	1d 00 dd 00 	j 8000cd6a <_svfprintf_r+0x326>
8000cbb4:	1d 00 db 00 	j 8000cd6a <_svfprintf_r+0x326>
8000cbb8:	1d 00 d9 00 	j 8000cd6a <_svfprintf_r+0x326>
8000cbbc:	1d 00 d7 00 	j 8000cd6a <_svfprintf_r+0x326>
8000cbc0:	1d 00 d5 00 	j 8000cd6a <_svfprintf_r+0x326>
8000cbc4:	1d 00 d3 00 	j 8000cd6a <_svfprintf_r+0x326>
8000cbc8:	1d 00 d1 00 	j 8000cd6a <_svfprintf_r+0x326>
8000cbcc:	1d 00 cf 00 	j 8000cd6a <_svfprintf_r+0x326>
8000cbd0:	1d 00 db 03 	j 8000d386 <_svfprintf_r+0x942>
8000cbd4:	1d 00 d9 03 	j 8000d386 <_svfprintf_r+0x942>
8000cbd8:	1d 00 d7 03 	j 8000d386 <_svfprintf_r+0x942>
8000cbdc:	1d 00 d5 03 	j 8000d386 <_svfprintf_r+0x942>
8000cbe0:	1d 00 d3 03 	j 8000d386 <_svfprintf_r+0x942>
8000cbe4:	1d 00 d1 03 	j 8000d386 <_svfprintf_r+0x942>
8000cbe8:	1d 00 cf 03 	j 8000d386 <_svfprintf_r+0x942>
8000cbec:	1d 00 cd 03 	j 8000d386 <_svfprintf_r+0x942>
8000cbf0:	1d 00 cb 03 	j 8000d386 <_svfprintf_r+0x942>
8000cbf4:	1d 00 c9 03 	j 8000d386 <_svfprintf_r+0x942>
8000cbf8:	1d 00 f9 00 	j 8000cdea <_svfprintf_r+0x3a6>
8000cbfc:	1d 00 21 01 	j 8000ce3e <_svfprintf_r+0x3fa>
8000cc00:	1d 00 c3 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc04:	1d 00 1d 01 	j 8000ce3e <_svfprintf_r+0x3fa>
8000cc08:	1d 00 bf 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc0c:	1d 00 bd 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc10:	1d 00 bb 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc14:	1d 00 b9 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc18:	1d 00 c6 00 	j 8000cda4 <_svfprintf_r+0x360>
8000cc1c:	1d 00 b5 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc20:	1d 00 b3 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc24:	1d 00 92 02 	j 8000d148 <_svfprintf_r+0x704>
8000cc28:	1d 00 af 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc2c:	1d 00 ad 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc30:	1d 00 ab 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc34:	1d 00 a9 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc38:	1d 00 a7 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc3c:	1d 00 d0 02 	j 8000d1dc <_svfprintf_r+0x798>
8000cc40:	1d 00 a3 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc44:	1d 00 a1 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc48:	1d 00 4b 00 	j 8000ccde <_svfprintf_r+0x29a>
8000cc4c:	1d 00 9d 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc50:	1d 00 9b 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc54:	1d 00 99 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc58:	1d 00 97 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc5c:	1d 00 95 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc60:	1d 00 93 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc64:	1d 00 91 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc68:	1d 00 8f 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc6c:	1d 00 8d 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc70:	1d 00 8b 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc74:	1d 00 b0 00 	j 8000cdd4 <_svfprintf_r+0x390>
8000cc78:	1d 00 2f 00 	j 8000ccd6 <_svfprintf_r+0x292>
8000cc7c:	1d 00 e1 00 	j 8000ce3e <_svfprintf_r+0x3fa>
8000cc80:	1d 00 df 00 	j 8000ce3e <_svfprintf_r+0x3fa>
8000cc84:	1d 00 dd 00 	j 8000ce3e <_svfprintf_r+0x3fa>
8000cc88:	1d 00 91 00 	j 8000cdaa <_svfprintf_r+0x366>
8000cc8c:	1d 00 25 00 	j 8000ccd6 <_svfprintf_r+0x292>
8000cc90:	1d 00 7b 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc94:	1d 00 79 03 	j 8000d386 <_svfprintf_r+0x942>
8000cc98:	1d 00 8c 00 	j 8000cdb0 <_svfprintf_r+0x36c>
8000cc9c:	1d 00 75 03 	j 8000d386 <_svfprintf_r+0x942>
8000cca0:	1d 00 39 02 	j 8000d112 <_svfprintf_r+0x6ce>
8000cca4:	1d 00 54 02 	j 8000d14c <_svfprintf_r+0x708>
8000cca8:	1d 00 66 02 	j 8000d174 <_svfprintf_r+0x730>
8000ccac:	1d 00 90 00 	j 8000cdcc <_svfprintf_r+0x388>
8000ccb0:	1d 00 6b 03 	j 8000d386 <_svfprintf_r+0x942>
8000ccb4:	1d 00 77 02 	j 8000d1a2 <_svfprintf_r+0x75e>
8000ccb8:	1d 00 67 03 	j 8000d386 <_svfprintf_r+0x942>
8000ccbc:	1d 00 92 02 	j 8000d1e0 <_svfprintf_r+0x79c>
8000ccc0:	1d 00 63 03 	j 8000d386 <_svfprintf_r+0x942>
8000ccc4:	1d 00 61 03 	j 8000d386 <_svfprintf_r+0x942>
8000ccc8:	1d 00 a0 02 	j 8000d208 <_svfprintf_r+0x7c4>
8000cccc:	da 2b       	mov %d15,43
8000ccce:	99 a2 18 00 	ld.a %a2,[%sp]24
8000ccd2:	1d ff 33 ff 	j 8000cb38 <_svfprintf_r+0xf4>
8000ccd6:	e9 af 01 10 	st.b [%sp]65,%d15
8000ccda:	1d 00 8c 00 	j 8000cdf2 <_svfprintf_r+0x3ae>
8000ccde:	e9 af 01 10 	st.b [%sp]65,%d15
8000cce2:	7b 00 00 f8 	movh %d15,32768
8000cce6:	1b 0f f3 f0 	addi %d15,%d15,3888
8000ccea:	1d 00 95 02 	j 8000d214 <_svfprintf_r+0x7d0>
8000ccee:	ab 0f 82 ff 	sel %d15,%d15,%d15,32
8000ccf2:	3c ee       	j 8000ccce <_svfprintf_r+0x28a>
8000ccf4:	8f 1a 40 a1 	or %d10,%d10,1
8000ccf8:	3c eb       	j 8000ccce <_svfprintf_r+0x28a>
8000ccfa:	48 02       	ld.w %d2,[%a15]0
8000ccfc:	b0 4f       	add.a %a15,4
8000ccfe:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cd02:	ff 02 e6 7f 	jge %d2,0,8000ccce <_svfprintf_r+0x28a>
8000cd06:	32 52       	rsub %d2
8000cd08:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cd0c:	8f 4a 40 a1 	or %d10,%d10,4
8000cd10:	3c df       	j 8000ccce <_svfprintf_r+0x28a>
8000cd12:	99 a3 18 00 	ld.a %a3,[%sp]24
8000cd16:	99 a2 18 00 	ld.a %a2,[%sp]24
8000cd1a:	79 32 00 00 	ld.b %d2,[%a3]0
8000cd1e:	b0 12       	add.a %a2,1
8000cd20:	59 a2 10 00 	st.w [%sp]16,%d2
8000cd24:	8b a2 02 32 	eq %d3,%d2,42
8000cd28:	f6 33       	jnz %d3,8000cd2e <_svfprintf_r+0x2ea>
8000cd2a:	82 05       	mov %d5,0
8000cd2c:	3c 08       	j 8000cd3c <_svfprintf_r+0x2f8>
8000cd2e:	48 0e       	ld.w %d14,[%a15]0
8000cd30:	b5 a2 18 00 	st.a [%sp]24,%a2
8000cd34:	b0 4f       	add.a %a15,4
8000cd36:	8b fe 5f e3 	max %d14,%d14,-1
8000cd3a:	3c ca       	j 8000ccce <_svfprintf_r+0x28a>
8000cd3c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cd40:	1b 02 fd 3f 	addi %d3,%d2,-48
8000cd44:	ff a3 0a 80 	jge.u %d3,10,8000cd58 <_svfprintf_r+0x314>
8000cd48:	79 22 00 00 	ld.b %d2,[%a2]0
8000cd4c:	13 a5 20 53 	madd %d5,%d3,%d5,10
8000cd50:	59 a2 10 00 	st.w [%sp]16,%d2
8000cd54:	b0 12       	add.a %a2,1
8000cd56:	3c f3       	j 8000cd3c <_svfprintf_r+0x2f8>
8000cd58:	8b f5 5f e3 	max %d14,%d5,-1
8000cd5c:	b5 a2 18 00 	st.a [%sp]24,%a2
8000cd60:	1d ff f4 fe 	j 8000cb48 <_svfprintf_r+0x104>
8000cd64:	8f 0a 48 a1 	or %d10,%d10,128
8000cd68:	3c b3       	j 8000ccce <_svfprintf_r+0x28a>
8000cd6a:	82 02       	mov %d2,0
8000cd6c:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cd70:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cd74:	99 a3 18 00 	ld.a %a3,[%sp]24
8000cd78:	1b 02 fd 4f 	addi %d4,%d2,-48
8000cd7c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cd80:	99 a2 18 00 	ld.a %a2,[%sp]24
8000cd84:	13 a2 20 24 	madd %d2,%d4,%d2,10
8000cd88:	b0 12       	add.a %a2,1
8000cd8a:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cd8e:	79 32 00 00 	ld.b %d2,[%a3]0
8000cd92:	b5 a2 18 00 	st.a [%sp]24,%a2
8000cd96:	59 a2 10 00 	st.w [%sp]16,%d2
8000cd9a:	1b 02 fd 4f 	addi %d4,%d2,-48
8000cd9e:	bf a4 e9 ff 	jlt.u %d4,10,8000cd70 <_svfprintf_r+0x32c>
8000cda2:	3c dd       	j 8000cd5c <_svfprintf_r+0x318>
8000cda4:	8f 8a 40 a1 	or %d10,%d10,8
8000cda8:	3c 93       	j 8000ccce <_svfprintf_r+0x28a>
8000cdaa:	8f 0a 44 a1 	or %d10,%d10,64
8000cdae:	3c 90       	j 8000ccce <_svfprintf_r+0x28a>
8000cdb0:	99 a3 18 00 	ld.a %a3,[%sp]24
8000cdb4:	79 33 00 00 	ld.b %d3,[%a3]0
8000cdb8:	8b c3 26 32 	ne %d3,%d3,108
8000cdbc:	f6 35       	jnz %d3,8000cdc6 <_svfprintf_r+0x382>
8000cdbe:	b0 13       	add.a %a3,1
8000cdc0:	b5 a3 18 00 	st.a [%sp]24,%a3
8000cdc4:	3c 04       	j 8000cdcc <_svfprintf_r+0x388>
8000cdc6:	8f 0a 41 a1 	or %d10,%d10,16
8000cdca:	3c 82       	j 8000ccce <_svfprintf_r+0x28a>
8000cdcc:	8f 0a 42 a1 	or %d10,%d10,32
8000cdd0:	1d ff 7f ff 	j 8000ccce <_svfprintf_r+0x28a>
8000cdd4:	48 03       	ld.w %d3,[%a15]0
8000cdd6:	d9 fc 04 00 	lea %a12,[%a15]4
8000cdda:	e9 a3 28 10 	st.b [%sp]104,%d3
8000cdde:	82 03       	mov %d3,0
8000cde0:	e9 a3 01 10 	st.b [%sp]65,%d3
8000cde4:	60 ad       	mov.a %a13,%d10
8000cde6:	1d 00 dc 02 	j 8000d39e <_svfprintf_r+0x95a>
8000cdea:	e9 af 01 10 	st.b [%sp]65,%d15
8000cdee:	8f 0a 41 a1 	or %d10,%d10,16
8000cdf2:	60 ad       	mov.a %a13,%d10
8000cdf4:	6f 5a 07 00 	jz.t %d10,5,8000ce02 <_svfprintf_r+0x3be>
8000cdf8:	d9 fc 08 00 	lea %a12,[%a15]8
8000cdfc:	09 f8 40 09 	ld.d %e8,[%a15]
8000ce00:	3c 12       	j 8000ce24 <_svfprintf_r+0x3e0>
8000ce02:	d9 f2 04 00 	lea %a2,[%a15]4
8000ce06:	6f 4a 05 00 	jz.t %d10,4,8000ce10 <_svfprintf_r+0x3cc>
8000ce0a:	40 2c       	mov.aa %a12,%a2
8000ce0c:	48 08       	ld.w %d8,[%a15]0
8000ce0e:	3c 09       	j 8000ce20 <_svfprintf_r+0x3dc>
8000ce10:	48 03       	ld.w %d3,[%a15]0
8000ce12:	40 2c       	mov.aa %a12,%a2
8000ce14:	0b 30 00 88 	mov %e8,%d3
8000ce18:	6f 6a 06 00 	jz.t %d10,6,8000ce24 <_svfprintf_r+0x3e0>
8000ce1c:	37 03 50 80 	extr %d8,%d3,0,16
8000ce20:	0b 80 00 88 	mov %e8,%d8
8000ce24:	82 13       	mov %d3,1
8000ce26:	ff 09 1d 02 	jge %d9,0,8000d260 <_svfprintf_r+0x81c>
8000ce2a:	32 59       	rsub %d9
8000ce2c:	32 58       	rsub %d8
8000ce2e:	3b d0 02 70 	mov %d7,45
8000ce32:	ab f9 1f 98 	cadd %d9,%d8,%d9,-1
8000ce36:	e9 a7 01 10 	st.b [%sp]65,%d7
8000ce3a:	1d 00 13 02 	j 8000d260 <_svfprintf_r+0x81c>
8000ce3e:	e9 af 01 10 	st.b [%sp]65,%d15
8000ce42:	4c f0       	ld.w %d15,[%a15]0
8000ce44:	d9 fc 08 00 	lea %a12,[%a15]8
8000ce48:	78 0b       	st.w [%sp]44,%d15
8000ce4a:	4c f1       	ld.w %d15,[%a15]4
8000ce4c:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000ce50:	78 0c       	st.w [%sp]48,%d15
8000ce52:	19 a5 30 00 	ld.w %d5,[%sp]48
8000ce56:	6d 00 b3 10 	call 8000efbc <__fpclassifyd>
8000ce5a:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000ce5e:	19 a5 30 00 	ld.w %d5,[%sp]48
8000ce62:	df 12 18 80 	jne %d2,1,8000ce92 <_svfprintf_r+0x44e>
8000ce66:	d2 06       	mov %e6,0
8000ce68:	6d 00 50 14 	call 8000f708 <__ltdf2>
8000ce6c:	ce 25       	jgez %d2,8000ce76 <_svfprintf_r+0x432>
8000ce6e:	3b d0 02 30 	mov %d3,45
8000ce72:	e9 a3 01 10 	st.b [%sp]65,%d3
8000ce76:	58 04       	ld.w %d15,[%sp]16
8000ce78:	7b 00 00 78 	movh %d7,32768
8000ce7c:	8b 8f 84 32 	ge %d3,%d15,72
8000ce80:	1b 47 f2 d0 	addi %d13,%d7,3876
8000ce84:	df 03 17 80 	jne %d3,0,8000ceb2 <_svfprintf_r+0x46e>
8000ce88:	7b 00 00 78 	movh %d7,32768
8000ce8c:	1b 07 f2 d0 	addi %d13,%d7,3872
8000ce90:	3c 11       	j 8000ceb2 <_svfprintf_r+0x46e>
8000ce92:	6d 00 95 10 	call 8000efbc <__fpclassifyd>
8000ce96:	58 04       	ld.w %d15,[%sp]16
8000ce98:	df 02 13 80 	jne %d2,0,8000cebe <_svfprintf_r+0x47a>
8000ce9c:	7b 00 00 78 	movh %d7,32768
8000cea0:	8b 8f 84 32 	ge %d3,%d15,72
8000cea4:	1b c7 f2 d0 	addi %d13,%d7,3884
8000cea8:	f6 35       	jnz %d3,8000ceb2 <_svfprintf_r+0x46e>
8000ceaa:	7b 00 00 78 	movh %d7,32768
8000ceae:	1b 87 f2 d0 	addi %d13,%d7,3880
8000ceb2:	8f 0a c8 a1 	andn %d10,%d10,128
8000ceb6:	60 ad       	mov.a %a13,%d10
8000ceb8:	82 39       	mov %d9,3
8000ceba:	1d 00 78 02 	j 8000d3aa <_svfprintf_r+0x966>
8000cebe:	8f 0f c2 f1 	andn %d15,%d15,32
8000cec2:	78 01       	st.w [%sp]4,%d15
8000cec4:	df fe 09 00 	jeq %d14,-1,8000ced6 <_svfprintf_r+0x492>
8000cec8:	8b 0e 00 72 	eq %d7,%d14,0
8000cecc:	8b 7f 04 74 	and.eq %d7,%d15,71
8000ced0:	ab 1e a0 e7 	seln %d14,%d7,%d14,1
8000ced4:	3c 02       	j 8000ced8 <_svfprintf_r+0x494>
8000ced6:	82 6e       	mov %d14,6
8000ced8:	19 a3 30 00 	ld.w %d3,[%sp]48
8000cedc:	8f 0a 50 21 	or %d2,%d10,256
8000cee0:	60 2d       	mov.a %a13,%d2
8000cee2:	d8 0b       	ld.a %a15,[%sp]44
8000cee4:	82 0f       	mov %d15,0
8000cee6:	ce 34       	jgez %d3,8000ceee <_svfprintf_r+0x4aa>
8000cee8:	9b 03 00 38 	addih %d3,%d3,32768
8000ceec:	da 2d       	mov %d15,45
8000ceee:	78 09       	st.w [%sp]36,%d15
8000cef0:	58 01       	ld.w %d15,[%sp]4
8000cef2:	02 e9       	mov %d9,%d14
8000cef4:	8b 6f 04 22 	eq %d2,%d15,70
8000cef8:	82 36       	mov %d6,3
8000cefa:	f6 28       	jnz %d2,8000cf0a <_svfprintf_r+0x4c6>
8000cefc:	8b 5f 24 12 	ne %d1,%d15,69
8000cf00:	1b 1e 00 50 	addi %d5,%d14,1
8000cf04:	82 26       	mov %d6,2
8000cf06:	2b e5 50 91 	seln %d9,%d1,%d5,%d14
8000cf0a:	60 c4       	mov.a %a4,%d12
8000cf0c:	80 f4       	mov.d %d4,%a15
8000cf0e:	02 35       	mov %d5,%d3
8000cf10:	02 97       	mov %d7,%d9
8000cf12:	d9 a5 04 10 	lea %a5,[%sp]68
8000cf16:	d9 a6 08 10 	lea %a6,[%sp]72
8000cf1a:	d9 a7 14 10 	lea %a7,[%sp]84
8000cf1e:	59 a2 0c 00 	st.w [%sp]12,%d2
8000cf22:	59 a3 08 00 	st.w [%sp]8,%d3
8000cf26:	6d 00 ef 06 	call 8000dd04 <_dtoa_r>
8000cf2a:	58 01       	ld.w %d15,[%sp]4
8000cf2c:	80 2d       	mov.d %d13,%a2
8000cf2e:	8b 7f 24 12 	ne %d1,%d15,71
8000cf32:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000cf36:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cf3a:	df 01 11 80 	jne %d1,0,8000cf5c <_svfprintf_r+0x518>
8000cf3e:	6f 0a 0f 80 	jnz.t %d10,0,8000cf5c <_svfprintf_r+0x518>
8000cf42:	19 a2 14 10 	ld.w %d2,[%sp]84
8000cf46:	58 01       	ld.w %d15,[%sp]4
8000cf48:	a2 d2       	sub %d2,%d13
8000cf4a:	59 a2 14 00 	st.w [%sp]20,%d2
8000cf4e:	8b 7f 04 42 	eq %d4,%d15,71
8000cf52:	19 a5 04 10 	ld.w %d5,[%sp]68
8000cf56:	df 04 36 80 	jne %d4,0,8000cfc2 <_svfprintf_r+0x57e>
8000cf5a:	3c 3e       	j 8000cfd6 <_svfprintf_r+0x592>
8000cf5c:	0b 9d 00 80 	add %d8,%d13,%d9
8000cf60:	df 02 1c 00 	jeq %d2,0,8000cf98 <_svfprintf_r+0x554>
8000cf64:	60 d2       	mov.a %a2,%d13
8000cf66:	80 f4       	mov.d %d4,%a15
8000cf68:	79 20 00 00 	ld.b %d0,[%a2]0
8000cf6c:	d2 06       	mov %e6,0
8000cf6e:	02 35       	mov %d5,%d3
8000cf70:	8b 00 03 f2 	eq %d15,%d0,48
8000cf74:	59 a3 08 00 	st.w [%sp]8,%d3
8000cf78:	6d 00 68 13 	call 8000f648 <__nedf2>
8000cf7c:	8b 02 20 22 	ne %d2,%d2,0
8000cf80:	0f 2f 80 00 	and %d0,%d15,%d2
8000cf84:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cf88:	76 05       	jz %d0,8000cf92 <_svfprintf_r+0x54e>
8000cf8a:	8b 19 00 01 	rsub %d0,%d9,1
8000cf8e:	59 a0 04 10 	st.w [%sp]68,%d0
8000cf92:	19 a2 04 10 	ld.w %d2,[%sp]68
8000cf96:	42 28       	add %d8,%d2
8000cf98:	80 f4       	mov.d %d4,%a15
8000cf9a:	d2 06       	mov %e6,0
8000cf9c:	02 35       	mov %d5,%d3
8000cf9e:	6d 00 35 13 	call 8000f608 <__eqdf2>
8000cfa2:	f6 23       	jnz %d2,8000cfa8 <_svfprintf_r+0x564>
8000cfa4:	59 a8 14 10 	st.w [%sp]84,%d8
8000cfa8:	3b 00 03 00 	mov %d0,48
8000cfac:	19 a3 14 10 	ld.w %d3,[%sp]84
8000cfb0:	7f 83 c9 ff 	jge.u %d3,%d8,8000cf42 <_svfprintf_r+0x4fe>
8000cfb4:	1b 13 00 10 	addi %d1,%d3,1
8000cfb8:	60 32       	mov.a %a2,%d3
8000cfba:	59 a1 14 10 	st.w [%sp]84,%d1
8000cfbe:	34 20       	st.b [%a2],%d0
8000cfc0:	3c f6       	j 8000cfac <_svfprintf_r+0x568>
8000cfc2:	0b 5e 20 31 	lt %d3,%d14,%d5
8000cfc6:	8b d5 3f 35 	or.lt %d3,%d5,-3
8000cfca:	df 03 88 00 	jeq %d3,0,8000d0da <_svfprintf_r+0x696>
8000cfce:	58 04       	ld.w %d15,[%sp]16
8000cfd0:	c2 ef       	add %d15,-2
8000cfd2:	78 04       	st.w [%sp]16,%d15
8000cfd4:	3c 06       	j 8000cfe0 <_svfprintf_r+0x59c>
8000cfd6:	58 04       	ld.w %d15,[%sp]16
8000cfd8:	8b 6f 86 32 	ge %d3,%d15,102
8000cfdc:	df 03 69 80 	jne %d3,0,8000d0ae <_svfprintf_r+0x66a>
8000cfe0:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cfe4:	9a f5       	add %d15,%d5,-1
8000cfe6:	78 11       	st.w [%sp]68,%d15
8000cfe8:	e9 a2 0d 10 	st.b [%sp]77,%d2
8000cfec:	3b b0 02 30 	mov %d3,43
8000cff0:	ce f4       	jgez %d15,8000cff8 <_svfprintf_r+0x5b4>
8000cff2:	32 5f       	rsub %d15
8000cff4:	3b d0 02 30 	mov %d3,45
8000cff8:	e9 a3 0e 10 	st.b [%sp]78,%d3
8000cffc:	8b af 40 32 	lt %d3,%d15,10
8000d000:	df 03 3e 80 	jne %d3,0,8000d07c <_svfprintf_r+0x638>
8000d004:	82 06       	mov %d6,0
8000d006:	3b a0 00 00 	mov %d0,10
8000d00a:	4b 0f 01 42 	div %e4,%d15,%d0
8000d00e:	8b 66 00 71 	rsub %d7,%d6,6
8000d012:	60 72       	mov.a %a2,%d7
8000d014:	d9 af 14 10 	lea %a15,[%sp]84
8000d018:	1b 05 03 30 	addi %d3,%d5,48
8000d01c:	30 2f       	add.a %a15,%a2
8000d01e:	28 03       	st.b [%a15]0,%d3
8000d020:	8b a4 80 32 	ge %d3,%d4,10
8000d024:	02 4f       	mov %d15,%d4
8000d026:	c2 16       	add %d6,1
8000d028:	df 03 f1 ff 	jne %d3,0,8000d00a <_svfprintf_r+0x5c6>
8000d02c:	60 74       	mov.a %a4,%d7
8000d02e:	d9 a2 10 30 	lea %a2,[%sp]208
8000d032:	1b 04 03 f0 	addi %d15,%d4,48
8000d036:	30 42       	add.a %a2,%a4
8000d038:	d9 f7 ff ff 	lea %a7,[%a15]-1
8000d03c:	e9 ff ff ff 	st.b [%a15]-1,%d15
8000d040:	80 22       	mov.d %d2,%a2
8000d042:	d9 af 1b 10 	lea %a15,[%sp]91
8000d046:	80 ff       	mov.d %d15,%a15
8000d048:	1b 32 f8 4f 	addi %d4,%d2,-125
8000d04c:	82 03       	mov %d3,0
8000d04e:	01 7f 20 30 	sub.a %a3,%a15,%a7
8000d052:	3f 4f 08 80 	jlt.u %d15,%d4,8000d062 <_svfprintf_r+0x61e>
8000d056:	80 a2       	mov.d %d2,%sp
8000d058:	1b 02 0d 20 	addi %d2,%d2,208
8000d05c:	8b 52 07 42 	eq %d4,%d2,117
8000d060:	76 46       	jz %d4,8000d06c <_svfprintf_r+0x628>
8000d062:	a0 03       	mov.a %a3,0
8000d064:	3c 04       	j 8000d06c <_svfprintf_r+0x628>
8000d066:	0c 70       	ld.bu %d15,[%a7]0
8000d068:	b0 17       	add.a %a7,1
8000d06a:	28 0f       	st.b [%a15]0,%d15
8000d06c:	60 3f       	mov.a %a15,%d3
8000d06e:	d9 a2 0d 10 	lea %a2,[%sp]77
8000d072:	b0 2f       	add.a %a15,2
8000d074:	30 2f       	add.a %a15,%a2
8000d076:	c2 13       	add %d3,1
8000d078:	fc 37       	loop %a3,8000d066 <_svfprintf_r+0x622>
8000d07a:	3c 0b       	j 8000d090 <_svfprintf_r+0x64c>
8000d07c:	3b 00 03 30 	mov %d3,48
8000d080:	1b 0f 03 f0 	addi %d15,%d15,48
8000d084:	e9 a3 0f 10 	st.b [%sp]79,%d3
8000d088:	e9 af 10 10 	st.b [%sp]80,%d15
8000d08c:	d9 af 11 10 	lea %a15,[%sp]81
8000d090:	d9 a7 0d 10 	lea %a7,[%sp]77
8000d094:	01 7f 20 70 	sub.a %a7,%a15,%a7
8000d098:	80 79       	mov.d %d9,%a7
8000d09a:	58 05       	ld.w %d15,[%sp]20
8000d09c:	b5 a7 38 00 	st.a [%sp]56,%a7
8000d0a0:	42 f9       	add %d9,%d15
8000d0a2:	ff 2f 04 00 	jge %d15,2,8000d0aa <_svfprintf_r+0x666>
8000d0a6:	6f 0a 2c 00 	jz.t %d10,0,8000d0fe <_svfprintf_r+0x6ba>
8000d0aa:	c2 19       	add %d9,1
8000d0ac:	3c 29       	j 8000d0fe <_svfprintf_r+0x6ba>
8000d0ae:	58 04       	ld.w %d15,[%sp]16
8000d0b0:	8b 6f 26 42 	ne %d4,%d15,102
8000d0b4:	df 04 15 80 	jne %d4,0,8000d0de <_svfprintf_r+0x69a>
8000d0b8:	02 59       	mov %d9,%d5
8000d0ba:	8e 59       	jlez %d5,8000d0cc <_svfprintf_r+0x688>
8000d0bc:	f6 e3       	jnz %d14,8000d0c2 <_svfprintf_r+0x67e>
8000d0be:	6f 0a 20 00 	jz.t %d10,0,8000d0fe <_svfprintf_r+0x6ba>
8000d0c2:	1b 1e 00 30 	addi %d3,%d14,1
8000d0c6:	0b 35 00 90 	add %d9,%d5,%d3
8000d0ca:	3c 1a       	j 8000d0fe <_svfprintf_r+0x6ba>
8000d0cc:	f6 e4       	jnz %d14,8000d0d4 <_svfprintf_r+0x690>
8000d0ce:	82 19       	mov %d9,1
8000d0d0:	6f 0a 17 00 	jz.t %d10,0,8000d0fe <_svfprintf_r+0x6ba>
8000d0d4:	1b 2e 00 90 	addi %d9,%d14,2
8000d0d8:	3c 13       	j 8000d0fe <_svfprintf_r+0x6ba>
8000d0da:	da 67       	mov %d15,103
8000d0dc:	78 04       	st.w [%sp]16,%d15
8000d0de:	58 05       	ld.w %d15,[%sp]20
8000d0e0:	8f 1a 00 a1 	and %d10,%d10,1
8000d0e4:	0b a5 00 90 	add %d9,%d5,%d10
8000d0e8:	7f f5 0b 00 	jge %d5,%d15,8000d0fe <_svfprintf_r+0x6ba>
8000d0ec:	8b 15 40 92 	lt %d9,%d5,1
8000d0f0:	8b 25 00 31 	rsub %d3,%d5,2
8000d0f4:	ab 13 80 39 	sel %d3,%d9,%d3,1
8000d0f8:	19 a9 14 00 	ld.w %d9,[%sp]20
8000d0fc:	42 39       	add %d9,%d3
8000d0fe:	58 09       	ld.w %d15,[%sp]36
8000d100:	82 0e       	mov %d14,0
8000d102:	df 0f 55 01 	jeq %d15,0,8000d3ac <_svfprintf_r+0x968>
8000d106:	3b d0 02 70 	mov %d7,45
8000d10a:	e9 a7 01 10 	st.b [%sp]65,%d7
8000d10e:	1d 00 4f 01 	j 8000d3ac <_svfprintf_r+0x968>
8000d112:	e9 af 01 10 	st.b [%sp]65,%d15
8000d116:	d9 f2 04 00 	lea %a2,[%a15]4
8000d11a:	6f 5a 09 00 	jz.t %d10,5,8000d12c <_svfprintf_r+0x6e8>
8000d11e:	58 0a       	ld.w %d15,[%sp]40
8000d120:	c8 03       	ld.a %a3,[%a15]0
8000d122:	0b f0 00 48 	mov %e4,%d15
8000d126:	89 34 40 09 	st.d [%a3],%e4
8000d12a:	3c 0c       	j 8000d142 <_svfprintf_r+0x6fe>
8000d12c:	6f 4a 08 80 	jnz.t %d10,4,8000d13c <_svfprintf_r+0x6f8>
8000d130:	6f 6a 06 00 	jz.t %d10,6,8000d13c <_svfprintf_r+0x6f8>
8000d134:	c8 03       	ld.a %a3,[%a15]0
8000d136:	58 0a       	ld.w %d15,[%sp]40
8000d138:	ac 30       	st.h [%a3]0,%d15
8000d13a:	3c 04       	j 8000d142 <_svfprintf_r+0x6fe>
8000d13c:	c8 03       	ld.a %a3,[%a15]0
8000d13e:	58 0a       	ld.w %d15,[%sp]40
8000d140:	6c 30       	st.w [%a3]0,%d15
8000d142:	40 2f       	mov.aa %a15,%a2
8000d144:	1d ff b8 fc 	j 8000cab4 <_svfprintf_r+0x70>
8000d148:	8f 0a 41 a1 	or %d10,%d10,16
8000d14c:	6f 5a 07 00 	jz.t %d10,5,8000d15a <_svfprintf_r+0x716>
8000d150:	d9 fc 08 00 	lea %a12,[%a15]8
8000d154:	09 f8 40 09 	ld.d %e8,[%a15]
8000d158:	3c 0c       	j 8000d170 <_svfprintf_r+0x72c>
8000d15a:	d9 fc 04 00 	lea %a12,[%a15]4
8000d15e:	6f 4a 07 80 	jnz.t %d10,4,8000d16c <_svfprintf_r+0x728>
8000d162:	6f 6a 05 00 	jz.t %d10,6,8000d16c <_svfprintf_r+0x728>
8000d166:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000d16a:	3c 02       	j 8000d16e <_svfprintf_r+0x72a>
8000d16c:	48 08       	ld.w %d8,[%a15]0
8000d16e:	82 09       	mov %d9,0
8000d170:	82 03       	mov %d3,0
8000d172:	3c 73       	j 8000d258 <_svfprintf_r+0x814>
8000d174:	3b 00 03 40 	mov %d4,48
8000d178:	7b 00 00 f8 	movh %d15,32768
8000d17c:	1b 1f f4 f0 	addi %d15,%d15,3905
8000d180:	e9 a4 02 10 	st.b [%sp]66,%d4
8000d184:	3b 80 07 40 	mov %d4,120
8000d188:	78 0f       	st.w [%sp]60,%d15
8000d18a:	02 4f       	mov %d15,%d4
8000d18c:	d9 fc 04 00 	lea %a12,[%a15]4
8000d190:	48 08       	ld.w %d8,[%a15]0
8000d192:	82 09       	mov %d9,0
8000d194:	8f 2a 40 a1 	or %d10,%d10,2
8000d198:	e9 a4 03 10 	st.b [%sp]67,%d4
8000d19c:	82 23       	mov %d3,2
8000d19e:	78 04       	st.w [%sp]16,%d15
8000d1a0:	3c 5c       	j 8000d258 <_svfprintf_r+0x814>
8000d1a2:	82 07       	mov %d7,0
8000d1a4:	48 0d       	ld.w %d13,[%a15]0
8000d1a6:	e9 a7 01 10 	st.b [%sp]65,%d7
8000d1aa:	02 e9       	mov %d9,%d14
8000d1ac:	60 ad       	mov.a %a13,%d10
8000d1ae:	d9 fc 04 00 	lea %a12,[%a15]4
8000d1b2:	60 d4       	mov.a %a4,%d13
8000d1b4:	0e ef       	jltz %d14,8000d1d2 <_svfprintf_r+0x78e>
8000d1b6:	82 04       	mov %d4,0
8000d1b8:	02 e5       	mov %d5,%d14
8000d1ba:	6d 00 14 0c 	call 8000e9e2 <memchr>
8000d1be:	bd 02 f6 00 	jz.a %a2,8000d3aa <_svfprintf_r+0x966>
8000d1c2:	60 d4       	mov.a %a4,%d13
8000d1c4:	01 42 20 30 	sub.a %a3,%a2,%a4
8000d1c8:	80 32       	mov.d %d2,%a3
8000d1ca:	0b e2 80 91 	min %d9,%d2,%d14
8000d1ce:	1d 00 ee 00 	j 8000d3aa <_svfprintf_r+0x966>
8000d1d2:	6d ff cb fa 	call 8000c768 <strlen>
8000d1d6:	02 29       	mov %d9,%d2
8000d1d8:	1d 00 e9 00 	j 8000d3aa <_svfprintf_r+0x966>
8000d1dc:	8f 0a 41 a1 	or %d10,%d10,16
8000d1e0:	6f 5a 07 00 	jz.t %d10,5,8000d1ee <_svfprintf_r+0x7aa>
8000d1e4:	d9 fc 08 00 	lea %a12,[%a15]8
8000d1e8:	09 f8 40 09 	ld.d %e8,[%a15]
8000d1ec:	3c 0c       	j 8000d204 <_svfprintf_r+0x7c0>
8000d1ee:	d9 fc 04 00 	lea %a12,[%a15]4
8000d1f2:	6f 4a 07 80 	jnz.t %d10,4,8000d200 <_svfprintf_r+0x7bc>
8000d1f6:	6f 6a 05 00 	jz.t %d10,6,8000d200 <_svfprintf_r+0x7bc>
8000d1fa:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000d1fe:	3c 02       	j 8000d202 <_svfprintf_r+0x7be>
8000d200:	48 08       	ld.w %d8,[%a15]0
8000d202:	82 09       	mov %d9,0
8000d204:	82 13       	mov %d3,1
8000d206:	3c 29       	j 8000d258 <_svfprintf_r+0x814>
8000d208:	e9 af 01 10 	st.b [%sp]65,%d15
8000d20c:	7b 00 00 f8 	movh %d15,32768
8000d210:	1b 1f f4 f0 	addi %d15,%d15,3905
8000d214:	78 0f       	st.w [%sp]60,%d15
8000d216:	6f 5a 07 00 	jz.t %d10,5,8000d224 <_svfprintf_r+0x7e0>
8000d21a:	d9 fc 08 00 	lea %a12,[%a15]8
8000d21e:	09 f8 40 09 	ld.d %e8,[%a15]
8000d222:	3c 0c       	j 8000d23a <_svfprintf_r+0x7f6>
8000d224:	d9 fc 04 00 	lea %a12,[%a15]4
8000d228:	6f 4a 07 80 	jnz.t %d10,4,8000d236 <_svfprintf_r+0x7f2>
8000d22c:	6f 6a 05 00 	jz.t %d10,6,8000d236 <_svfprintf_r+0x7f2>
8000d230:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000d234:	3c 02       	j 8000d238 <_svfprintf_r+0x7f4>
8000d236:	48 08       	ld.w %d8,[%a15]0
8000d238:	82 09       	mov %d9,0
8000d23a:	82 23       	mov %d3,2
8000d23c:	6f 0a 0e 00 	jz.t %d10,0,8000d258 <_svfprintf_r+0x814>
8000d240:	0f 89 a0 40 	or %d4,%d9,%d8
8000d244:	76 4a       	jz %d4,8000d258 <_svfprintf_r+0x814>
8000d246:	58 04       	ld.w %d15,[%sp]16
8000d248:	3b 00 03 70 	mov %d7,48
8000d24c:	e9 a7 02 10 	st.b [%sp]66,%d7
8000d250:	e9 af 03 10 	st.b [%sp]67,%d15
8000d254:	8f 2a 40 a1 	or %d10,%d10,2
8000d258:	82 07       	mov %d7,0
8000d25a:	60 ad       	mov.a %a13,%d10
8000d25c:	e9 a7 01 10 	st.b [%sp]65,%d7
8000d260:	80 d2       	mov.d %d2,%a13
8000d262:	8b 0e 80 72 	ge %d7,%d14,0
8000d266:	8f 02 c8 41 	andn %d4,%d2,128
8000d26a:	2b 24 40 27 	sel %d2,%d7,%d4,%d2
8000d26e:	0f 98 a0 60 	or %d6,%d8,%d9
8000d272:	8b 0e 20 42 	ne %d4,%d14,0
8000d276:	8b 06 00 45 	or.ne %d4,%d6,0
8000d27a:	60 2d       	mov.a %a13,%d2
8000d27c:	df 04 72 00 	jeq %d4,0,8000d360 <_svfprintf_r+0x91c>
8000d280:	df 13 06 00 	jeq %d3,1,8000d28c <_svfprintf_r+0x848>
8000d284:	df 23 57 00 	jeq %d3,2,8000d332 <_svfprintf_r+0x8ee>
8000d288:	82 03       	mov %d3,0
8000d28a:	3c 03       	j 8000d290 <_svfprintf_r+0x84c>
8000d28c:	82 04       	mov %d4,0
8000d28e:	3c 22       	j 8000d2d2 <_svfprintf_r+0x88e>
8000d290:	8b 73 02 71 	rsub %d7,%d3,39
8000d294:	60 72       	mov.a %a2,%d7
8000d296:	8f 78 00 41 	and %d4,%d8,7
8000d29a:	d9 a3 28 10 	lea %a3,[%sp]104
8000d29e:	77 89 80 8e 	dextr %d8,%d9,%d8,29
8000d2a2:	30 23       	add.a %a3,%a2
8000d2a4:	1b 04 03 40 	addi %d4,%d4,48
8000d2a8:	06 d9       	sh %d9,-3
8000d2aa:	34 34       	st.b [%a3],%d4
8000d2ac:	0f 89 a0 60 	or %d6,%d9,%d8
8000d2b0:	c2 13       	add %d3,1
8000d2b2:	df 06 ef ff 	jne %d6,0,8000d290 <_svfprintf_r+0x84c>
8000d2b6:	80 d2       	mov.d %d2,%a13
8000d2b8:	80 3d       	mov.d %d13,%a3
8000d2ba:	6f 02 61 00 	jz.t %d2,0,8000d37c <_svfprintf_r+0x938>
8000d2be:	8b 04 03 42 	eq %d4,%d4,48
8000d2c2:	df 04 5d 80 	jne %d4,0,8000d37c <_svfprintf_r+0x938>
8000d2c6:	3b 00 03 70 	mov %d7,48
8000d2ca:	c2 fd       	add %d13,-1
8000d2cc:	e9 37 ff ff 	st.b [%a3]-1,%d7
8000d2d0:	3c 56       	j 8000d37c <_svfprintf_r+0x938>
8000d2d2:	8b 84 02 71 	rsub %d7,%d4,40
8000d2d6:	8b 09 00 32 	eq %d3,%d9,0
8000d2da:	60 73       	mov.a %a3,%d7
8000d2dc:	8b a8 a0 34 	and.ge.u %d3,%d8,10
8000d2e0:	d9 a7 28 10 	lea %a7,[%sp]104
8000d2e4:	8b 09 00 35 	or.ne %d3,%d9,0
8000d2e8:	30 37       	add.a %a7,%a3
8000d2ea:	1b 14 00 d0 	addi %d13,%d4,1
8000d2ee:	df 03 1b 00 	jeq %d3,0,8000d324 <_svfprintf_r+0x8e0>
8000d2f2:	8b 74 02 41 	rsub %d4,%d4,39
8000d2f6:	60 42       	mov.a %a2,%d4
8000d2f8:	fb a0 00 60 	mov %e6,10
8000d2fc:	0b 89 10 48 	mov %e4,%d9,%d8
8000d300:	d9 af 28 10 	lea %a15,[%sp]104
8000d304:	30 2f       	add.a %a15,%a2
8000d306:	6d 00 98 12 	call 8000f836 <__umoddi3>
8000d30a:	0b 89 10 48 	mov %e4,%d9,%d8
8000d30e:	1b 02 03 20 	addi %d2,%d2,48
8000d312:	fb a0 00 60 	mov %e6,10
8000d316:	28 02       	st.b [%a15]0,%d2
8000d318:	6d 00 3f 12 	call 8000f796 <__udivdi3>
8000d31c:	02 d4       	mov %d4,%d13
8000d31e:	0b 23 10 88 	mov %e8,%d3,%d2
8000d322:	3c d8       	j 8000d2d2 <_svfprintf_r+0x88e>
8000d324:	80 7d       	mov.d %d13,%a7
8000d326:	1b 08 03 80 	addi %d8,%d8,48
8000d32a:	c2 fd       	add %d13,-1
8000d32c:	e9 78 ff ff 	st.b [%a7]-1,%d8
8000d330:	3c 26       	j 8000d37c <_svfprintf_r+0x938>
8000d332:	82 03       	mov %d3,0
8000d334:	d8 0f       	ld.a %a15,[%sp]60
8000d336:	80 ad       	mov.d %d13,%sp
8000d338:	8f f8 00 f1 	and %d15,%d8,15
8000d33c:	8b 73 02 71 	rsub %d7,%d3,39
8000d340:	1b 8d 06 d0 	addi %d13,%d13,104
8000d344:	10 f7       	addsc.a %a7,%a15,%d15,0
8000d346:	42 7d       	add %d13,%d7
8000d348:	77 89 00 8e 	dextr %d8,%d9,%d8,28
8000d34c:	0c 70       	ld.bu %d15,[%a7]0
8000d34e:	60 d2       	mov.a %a2,%d13
8000d350:	06 c9       	sh %d9,-4
8000d352:	2c 20       	st.b [%a2]0,%d15
8000d354:	0f 89 a0 40 	or %d4,%d9,%d8
8000d358:	c2 13       	add %d3,1
8000d35a:	df 04 ed ff 	jne %d4,0,8000d334 <_svfprintf_r+0x8f0>
8000d35e:	3c 0f       	j 8000d37c <_svfprintf_r+0x938>
8000d360:	80 a2       	mov.d %d2,%sp
8000d362:	1b 02 09 d0 	addi %d13,%d2,144
8000d366:	f6 3b       	jnz %d3,8000d37c <_svfprintf_r+0x938>
8000d368:	80 df       	mov.d %d15,%a13
8000d36a:	2e 09       	jz.t %d15,0,8000d37c <_svfprintf_r+0x938>
8000d36c:	1b 02 0d d0 	addi %d13,%d2,208
8000d370:	60 d2       	mov.a %a2,%d13
8000d372:	3b 00 03 70 	mov %d7,48
8000d376:	89 27 3f e4 	st.b [+%a2]-65,%d7
8000d37a:	80 2d       	mov.d %d13,%a2
8000d37c:	d9 a3 10 20 	lea %a3,[%sp]144
8000d380:	80 39       	mov.d %d9,%a3
8000d382:	a2 d9       	sub %d9,%d13
8000d384:	3c 14       	j 8000d3ac <_svfprintf_r+0x968>
8000d386:	e9 af 01 10 	st.b [%sp]65,%d15
8000d38a:	58 04       	ld.w %d15,[%sp]16
8000d38c:	df 0f 1f 04 	jeq %d15,0,8000dbca <_svfprintf_r+0x1186>
8000d390:	82 03       	mov %d3,0
8000d392:	60 ad       	mov.a %a13,%d10
8000d394:	e9 af 28 10 	st.b [%sp]104,%d15
8000d398:	e9 a3 01 10 	st.b [%sp]65,%d3
8000d39c:	40 fc       	mov.aa %a12,%a15
8000d39e:	80 a2       	mov.d %d2,%sp
8000d3a0:	82 19       	mov %d9,1
8000d3a2:	82 0e       	mov %d14,0
8000d3a4:	1b 82 06 d0 	addi %d13,%d2,104
8000d3a8:	3c 02       	j 8000d3ac <_svfprintf_r+0x968>
8000d3aa:	82 0e       	mov %d14,0
8000d3ac:	79 a7 01 10 	ld.b %d7,[%sp]65
8000d3b0:	80 df       	mov.d %d15,%a13
8000d3b2:	0b e9 a0 a1 	max %d10,%d9,%d14
8000d3b6:	80 d2       	mov.d %d2,%a13
8000d3b8:	16 02       	and %d15,2
8000d3ba:	ab 1a 00 a7 	cadd %d10,%d7,%d10,1
8000d3be:	60 ff       	mov.a %a15,%d15
8000d3c0:	8a 2a       	cadd %d10,%d15,2
8000d3c2:	8f 42 08 f1 	and %d15,%d2,132
8000d3c6:	ee 48       	jnz %d15,8000d456 <_svfprintf_r+0xa12>
8000d3c8:	19 a8 1c 00 	ld.w %d8,[%sp]28
8000d3cc:	a2 a8       	sub %d8,%d10
8000d3ce:	bf 18 44 00 	jlt %d8,1,8000d456 <_svfprintf_r+0xa12>
8000d3d2:	91 00 00 28 	movh.a %a2,32768
8000d3d6:	d9 22 e4 d0 	lea %a2,[%a2]3940 <80000f64 <blanks.4035>>
8000d3da:	19 a1 24 10 	ld.w %d1,[%sp]100 <80000f64 <blanks.4035>>
8000d3de:	19 a4 20 10 	ld.w %d4,[%sp]96 <80000f64 <blanks.4035>>
8000d3e2:	8b 18 81 72 	ge %d7,%d8,17
8000d3e6:	f4 e2       	st.a [%a14],%a2
8000d3e8:	df 07 20 00 	jeq %d7,0,8000d428 <_svfprintf_r+0x9e4>
8000d3ec:	1b 14 00 00 	addi %d0,%d4,1
8000d3f0:	3b 00 01 20 	mov %d2,16
8000d3f4:	1b 01 01 10 	addi %d1,%d1,16
8000d3f8:	59 e2 04 00 	st.w [%a14]4,%d2
8000d3fc:	59 a0 20 10 	st.w [%sp]96,%d0
8000d400:	59 a1 24 10 	st.w [%sp]100,%d1
8000d404:	8b 80 80 02 	ge %d0,%d0,8
8000d408:	d9 ee 08 00 	lea %a14,[%a14]8
8000d40c:	76 0b       	jz %d0,8000d422 <_svfprintf_r+0x9de>
8000d40e:	60 c4       	mov.a %a4,%d12
8000d410:	60 b5       	mov.a %a5,%d11
8000d412:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d416:	6d 00 f4 0d 	call 8000effe <__ssprint_r>
8000d41a:	df 02 e0 83 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d41e:	d9 ae 10 20 	lea %a14,[%sp]144
8000d422:	1b 08 ff 8f 	addi %d8,%d8,-16
8000d426:	3c d6       	j 8000d3d2 <_svfprintf_r+0x98e>
8000d428:	c2 14       	add %d4,1
8000d42a:	42 81       	add %d1,%d8
8000d42c:	59 e8 04 00 	st.w [%a14]4,%d8
8000d430:	59 a4 20 10 	st.w [%sp]96,%d4
8000d434:	59 a1 24 10 	st.w [%sp]100,%d1
8000d438:	8b 84 80 42 	ge %d4,%d4,8
8000d43c:	d9 ee 08 00 	lea %a14,[%a14]8
8000d440:	76 4b       	jz %d4,8000d456 <_svfprintf_r+0xa12>
8000d442:	60 c4       	mov.a %a4,%d12
8000d444:	60 b5       	mov.a %a5,%d11
8000d446:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d44a:	6d 00 da 0d 	call 8000effe <__ssprint_r>
8000d44e:	df 02 c6 83 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d452:	d9 ae 10 20 	lea %a14,[%sp]144
8000d456:	79 a4 01 10 	ld.b %d4,[%sp]65
8000d45a:	df 04 21 00 	jeq %d4,0,8000d49c <_svfprintf_r+0xa58>
8000d45e:	19 a4 24 10 	ld.w %d4,[%sp]100
8000d462:	d9 a7 01 10 	lea %a7,[%sp]65
8000d466:	c2 14       	add %d4,1
8000d468:	59 a4 24 10 	st.w [%sp]100,%d4
8000d46c:	19 a4 20 10 	ld.w %d4,[%sp]96
8000d470:	82 17       	mov %d7,1
8000d472:	c2 14       	add %d4,1
8000d474:	f4 e7       	st.a [%a14],%a7
8000d476:	59 e7 04 00 	st.w [%a14]4,%d7
8000d47a:	59 a4 20 10 	st.w [%sp]96,%d4
8000d47e:	8b 84 80 42 	ge %d4,%d4,8
8000d482:	d9 ee 08 00 	lea %a14,[%a14]8
8000d486:	76 4b       	jz %d4,8000d49c <_svfprintf_r+0xa58>
8000d488:	60 c4       	mov.a %a4,%d12
8000d48a:	60 b5       	mov.a %a5,%d11
8000d48c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d490:	6d 00 b7 0d 	call 8000effe <__ssprint_r>
8000d494:	df 02 a3 83 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d498:	d9 ae 10 20 	lea %a14,[%sp]144
8000d49c:	bd 0f 21 00 	jz.a %a15,8000d4de <_svfprintf_r+0xa9a>
8000d4a0:	19 a4 24 10 	ld.w %d4,[%sp]100
8000d4a4:	d9 a7 02 10 	lea %a7,[%sp]66
8000d4a8:	c2 24       	add %d4,2
8000d4aa:	59 a4 24 10 	st.w [%sp]100,%d4
8000d4ae:	19 a4 20 10 	ld.w %d4,[%sp]96
8000d4b2:	82 27       	mov %d7,2
8000d4b4:	c2 14       	add %d4,1
8000d4b6:	f4 e7       	st.a [%a14],%a7
8000d4b8:	59 e7 04 00 	st.w [%a14]4,%d7
8000d4bc:	59 a4 20 10 	st.w [%sp]96,%d4
8000d4c0:	8b 84 80 42 	ge %d4,%d4,8
8000d4c4:	d9 ee 08 00 	lea %a14,[%a14]8
8000d4c8:	76 4b       	jz %d4,8000d4de <_svfprintf_r+0xa9a>
8000d4ca:	60 c4       	mov.a %a4,%d12
8000d4cc:	60 b5       	mov.a %a5,%d11
8000d4ce:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d4d2:	6d 00 96 0d 	call 8000effe <__ssprint_r>
8000d4d6:	df 02 82 83 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d4da:	d9 ae 10 20 	lea %a14,[%sp]144
8000d4de:	8b 0f 28 42 	ne %d4,%d15,128
8000d4e2:	df 04 48 80 	jne %d4,0,8000d572 <_svfprintf_r+0xb2e>
8000d4e6:	58 07       	ld.w %d15,[%sp]28
8000d4e8:	7b 00 00 28 	movh %d2,32768
8000d4ec:	60 23       	mov.a %a3,%d2
8000d4ee:	a2 af       	sub %d15,%d10
8000d4f0:	d9 3f d4 d0 	lea %a15,[%a3]3924
8000d4f4:	bf 1f 3f 00 	jlt %d15,1,8000d572 <_svfprintf_r+0xb2e>
8000d4f8:	19 a7 24 10 	ld.w %d7,[%sp]100
8000d4fc:	19 a4 20 10 	ld.w %d4,[%sp]96
8000d500:	8b 1f 81 82 	ge %d8,%d15,17
8000d504:	ec e0       	st.a [%a14]0,%a15
8000d506:	df 08 20 00 	jeq %d8,0,8000d546 <_svfprintf_r+0xb02>
8000d50a:	1b 14 00 00 	addi %d0,%d4,1
8000d50e:	3b 00 01 20 	mov %d2,16
8000d512:	1b 07 01 10 	addi %d1,%d7,16
8000d516:	59 e2 04 00 	st.w [%a14]4,%d2
8000d51a:	59 a0 20 10 	st.w [%sp]96,%d0
8000d51e:	59 a1 24 10 	st.w [%sp]100,%d1
8000d522:	8b 80 80 02 	ge %d0,%d0,8
8000d526:	d9 ee 08 00 	lea %a14,[%a14]8
8000d52a:	76 0b       	jz %d0,8000d540 <_svfprintf_r+0xafc>
8000d52c:	60 c4       	mov.a %a4,%d12
8000d52e:	60 b5       	mov.a %a5,%d11
8000d530:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d534:	6d 00 65 0d 	call 8000effe <__ssprint_r>
8000d538:	df 02 51 83 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d53c:	d9 ae 10 20 	lea %a14,[%sp]144
8000d540:	1b 0f ff ff 	addi %d15,%d15,-16
8000d544:	3c da       	j 8000d4f8 <_svfprintf_r+0xab4>
8000d546:	c2 14       	add %d4,1
8000d548:	42 f7       	add %d7,%d15
8000d54a:	6c e1       	st.w [%a14]4,%d15
8000d54c:	59 a4 20 10 	st.w [%sp]96,%d4
8000d550:	59 a7 24 10 	st.w [%sp]100,%d7
8000d554:	8b 84 80 42 	ge %d4,%d4,8
8000d558:	d9 ee 08 00 	lea %a14,[%a14]8
8000d55c:	76 4b       	jz %d4,8000d572 <_svfprintf_r+0xb2e>
8000d55e:	60 c4       	mov.a %a4,%d12
8000d560:	60 b5       	mov.a %a5,%d11
8000d562:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d566:	6d 00 4c 0d 	call 8000effe <__ssprint_r>
8000d56a:	df 02 38 83 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d56e:	d9 ae 10 20 	lea %a14,[%sp]144
8000d572:	7b 00 00 88 	movh %d8,32768
8000d576:	a2 9e       	sub %d14,%d9
8000d578:	1b 48 f5 80 	addi %d8,%d8,3924
8000d57c:	c5 0f 10 00 	lea %a15,10 <_.+0xf>
8000d580:	bf 1e 3c 00 	jlt %d14,1,8000d5f8 <_svfprintf_r+0xbb4>
8000d584:	19 a6 24 10 	ld.w %d6,[%sp]100
8000d588:	19 a4 20 10 	ld.w %d4,[%sp]96
8000d58c:	8b 1e 81 02 	ge %d0,%d14,17
8000d590:	74 e8       	st.w [%a14],%d8
8000d592:	df 00 1c 00 	jeq %d0,0,8000d5ca <_svfprintf_r+0xb86>
8000d596:	c2 14       	add %d4,1
8000d598:	1b 06 01 00 	addi %d0,%d6,16
8000d59c:	ec e1       	st.a [%a14]4,%a15
8000d59e:	59 a4 20 10 	st.w [%sp]96,%d4
8000d5a2:	59 a0 24 10 	st.w [%sp]100,%d0
8000d5a6:	8b 84 80 42 	ge %d4,%d4,8
8000d5aa:	d9 ee 08 00 	lea %a14,[%a14]8
8000d5ae:	76 4b       	jz %d4,8000d5c4 <_svfprintf_r+0xb80>
8000d5b0:	60 c4       	mov.a %a4,%d12
8000d5b2:	60 b5       	mov.a %a5,%d11
8000d5b4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d5b8:	6d 00 23 0d 	call 8000effe <__ssprint_r>
8000d5bc:	df 02 0f 83 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d5c0:	d9 ae 10 20 	lea %a14,[%sp]144
8000d5c4:	1b 0e ff ef 	addi %d14,%d14,-16
8000d5c8:	3c de       	j 8000d584 <_svfprintf_r+0xb40>
8000d5ca:	c2 14       	add %d4,1
8000d5cc:	42 e6       	add %d6,%d14
8000d5ce:	59 ee 04 00 	st.w [%a14]4,%d14
8000d5d2:	59 a4 20 10 	st.w [%sp]96,%d4
8000d5d6:	59 a6 24 10 	st.w [%sp]100,%d6
8000d5da:	8b 84 80 42 	ge %d4,%d4,8
8000d5de:	d9 ee 08 00 	lea %a14,[%a14]8
8000d5e2:	76 4b       	jz %d4,8000d5f8 <_svfprintf_r+0xbb4>
8000d5e4:	60 c4       	mov.a %a4,%d12
8000d5e6:	60 b5       	mov.a %a5,%d11
8000d5e8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d5ec:	6d 00 09 0d 	call 8000effe <__ssprint_r>
8000d5f0:	df 02 f5 82 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d5f4:	d9 ae 10 20 	lea %a14,[%sp]144
8000d5f8:	80 df       	mov.d %d15,%a13
8000d5fa:	19 ae 24 10 	ld.w %d14,[%sp]100
8000d5fe:	19 a8 20 10 	ld.w %d8,[%sp]96
8000d602:	6f 8f 1d 80 	jnz.t %d15,8,8000d63c <_svfprintf_r+0xbf8>
8000d606:	c2 18       	add %d8,1
8000d608:	59 e9 04 00 	st.w [%a14]4,%d9
8000d60c:	42 e9       	add %d9,%d14
8000d60e:	59 a8 20 10 	st.w [%sp]96,%d8
8000d612:	74 ed       	st.w [%a14],%d13
8000d614:	59 a9 24 10 	st.w [%sp]100,%d9
8000d618:	8b 88 80 82 	ge %d8,%d8,8
8000d61c:	d9 ef 08 00 	lea %a15,[%a14]8
8000d620:	df 08 79 02 	jeq %d8,0,8000db12 <_svfprintf_r+0x10ce>
8000d624:	60 c4       	mov.a %a4,%d12
8000d626:	60 b5       	mov.a %a5,%d11
8000d628:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d62c:	6d 00 e9 0c 	call 8000effe <__ssprint_r>
8000d630:	df 02 d5 82 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d634:	d9 af 10 20 	lea %a15,[%sp]144
8000d638:	1d 00 6d 02 	j 8000db12 <_svfprintf_r+0x10ce>
8000d63c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000d640:	8b 62 46 f2 	lt %d15,%d2,102
8000d644:	df 0f be 81 	jne %d15,0,8000d9c0 <_svfprintf_r+0xf7c>
8000d648:	d2 06       	mov %e6,0
8000d64a:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000d64e:	19 a5 30 00 	ld.w %d5,[%sp]48
8000d652:	6d 00 db 0f 	call 8000f608 <__eqdf2>
8000d656:	df 02 78 80 	jne %d2,0,8000d746 <_svfprintf_r+0xd02>
8000d65a:	7b 00 00 38 	movh %d3,32768
8000d65e:	1b 23 f5 30 	addi %d3,%d3,3922
8000d662:	c2 18       	add %d8,1
8000d664:	74 e3       	st.w [%a14],%d3
8000d666:	1b 1e 00 90 	addi %d9,%d14,1
8000d66a:	82 13       	mov %d3,1
8000d66c:	59 a8 20 10 	st.w [%sp]96,%d8
8000d670:	59 e3 04 00 	st.w [%a14]4,%d3
8000d674:	59 a9 24 10 	st.w [%sp]100,%d9
8000d678:	8b 88 80 82 	ge %d8,%d8,8
8000d67c:	d9 ef 08 00 	lea %a15,[%a14]8
8000d680:	76 8b       	jz %d8,8000d696 <_svfprintf_r+0xc52>
8000d682:	60 c4       	mov.a %a4,%d12
8000d684:	60 b5       	mov.a %a5,%d11
8000d686:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d68a:	6d 00 ba 0c 	call 8000effe <__ssprint_r>
8000d68e:	df 02 a6 82 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d692:	d9 af 10 20 	lea %a15,[%sp]144
8000d696:	58 11       	ld.w %d15,[%sp]68
8000d698:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d69c:	3f 2f 05 00 	jlt %d15,%d2,8000d6a6 <_svfprintf_r+0xc62>
8000d6a0:	80 df       	mov.d %d15,%a13
8000d6a2:	6f 0f 38 02 	jz.t %d15,0,8000db12 <_svfprintf_r+0x10ce>
8000d6a6:	58 08       	ld.w %d15,[%sp]32
8000d6a8:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d6ac:	68 1f       	st.w [%a15]4,%d15
8000d6ae:	58 19       	ld.w %d15,[%sp]100
8000d6b0:	99 a3 34 00 	ld.a %a3,[%sp]52
8000d6b4:	42 2f       	add %d15,%d2
8000d6b6:	78 19       	st.w [%sp]100,%d15
8000d6b8:	58 18       	ld.w %d15,[%sp]96
8000d6ba:	e8 03       	st.a [%a15]0,%a3
8000d6bc:	c2 1f       	add %d15,1
8000d6be:	78 18       	st.w [%sp]96,%d15
8000d6c0:	8b 8f 80 f2 	ge %d15,%d15,8
8000d6c4:	d9 ff 08 00 	lea %a15,[%a15]8
8000d6c8:	6e 0b       	jz %d15,8000d6de <_svfprintf_r+0xc9a>
8000d6ca:	60 c4       	mov.a %a4,%d12
8000d6cc:	60 b5       	mov.a %a5,%d11
8000d6ce:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d6d2:	6d 00 96 0c 	call 8000effe <__ssprint_r>
8000d6d6:	df 02 82 82 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d6da:	d9 af 10 20 	lea %a15,[%sp]144
8000d6de:	58 05       	ld.w %d15,[%sp]20
8000d6e0:	7b 00 00 88 	movh %d8,32768
8000d6e4:	c2 ff       	add %d15,-1
8000d6e6:	1b 48 f5 80 	addi %d8,%d8,3924
8000d6ea:	3b 00 01 90 	mov %d9,16
8000d6ee:	bf 1f 12 02 	jlt %d15,1,8000db12 <_svfprintf_r+0x10ce>
8000d6f2:	19 a5 24 10 	ld.w %d5,[%sp]100
8000d6f6:	19 a3 20 10 	ld.w %d3,[%sp]96
8000d6fa:	8b 1f 81 42 	ge %d4,%d15,17
8000d6fe:	68 08       	st.w [%a15]0,%d8
8000d700:	df 04 1c 00 	jeq %d4,0,8000d738 <_svfprintf_r+0xcf4>
8000d704:	c2 13       	add %d3,1
8000d706:	1b 05 01 40 	addi %d4,%d5,16
8000d70a:	68 19       	st.w [%a15]4,%d9
8000d70c:	59 a3 20 10 	st.w [%sp]96,%d3
8000d710:	59 a4 24 10 	st.w [%sp]100,%d4
8000d714:	8b 83 80 32 	ge %d3,%d3,8
8000d718:	d9 ff 08 00 	lea %a15,[%a15]8
8000d71c:	76 3b       	jz %d3,8000d732 <_svfprintf_r+0xcee>
8000d71e:	60 c4       	mov.a %a4,%d12
8000d720:	60 b5       	mov.a %a5,%d11
8000d722:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d726:	6d 00 6c 0c 	call 8000effe <__ssprint_r>
8000d72a:	df 02 58 82 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d72e:	d9 af 10 20 	lea %a15,[%sp]144
8000d732:	1b 0f ff ff 	addi %d15,%d15,-16
8000d736:	3c de       	j 8000d6f2 <_svfprintf_r+0xcae>
8000d738:	12 54       	add %d4,%d15,%d5
8000d73a:	68 1f       	st.w [%a15]4,%d15
8000d73c:	59 a4 24 10 	st.w [%sp]100,%d4
8000d740:	9a 13       	add %d15,%d3,1
8000d742:	1d 00 e1 01 	j 8000db04 <_svfprintf_r+0x10c0>
8000d746:	19 a3 04 10 	ld.w %d3,[%sp]68
8000d74a:	ff 13 8e 00 	jge %d3,1,8000d866 <_svfprintf_r+0xe22>
8000d74e:	7b 00 00 38 	movh %d3,32768
8000d752:	1b 23 f5 30 	addi %d3,%d3,3922
8000d756:	c2 18       	add %d8,1
8000d758:	74 e3       	st.w [%a14],%d3
8000d75a:	1b 1e 00 90 	addi %d9,%d14,1
8000d75e:	82 13       	mov %d3,1
8000d760:	59 a8 20 10 	st.w [%sp]96,%d8
8000d764:	59 e3 04 00 	st.w [%a14]4,%d3
8000d768:	59 a9 24 10 	st.w [%sp]100,%d9
8000d76c:	8b 88 80 82 	ge %d8,%d8,8
8000d770:	d9 ef 08 00 	lea %a15,[%a14]8
8000d774:	76 8b       	jz %d8,8000d78a <_svfprintf_r+0xd46>
8000d776:	60 c4       	mov.a %a4,%d12
8000d778:	60 b5       	mov.a %a5,%d11
8000d77a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d77e:	6d 00 40 0c 	call 8000effe <__ssprint_r>
8000d782:	df 02 2c 82 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d786:	d9 af 10 20 	lea %a15,[%sp]144
8000d78a:	58 11       	ld.w %d15,[%sp]68
8000d78c:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d790:	a6 2f       	or %d15,%d2
8000d792:	ee 04       	jnz %d15,8000d79a <_svfprintf_r+0xd56>
8000d794:	80 df       	mov.d %d15,%a13
8000d796:	6f 0f be 01 	jz.t %d15,0,8000db12 <_svfprintf_r+0x10ce>
8000d79a:	58 08       	ld.w %d15,[%sp]32
8000d79c:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d7a0:	68 1f       	st.w [%a15]4,%d15
8000d7a2:	58 19       	ld.w %d15,[%sp]100
8000d7a4:	99 a3 34 00 	ld.a %a3,[%sp]52
8000d7a8:	42 2f       	add %d15,%d2
8000d7aa:	78 19       	st.w [%sp]100,%d15
8000d7ac:	58 18       	ld.w %d15,[%sp]96
8000d7ae:	e8 03       	st.a [%a15]0,%a3
8000d7b0:	c2 1f       	add %d15,1
8000d7b2:	78 18       	st.w [%sp]96,%d15
8000d7b4:	8b 8f 80 f2 	ge %d15,%d15,8
8000d7b8:	d9 ff 08 00 	lea %a15,[%a15]8
8000d7bc:	6e 0b       	jz %d15,8000d7d2 <_svfprintf_r+0xd8e>
8000d7be:	60 c4       	mov.a %a4,%d12
8000d7c0:	60 b5       	mov.a %a5,%d11
8000d7c2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d7c6:	6d 00 1c 0c 	call 8000effe <__ssprint_r>
8000d7ca:	df 02 08 82 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d7ce:	d9 af 10 20 	lea %a15,[%sp]144
8000d7d2:	58 11       	ld.w %d15,[%sp]68
8000d7d4:	7b 00 00 88 	movh %d8,32768
8000d7d8:	32 5f       	rsub %d15
8000d7da:	1b 48 f5 80 	addi %d8,%d8,3924
8000d7de:	3b 00 01 90 	mov %d9,16
8000d7e2:	bf 1f 3a 00 	jlt %d15,1,8000d856 <_svfprintf_r+0xe12>
8000d7e6:	19 a5 24 10 	ld.w %d5,[%sp]100
8000d7ea:	19 a3 20 10 	ld.w %d3,[%sp]96
8000d7ee:	8b 1f 81 42 	ge %d4,%d15,17
8000d7f2:	68 08       	st.w [%a15]0,%d8
8000d7f4:	df 04 1c 00 	jeq %d4,0,8000d82c <_svfprintf_r+0xde8>
8000d7f8:	c2 13       	add %d3,1
8000d7fa:	1b 05 01 40 	addi %d4,%d5,16
8000d7fe:	68 19       	st.w [%a15]4,%d9
8000d800:	59 a3 20 10 	st.w [%sp]96,%d3
8000d804:	59 a4 24 10 	st.w [%sp]100,%d4
8000d808:	8b 83 80 32 	ge %d3,%d3,8
8000d80c:	d9 ff 08 00 	lea %a15,[%a15]8
8000d810:	76 3b       	jz %d3,8000d826 <_svfprintf_r+0xde2>
8000d812:	60 c4       	mov.a %a4,%d12
8000d814:	60 b5       	mov.a %a5,%d11
8000d816:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d81a:	6d 00 f2 0b 	call 8000effe <__ssprint_r>
8000d81e:	df 02 de 81 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d822:	d9 af 10 20 	lea %a15,[%sp]144
8000d826:	1b 0f ff ff 	addi %d15,%d15,-16
8000d82a:	3c de       	j 8000d7e6 <_svfprintf_r+0xda2>
8000d82c:	68 1f       	st.w [%a15]4,%d15
8000d82e:	12 54       	add %d4,%d15,%d5
8000d830:	9a 13       	add %d15,%d3,1
8000d832:	78 18       	st.w [%sp]96,%d15
8000d834:	59 a4 24 10 	st.w [%sp]100,%d4
8000d838:	8b 8f 80 f2 	ge %d15,%d15,8
8000d83c:	d9 ff 08 00 	lea %a15,[%a15]8
8000d840:	6e 0b       	jz %d15,8000d856 <_svfprintf_r+0xe12>
8000d842:	60 c4       	mov.a %a4,%d12
8000d844:	60 b5       	mov.a %a5,%d11
8000d846:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d84a:	6d 00 da 0b 	call 8000effe <__ssprint_r>
8000d84e:	df 02 c6 81 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d852:	d9 af 10 20 	lea %a15,[%sp]144
8000d856:	58 05       	ld.w %d15,[%sp]20
8000d858:	68 0d       	st.w [%a15]0,%d13
8000d85a:	68 1f       	st.w [%a15]4,%d15
8000d85c:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d860:	58 19       	ld.w %d15,[%sp]100
8000d862:	1d 00 4d 01 	j 8000dafc <_svfprintf_r+0x10b8>
8000d866:	58 05       	ld.w %d15,[%sp]20
8000d868:	74 ed       	st.w [%a14],%d13
8000d86a:	3f f3 6a 00 	jlt %d3,%d15,8000d93e <_svfprintf_r+0xefa>
8000d86e:	02 f9       	mov %d9,%d15
8000d870:	c2 18       	add %d8,1
8000d872:	42 e9       	add %d9,%d14
8000d874:	59 a8 20 10 	st.w [%sp]96,%d8
8000d878:	6c e1       	st.w [%a14]4,%d15
8000d87a:	59 a9 24 10 	st.w [%sp]100,%d9
8000d87e:	8b 88 80 82 	ge %d8,%d8,8
8000d882:	d9 ef 08 00 	lea %a15,[%a14]8
8000d886:	76 8b       	jz %d8,8000d89c <_svfprintf_r+0xe58>
8000d888:	60 c4       	mov.a %a4,%d12
8000d88a:	60 b5       	mov.a %a5,%d11
8000d88c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d890:	6d 00 b7 0b 	call 8000effe <__ssprint_r>
8000d894:	df 02 a3 81 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d898:	d9 af 10 20 	lea %a15,[%sp]144
8000d89c:	58 11       	ld.w %d15,[%sp]68
8000d89e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d8a2:	7b 00 00 88 	movh %d8,32768
8000d8a6:	a2 2f       	sub %d15,%d2
8000d8a8:	1b 48 f5 80 	addi %d8,%d8,3924
8000d8ac:	3b 00 01 90 	mov %d9,16
8000d8b0:	bf 1f 3a 00 	jlt %d15,1,8000d924 <_svfprintf_r+0xee0>
8000d8b4:	19 a5 24 10 	ld.w %d5,[%sp]100
8000d8b8:	19 a3 20 10 	ld.w %d3,[%sp]96
8000d8bc:	8b 1f 81 42 	ge %d4,%d15,17
8000d8c0:	68 08       	st.w [%a15]0,%d8
8000d8c2:	df 04 1c 00 	jeq %d4,0,8000d8fa <_svfprintf_r+0xeb6>
8000d8c6:	c2 13       	add %d3,1
8000d8c8:	1b 05 01 40 	addi %d4,%d5,16
8000d8cc:	68 19       	st.w [%a15]4,%d9
8000d8ce:	59 a3 20 10 	st.w [%sp]96,%d3
8000d8d2:	59 a4 24 10 	st.w [%sp]100,%d4
8000d8d6:	8b 83 80 32 	ge %d3,%d3,8
8000d8da:	d9 ff 08 00 	lea %a15,[%a15]8
8000d8de:	76 3b       	jz %d3,8000d8f4 <_svfprintf_r+0xeb0>
8000d8e0:	60 c4       	mov.a %a4,%d12
8000d8e2:	60 b5       	mov.a %a5,%d11
8000d8e4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d8e8:	6d 00 8b 0b 	call 8000effe <__ssprint_r>
8000d8ec:	df 02 77 81 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d8f0:	d9 af 10 20 	lea %a15,[%sp]144
8000d8f4:	1b 0f ff ff 	addi %d15,%d15,-16
8000d8f8:	3c de       	j 8000d8b4 <_svfprintf_r+0xe70>
8000d8fa:	68 1f       	st.w [%a15]4,%d15
8000d8fc:	12 54       	add %d4,%d15,%d5
8000d8fe:	9a 13       	add %d15,%d3,1
8000d900:	78 18       	st.w [%sp]96,%d15
8000d902:	59 a4 24 10 	st.w [%sp]100,%d4
8000d906:	8b 8f 80 f2 	ge %d15,%d15,8
8000d90a:	d9 ff 08 00 	lea %a15,[%a15]8
8000d90e:	6e 0b       	jz %d15,8000d924 <_svfprintf_r+0xee0>
8000d910:	60 c4       	mov.a %a4,%d12
8000d912:	60 b5       	mov.a %a5,%d11
8000d914:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d918:	6d 00 73 0b 	call 8000effe <__ssprint_r>
8000d91c:	df 02 5f 81 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d920:	d9 af 10 20 	lea %a15,[%sp]144
8000d924:	80 df       	mov.d %d15,%a13
8000d926:	6f 0f f6 00 	jz.t %d15,0,8000db12 <_svfprintf_r+0x10ce>
8000d92a:	99 a3 34 00 	ld.a %a3,[%sp]52
8000d92e:	58 08       	ld.w %d15,[%sp]32
8000d930:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d934:	68 1f       	st.w [%a15]4,%d15
8000d936:	e8 03       	st.a [%a15]0,%a3
8000d938:	58 19       	ld.w %d15,[%sp]100
8000d93a:	1d 00 e1 00 	j 8000dafc <_svfprintf_r+0x10b8>
8000d93e:	c2 18       	add %d8,1
8000d940:	59 e3 04 00 	st.w [%a14]4,%d3
8000d944:	42 e3       	add %d3,%d14
8000d946:	59 a8 20 10 	st.w [%sp]96,%d8
8000d94a:	59 a3 24 10 	st.w [%sp]100,%d3
8000d94e:	8b 88 80 82 	ge %d8,%d8,8
8000d952:	d9 ef 08 00 	lea %a15,[%a14]8
8000d956:	76 8b       	jz %d8,8000d96c <_svfprintf_r+0xf28>
8000d958:	60 c4       	mov.a %a4,%d12
8000d95a:	60 b5       	mov.a %a5,%d11
8000d95c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d960:	6d 00 4f 0b 	call 8000effe <__ssprint_r>
8000d964:	df 02 3b 81 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d968:	d9 af 10 20 	lea %a15,[%sp]144
8000d96c:	58 08       	ld.w %d15,[%sp]32
8000d96e:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d972:	68 1f       	st.w [%a15]4,%d15
8000d974:	58 19       	ld.w %d15,[%sp]100
8000d976:	99 a3 34 00 	ld.a %a3,[%sp]52
8000d97a:	42 2f       	add %d15,%d2
8000d97c:	78 19       	st.w [%sp]100,%d15
8000d97e:	58 18       	ld.w %d15,[%sp]96
8000d980:	99 ae 04 10 	ld.a %a14,[%sp]68
8000d984:	c2 1f       	add %d15,1
8000d986:	60 d2       	mov.a %a2,%d13
8000d988:	e8 03       	st.a [%a15]0,%a3
8000d98a:	78 18       	st.w [%sp]96,%d15
8000d98c:	8b 8f 80 f2 	ge %d15,%d15,8
8000d990:	30 2e       	add.a %a14,%a2
8000d992:	d9 ff 08 00 	lea %a15,[%a15]8
8000d996:	6e 0b       	jz %d15,8000d9ac <_svfprintf_r+0xf68>
8000d998:	60 c4       	mov.a %a4,%d12
8000d99a:	60 b5       	mov.a %a5,%d11
8000d99c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d9a0:	6d 00 2f 0b 	call 8000effe <__ssprint_r>
8000d9a4:	df 02 1b 81 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d9a8:	d9 af 10 20 	lea %a15,[%sp]144
8000d9ac:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d9b0:	58 11       	ld.w %d15,[%sp]68
8000d9b2:	e8 0e       	st.a [%a15]0,%a14
8000d9b4:	5a f2       	sub %d15,%d2,%d15
8000d9b6:	68 1f       	st.w [%a15]4,%d15
8000d9b8:	19 a2 24 10 	ld.w %d2,[%sp]100
8000d9bc:	1d 00 a0 00 	j 8000dafc <_svfprintf_r+0x10b8>
8000d9c0:	c2 18       	add %d8,1
8000d9c2:	82 13       	mov %d3,1
8000d9c4:	1b 1e 00 90 	addi %d9,%d14,1
8000d9c8:	58 05       	ld.w %d15,[%sp]20
8000d9ca:	59 a8 20 10 	st.w [%sp]96,%d8
8000d9ce:	74 ed       	st.w [%a14],%d13
8000d9d0:	59 e3 04 00 	st.w [%a14]4,%d3
8000d9d4:	59 a9 24 10 	st.w [%sp]100,%d9
8000d9d8:	8b 88 80 82 	ge %d8,%d8,8
8000d9dc:	ff 2f 05 00 	jge %d15,2,8000d9e6 <_svfprintf_r+0xfa2>
8000d9e0:	80 d2       	mov.d %d2,%a13
8000d9e2:	6f 02 81 00 	jz.t %d2,0,8000dae4 <_svfprintf_r+0x10a0>
8000d9e6:	d9 ef 08 00 	lea %a15,[%a14]8
8000d9ea:	76 8b       	jz %d8,8000da00 <_svfprintf_r+0xfbc>
8000d9ec:	60 c4       	mov.a %a4,%d12
8000d9ee:	60 b5       	mov.a %a5,%d11
8000d9f0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000d9f4:	6d 00 05 0b 	call 8000effe <__ssprint_r>
8000d9f8:	df 02 f1 80 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000d9fc:	d9 af 10 20 	lea %a15,[%sp]144
8000da00:	58 08       	ld.w %d15,[%sp]32
8000da02:	19 a2 20 00 	ld.w %d2,[%sp]32
8000da06:	68 1f       	st.w [%a15]4,%d15
8000da08:	58 19       	ld.w %d15,[%sp]100
8000da0a:	99 a3 34 00 	ld.a %a3,[%sp]52
8000da0e:	42 2f       	add %d15,%d2
8000da10:	78 19       	st.w [%sp]100,%d15
8000da12:	58 18       	ld.w %d15,[%sp]96
8000da14:	e8 03       	st.a [%a15]0,%a3
8000da16:	c2 1f       	add %d15,1
8000da18:	78 18       	st.w [%sp]96,%d15
8000da1a:	8b 8f 80 f2 	ge %d15,%d15,8
8000da1e:	d9 ff 08 00 	lea %a15,[%a15]8
8000da22:	6e 0b       	jz %d15,8000da38 <_svfprintf_r+0xff4>
8000da24:	60 c4       	mov.a %a4,%d12
8000da26:	60 b5       	mov.a %a5,%d11
8000da28:	d9 a6 1c 10 	lea %a6,[%sp]92
8000da2c:	6d 00 e9 0a 	call 8000effe <__ssprint_r>
8000da30:	df 02 d5 80 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000da34:	d9 af 10 20 	lea %a15,[%sp]144
8000da38:	d2 06       	mov %e6,0
8000da3a:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000da3e:	19 a5 30 00 	ld.w %d5,[%sp]48
8000da42:	6d 00 03 0e 	call 8000f648 <__nedf2>
8000da46:	58 05       	ld.w %d15,[%sp]20
8000da48:	c2 ff       	add %d15,-1
8000da4a:	76 2c       	jz %d2,8000da62 <_svfprintf_r+0x101e>
8000da4c:	19 a2 24 10 	ld.w %d2,[%sp]100
8000da50:	60 de       	mov.a %a14,%d13
8000da52:	68 1f       	st.w [%a15]4,%d15
8000da54:	42 2f       	add %d15,%d2
8000da56:	78 19       	st.w [%sp]100,%d15
8000da58:	58 18       	ld.w %d15,[%sp]96
8000da5a:	b0 1e       	add.a %a14,1
8000da5c:	e8 0e       	st.a [%a15]0,%a14
8000da5e:	c2 1f       	add %d15,1
8000da60:	3c 31       	j 8000dac2 <_svfprintf_r+0x107e>
8000da62:	7b 00 00 88 	movh %d8,32768
8000da66:	1b 48 f5 80 	addi %d8,%d8,3924
8000da6a:	3b 00 01 90 	mov %d9,16
8000da6e:	bf 1f 3f 00 	jlt %d15,1,8000daec <_svfprintf_r+0x10a8>
8000da72:	19 a5 24 10 	ld.w %d5,[%sp]100
8000da76:	19 a3 20 10 	ld.w %d3,[%sp]96
8000da7a:	8b 1f 81 42 	ge %d4,%d15,17
8000da7e:	68 08       	st.w [%a15]0,%d8
8000da80:	df 04 1c 00 	jeq %d4,0,8000dab8 <_svfprintf_r+0x1074>
8000da84:	c2 13       	add %d3,1
8000da86:	1b 05 01 40 	addi %d4,%d5,16
8000da8a:	68 19       	st.w [%a15]4,%d9
8000da8c:	59 a3 20 10 	st.w [%sp]96,%d3
8000da90:	59 a4 24 10 	st.w [%sp]100,%d4
8000da94:	8b 83 80 32 	ge %d3,%d3,8
8000da98:	d9 ff 08 00 	lea %a15,[%a15]8
8000da9c:	76 3b       	jz %d3,8000dab2 <_svfprintf_r+0x106e>
8000da9e:	60 c4       	mov.a %a4,%d12
8000daa0:	60 b5       	mov.a %a5,%d11
8000daa2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000daa6:	6d 00 ac 0a 	call 8000effe <__ssprint_r>
8000daaa:	df 02 98 80 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000daae:	d9 af 10 20 	lea %a15,[%sp]144
8000dab2:	1b 0f ff ff 	addi %d15,%d15,-16
8000dab6:	3c de       	j 8000da72 <_svfprintf_r+0x102e>
8000dab8:	12 54       	add %d4,%d15,%d5
8000daba:	68 1f       	st.w [%a15]4,%d15
8000dabc:	59 a4 24 10 	st.w [%sp]100,%d4
8000dac0:	9a 13       	add %d15,%d3,1
8000dac2:	78 18       	st.w [%sp]96,%d15
8000dac4:	8b 8f 80 f2 	ge %d15,%d15,8
8000dac8:	d9 ff 08 00 	lea %a15,[%a15]8
8000dacc:	6e 10       	jz %d15,8000daec <_svfprintf_r+0x10a8>
8000dace:	60 c4       	mov.a %a4,%d12
8000dad0:	60 b5       	mov.a %a5,%d11
8000dad2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000dad6:	6d 00 94 0a 	call 8000effe <__ssprint_r>
8000dada:	df 02 80 80 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000dade:	d9 af 10 20 	lea %a15,[%sp]144
8000dae2:	3c 05       	j 8000daec <_svfprintf_r+0x10a8>
8000dae4:	df 08 f5 ff 	jne %d8,0,8000dace <_svfprintf_r+0x108a>
8000dae8:	d9 ef 08 00 	lea %a15,[%a14]8
8000daec:	58 0e       	ld.w %d15,[%sp]56
8000daee:	d9 a3 0d 10 	lea %a3,[%sp]77
8000daf2:	68 1f       	st.w [%a15]4,%d15
8000daf4:	19 a2 38 00 	ld.w %d2,[%sp]56
8000daf8:	58 19       	ld.w %d15,[%sp]100
8000dafa:	e8 03       	st.a [%a15]0,%a3
8000dafc:	42 2f       	add %d15,%d2
8000dafe:	78 19       	st.w [%sp]100,%d15
8000db00:	58 18       	ld.w %d15,[%sp]96
8000db02:	c2 1f       	add %d15,1
8000db04:	78 18       	st.w [%sp]96,%d15
8000db06:	8b 8f 80 f2 	ge %d15,%d15,8
8000db0a:	df 0f 8d fd 	jne %d15,0,8000d624 <_svfprintf_r+0xbe0>
8000db0e:	d9 ff 08 00 	lea %a15,[%a15]8
8000db12:	80 df       	mov.d %d15,%a13
8000db14:	ae 2d       	jnz.t %d15,2,8000db2e <_svfprintf_r+0x10ea>
8000db16:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000db1a:	0b 2a a0 f1 	max %d15,%d10,%d2
8000db1e:	19 a2 28 00 	ld.w %d2,[%sp]40
8000db22:	42 f2       	add %d2,%d15
8000db24:	58 19       	ld.w %d15,[%sp]100
8000db26:	59 a2 28 00 	st.w [%sp]40,%d2
8000db2a:	6e 49       	jz %d15,8000dbbc <_svfprintf_r+0x1178>
8000db2c:	3c 40       	j 8000dbac <_svfprintf_r+0x1168>
8000db2e:	58 07       	ld.w %d15,[%sp]28
8000db30:	3b 00 01 80 	mov %d8,16
8000db34:	a2 af       	sub %d15,%d10
8000db36:	bf 1f f0 7f 	jlt %d15,1,8000db16 <_svfprintf_r+0x10d2>
8000db3a:	91 00 00 28 	movh.a %a2,32768
8000db3e:	d9 22 e4 d0 	lea %a2,[%a2]3940 <80000f64 <blanks.4035>>
8000db42:	19 a5 24 10 	ld.w %d5,[%sp]100 <80000f64 <blanks.4035>>
8000db46:	19 a3 20 10 	ld.w %d3,[%sp]96 <80000f64 <blanks.4035>>
8000db4a:	8b 1f 81 42 	ge %d4,%d15,17
8000db4e:	e8 02       	st.a [%a15]0,%a2
8000db50:	df 04 1c 00 	jeq %d4,0,8000db88 <_svfprintf_r+0x1144>
8000db54:	c2 13       	add %d3,1
8000db56:	1b 05 01 40 	addi %d4,%d5,16
8000db5a:	68 18       	st.w [%a15]4,%d8
8000db5c:	59 a3 20 10 	st.w [%sp]96,%d3
8000db60:	59 a4 24 10 	st.w [%sp]100,%d4
8000db64:	8b 83 80 32 	ge %d3,%d3,8
8000db68:	d9 ff 08 00 	lea %a15,[%a15]8
8000db6c:	76 3b       	jz %d3,8000db82 <_svfprintf_r+0x113e>
8000db6e:	60 c4       	mov.a %a4,%d12
8000db70:	60 b5       	mov.a %a5,%d11
8000db72:	d9 a6 1c 10 	lea %a6,[%sp]92
8000db76:	6d 00 44 0a 	call 8000effe <__ssprint_r>
8000db7a:	df 02 30 80 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000db7e:	d9 af 10 20 	lea %a15,[%sp]144
8000db82:	1b 0f ff ff 	addi %d15,%d15,-16
8000db86:	3c da       	j 8000db3a <_svfprintf_r+0x10f6>
8000db88:	12 54       	add %d4,%d15,%d5
8000db8a:	68 1f       	st.w [%a15]4,%d15
8000db8c:	9a 13       	add %d15,%d3,1
8000db8e:	78 18       	st.w [%sp]96,%d15
8000db90:	59 a4 24 10 	st.w [%sp]100,%d4
8000db94:	8b 8f 40 f2 	lt %d15,%d15,8
8000db98:	ee bf       	jnz %d15,8000db16 <_svfprintf_r+0x10d2>
8000db9a:	60 c4       	mov.a %a4,%d12
8000db9c:	60 b5       	mov.a %a5,%d11
8000db9e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000dba2:	6d 00 2e 0a 	call 8000effe <__ssprint_r>
8000dba6:	df 02 b8 7f 	jeq %d2,0,8000db16 <_svfprintf_r+0x10d2>
8000dbaa:	3c 18       	j 8000dbda <_svfprintf_r+0x1196>
8000dbac:	60 c4       	mov.a %a4,%d12
8000dbae:	60 b5       	mov.a %a5,%d11
8000dbb0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000dbb4:	6d 00 25 0a 	call 8000effe <__ssprint_r>
8000dbb8:	df 02 11 80 	jne %d2,0,8000dbda <_svfprintf_r+0x1196>
8000dbbc:	82 0f       	mov %d15,0
8000dbbe:	78 18       	st.w [%sp]96,%d15
8000dbc0:	40 cf       	mov.aa %a15,%a12
8000dbc2:	d9 ae 10 20 	lea %a14,[%sp]144
8000dbc6:	1d ff 77 f7 	j 8000cab4 <_svfprintf_r+0x70>
8000dbca:	58 19       	ld.w %d15,[%sp]100
8000dbcc:	6e 07       	jz %d15,8000dbda <_svfprintf_r+0x1196>
8000dbce:	60 c4       	mov.a %a4,%d12
8000dbd0:	60 b5       	mov.a %a5,%d11
8000dbd2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000dbd6:	6d 00 14 0a 	call 8000effe <__ssprint_r>
8000dbda:	60 b3       	mov.a %a3,%d11
8000dbdc:	19 a2 28 00 	ld.w %d2,[%sp]40
8000dbe0:	8c 36       	ld.h %d15,[%a3]12
8000dbe2:	16 40       	and %d15,64
8000dbe4:	aa f2       	cmov %d2,%d15,-1
8000dbe6:	00 90       	ret 

8000dbe8 <quorem>:
8000dbe8:	19 58 10 00 	ld.w %d8,[%a5]16
8000dbec:	4c 44       	ld.w %d15,[%a4]16
8000dbee:	82 02       	mov %d2,0
8000dbf0:	3f 8f 88 00 	jlt %d15,%d8,8000dd00 <quorem+0x118>
8000dbf4:	c2 f8       	add %d8,-1
8000dbf6:	80 4f       	mov.d %d15,%a4
8000dbf8:	8f 28 00 20 	sh %d2,%d8,2
8000dbfc:	60 2f       	mov.a %a15,%d2
8000dbfe:	1b 4f 01 90 	addi %d9,%d15,20
8000dc02:	d9 5c 14 00 	lea %a12,[%a5]20
8000dc06:	01 fc 10 d0 	add.a %a13,%a12,%a15
8000dc0a:	01 f9 00 f6 	addsc.a %a15,%a15,%d9,0
8000dc0e:	54 dc       	ld.w %d12,[%a13]
8000dc10:	4c f0       	ld.w %d15,[%a15]0
8000dc12:	c2 1c       	add %d12,1
8000dc14:	4b cf 11 c2 	div.u %e12,%d15,%d12
8000dc18:	02 ca       	mov %d10,%d12
8000dc1a:	df 0c 3d 00 	jeq %d12,0,8000dc94 <quorem+0xac>
8000dc1e:	60 96       	mov.a %a6,%d9
8000dc20:	40 c2       	mov.aa %a2,%a12
8000dc22:	82 05       	mov %d5,0
8000dc24:	82 06       	mov %d6,0
8000dc26:	54 22       	ld.w %d2,[%a2]
8000dc28:	40 63       	mov.aa %a3,%a6
8000dc2a:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000dc2e:	8f 02 1f 20 	sh %d2,%d2,-16
8000dc32:	03 a3 0a 35 	madd %d3,%d5,%d3,%d10
8000dc36:	b0 42       	add.a %a2,4
8000dc38:	8f 03 1f 40 	sh %d4,%d3,-16
8000dc3c:	03 a2 0a 24 	madd %d2,%d4,%d2,%d10
8000dc40:	44 34       	ld.w %d4,[%a3+]
8000dc42:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000dc46:	b7 04 10 f8 	insert %d15,%d4,0,16,16
8000dc4a:	8f 02 1f 50 	sh %d5,%d2,-16
8000dc4e:	42 f6       	add %d6,%d15
8000dc50:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000dc54:	0b 36 80 30 	sub %d3,%d6,%d3
8000dc58:	8f 04 1f 40 	sh %d4,%d4,-16
8000dc5c:	8f 03 3f f0 	sha %d15,%d3,-16
8000dc60:	0b 24 80 20 	sub %d2,%d4,%d2
8000dc64:	42 f2       	add %d2,%d15
8000dc66:	37 23 10 38 	insert %d3,%d3,%d2,16,16
8000dc6a:	8f 02 3f 60 	sha %d6,%d2,-16
8000dc6e:	80 2f       	mov.d %d15,%a2
8000dc70:	80 d2       	mov.d %d2,%a13
8000dc72:	74 63       	st.w [%a6],%d3
8000dc74:	40 36       	mov.aa %a6,%a3
8000dc76:	7f f2 d8 ff 	jge.u %d2,%d15,8000dc26 <quorem+0x3e>
8000dc7a:	4c f0       	ld.w %d15,[%a15]0
8000dc7c:	ee 0c       	jnz %d15,8000dc94 <quorem+0xac>
8000dc7e:	b0 cf       	add.a %a15,-4
8000dc80:	80 f2       	mov.d %d2,%a15
8000dc82:	3f 29 05 80 	jlt.u %d9,%d2,8000dc8c <quorem+0xa4>
8000dc86:	59 48 10 00 	st.w [%a4]16,%d8
8000dc8a:	3c 05       	j 8000dc94 <quorem+0xac>
8000dc8c:	4c f0       	ld.w %d15,[%a15]0
8000dc8e:	ee fc       	jnz %d15,8000dc86 <quorem+0x9e>
8000dc90:	c2 f8       	add %d8,-1
8000dc92:	3c f6       	j 8000dc7e <quorem+0x96>
8000dc94:	40 4e       	mov.aa %a14,%a4
8000dc96:	6d 00 b9 08 	call 8000ee08 <__mcmp>
8000dc9a:	bf 02 32 00 	jlt %d2,0,8000dcfe <quorem+0x116>
8000dc9e:	60 92       	mov.a %a2,%d9
8000dca0:	1b 1c 00 a0 	addi %d10,%d12,1
8000dca4:	82 04       	mov %d4,0
8000dca6:	40 2f       	mov.aa %a15,%a2
8000dca8:	44 f3       	ld.w %d3,[%a15+]
8000dcaa:	54 c5       	ld.w %d5,[%a12]
8000dcac:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000dcb0:	8f 05 1f f0 	sh %d15,%d5,-16
8000dcb4:	42 42       	add %d2,%d4
8000dcb6:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000dcba:	8f 03 1f 30 	sh %d3,%d3,-16
8000dcbe:	a2 42       	sub %d2,%d4
8000dcc0:	8f 02 3f 40 	sha %d4,%d2,-16
8000dcc4:	a2 f3       	sub %d3,%d15
8000dcc6:	42 43       	add %d3,%d4
8000dcc8:	8f 03 3f 40 	sha %d4,%d3,-16
8000dccc:	b0 4c       	add.a %a12,4
8000dcce:	37 32 10 38 	insert %d3,%d2,%d3,16,16
8000dcd2:	80 df       	mov.d %d15,%a13
8000dcd4:	80 c2       	mov.d %d2,%a12
8000dcd6:	74 23       	st.w [%a2],%d3
8000dcd8:	40 f2       	mov.aa %a2,%a15
8000dcda:	7f 2f e6 ff 	jge.u %d15,%d2,8000dca6 <quorem+0xbe>
8000dcde:	60 92       	mov.a %a2,%d9
8000dce0:	01 28 02 f6 	addsc.a %a15,%a2,%d8,2
8000dce4:	4c f0       	ld.w %d15,[%a15]0
8000dce6:	ee 0c       	jnz %d15,8000dcfe <quorem+0x116>
8000dce8:	b0 cf       	add.a %a15,-4
8000dcea:	80 f2       	mov.d %d2,%a15
8000dcec:	3f 29 05 80 	jlt.u %d9,%d2,8000dcf6 <quorem+0x10e>
8000dcf0:	59 e8 10 00 	st.w [%a14]16,%d8
8000dcf4:	3c 05       	j 8000dcfe <quorem+0x116>
8000dcf6:	4c f0       	ld.w %d15,[%a15]0
8000dcf8:	ee fc       	jnz %d15,8000dcf0 <quorem+0x108>
8000dcfa:	c2 f8       	add %d8,-1
8000dcfc:	3c f6       	j 8000dce8 <quorem+0x100>
8000dcfe:	02 a2       	mov %d2,%d10
8000dd00:	00 90       	ret 
	...

8000dd04 <_dtoa_r>:
8000dd04:	20 58       	sub.a %sp,88
8000dd06:	b5 a5 08 10 	st.a [%sp]72,%a5
8000dd0a:	99 45 00 10 	ld.a %a5,[%a4]64
8000dd0e:	59 a6 1c 00 	st.w [%sp]28,%d6
8000dd12:	59 a7 28 00 	st.w [%sp]40,%d7
8000dd16:	b5 a7 38 00 	st.a [%sp]56,%a7
8000dd1a:	40 4d       	mov.aa %a13,%a4
8000dd1c:	0b 45 10 88 	mov %e8,%d5,%d4
8000dd20:	40 6c       	mov.aa %a12,%a6
8000dd22:	0b 45 10 c8 	mov %e12,%d5,%d4
8000dd26:	bc 5e       	jz.a %a5,8000dd42 <_dtoa_r+0x3e>
8000dd28:	19 4f 04 10 	ld.w %d15,[%a4]68
8000dd2c:	82 12       	mov %d2,1
8000dd2e:	0f f2 00 20 	sh %d2,%d2,%d15
8000dd32:	6c 51       	st.w [%a5]4,%d15
8000dd34:	59 52 08 00 	st.w [%a5]8,%d2
8000dd38:	82 0f       	mov %d15,0
8000dd3a:	6d 00 99 06 	call 8000ea6c <_Bfree>
8000dd3e:	59 df 00 10 	st.w [%a13]64,%d15
8000dd42:	ce 96       	jgez %d9,8000dd4e <_dtoa_r+0x4a>
8000dd44:	82 1f       	mov %d15,1
8000dd46:	6c c0       	st.w [%a12]0,%d15
8000dd48:	b7 09 81 df 	insert %d13,%d9,0,31,1
8000dd4c:	3c 03       	j 8000dd52 <_dtoa_r+0x4e>
8000dd4e:	82 0f       	mov %d15,0
8000dd50:	6c c0       	st.w [%a12]0,%d15
8000dd52:	7b 00 ff 27 	movh %d2,32752
8000dd56:	26 d2       	and %d2,%d13
8000dd58:	7b 00 ff 37 	movh %d3,32752
8000dd5c:	5f 32 22 80 	jne %d2,%d3,8000dda0 <_dtoa_r+0x9c>
8000dd60:	99 a3 08 10 	ld.a %a3,[%sp]72
8000dd64:	3b f0 70 22 	mov %d2,9999
8000dd68:	91 00 00 f8 	movh.a %a15,32768
8000dd6c:	74 32       	st.w [%a3],%d2
8000dd6e:	d9 ff fd d0 	lea %a15,[%a15]3965 <80000f7d <blanks.4035+0x19>>
8000dd72:	f6 c8       	jnz %d12,8000dd82 <_dtoa_r+0x7e>
8000dd74:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000dd78:	ee 05       	jnz %d15,8000dd82 <_dtoa_r+0x7e>
8000dd7a:	91 00 00 f8 	movh.a %a15,32768
8000dd7e:	d9 ff f4 d0 	lea %a15,[%a15]3956 <80000f74 <blanks.4035+0x10>>
8000dd82:	99 a3 38 00 	ld.a %a3,[%sp]56 <80000f74 <blanks.4035+0x10>>
8000dd86:	40 f2       	mov.aa %a2,%a15
8000dd88:	bd 03 26 06 	jz.a %a3,8000e9d4 <_dtoa_r+0xcd0>
8000dd8c:	80 ff       	mov.d %d15,%a15
8000dd8e:	79 f3 03 00 	ld.b %d3,[%a15]3 <80000003 <BootModeHeader0+0x3>>
8000dd92:	1b 8f 00 20 	addi %d2,%d15,8
8000dd96:	c2 3f       	add %d15,3
8000dd98:	2b 2f 50 f3 	seln %d15,%d3,%d15,%d2
8000dd9c:	6c 30       	st.w [%a3]0,%d15
8000dd9e:	00 90       	ret 
8000dda0:	0b cd 10 48 	mov %e4,%d13,%d12
8000dda4:	d2 06       	mov %e6,0
8000dda6:	0b cd 10 88 	mov %e8,%d13,%d12
8000ddaa:	6d 00 2f 0c 	call 8000f608 <__eqdf2>
8000ddae:	df 02 13 80 	jne %d2,0,8000ddd4 <_dtoa_r+0xd0>
8000ddb2:	99 a3 08 10 	ld.a %a3,[%sp]72
8000ddb6:	d8 0e       	ld.a %a15,[%sp]56
8000ddb8:	82 1f       	mov %d15,1
8000ddba:	91 00 00 28 	movh.a %a2,32768
8000ddbe:	6c 30       	st.w [%a3]0,%d15
8000ddc0:	d9 22 c1 e0 	lea %a2,[%a2]3969 <80000f81 <blanks.4035+0x1d>>
8000ddc4:	bd 0f 08 06 	jz.a %a15,8000e9d4 <_dtoa_r+0xcd0>
8000ddc8:	7b 00 00 f8 	movh %d15,32768
8000ddcc:	1b 2f f8 f0 	addi %d15,%d15,3970
8000ddd0:	68 0f       	st.w [%a15]0,%d15
8000ddd2:	00 90       	ret 
8000ddd4:	0b cd 10 48 	mov %e4,%d13,%d12
8000ddd8:	40 d4       	mov.aa %a4,%a13
8000ddda:	d9 a5 14 10 	lea %a5,[%sp]84
8000ddde:	d9 a6 10 10 	lea %a6,[%sp]80
8000dde2:	6d 00 99 08 	call 8000ef14 <__d2b>
8000dde6:	37 0d 6b ba 	extr.u %d11,%d13,20,11
8000ddea:	40 2e       	mov.aa %a14,%a2
8000ddec:	19 aa 10 10 	ld.w %d10,[%sp]80
8000ddf0:	76 bd       	jz %d11,8000de0a <_dtoa_r+0x106>
8000ddf2:	b7 09 0c fa 	insert %d15,%d9,0,20,12
8000ddf6:	0b cd 10 48 	mov %e4,%d13,%d12
8000ddfa:	7b 00 ff 23 	movh %d2,16368
8000ddfe:	0f 2f a0 50 	or %d5,%d15,%d2
8000de02:	1b 1b c0 bf 	addi %d11,%d11,-1023
8000de06:	82 0f       	mov %d15,0
8000de08:	3c 22       	j 8000de4c <_dtoa_r+0x148>
8000de0a:	19 ab 14 10 	ld.w %d11,[%sp]84
8000de0e:	3b e0 be 4f 	mov %d4,-1042
8000de12:	42 ab       	add %d11,%d10
8000de14:	a2 b4       	sub %d4,%d11
8000de16:	3b f0 be 2f 	mov %d2,-1041
8000de1a:	0f 4c 00 40 	sh %d4,%d12,%d4
8000de1e:	3f 2b 0f 00 	jlt %d11,%d2,8000de3c <_dtoa_r+0x138>
8000de22:	1b 2b 41 30 	addi %d3,%d11,1042
8000de26:	3b e0 c0 4f 	mov %d4,-1010
8000de2a:	a2 b4       	sub %d4,%d11
8000de2c:	8b 03 00 21 	rsub %d2,%d3,0
8000de30:	0f 2c 00 20 	sh %d2,%d12,%d2
8000de34:	0f 4d 00 f0 	sh %d15,%d13,%d4
8000de38:	0f f2 a0 40 	or %d4,%d2,%d15
8000de3c:	6d ff 7b f0 	call 8000bf32 <__floatunsidf>
8000de40:	0b 23 10 48 	mov %e4,%d3,%d2
8000de44:	9b 03 e1 5f 	addih %d5,%d3,65040
8000de48:	c2 fb       	add %d11,-1
8000de4a:	82 1f       	mov %d15,1
8000de4c:	b7 00 ab 69 	imask %e6,0,19,11
8000de50:	78 13       	st.w [%sp]76,%d15
8000de52:	6d ff a1 ee 	call 8000bb94 <__subdf3>
8000de56:	7b 30 fd 73 	movh %d7,16339
8000de5a:	0b 23 10 48 	mov %e4,%d3,%d2
8000de5e:	7b f0 36 66 	movh %d6,25455
8000de62:	1b 77 7a 78 	addi %d7,%d7,-30809
8000de66:	1b 16 36 64 	addi %d6,%d6,17249
8000de6a:	6d ff b5 ee 	call 8000bbd4 <__muldf3>
8000de6e:	7b 70 fc 73 	movh %d7,16327
8000de72:	0b 23 10 48 	mov %e4,%d3,%d2
8000de76:	7b 10 b6 68 	movh %d6,35681
8000de7a:	1b 87 a2 78 	addi %d7,%d7,-30168
8000de7e:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000de82:	6d ff 6d ee 	call 8000bb5c <__adddf3>
8000de86:	02 b4       	mov %d4,%d11
8000de88:	0b 23 10 88 	mov %e8,%d3,%d2
8000de8c:	6d ff 02 f0 	call 8000be90 <__floatsidf>
8000de90:	7b 30 fd 73 	movh %d7,16339
8000de94:	0b 23 10 48 	mov %e4,%d3,%d2
8000de98:	7b f0 09 65 	movh %d6,20639
8000de9c:	1b 37 41 74 	addi %d7,%d7,17427
8000dea0:	1b b6 9f 67 	addi %d6,%d6,31227
8000dea4:	6d ff 98 ee 	call 8000bbd4 <__muldf3>
8000dea8:	0b 89 10 48 	mov %e4,%d9,%d8
8000deac:	0b 23 10 68 	mov %e6,%d3,%d2
8000deb0:	6d ff 56 ee 	call 8000bb5c <__adddf3>
8000deb4:	0b 23 10 48 	mov %e4,%d3,%d2
8000deb8:	0b 23 10 88 	mov %e8,%d3,%d2
8000debc:	6d 00 46 0c 	call 8000f748 <__fixdfsi>
8000dec0:	0b 89 10 48 	mov %e4,%d9,%d8
8000dec4:	d2 06       	mov %e6,0
8000dec6:	59 a2 08 00 	st.w [%sp]8,%d2
8000deca:	6d 00 1f 0c 	call 8000f708 <__ltdf2>
8000dece:	ff 02 12 00 	jge %d2,0,8000def2 <_dtoa_r+0x1ee>
8000ded2:	19 a4 08 00 	ld.w %d4,[%sp]8
8000ded6:	6d ff dd ef 	call 8000be90 <__floatsidf>
8000deda:	0b 89 10 48 	mov %e4,%d9,%d8
8000dede:	0b 23 10 68 	mov %e6,%d3,%d2
8000dee2:	6d 00 b3 0b 	call 8000f648 <__nedf2>
8000dee6:	19 a3 08 00 	ld.w %d3,[%sp]8
8000deea:	ab f3 1f 32 	cadd %d3,%d2,%d3,-1
8000deee:	59 a3 08 00 	st.w [%sp]8,%d3
8000def2:	19 a2 08 00 	ld.w %d2,[%sp]8
8000def6:	82 13       	mov %d3,1
8000def8:	8b 72 a1 f2 	ge.u %d15,%d2,23
8000defc:	59 a3 3c 00 	st.w [%sp]60,%d3
8000df00:	ee 18       	jnz %d15,8000df30 <_dtoa_r+0x22c>
8000df02:	91 00 00 f8 	movh.a %a15,32768
8000df06:	d9 ff 24 01 	lea %a15,[%a15]4132 <80001024 <__mprec_tens>>
8000df0a:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000df0e:	0b cd 10 68 	mov %e6,%d13,%d12
8000df12:	09 f4 40 09 	ld.d %e4,[%a15]
8000df16:	6d 00 b9 0b 	call 8000f688 <__gtdf2>
8000df1a:	8e 28       	jlez %d2,8000df2a <_dtoa_r+0x226>
8000df1c:	58 02       	ld.w %d15,[%sp]8
8000df1e:	82 02       	mov %d2,0
8000df20:	c2 ff       	add %d15,-1
8000df22:	78 02       	st.w [%sp]8,%d15
8000df24:	59 a2 3c 00 	st.w [%sp]60,%d2
8000df28:	3c 04       	j 8000df30 <_dtoa_r+0x22c>
8000df2a:	82 03       	mov %d3,0
8000df2c:	59 a3 3c 00 	st.w [%sp]60,%d3
8000df30:	0b ba 80 b0 	sub %d11,%d10,%d11
8000df34:	9a fb       	add %d15,%d11,-1
8000df36:	82 02       	mov %d2,0
8000df38:	78 06       	st.w [%sp]24,%d15
8000df3a:	59 a2 14 00 	st.w [%sp]20,%d2
8000df3e:	ce f6       	jgez %d15,8000df4a <_dtoa_r+0x246>
8000df40:	32 5f       	rsub %d15
8000df42:	82 03       	mov %d3,0
8000df44:	78 05       	st.w [%sp]20,%d15
8000df46:	59 a3 18 00 	st.w [%sp]24,%d3
8000df4a:	58 02       	ld.w %d15,[%sp]8
8000df4c:	0e fa       	jltz %d15,8000df60 <_dtoa_r+0x25c>
8000df4e:	19 a2 18 00 	ld.w %d2,[%sp]24
8000df52:	78 0d       	st.w [%sp]52,%d15
8000df54:	42 f2       	add %d2,%d15
8000df56:	82 0f       	mov %d15,0
8000df58:	59 a2 18 00 	st.w [%sp]24,%d2
8000df5c:	78 08       	st.w [%sp]32,%d15
8000df5e:	3c 0d       	j 8000df78 <_dtoa_r+0x274>
8000df60:	19 a2 14 00 	ld.w %d2,[%sp]20
8000df64:	19 a3 08 00 	ld.w %d3,[%sp]8
8000df68:	82 0f       	mov %d15,0
8000df6a:	a2 32       	sub %d2,%d3
8000df6c:	32 53       	rsub %d3
8000df6e:	59 a2 14 00 	st.w [%sp]20,%d2
8000df72:	59 a3 20 00 	st.w [%sp]32,%d3
8000df76:	78 0d       	st.w [%sp]52,%d15
8000df78:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000df7c:	82 18       	mov %d8,1
8000df7e:	ff a2 46 80 	jge.u %d2,10,8000e00a <_dtoa_r+0x306>
8000df82:	bf 62 06 00 	jlt %d2,6,8000df8e <_dtoa_r+0x28a>
8000df86:	c2 c2       	add %d2,-4
8000df88:	59 a2 1c 00 	st.w [%sp]28,%d2
8000df8c:	82 08       	mov %d8,0
8000df8e:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000df92:	c2 e3       	add %d3,-2
8000df94:	ff 43 4b 80 	jge.u %d3,4,8000e02a <_dtoa_r+0x326>
8000df98:	91 10 00 f8 	movh.a %a15,32769
8000df9c:	d9 ff e8 ed 	lea %a15,[%a15]-8280 <8000dfa8 <_dtoa_r+0x2a4>>
8000dfa0:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000dfa4:	dc 0f       	ji %a15
8000dfa6:	00 00       	nop 
8000dfa8:	1d 00 08 00 	j 8000dfb8 <_dtoa_r+0x2b4>
8000dfac:	1d 00 1c 00 	j 8000dfe4 <_dtoa_r+0x2e0>
8000dfb0:	1d 00 08 00 	j 8000dfc0 <_dtoa_r+0x2bc>
8000dfb4:	1d 00 1c 00 	j 8000dfec <_dtoa_r+0x2e8>
8000dfb8:	82 03       	mov %d3,0
8000dfba:	59 a3 24 00 	st.w [%sp]36,%d3
8000dfbe:	3c 03       	j 8000dfc4 <_dtoa_r+0x2c0>
8000dfc0:	82 1f       	mov %d15,1
8000dfc2:	78 09       	st.w [%sp]36,%d15
8000dfc4:	19 a2 28 00 	ld.w %d2,[%sp]40
8000dfc8:	59 a2 2c 00 	st.w [%sp]44,%d2
8000dfcc:	59 a2 10 00 	st.w [%sp]16,%d2
8000dfd0:	02 23       	mov %d3,%d2
8000dfd2:	ff 12 38 00 	jge %d2,1,8000e042 <_dtoa_r+0x33e>
8000dfd6:	82 13       	mov %d3,1
8000dfd8:	82 1f       	mov %d15,1
8000dfda:	59 a3 2c 00 	st.w [%sp]44,%d3
8000dfde:	78 04       	st.w [%sp]16,%d15
8000dfe0:	82 12       	mov %d2,1
8000dfe2:	3c 21       	j 8000e024 <_dtoa_r+0x320>
8000dfe4:	82 03       	mov %d3,0
8000dfe6:	59 a3 24 00 	st.w [%sp]36,%d3
8000dfea:	3c 03       	j 8000dff0 <_dtoa_r+0x2ec>
8000dfec:	82 1f       	mov %d15,1
8000dfee:	78 09       	st.w [%sp]36,%d15
8000dff0:	19 a3 08 00 	ld.w %d3,[%sp]8
8000dff4:	19 a2 28 00 	ld.w %d2,[%sp]40
8000dff8:	42 32       	add %d2,%d3
8000dffa:	59 a2 2c 00 	st.w [%sp]44,%d2
8000dffe:	c2 12       	add %d2,1
8000e000:	59 a2 10 00 	st.w [%sp]16,%d2
8000e004:	8b 12 40 33 	max %d3,%d2,1
8000e008:	3c 1d       	j 8000e042 <_dtoa_r+0x33e>
8000e00a:	82 0f       	mov %d15,0
8000e00c:	82 12       	mov %d2,1
8000e00e:	82 f3       	mov %d3,-1
8000e010:	78 07       	st.w [%sp]28,%d15
8000e012:	82 ff       	mov %d15,-1
8000e014:	59 a2 24 00 	st.w [%sp]36,%d2
8000e018:	59 a3 2c 00 	st.w [%sp]44,%d3
8000e01c:	78 04       	st.w [%sp]16,%d15
8000e01e:	3b 20 01 30 	mov %d3,18
8000e022:	82 02       	mov %d2,0
8000e024:	59 a2 28 00 	st.w [%sp]40,%d2
8000e028:	3c 0d       	j 8000e042 <_dtoa_r+0x33e>
8000e02a:	82 ff       	mov %d15,-1
8000e02c:	82 13       	mov %d3,1
8000e02e:	78 0b       	st.w [%sp]44,%d15
8000e030:	82 f2       	mov %d2,-1
8000e032:	82 0f       	mov %d15,0
8000e034:	59 a3 24 00 	st.w [%sp]36,%d3
8000e038:	59 a2 10 00 	st.w [%sp]16,%d2
8000e03c:	3b 20 01 30 	mov %d3,18
8000e040:	78 0a       	st.w [%sp]40,%d15
8000e042:	82 05       	mov %d5,0
8000e044:	59 d5 04 10 	st.w [%a13]68,%d5
8000e048:	82 45       	mov %d5,4
8000e04a:	1b 45 01 00 	addi %d0,%d5,20
8000e04e:	3f 03 09 80 	jlt.u %d3,%d0,8000e060 <_dtoa_r+0x35c>
8000e052:	19 d0 04 10 	ld.w %d0,[%a13]68
8000e056:	06 15       	sh %d5,1
8000e058:	c2 10       	add %d0,1
8000e05a:	59 d0 04 10 	st.w [%a13]68,%d0
8000e05e:	3c f6       	j 8000e04a <_dtoa_r+0x346>
8000e060:	40 d4       	mov.aa %a4,%a13
8000e062:	19 d4 04 10 	ld.w %d4,[%a13]68
8000e066:	6d 00 d8 04 	call 8000ea16 <_Balloc>
8000e06a:	19 a2 10 00 	ld.w %d2,[%sp]16
8000e06e:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000e072:	8b f2 60 32 	lt.u %d3,%d2,15
8000e076:	b5 d2 00 10 	st.a [%a13]64,%a2
8000e07a:	26 38       	and %d8,%d3
8000e07c:	df 08 97 01 	jeq %d8,0,8000e3aa <_dtoa_r+0x6a6>
8000e080:	19 a3 08 00 	ld.w %d3,[%sp]8
8000e084:	89 ac 40 19 	st.d [%sp]64,%e12
8000e088:	bf 13 3f 00 	jlt %d3,1,8000e106 <_dtoa_r+0x402>
8000e08c:	91 00 00 f8 	movh.a %a15,32768
8000e090:	8f f3 00 31 	and %d3,%d3,15
8000e094:	d9 ff 24 01 	lea %a15,[%a15]4132 <80001024 <__mprec_tens>>
8000e098:	19 ae 08 00 	ld.w %d14,[%sp]8 <80001024 <__mprec_tens>>
8000e09c:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000e0a0:	86 ce       	sha %d14,-4
8000e0a2:	09 f8 40 09 	ld.d %e8,[%a15]
8000e0a6:	82 2a       	mov %d10,2
8000e0a8:	6f 4e 11 00 	jz.t %d14,4,8000e0ca <_dtoa_r+0x3c6>
8000e0ac:	91 00 00 f8 	movh.a %a15,32768
8000e0b0:	0b cd 10 48 	mov %e4,%d13,%d12
8000e0b4:	d9 ff fc f0 	lea %a15,[%a15]4092 <80000ffc <__mprec_bigtens>>
8000e0b8:	09 f6 60 09 	ld.d %e6,[%a15]32 <80000020 <_start>>
8000e0bc:	6d ff 5e ee 	call 8000bd78 <__divdf3>
8000e0c0:	0b 23 10 c8 	mov %e12,%d3,%d2
8000e0c4:	8f fe 00 e1 	and %d14,%d14,15
8000e0c8:	82 3a       	mov %d10,3
8000e0ca:	7b 00 00 b8 	movh %d11,32768
8000e0ce:	82 0f       	mov %d15,0
8000e0d0:	1b cb ff b0 	addi %d11,%d11,4092
8000e0d4:	df 0e 12 00 	jeq %d14,0,8000e0f8 <_dtoa_r+0x3f4>
8000e0d8:	6f 0e 0d 00 	jz.t %d14,0,8000e0f2 <_dtoa_r+0x3ee>
8000e0dc:	60 b2       	mov.a %a2,%d11
8000e0de:	d0 2f       	addsc.a %a15,%a2,%d15,3
8000e0e0:	0b 89 10 48 	mov %e4,%d9,%d8
8000e0e4:	09 f6 40 09 	ld.d %e6,[%a15]
8000e0e8:	6d ff 76 ed 	call 8000bbd4 <__muldf3>
8000e0ec:	0b 23 10 88 	mov %e8,%d3,%d2
8000e0f0:	c2 1a       	add %d10,1
8000e0f2:	86 fe       	sha %d14,-1
8000e0f4:	c2 1f       	add %d15,1
8000e0f6:	3c ef       	j 8000e0d4 <_dtoa_r+0x3d0>
8000e0f8:	0b cd 10 48 	mov %e4,%d13,%d12
8000e0fc:	0b 89 10 68 	mov %e6,%d9,%d8
8000e100:	6d ff 3c ee 	call 8000bd78 <__divdf3>
8000e104:	3c 2c       	j 8000e15c <_dtoa_r+0x458>
8000e106:	19 a8 08 00 	ld.w %d8,[%sp]8
8000e10a:	82 2a       	mov %d10,2
8000e10c:	32 58       	rsub %d8
8000e10e:	df 08 29 00 	jeq %d8,0,8000e160 <_dtoa_r+0x45c>
8000e112:	91 00 00 f8 	movh.a %a15,32768
8000e116:	8f f8 00 31 	and %d3,%d8,15
8000e11a:	d9 ff 24 01 	lea %a15,[%a15]4132 <80001024 <__mprec_tens>>
8000e11e:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000e122:	09 a4 40 19 	ld.d %e4,[%sp]64
8000e126:	09 f6 40 09 	ld.d %e6,[%a15]
8000e12a:	7b 00 00 c8 	movh %d12,32768
8000e12e:	6d ff 53 ed 	call 8000bbd4 <__muldf3>
8000e132:	82 09       	mov %d9,0
8000e134:	86 c8       	sha %d8,-4
8000e136:	1b cc ff c0 	addi %d12,%d12,4092
8000e13a:	df 08 11 00 	jeq %d8,0,8000e15c <_dtoa_r+0x458>
8000e13e:	6f 08 0c 00 	jz.t %d8,0,8000e156 <_dtoa_r+0x452>
8000e142:	60 c3       	mov.a %a3,%d12
8000e144:	01 39 03 f6 	addsc.a %a15,%a3,%d9,3
8000e148:	0b 23 10 48 	mov %e4,%d3,%d2
8000e14c:	09 f6 40 09 	ld.d %e6,[%a15]
8000e150:	c2 1a       	add %d10,1
8000e152:	6d ff 41 ed 	call 8000bbd4 <__muldf3>
8000e156:	86 f8       	sha %d8,-1
8000e158:	c2 19       	add %d9,1
8000e15a:	3c f0       	j 8000e13a <_dtoa_r+0x436>
8000e15c:	0b 23 10 c8 	mov %e12,%d3,%d2
8000e160:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000e164:	df 02 23 00 	jeq %d2,0,8000e1aa <_dtoa_r+0x4a6>
8000e168:	0b cd 10 48 	mov %e4,%d13,%d12
8000e16c:	b7 00 2a 6a 	imask %e6,0,20,10
8000e170:	6d 00 cc 0a 	call 8000f708 <__ltdf2>
8000e174:	ff 02 20 00 	jge %d2,0,8000e1b4 <_dtoa_r+0x4b0>
8000e178:	19 a3 10 00 	ld.w %d3,[%sp]16
8000e17c:	df 03 21 00 	jeq %d3,0,8000e1be <_dtoa_r+0x4ba>
8000e180:	58 0b       	ld.w %d15,[%sp]44
8000e182:	bf 1f 12 01 	jlt %d15,1,8000e3a6 <_dtoa_r+0x6a2>
8000e186:	19 a2 08 00 	ld.w %d2,[%sp]8
8000e18a:	0b cd 10 48 	mov %e4,%d13,%d12
8000e18e:	c2 f2       	add %d2,-1
8000e190:	82 06       	mov %d6,0
8000e192:	7b 40 02 74 	movh %d7,16420
8000e196:	59 a2 30 00 	st.w [%sp]48,%d2
8000e19a:	6d ff 1d ed 	call 8000bbd4 <__muldf3>
8000e19e:	c2 1a       	add %d10,1
8000e1a0:	0b 23 10 c8 	mov %e12,%d3,%d2
8000e1a4:	99 ac 2c 00 	ld.a %a12,[%sp]44
8000e1a8:	3c 10       	j 8000e1c8 <_dtoa_r+0x4c4>
8000e1aa:	19 a3 08 00 	ld.w %d3,[%sp]8
8000e1ae:	59 a3 30 00 	st.w [%sp]48,%d3
8000e1b2:	3c 03       	j 8000e1b8 <_dtoa_r+0x4b4>
8000e1b4:	58 02       	ld.w %d15,[%sp]8
8000e1b6:	78 0c       	st.w [%sp]48,%d15
8000e1b8:	99 ac 10 00 	ld.a %a12,[%sp]16
8000e1bc:	3c 06       	j 8000e1c8 <_dtoa_r+0x4c4>
8000e1be:	19 a2 08 00 	ld.w %d2,[%sp]8
8000e1c2:	a0 0c       	mov.a %a12,0
8000e1c4:	59 a2 30 00 	st.w [%sp]48,%d2
8000e1c8:	02 a4       	mov %d4,%d10
8000e1ca:	6d ff 63 ee 	call 8000be90 <__floatsidf>
8000e1ce:	0b cd 10 68 	mov %e6,%d13,%d12
8000e1d2:	0b 23 10 48 	mov %e4,%d3,%d2
8000e1d6:	6d ff ff ec 	call 8000bbd4 <__muldf3>
8000e1da:	0b 23 10 48 	mov %e4,%d3,%d2
8000e1de:	82 06       	mov %d6,0
8000e1e0:	7b c0 01 74 	movh %d7,16412
8000e1e4:	6d ff bc ec 	call 8000bb5c <__adddf3>
8000e1e8:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e1ec:	0b 23 10 e8 	mov %e14,%d3,%d2
8000e1f0:	60 b2       	mov.a %a2,%d11
8000e1f2:	11 02 cc ff 	addih.a %a15,%a2,64704
8000e1f6:	80 ff       	mov.d %d15,%a15
8000e1f8:	bd 0c 1e 80 	jnz.a %a12,8000e234 <_dtoa_r+0x530>
8000e1fc:	0b cd 10 48 	mov %e4,%d13,%d12
8000e200:	82 06       	mov %d6,0
8000e202:	7b 40 01 74 	movh %d7,16404
8000e206:	6d ff c7 ec 	call 8000bb94 <__subdf3>
8000e20a:	80 f7       	mov.d %d7,%a15
8000e20c:	0b 23 10 48 	mov %e4,%d3,%d2
8000e210:	02 e6       	mov %d6,%d14
8000e212:	0b 23 10 88 	mov %e8,%d3,%d2
8000e216:	6d 00 39 0a 	call 8000f688 <__gtdf2>
8000e21a:	ff 12 8e 02 	jge %d2,1,8000e736 <_dtoa_r+0xa32>
8000e21e:	0b 89 10 48 	mov %e4,%d9,%d8
8000e222:	02 e6       	mov %d6,%d14
8000e224:	9b 0b cc 77 	addih %d7,%d11,31936
8000e228:	6d 00 70 0a 	call 8000f708 <__ltdf2>
8000e22c:	bf 02 7d 02 	jlt %d2,0,8000e726 <_dtoa_r+0xa22>
8000e230:	1d 00 bb 00 	j 8000e3a6 <_dtoa_r+0x6a2>
8000e234:	80 c5       	mov.d %d5,%a12
8000e236:	91 00 00 f8 	movh.a %a15,32768
8000e23a:	19 a2 24 00 	ld.w %d2,[%sp]36
8000e23e:	d9 ff 24 01 	lea %a15,[%a15]4132 <80001024 <__mprec_tens>>
8000e242:	c2 f5       	add %d5,-1
8000e244:	01 f5 03 f6 	addsc.a %a15,%a15,%d5,3
8000e248:	df 02 57 00 	jeq %d2,0,8000e2f6 <_dtoa_r+0x5f2>
8000e24c:	b7 00 a9 4a 	imask %e4,0,21,9
8000e250:	09 f6 40 09 	ld.d %e6,[%a15]
8000e254:	6d ff 92 ed 	call 8000bd78 <__divdf3>
8000e258:	0b ef 10 68 	mov %e6,%d15,%d14
8000e25c:	0b 23 10 48 	mov %e4,%d3,%d2
8000e260:	6d ff 9a ec 	call 8000bb94 <__subdf3>
8000e264:	d8 03       	ld.a %a15,[%sp]12
8000e266:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e26a:	0b cd 10 48 	mov %e4,%d13,%d12
8000e26e:	80 fe       	mov.d %d14,%a15
8000e270:	6d 00 6c 0a 	call 8000f748 <__fixdfsi>
8000e274:	02 24       	mov %d4,%d2
8000e276:	02 2f       	mov %d15,%d2
8000e278:	6d ff 0c ee 	call 8000be90 <__floatsidf>
8000e27c:	0b cd 10 48 	mov %e4,%d13,%d12
8000e280:	0b 23 10 68 	mov %e6,%d3,%d2
8000e284:	c2 1e       	add %d14,1
8000e286:	6d ff 87 ec 	call 8000bb94 <__subdf3>
8000e28a:	1b 0f 03 50 	addi %d5,%d15,48
8000e28e:	28 05       	st.b [%a15]0,%d5
8000e290:	0b ab 10 68 	mov %e6,%d11,%d10
8000e294:	0b 23 10 48 	mov %e4,%d3,%d2
8000e298:	0b 23 10 88 	mov %e8,%d3,%d2
8000e29c:	6d 00 36 0a 	call 8000f708 <__ltdf2>
8000e2a0:	bf 02 86 03 	jlt %d2,0,8000e9ac <_dtoa_r+0xca8>
8000e2a4:	b7 00 2a 4a 	imask %e4,0,20,10
8000e2a8:	0b 89 10 68 	mov %e6,%d9,%d8
8000e2ac:	6d ff 74 ec 	call 8000bb94 <__subdf3>
8000e2b0:	0b ab 10 68 	mov %e6,%d11,%d10
8000e2b4:	0b 23 10 48 	mov %e4,%d3,%d2
8000e2b8:	6d 00 28 0a 	call 8000f708 <__ltdf2>
8000e2bc:	bf 02 ea 00 	jlt %d2,0,8000e490 <_dtoa_r+0x78c>
8000e2c0:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000e2c4:	02 e5       	mov %d5,%d14
8000e2c6:	80 cf       	mov.d %d15,%a12
8000e2c8:	a2 35       	sub %d5,%d3
8000e2ca:	7f f5 6e 00 	jge %d5,%d15,8000e3a6 <_dtoa_r+0x6a2>
8000e2ce:	0b ab 10 48 	mov %e4,%d11,%d10
8000e2d2:	82 06       	mov %d6,0
8000e2d4:	7b 40 02 74 	movh %d7,16420
8000e2d8:	6d ff 7e ec 	call 8000bbd4 <__muldf3>
8000e2dc:	0b 89 10 48 	mov %e4,%d9,%d8
8000e2e0:	82 06       	mov %d6,0
8000e2e2:	7b 40 02 74 	movh %d7,16420
8000e2e6:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e2ea:	6d ff 75 ec 	call 8000bbd4 <__muldf3>
8000e2ee:	60 ef       	mov.a %a15,%d14
8000e2f0:	0b 23 10 c8 	mov %e12,%d3,%d2
8000e2f4:	3c bb       	j 8000e26a <_dtoa_r+0x566>
8000e2f6:	0b ef 10 68 	mov %e6,%d15,%d14
8000e2fa:	09 f4 40 09 	ld.d %e4,[%a15]
8000e2fe:	6d ff 6b ec 	call 8000bbd4 <__muldf3>
8000e302:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000e306:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e30a:	30 c3       	add.a %a3,%a12
8000e30c:	99 ac 0c 00 	ld.a %a12,[%sp]12
8000e310:	80 3e       	mov.d %d14,%a3
8000e312:	0b cd 10 48 	mov %e4,%d13,%d12
8000e316:	d9 cf 01 00 	lea %a15,[%a12]1
8000e31a:	6d 00 17 0a 	call 8000f748 <__fixdfsi>
8000e31e:	02 24       	mov %d4,%d2
8000e320:	02 2f       	mov %d15,%d2
8000e322:	6d ff b7 ed 	call 8000be90 <__floatsidf>
8000e326:	0b cd 10 48 	mov %e4,%d13,%d12
8000e32a:	0b 23 10 68 	mov %e6,%d3,%d2
8000e32e:	6d ff 33 ec 	call 8000bb94 <__subdf3>
8000e332:	1b 0f 03 50 	addi %d5,%d15,48
8000e336:	0b 23 10 88 	mov %e8,%d3,%d2
8000e33a:	80 f2       	mov.d %d2,%a15
8000e33c:	34 c5       	st.b [%a12],%d5
8000e33e:	5f e2 29 80 	jne %d2,%d14,8000e390 <_dtoa_r+0x68c>
8000e342:	0b ab 10 48 	mov %e4,%d11,%d10
8000e346:	b7 00 a9 6a 	imask %e6,0,21,9
8000e34a:	6d ff 09 ec 	call 8000bb5c <__adddf3>
8000e34e:	0b 89 10 48 	mov %e4,%d9,%d8
8000e352:	0b 23 10 68 	mov %e6,%d3,%d2
8000e356:	6d 00 99 09 	call 8000f688 <__gtdf2>
8000e35a:	ff 12 9b 00 	jge %d2,1,8000e490 <_dtoa_r+0x78c>
8000e35e:	b7 00 a9 4a 	imask %e4,0,21,9
8000e362:	0b ab 10 68 	mov %e6,%d11,%d10
8000e366:	6d ff 17 ec 	call 8000bb94 <__subdf3>
8000e36a:	0b 89 10 48 	mov %e4,%d9,%d8
8000e36e:	0b 23 10 68 	mov %e6,%d3,%d2
8000e372:	6d 00 cb 09 	call 8000f708 <__ltdf2>
8000e376:	ff 02 18 00 	jge %d2,0,8000e3a6 <_dtoa_r+0x6a2>
8000e37a:	60 e2       	mov.a %a2,%d14
8000e37c:	60 ef       	mov.a %a15,%d14
8000e37e:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000e382:	b0 ff       	add.a %a15,-1
8000e384:	8b 0f 03 f2 	eq %d15,%d15,48
8000e388:	df 0f 12 03 	jeq %d15,0,8000e9ac <_dtoa_r+0xca8>
8000e38c:	80 fe       	mov.d %d14,%a15
8000e38e:	3c f6       	j 8000e37a <_dtoa_r+0x676>
8000e390:	0b 89 10 48 	mov %e4,%d9,%d8
8000e394:	82 06       	mov %d6,0
8000e396:	7b 40 02 74 	movh %d7,16420
8000e39a:	6d ff 1d ec 	call 8000bbd4 <__muldf3>
8000e39e:	40 fc       	mov.aa %a12,%a15
8000e3a0:	0b 23 10 c8 	mov %e12,%d3,%d2
8000e3a4:	3c b7       	j 8000e312 <_dtoa_r+0x60e>
8000e3a6:	09 ac 40 19 	ld.d %e12,[%sp]64
8000e3aa:	19 a3 14 10 	ld.w %d3,[%sp]84
8000e3ae:	19 a2 08 00 	ld.w %d2,[%sp]8
8000e3b2:	8b 03 80 52 	ge %d5,%d3,0
8000e3b6:	8b f2 40 54 	and.lt %d5,%d2,15
8000e3ba:	df 05 9e 00 	jeq %d5,0,8000e4f6 <_dtoa_r+0x7f2>
8000e3be:	91 00 00 f8 	movh.a %a15,32768
8000e3c2:	d9 ff 24 01 	lea %a15,[%a15]4132 <80001024 <__mprec_tens>>
8000e3c6:	19 a3 10 00 	ld.w %d3,[%sp]16 <80001024 <__mprec_tens>>
8000e3ca:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000e3ce:	19 a2 28 00 	ld.w %d2,[%sp]40
8000e3d2:	fa 13       	lt %d15,%d3,1
8000e3d4:	87 f2 1f f0 	and.t %d15,%d2,31,%d15,0
8000e3d8:	09 f8 40 09 	ld.d %e8,[%a15]
8000e3dc:	6e 16       	jz %d15,8000e408 <_dtoa_r+0x704>
8000e3de:	df 03 a4 81 	jne %d3,0,8000e726 <_dtoa_r+0xa22>
8000e3e2:	0b 89 10 48 	mov %e4,%d9,%d8
8000e3e6:	82 06       	mov %d6,0
8000e3e8:	7b 40 01 74 	movh %d7,16404
8000e3ec:	6d ff f4 eb 	call 8000bbd4 <__muldf3>
8000e3f0:	0b cd 10 68 	mov %e6,%d13,%d12
8000e3f4:	0b 23 10 48 	mov %e4,%d3,%d2
8000e3f8:	a0 0c       	mov.a %a12,0
8000e3fa:	6d 00 67 09 	call 8000f6c8 <__gedf2>
8000e3fe:	a0 0f       	mov.a %a15,0
8000e400:	ff 02 95 01 	jge %d2,0,8000e72a <_dtoa_r+0xa26>
8000e404:	1d 00 9d 01 	j 8000e73e <_dtoa_r+0xa3a>
8000e408:	d8 03       	ld.a %a15,[%sp]12
8000e40a:	0b cd 10 a8 	mov %e10,%d13,%d12
8000e40e:	0b 89 10 68 	mov %e6,%d9,%d8
8000e412:	0b ab 10 48 	mov %e4,%d11,%d10
8000e416:	80 fe       	mov.d %d14,%a15
8000e418:	6d ff b0 ec 	call 8000bd78 <__divdf3>
8000e41c:	0b 23 10 48 	mov %e4,%d3,%d2
8000e420:	c2 1e       	add %d14,1
8000e422:	6d 00 93 09 	call 8000f748 <__fixdfsi>
8000e426:	02 24       	mov %d4,%d2
8000e428:	02 2f       	mov %d15,%d2
8000e42a:	6d ff 33 ed 	call 8000be90 <__floatsidf>
8000e42e:	0b 89 10 68 	mov %e6,%d9,%d8
8000e432:	0b 23 10 48 	mov %e4,%d3,%d2
8000e436:	6d ff cf eb 	call 8000bbd4 <__muldf3>
8000e43a:	0b ab 10 48 	mov %e4,%d11,%d10
8000e43e:	0b 23 10 68 	mov %e6,%d3,%d2
8000e442:	6d ff a9 eb 	call 8000bb94 <__subdf3>
8000e446:	0b 23 10 48 	mov %e4,%d3,%d2
8000e44a:	1b 0f 03 30 	addi %d3,%d15,48
8000e44e:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000e452:	28 03       	st.b [%a15]0,%d3
8000e454:	02 e3       	mov %d3,%d14
8000e456:	a2 23       	sub %d3,%d2
8000e458:	19 a2 10 00 	ld.w %d2,[%sp]16
8000e45c:	5f 23 3c 80 	jne %d3,%d2,8000e4d4 <_dtoa_r+0x7d0>
8000e460:	0b 45 10 68 	mov %e6,%d5,%d4
8000e464:	6d ff 7c eb 	call 8000bb5c <__adddf3>
8000e468:	0b 89 10 68 	mov %e6,%d9,%d8
8000e46c:	0b 23 10 48 	mov %e4,%d3,%d2
8000e470:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e474:	6d 00 0a 09 	call 8000f688 <__gtdf2>
8000e478:	4e 2e       	jgtz %d2,8000e494 <_dtoa_r+0x790>
8000e47a:	0b ab 10 48 	mov %e4,%d11,%d10
8000e47e:	0b 89 10 68 	mov %e6,%d9,%d8
8000e482:	6d 00 c3 08 	call 8000f608 <__eqdf2>
8000e486:	df 02 95 82 	jne %d2,0,8000e9b0 <_dtoa_r+0xcac>
8000e48a:	ae 05       	jnz.t %d15,0,8000e494 <_dtoa_r+0x790>
8000e48c:	1d 00 92 02 	j 8000e9b0 <_dtoa_r+0xcac>
8000e490:	58 0c       	ld.w %d15,[%sp]48
8000e492:	78 02       	st.w [%sp]8,%d15
8000e494:	58 03       	ld.w %d15,[%sp]12
8000e496:	a2 ef       	sub %d15,%d14
8000e498:	46 0f       	not %d15
8000e49a:	60 e2       	mov.a %a2,%d14
8000e49c:	60 ef       	mov.a %a15,%d14
8000e49e:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000e4a2:	b0 ff       	add.a %a15,-1
8000e4a4:	8b 93 03 32 	eq %d3,%d3,57
8000e4a8:	df 03 11 00 	jeq %d3,0,8000e4ca <_dtoa_r+0x7c6>
8000e4ac:	9f 0f 0d 80 	jned %d15,0,8000e4c6 <_dtoa_r+0x7c2>
8000e4b0:	19 a3 08 00 	ld.w %d3,[%sp]8
8000e4b4:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000e4b8:	c2 13       	add %d3,1
8000e4ba:	da 30       	mov %d15,48
8000e4bc:	59 a3 08 00 	st.w [%sp]8,%d3
8000e4c0:	2c 30       	st.b [%a3]0,%d15
8000e4c2:	40 3f       	mov.aa %a15,%a3
8000e4c4:	3c 03       	j 8000e4ca <_dtoa_r+0x7c6>
8000e4c6:	80 fe       	mov.d %d14,%a15
8000e4c8:	3c e9       	j 8000e49a <_dtoa_r+0x796>
8000e4ca:	0c f0       	ld.bu %d15,[%a15]0
8000e4cc:	c2 1f       	add %d15,1
8000e4ce:	28 0f       	st.b [%a15]0,%d15
8000e4d0:	1d 00 70 02 	j 8000e9b0 <_dtoa_r+0xcac>
8000e4d4:	82 06       	mov %d6,0
8000e4d6:	7b 40 02 74 	movh %d7,16420
8000e4da:	6d ff 7d eb 	call 8000bbd4 <__muldf3>
8000e4de:	d2 06       	mov %e6,0
8000e4e0:	0b 23 10 48 	mov %e4,%d3,%d2
8000e4e4:	0b 23 10 a8 	mov %e10,%d3,%d2
8000e4e8:	60 ef       	mov.a %a15,%d14
8000e4ea:	6d 00 8f 08 	call 8000f608 <__eqdf2>
8000e4ee:	df 02 90 ff 	jne %d2,0,8000e40e <_dtoa_r+0x70a>
8000e4f2:	1d 00 5f 02 	j 8000e9b0 <_dtoa_r+0xcac>
8000e4f6:	19 a2 24 00 	ld.w %d2,[%sp]36
8000e4fa:	58 08       	ld.w %d15,[%sp]32
8000e4fc:	19 a8 14 00 	ld.w %d8,[%sp]20
8000e500:	a0 0f       	mov.a %a15,0
8000e502:	df 02 3b 00 	jeq %d2,0,8000e578 <_dtoa_r+0x874>
8000e506:	58 07       	ld.w %d15,[%sp]28
8000e508:	ff 2f 10 00 	jge %d15,2,8000e528 <_dtoa_r+0x824>
8000e50c:	58 13       	ld.w %d15,[%sp]76
8000e50e:	6e 05       	jz %d15,8000e518 <_dtoa_r+0x814>
8000e510:	1b 33 43 30 	addi %d3,%d3,1075
8000e514:	58 08       	ld.w %d15,[%sp]32
8000e516:	3c 22       	j 8000e55a <_dtoa_r+0x856>
8000e518:	19 a3 10 10 	ld.w %d3,[%sp]80
8000e51c:	58 08       	ld.w %d15,[%sp]32
8000e51e:	8b 63 03 31 	rsub %d3,%d3,54
8000e522:	19 a8 14 00 	ld.w %d8,[%sp]20
8000e526:	3c 1a       	j 8000e55a <_dtoa_r+0x856>
8000e528:	58 04       	ld.w %d15,[%sp]16
8000e52a:	19 a2 20 00 	ld.w %d2,[%sp]32
8000e52e:	c2 ff       	add %d15,-1
8000e530:	3f f2 04 00 	jlt %d2,%d15,8000e538 <_dtoa_r+0x834>
8000e534:	5a f2       	sub %d15,%d2,%d15
8000e536:	3c 0b       	j 8000e54c <_dtoa_r+0x848>
8000e538:	19 a3 20 00 	ld.w %d3,[%sp]32
8000e53c:	78 08       	st.w [%sp]32,%d15
8000e53e:	52 32       	sub %d2,%d15,%d3
8000e540:	19 a3 34 00 	ld.w %d3,[%sp]52
8000e544:	82 0f       	mov %d15,0
8000e546:	42 23       	add %d3,%d2
8000e548:	59 a3 34 00 	st.w [%sp]52,%d3
8000e54c:	19 a3 10 00 	ld.w %d3,[%sp]16
8000e550:	19 a8 14 00 	ld.w %d8,[%sp]20
8000e554:	ce 33       	jgez %d3,8000e55a <_dtoa_r+0x856>
8000e556:	a2 38       	sub %d8,%d3
8000e558:	82 03       	mov %d3,0
8000e55a:	19 a2 14 00 	ld.w %d2,[%sp]20
8000e55e:	40 d4       	mov.aa %a4,%a13
8000e560:	42 32       	add %d2,%d3
8000e562:	59 a2 14 00 	st.w [%sp]20,%d2
8000e566:	19 a2 18 00 	ld.w %d2,[%sp]24
8000e56a:	82 14       	mov %d4,1
8000e56c:	42 32       	add %d2,%d3
8000e56e:	59 a2 18 00 	st.w [%sp]24,%d2
8000e572:	6d 00 1b 03 	call 8000eba8 <__i2b>
8000e576:	40 2f       	mov.aa %a15,%a2
8000e578:	19 a2 18 00 	ld.w %d2,[%sp]24
8000e57c:	8b 18 80 32 	ge %d3,%d8,1
8000e580:	8b 12 80 34 	and.ge %d3,%d2,1
8000e584:	76 3e       	jz %d3,8000e5a0 <_dtoa_r+0x89c>
8000e586:	0b 82 80 31 	min %d3,%d2,%d8
8000e58a:	19 a2 14 00 	ld.w %d2,[%sp]20
8000e58e:	a2 38       	sub %d8,%d3
8000e590:	a2 32       	sub %d2,%d3
8000e592:	59 a2 14 00 	st.w [%sp]20,%d2
8000e596:	19 a2 18 00 	ld.w %d2,[%sp]24
8000e59a:	a2 32       	sub %d2,%d3
8000e59c:	59 a2 18 00 	st.w [%sp]24,%d2
8000e5a0:	19 a3 20 00 	ld.w %d3,[%sp]32
8000e5a4:	bf 13 27 00 	jlt %d3,1,8000e5f2 <_dtoa_r+0x8ee>
8000e5a8:	19 a2 24 00 	ld.w %d2,[%sp]36
8000e5ac:	df 02 1c 00 	jeq %d2,0,8000e5e4 <_dtoa_r+0x8e0>
8000e5b0:	bf 1f 13 00 	jlt %d15,1,8000e5d6 <_dtoa_r+0x8d2>
8000e5b4:	40 f5       	mov.aa %a5,%a15
8000e5b6:	02 f4       	mov %d4,%d15
8000e5b8:	40 d4       	mov.aa %a4,%a13
8000e5ba:	6d 00 8c 03 	call 8000ecd2 <__pow5mult>
8000e5be:	40 e6       	mov.aa %a6,%a14
8000e5c0:	40 d4       	mov.aa %a4,%a13
8000e5c2:	40 25       	mov.aa %a5,%a2
8000e5c4:	40 2f       	mov.aa %a15,%a2
8000e5c6:	6d 00 f9 02 	call 8000ebb8 <__multiply>
8000e5ca:	40 e5       	mov.aa %a5,%a14
8000e5cc:	40 2c       	mov.aa %a12,%a2
8000e5ce:	40 d4       	mov.aa %a4,%a13
8000e5d0:	6d 00 4e 02 	call 8000ea6c <_Bfree>
8000e5d4:	40 ce       	mov.aa %a14,%a12
8000e5d6:	19 a4 20 00 	ld.w %d4,[%sp]32
8000e5da:	40 d4       	mov.aa %a4,%a13
8000e5dc:	a2 f4       	sub %d4,%d15
8000e5de:	40 e5       	mov.aa %a5,%a14
8000e5e0:	76 49       	jz %d4,8000e5f2 <_dtoa_r+0x8ee>
8000e5e2:	3c 05       	j 8000e5ec <_dtoa_r+0x8e8>
8000e5e4:	19 a4 20 00 	ld.w %d4,[%sp]32
8000e5e8:	40 d4       	mov.aa %a4,%a13
8000e5ea:	40 e5       	mov.aa %a5,%a14
8000e5ec:	6d 00 73 03 	call 8000ecd2 <__pow5mult>
8000e5f0:	40 2e       	mov.aa %a14,%a2
8000e5f2:	40 d4       	mov.aa %a4,%a13
8000e5f4:	82 14       	mov %d4,1
8000e5f6:	6d 00 d9 02 	call 8000eba8 <__i2b>
8000e5fa:	19 a3 34 00 	ld.w %d3,[%sp]52
8000e5fe:	40 2c       	mov.aa %a12,%a2
8000e600:	8e 3c       	jlez %d3,8000e618 <_dtoa_r+0x914>
8000e602:	40 d4       	mov.aa %a4,%a13
8000e604:	40 25       	mov.aa %a5,%a2
8000e606:	02 34       	mov %d4,%d3
8000e608:	6d 00 65 03 	call 8000ecd2 <__pow5mult>
8000e60c:	58 07       	ld.w %d15,[%sp]28
8000e60e:	40 2c       	mov.aa %a12,%a2
8000e610:	82 09       	mov %d9,0
8000e612:	ff 2f 1f 00 	jge %d15,2,8000e650 <_dtoa_r+0x94c>
8000e616:	3c 06       	j 8000e622 <_dtoa_r+0x91e>
8000e618:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000e61c:	82 09       	mov %d9,0
8000e61e:	ff 22 15 00 	jge %d2,2,8000e648 <_dtoa_r+0x944>
8000e622:	82 09       	mov %d9,0
8000e624:	df 0c 12 80 	jne %d12,0,8000e648 <_dtoa_r+0x944>
8000e628:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000e62c:	ee 0e       	jnz %d15,8000e648 <_dtoa_r+0x944>
8000e62e:	7b 00 ff f7 	movh %d15,32752
8000e632:	26 df       	and %d15,%d13
8000e634:	6e 0a       	jz %d15,8000e648 <_dtoa_r+0x944>
8000e636:	19 a3 14 00 	ld.w %d3,[%sp]20
8000e63a:	58 06       	ld.w %d15,[%sp]24
8000e63c:	c2 13       	add %d3,1
8000e63e:	c2 1f       	add %d15,1
8000e640:	59 a3 14 00 	st.w [%sp]20,%d3
8000e644:	78 06       	st.w [%sp]24,%d15
8000e646:	82 19       	mov %d9,1
8000e648:	19 a3 34 00 	ld.w %d3,[%sp]52
8000e64c:	82 12       	mov %d2,1
8000e64e:	76 39       	jz %d3,8000e660 <_dtoa_r+0x95c>
8000e650:	4c c4       	ld.w %d15,[%a12]16
8000e652:	90 c3       	addsc.a %a3,%a12,%d15,2
8000e654:	19 34 10 00 	ld.w %d4,[%a3]16
8000e658:	6d 00 54 02 	call 8000eb00 <__hi0bits>
8000e65c:	8b 02 02 21 	rsub %d2,%d2,32
8000e660:	58 06       	ld.w %d15,[%sp]24
8000e662:	42 2f       	add %d15,%d2
8000e664:	16 1f       	and %d15,31
8000e666:	6e 0a       	jz %d15,8000e67a <_dtoa_r+0x976>
8000e668:	8b 0f 02 31 	rsub %d3,%d15,32
8000e66c:	8b cf 01 f1 	rsub %d15,%d15,28
8000e670:	ff 53 07 00 	jge %d3,5,8000e67e <_dtoa_r+0x97a>
8000e674:	df 43 10 00 	jeq %d3,4,8000e694 <_dtoa_r+0x990>
8000e678:	02 3f       	mov %d15,%d3
8000e67a:	1b cf 01 f0 	addi %d15,%d15,28
8000e67e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000e682:	19 a3 18 00 	ld.w %d3,[%sp]24
8000e686:	42 f2       	add %d2,%d15
8000e688:	42 f3       	add %d3,%d15
8000e68a:	59 a2 14 00 	st.w [%sp]20,%d2
8000e68e:	42 f8       	add %d8,%d15
8000e690:	59 a3 18 00 	st.w [%sp]24,%d3
8000e694:	58 05       	ld.w %d15,[%sp]20
8000e696:	8e f7       	jlez %d15,8000e6a4 <_dtoa_r+0x9a0>
8000e698:	40 e5       	mov.aa %a5,%a14
8000e69a:	40 d4       	mov.aa %a4,%a13
8000e69c:	02 f4       	mov %d4,%d15
8000e69e:	6d 00 58 03 	call 8000ed4e <__lshift>
8000e6a2:	40 2e       	mov.aa %a14,%a2
8000e6a4:	19 a2 18 00 	ld.w %d2,[%sp]24
8000e6a8:	8e 27       	jlez %d2,8000e6b6 <_dtoa_r+0x9b2>
8000e6aa:	40 c5       	mov.aa %a5,%a12
8000e6ac:	40 d4       	mov.aa %a4,%a13
8000e6ae:	02 24       	mov %d4,%d2
8000e6b0:	6d 00 4f 03 	call 8000ed4e <__lshift>
8000e6b4:	40 2c       	mov.aa %a12,%a2
8000e6b6:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000e6ba:	df 03 20 00 	jeq %d3,0,8000e6fa <_dtoa_r+0x9f6>
8000e6be:	40 e4       	mov.aa %a4,%a14
8000e6c0:	40 c5       	mov.aa %a5,%a12
8000e6c2:	6d 00 a3 03 	call 8000ee08 <__mcmp>
8000e6c6:	ff 02 1a 00 	jge %d2,0,8000e6fa <_dtoa_r+0x9f6>
8000e6ca:	58 02       	ld.w %d15,[%sp]8
8000e6cc:	40 e5       	mov.aa %a5,%a14
8000e6ce:	c2 ff       	add %d15,-1
8000e6d0:	40 d4       	mov.aa %a4,%a13
8000e6d2:	fb a0 00 40 	mov %e4,10
8000e6d6:	78 02       	st.w [%sp]8,%d15
8000e6d8:	6d 00 d3 01 	call 8000ea7e <__multadd>
8000e6dc:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000e6e0:	19 a3 24 00 	ld.w %d3,[%sp]36
8000e6e4:	59 a2 10 00 	st.w [%sp]16,%d2
8000e6e8:	40 2e       	mov.aa %a14,%a2
8000e6ea:	76 38       	jz %d3,8000e6fa <_dtoa_r+0x9f6>
8000e6ec:	40 f5       	mov.aa %a5,%a15
8000e6ee:	40 d4       	mov.aa %a4,%a13
8000e6f0:	fb a0 00 40 	mov %e4,10
8000e6f4:	6d 00 c5 01 	call 8000ea7e <__multadd>
8000e6f8:	40 2f       	mov.aa %a15,%a2
8000e6fa:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000e6fe:	19 a3 10 00 	ld.w %d3,[%sp]16
8000e702:	8b 32 80 f2 	ge %d15,%d2,3
8000e706:	8b 13 40 f4 	and.lt %d15,%d3,1
8000e70a:	6e 2a       	jz %d15,8000e75e <_dtoa_r+0xa5a>
8000e70c:	f6 3f       	jnz %d3,8000e72a <_dtoa_r+0xa26>
8000e70e:	40 c5       	mov.aa %a5,%a12
8000e710:	40 d4       	mov.aa %a4,%a13
8000e712:	d2 54       	mov %e4,5
8000e714:	6d 00 b5 01 	call 8000ea7e <__multadd>
8000e718:	40 e4       	mov.aa %a4,%a14
8000e71a:	40 25       	mov.aa %a5,%a2
8000e71c:	40 2c       	mov.aa %a12,%a2
8000e71e:	6d 00 75 03 	call 8000ee08 <__mcmp>
8000e722:	4e 2e       	jgtz %d2,8000e73e <_dtoa_r+0xa3a>
8000e724:	3c 03       	j 8000e72a <_dtoa_r+0xa26>
8000e726:	a0 0c       	mov.a %a12,0
8000e728:	a0 0f       	mov.a %a15,0
8000e72a:	58 0a       	ld.w %d15,[%sp]40
8000e72c:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000e730:	46 0f       	not %d15
8000e732:	78 02       	st.w [%sp]8,%d15
8000e734:	3c 11       	j 8000e756 <_dtoa_r+0xa52>
8000e736:	58 0c       	ld.w %d15,[%sp]48
8000e738:	a0 0c       	mov.a %a12,0
8000e73a:	78 02       	st.w [%sp]8,%d15
8000e73c:	a0 0f       	mov.a %a15,0
8000e73e:	19 a2 08 00 	ld.w %d2,[%sp]8
8000e742:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000e746:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000e74a:	da 31       	mov %d15,49
8000e74c:	c2 12       	add %d2,1
8000e74e:	c2 1e       	add %d14,1
8000e750:	2c 30       	st.b [%a3]0,%d15
8000e752:	59 a2 08 00 	st.w [%sp]8,%d2
8000e756:	80 f8       	mov.d %d8,%a15
8000e758:	a0 0f       	mov.a %a15,0
8000e75a:	1d 00 14 01 	j 8000e982 <_dtoa_r+0xc7e>
8000e75e:	19 a3 24 00 	ld.w %d3,[%sp]36
8000e762:	f6 35       	jnz %d3,8000e76c <_dtoa_r+0xa68>
8000e764:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000e768:	1d 00 c2 00 	j 8000e8ec <_dtoa_r+0xbe8>
8000e76c:	8e 87       	jlez %d8,8000e77a <_dtoa_r+0xa76>
8000e76e:	40 f5       	mov.aa %a5,%a15
8000e770:	40 d4       	mov.aa %a4,%a13
8000e772:	02 84       	mov %d4,%d8
8000e774:	6d 00 ed 02 	call 8000ed4e <__lshift>
8000e778:	40 2f       	mov.aa %a15,%a2
8000e77a:	80 f8       	mov.d %d8,%a15
8000e77c:	df 09 16 00 	jeq %d9,0,8000e7a8 <_dtoa_r+0xaa4>
8000e780:	40 d4       	mov.aa %a4,%a13
8000e782:	48 14       	ld.w %d4,[%a15]4
8000e784:	6d 00 49 01 	call 8000ea16 <_Balloc>
8000e788:	48 44       	ld.w %d4,[%a15]16
8000e78a:	d9 24 0c 00 	lea %a4,[%a2]12
8000e78e:	c2 24       	add %d4,2
8000e790:	d9 f5 0c 00 	lea %a5,[%a15]12
8000e794:	06 24       	sh %d4,2
8000e796:	80 2f       	mov.d %d15,%a2
8000e798:	6d 00 31 01 	call 8000e9fa <memcpy>
8000e79c:	60 f5       	mov.a %a5,%d15
8000e79e:	40 d4       	mov.aa %a4,%a13
8000e7a0:	82 14       	mov %d4,1
8000e7a2:	6d 00 d6 02 	call 8000ed4e <__lshift>
8000e7a6:	80 28       	mov.d %d8,%a2
8000e7a8:	19 a9 0c 00 	ld.w %d9,[%sp]12
8000e7ac:	8f 1c 00 a1 	and %d10,%d12,1
8000e7b0:	40 e4       	mov.aa %a4,%a14
8000e7b2:	40 c5       	mov.aa %a5,%a12
8000e7b4:	6d ff 1a fa 	call 8000dbe8 <quorem>
8000e7b8:	40 e4       	mov.aa %a4,%a14
8000e7ba:	40 f5       	mov.aa %a5,%a15
8000e7bc:	02 2e       	mov %d14,%d2
8000e7be:	1b 02 03 f0 	addi %d15,%d2,48
8000e7c2:	6d 00 23 03 	call 8000ee08 <__mcmp>
8000e7c6:	60 86       	mov.a %a6,%d8
8000e7c8:	40 d4       	mov.aa %a4,%a13
8000e7ca:	40 c5       	mov.aa %a5,%a12
8000e7cc:	02 2b       	mov %d11,%d2
8000e7ce:	6d 00 3e 03 	call 8000ee4a <__mdiff>
8000e7d2:	19 22 0c 00 	ld.w %d2,[%a2]12
8000e7d6:	80 2d       	mov.d %d13,%a2
8000e7d8:	82 1c       	mov %d12,1
8000e7da:	f6 26       	jnz %d2,8000e7e6 <_dtoa_r+0xae2>
8000e7dc:	40 e4       	mov.aa %a4,%a14
8000e7de:	40 25       	mov.aa %a5,%a2
8000e7e0:	6d 00 14 03 	call 8000ee08 <__mcmp>
8000e7e4:	02 2c       	mov %d12,%d2
8000e7e6:	60 d5       	mov.a %a5,%d13
8000e7e8:	40 d4       	mov.aa %a4,%a13
8000e7ea:	6d 00 41 01 	call 8000ea6c <_Bfree>
8000e7ee:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000e7f2:	1b 19 00 d0 	addi %d13,%d9,1
8000e7f6:	a6 c3       	or %d3,%d12
8000e7f8:	f6 3f       	jnz %d3,8000e816 <_dtoa_r+0xb12>
8000e7fa:	f6 ae       	jnz %d10,8000e816 <_dtoa_r+0xb12>
8000e7fc:	8b 9f 03 32 	eq %d3,%d15,57
8000e800:	40 e2       	mov.aa %a2,%a14
8000e802:	df 03 3a 80 	jne %d3,0,8000e876 <_dtoa_r+0xb72>
8000e806:	1b 1e 03 20 	addi %d2,%d14,49
8000e80a:	8b 1b 80 b2 	ge %d11,%d11,1
8000e80e:	2b f2 40 fb 	sel %d15,%d11,%d2,%d15
8000e812:	02 de       	mov %d14,%d13
8000e814:	3c 37       	j 8000e882 <_dtoa_r+0xb7e>
8000e816:	ce b5       	jgez %d11,8000e820 <_dtoa_r+0xb1c>
8000e818:	02 fa       	mov %d10,%d15
8000e81a:	40 e2       	mov.aa %a2,%a14
8000e81c:	4e ca       	jgtz %d12,8000e830 <_dtoa_r+0xb2c>
8000e81e:	3c 1e       	j 8000e85a <_dtoa_r+0xb56>
8000e820:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000e824:	a6 2b       	or %d11,%d2
8000e826:	df 0b 20 80 	jne %d11,0,8000e866 <_dtoa_r+0xb62>
8000e82a:	df 0a 1e 80 	jne %d10,0,8000e866 <_dtoa_r+0xb62>
8000e82e:	3c f5       	j 8000e818 <_dtoa_r+0xb14>
8000e830:	40 d4       	mov.aa %a4,%a13
8000e832:	40 e5       	mov.aa %a5,%a14
8000e834:	82 14       	mov %d4,1
8000e836:	6d 00 8c 02 	call 8000ed4e <__lshift>
8000e83a:	40 c5       	mov.aa %a5,%a12
8000e83c:	40 24       	mov.aa %a4,%a2
8000e83e:	b5 a2 04 00 	st.a [%sp]4,%a2
8000e842:	6d 00 e3 02 	call 8000ee08 <__mcmp>
8000e846:	99 a2 04 00 	ld.a %a2,[%sp]4
8000e84a:	4e 23       	jgtz %d2,8000e850 <_dtoa_r+0xb4c>
8000e84c:	f6 27       	jnz %d2,8000e85a <_dtoa_r+0xb56>
8000e84e:	2e 06       	jz.t %d15,0,8000e85a <_dtoa_r+0xb56>
8000e850:	8b 9f 03 32 	eq %d3,%d15,57
8000e854:	df 03 11 80 	jne %d3,0,8000e876 <_dtoa_r+0xb72>
8000e858:	92 1a       	add %d10,%d15,1
8000e85a:	60 93       	mov.a %a3,%d9
8000e85c:	02 de       	mov %d14,%d13
8000e85e:	34 3a       	st.b [%a3],%d10
8000e860:	40 2e       	mov.aa %a14,%a2
8000e862:	1d 00 90 00 	j 8000e982 <_dtoa_r+0xc7e>
8000e866:	bf 1c 11 00 	jlt %d12,1,8000e888 <_dtoa_r+0xb84>
8000e86a:	8b 9f 23 32 	ne %d3,%d15,57
8000e86e:	40 e2       	mov.aa %a2,%a14
8000e870:	02 de       	mov %d14,%d13
8000e872:	c2 1f       	add %d15,1
8000e874:	f6 37       	jnz %d3,8000e882 <_dtoa_r+0xb7e>
8000e876:	60 93       	mov.a %a3,%d9
8000e878:	da 39       	mov %d15,57
8000e87a:	02 de       	mov %d14,%d13
8000e87c:	2c 30       	st.b [%a3]0,%d15
8000e87e:	40 2e       	mov.aa %a14,%a2
8000e880:	3c 5d       	j 8000e93a <_dtoa_r+0xc36>
8000e882:	60 92       	mov.a %a2,%d9
8000e884:	2c 20       	st.b [%a2]0,%d15
8000e886:	3c 7e       	j 8000e982 <_dtoa_r+0xc7e>
8000e888:	60 93       	mov.a %a3,%d9
8000e88a:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000e88e:	02 d5       	mov %d5,%d13
8000e890:	19 a3 10 00 	ld.w %d3,[%sp]16
8000e894:	2c 30       	st.b [%a3]0,%d15
8000e896:	a2 25       	sub %d5,%d2
8000e898:	02 de       	mov %d14,%d13
8000e89a:	5f 35 41 00 	jeq %d5,%d3,8000e91c <_dtoa_r+0xc18>
8000e89e:	40 e5       	mov.aa %a5,%a14
8000e8a0:	40 d4       	mov.aa %a4,%a13
8000e8a2:	fb a0 00 40 	mov %e4,10
8000e8a6:	6d 00 ec 00 	call 8000ea7e <__multadd>
8000e8aa:	80 ff       	mov.d %d15,%a15
8000e8ac:	40 2e       	mov.aa %a14,%a2
8000e8ae:	40 d4       	mov.aa %a4,%a13
8000e8b0:	40 f5       	mov.aa %a5,%a15
8000e8b2:	fb a0 00 40 	mov %e4,10
8000e8b6:	7e 86       	jne %d15,%d8,8000e8c2 <_dtoa_r+0xbbe>
8000e8b8:	6d 00 e3 00 	call 8000ea7e <__multadd>
8000e8bc:	40 2f       	mov.aa %a15,%a2
8000e8be:	80 28       	mov.d %d8,%a2
8000e8c0:	3c 0b       	j 8000e8d6 <_dtoa_r+0xbd2>
8000e8c2:	6d 00 de 00 	call 8000ea7e <__multadd>
8000e8c6:	60 85       	mov.a %a5,%d8
8000e8c8:	40 d4       	mov.aa %a4,%a13
8000e8ca:	fb a0 00 40 	mov %e4,10
8000e8ce:	40 2f       	mov.aa %a15,%a2
8000e8d0:	6d 00 d7 00 	call 8000ea7e <__multadd>
8000e8d4:	80 28       	mov.d %d8,%a2
8000e8d6:	02 d9       	mov %d9,%d13
8000e8d8:	1d ff 6c ff 	j 8000e7b0 <_dtoa_r+0xaac>
8000e8dc:	40 e5       	mov.aa %a5,%a14
8000e8de:	40 d4       	mov.aa %a4,%a13
8000e8e0:	fb a0 00 40 	mov %e4,10
8000e8e4:	6d 00 cd 00 	call 8000ea7e <__multadd>
8000e8e8:	02 98       	mov %d8,%d9
8000e8ea:	40 2e       	mov.aa %a14,%a2
8000e8ec:	40 e4       	mov.aa %a4,%a14
8000e8ee:	40 c5       	mov.aa %a5,%a12
8000e8f0:	6d ff 7c f9 	call 8000dbe8 <quorem>
8000e8f4:	1b 18 00 90 	addi %d9,%d8,1
8000e8f8:	1b 02 03 f0 	addi %d15,%d2,48
8000e8fc:	60 82       	mov.a %a2,%d8
8000e8fe:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000e902:	02 95       	mov %d5,%d9
8000e904:	19 a3 10 00 	ld.w %d3,[%sp]16
8000e908:	2c 20       	st.b [%a2]0,%d15
8000e90a:	a2 25       	sub %d5,%d2
8000e90c:	3f 35 e8 7f 	jlt %d5,%d3,8000e8dc <_dtoa_r+0xbd8>
8000e910:	8b 13 40 33 	max %d3,%d3,1
8000e914:	02 2e       	mov %d14,%d2
8000e916:	80 f8       	mov.d %d8,%a15
8000e918:	42 3e       	add %d14,%d3
8000e91a:	a0 0f       	mov.a %a15,0
8000e91c:	40 e5       	mov.aa %a5,%a14
8000e91e:	40 d4       	mov.aa %a4,%a13
8000e920:	82 14       	mov %d4,1
8000e922:	6d 00 16 02 	call 8000ed4e <__lshift>
8000e926:	40 c5       	mov.aa %a5,%a12
8000e928:	40 2e       	mov.aa %a14,%a2
8000e92a:	40 24       	mov.aa %a4,%a2
8000e92c:	6d 00 6e 02 	call 8000ee08 <__mcmp>
8000e930:	4e 25       	jgtz %d2,8000e93a <_dtoa_r+0xc36>
8000e932:	df 02 1e 80 	jne %d2,0,8000e96e <_dtoa_r+0xc6a>
8000e936:	6f 0f 1c 00 	jz.t %d15,0,8000e96e <_dtoa_r+0xc6a>
8000e93a:	58 03       	ld.w %d15,[%sp]12
8000e93c:	a2 ef       	sub %d15,%d14
8000e93e:	46 0f       	not %d15
8000e940:	60 e2       	mov.a %a2,%d14
8000e942:	60 e3       	mov.a %a3,%d14
8000e944:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000e948:	b0 f3       	add.a %a3,-1
8000e94a:	8b 93 03 52 	eq %d5,%d3,57
8000e94e:	76 5d       	jz %d5,8000e968 <_dtoa_r+0xc64>
8000e950:	9f 0f 0a 80 	jned %d15,0,8000e964 <_dtoa_r+0xc60>
8000e954:	58 02       	ld.w %d15,[%sp]8
8000e956:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000e95a:	c2 1f       	add %d15,1
8000e95c:	78 02       	st.w [%sp]8,%d15
8000e95e:	da 31       	mov %d15,49
8000e960:	2c 30       	st.b [%a3]0,%d15
8000e962:	3c 10       	j 8000e982 <_dtoa_r+0xc7e>
8000e964:	80 3e       	mov.d %d14,%a3
8000e966:	3c ed       	j 8000e940 <_dtoa_r+0xc3c>
8000e968:	c2 13       	add %d3,1
8000e96a:	34 33       	st.b [%a3],%d3
8000e96c:	3c 0b       	j 8000e982 <_dtoa_r+0xc7e>
8000e96e:	60 e2       	mov.a %a2,%d14
8000e970:	60 e3       	mov.a %a3,%d14
8000e972:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000e976:	b0 f3       	add.a %a3,-1
8000e978:	8b 0f 03 f2 	eq %d15,%d15,48
8000e97c:	6e 03       	jz %d15,8000e982 <_dtoa_r+0xc7e>
8000e97e:	80 3e       	mov.d %d14,%a3
8000e980:	3c f7       	j 8000e96e <_dtoa_r+0xc6a>
8000e982:	40 d4       	mov.aa %a4,%a13
8000e984:	40 c5       	mov.aa %a5,%a12
8000e986:	6d 00 73 00 	call 8000ea6c <_Bfree>
8000e98a:	df 08 13 00 	jeq %d8,0,8000e9b0 <_dtoa_r+0xcac>
8000e98e:	80 f2       	mov.d %d2,%a15
8000e990:	8b 02 20 f2 	ne %d15,%d2,0
8000e994:	0b 82 10 f2 	and.ne %d15,%d2,%d8
8000e998:	6e 05       	jz %d15,8000e9a2 <_dtoa_r+0xc9e>
8000e99a:	40 d4       	mov.aa %a4,%a13
8000e99c:	40 f5       	mov.aa %a5,%a15
8000e99e:	6d 00 67 00 	call 8000ea6c <_Bfree>
8000e9a2:	60 85       	mov.a %a5,%d8
8000e9a4:	40 d4       	mov.aa %a4,%a13
8000e9a6:	6d 00 63 00 	call 8000ea6c <_Bfree>
8000e9aa:	3c 03       	j 8000e9b0 <_dtoa_r+0xcac>
8000e9ac:	58 0c       	ld.w %d15,[%sp]48
8000e9ae:	78 02       	st.w [%sp]8,%d15
8000e9b0:	40 d4       	mov.aa %a4,%a13
8000e9b2:	40 e5       	mov.aa %a5,%a14
8000e9b4:	6d 00 5c 00 	call 8000ea6c <_Bfree>
8000e9b8:	60 e2       	mov.a %a2,%d14
8000e9ba:	19 a2 08 00 	ld.w %d2,[%sp]8
8000e9be:	99 a3 08 10 	ld.a %a3,[%sp]72
8000e9c2:	82 0f       	mov %d15,0
8000e9c4:	d8 0e       	ld.a %a15,[%sp]56
8000e9c6:	2c 20       	st.b [%a2]0,%d15
8000e9c8:	c2 12       	add %d2,1
8000e9ca:	74 32       	st.w [%a3],%d2
8000e9cc:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000e9d0:	bc f2       	jz.a %a15,8000e9d4 <_dtoa_r+0xcd0>
8000e9d2:	68 0e       	st.w [%a15]0,%d14
8000e9d4:	00 90       	ret 
	...

8000e9d8 <_localeconv_r>:
8000e9d8:	91 00 00 28 	movh.a %a2,32768
8000e9dc:	d9 22 d0 e0 	lea %a2,[%a2]3984 <80000f90 <lconv>>
8000e9e0:	00 90       	ret 

8000e9e2 <memchr>:
8000e9e2:	8f f4 0f 41 	and %d4,%d4,255
8000e9e6:	9f 05 04 80 	jned %d5,0,8000e9ee <memchr+0xc>
8000e9ea:	a0 02       	mov.a %a2,0
8000e9ec:	00 90       	ret 
8000e9ee:	0c 40       	ld.bu %d15,[%a4]0
8000e9f0:	3e 43       	jeq %d15,%d4,8000e9f6 <memchr+0x14>
8000e9f2:	b0 14       	add.a %a4,1
8000e9f4:	3c f9       	j 8000e9e6 <memchr+0x4>
8000e9f6:	40 42       	mov.aa %a2,%a4
8000e9f8:	00 90       	ret 

8000e9fa <memcpy>:
8000e9fa:	40 42       	mov.aa %a2,%a4
8000e9fc:	a0 0f       	mov.a %a15,0
8000e9fe:	01 f2 10 40 	add.a %a4,%a2,%a15
8000ea02:	01 f5 10 30 	add.a %a3,%a5,%a15
8000ea06:	9f 04 03 80 	jned %d4,0,8000ea0c <memcpy+0x12>
8000ea0a:	00 90       	ret 
8000ea0c:	79 3f 00 00 	ld.b %d15,[%a3]0
8000ea10:	b0 1f       	add.a %a15,1
8000ea12:	2c 40       	st.b [%a4]0,%d15
8000ea14:	3c f5       	j 8000e9fe <memcpy+0x4>

8000ea16 <_Balloc>:
8000ea16:	19 42 0c 10 	ld.w %d2,[%a4]76
8000ea1a:	40 4f       	mov.aa %a15,%a4
8000ea1c:	02 4f       	mov %d15,%d4
8000ea1e:	76 29       	jz %d2,8000ea30 <_Balloc+0x1a>
8000ea20:	99 f3 0c 10 	ld.a %a3,[%a15]76
8000ea24:	90 33       	addsc.a %a3,%a3,%d15,2
8000ea26:	d4 32       	ld.a %a2,[%a3]
8000ea28:	bc 2f       	jz.a %a2,8000ea46 <_Balloc+0x30>
8000ea2a:	4c 20       	ld.w %d15,[%a2]0
8000ea2c:	6c 30       	st.w [%a3]0,%d15
8000ea2e:	3c 1b       	j 8000ea64 <_Balloc+0x4e>
8000ea30:	82 44       	mov %d4,4
8000ea32:	3b 10 02 50 	mov %d5,33
8000ea36:	6d 00 5c 03 	call 8000f0ee <_calloc_r>
8000ea3a:	b5 f2 0c 10 	st.a [%a15]76,%a2
8000ea3e:	bd 02 f1 ff 	jnz.a %a2,8000ea20 <_Balloc+0xa>
8000ea42:	a0 02       	mov.a %a2,0
8000ea44:	00 90       	ret 
8000ea46:	82 18       	mov %d8,1
8000ea48:	0f f8 00 80 	sh %d8,%d8,%d15
8000ea4c:	1b 58 00 50 	addi %d5,%d8,5
8000ea50:	40 f4       	mov.aa %a4,%a15
8000ea52:	82 14       	mov %d4,1
8000ea54:	06 25       	sh %d5,2
8000ea56:	6d 00 4c 03 	call 8000f0ee <_calloc_r>
8000ea5a:	bd 02 f4 7f 	jz.a %a2,8000ea42 <_Balloc+0x2c>
8000ea5e:	6c 21       	st.w [%a2]4,%d15
8000ea60:	59 28 08 00 	st.w [%a2]8,%d8
8000ea64:	82 0f       	mov %d15,0
8000ea66:	6c 24       	st.w [%a2]16,%d15
8000ea68:	6c 23       	st.w [%a2]12,%d15
8000ea6a:	00 90       	ret 

8000ea6c <_Bfree>:
8000ea6c:	bc 58       	jz.a %a5,8000ea7c <_Bfree+0x10>
8000ea6e:	99 4f 0c 10 	ld.a %a15,[%a4]76
8000ea72:	4c 51       	ld.w %d15,[%a5]4
8000ea74:	90 ff       	addsc.a %a15,%a15,%d15,2
8000ea76:	4c f0       	ld.w %d15,[%a15]0
8000ea78:	6c 50       	st.w [%a5]0,%d15
8000ea7a:	e8 05       	st.a [%a15]0,%a5
8000ea7c:	00 90       	ret 

8000ea7e <__multadd>:
8000ea7e:	19 59 10 00 	ld.w %d9,[%a5]16
8000ea82:	40 4c       	mov.aa %a12,%a4
8000ea84:	9a f9       	add %d15,%d9,-1
8000ea86:	8b 19 80 22 	ge %d2,%d9,1
8000ea8a:	40 5f       	mov.aa %a15,%a5
8000ea8c:	02 58       	mov %d8,%d5
8000ea8e:	d9 53 14 00 	lea %a3,[%a5]20
8000ea92:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000ea96:	40 32       	mov.aa %a2,%a3
8000ea98:	44 25       	ld.w %d5,[%a2+]
8000ea9a:	b7 05 10 38 	insert %d3,%d5,0,16,16
8000ea9e:	8f 05 1f f0 	sh %d15,%d5,-16
8000eaa2:	03 43 0a 38 	madd %d3,%d8,%d3,%d4
8000eaa6:	8f 03 1f 60 	sh %d6,%d3,-16
8000eaaa:	03 4f 0a f6 	madd %d15,%d6,%d15,%d4
8000eaae:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000eab2:	8f 0f 1f 80 	sh %d8,%d15,-16
8000eab6:	74 33       	st.w [%a3],%d3
8000eab8:	40 23       	mov.aa %a3,%a2
8000eaba:	9f 02 ee ff 	jned %d2,0,8000ea96 <__multadd+0x18>
8000eabe:	df 08 1f 00 	jeq %d8,0,8000eafc <__multadd+0x7e>
8000eac2:	4c f2       	ld.w %d15,[%a15]8
8000eac4:	3f f9 16 00 	jlt %d9,%d15,8000eaf0 <__multadd+0x72>
8000eac8:	48 14       	ld.w %d4,[%a15]4
8000eaca:	40 c4       	mov.aa %a4,%a12
8000eacc:	c2 14       	add %d4,1
8000eace:	6d ff a4 ff 	call 8000ea16 <_Balloc>
8000ead2:	48 44       	ld.w %d4,[%a15]16
8000ead4:	d9 f5 0c 00 	lea %a5,[%a15]12
8000ead8:	c2 24       	add %d4,2
8000eada:	d9 24 0c 00 	lea %a4,[%a2]12
8000eade:	06 24       	sh %d4,2
8000eae0:	40 2d       	mov.aa %a13,%a2
8000eae2:	6d ff 8c ff 	call 8000e9fa <memcpy>
8000eae6:	40 f5       	mov.aa %a5,%a15
8000eae8:	40 c4       	mov.aa %a4,%a12
8000eaea:	6d ff c1 ff 	call 8000ea6c <_Bfree>
8000eaee:	40 df       	mov.aa %a15,%a13
8000eaf0:	01 f9 02 26 	addsc.a %a2,%a15,%d9,2
8000eaf4:	c2 19       	add %d9,1
8000eaf6:	59 28 14 00 	st.w [%a2]20,%d8
8000eafa:	68 49       	st.w [%a15]16,%d9
8000eafc:	40 f2       	mov.aa %a2,%a15
8000eafe:	00 90       	ret 

8000eb00 <__hi0bits>:
8000eb00:	b7 04 10 f0 	insert %d15,%d4,0,0,16
8000eb04:	82 02       	mov %d2,0
8000eb06:	ee 05       	jnz %d15,8000eb10 <__hi0bits+0x10>
8000eb08:	8f 04 01 40 	sh %d4,%d4,16
8000eb0c:	3b 00 01 20 	mov %d2,16
8000eb10:	b7 04 18 f0 	insert %d15,%d4,0,0,24
8000eb14:	ee 05       	jnz %d15,8000eb1e <__hi0bits+0x1e>
8000eb16:	1b 82 00 20 	addi %d2,%d2,8
8000eb1a:	8f 84 00 40 	sh %d4,%d4,8
8000eb1e:	b7 04 1c f0 	insert %d15,%d4,0,0,28
8000eb22:	ee 03       	jnz %d15,8000eb28 <__hi0bits+0x28>
8000eb24:	c2 42       	add %d2,4
8000eb26:	06 44       	sh %d4,4
8000eb28:	b7 04 1e f0 	insert %d15,%d4,0,0,30
8000eb2c:	ee 03       	jnz %d15,8000eb32 <__hi0bits+0x32>
8000eb2e:	c2 22       	add %d2,2
8000eb30:	06 24       	sh %d4,2
8000eb32:	0e 47       	jltz %d4,8000eb40 <__hi0bits+0x40>
8000eb34:	7b 00 00 f4 	movh %d15,16384
8000eb38:	26 f4       	and %d4,%d15
8000eb3a:	c2 12       	add %d2,1
8000eb3c:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000eb40:	00 90       	ret 

8000eb42 <__lo0bits>:
8000eb42:	54 43       	ld.w %d3,[%a4]
8000eb44:	8f 73 00 f1 	and %d15,%d3,7
8000eb48:	6e 0e       	jz %d15,8000eb64 <__lo0bits+0x22>
8000eb4a:	82 02       	mov %d2,0
8000eb4c:	6f 03 2d 80 	jnz.t %d3,0,8000eba6 <__lo0bits+0x64>
8000eb50:	6f 13 06 00 	jz.t %d3,1,8000eb5c <__lo0bits+0x1a>
8000eb54:	06 f3       	sh %d3,-1
8000eb56:	74 43       	st.w [%a4],%d3
8000eb58:	82 12       	mov %d2,1
8000eb5a:	00 90       	ret 
8000eb5c:	06 e3       	sh %d3,-2
8000eb5e:	74 43       	st.w [%a4],%d3
8000eb60:	82 22       	mov %d2,2
8000eb62:	00 90       	ret 
8000eb64:	b7 03 10 f8 	insert %d15,%d3,0,16,16
8000eb68:	82 04       	mov %d4,0
8000eb6a:	ee 05       	jnz %d15,8000eb74 <__lo0bits+0x32>
8000eb6c:	8f 03 1f 30 	sh %d3,%d3,-16
8000eb70:	3b 00 01 40 	mov %d4,16
8000eb74:	02 3f       	mov %d15,%d3
8000eb76:	16 ff       	and %d15,255
8000eb78:	ee 04       	jnz %d15,8000eb80 <__lo0bits+0x3e>
8000eb7a:	1b 84 00 40 	addi %d4,%d4,8
8000eb7e:	06 83       	sh %d3,-8
8000eb80:	8f f3 00 f1 	and %d15,%d3,15
8000eb84:	ee 03       	jnz %d15,8000eb8a <__lo0bits+0x48>
8000eb86:	c2 44       	add %d4,4
8000eb88:	06 c3       	sh %d3,-4
8000eb8a:	8f 33 00 f1 	and %d15,%d3,3
8000eb8e:	ee 03       	jnz %d15,8000eb94 <__lo0bits+0x52>
8000eb90:	c2 24       	add %d4,2
8000eb92:	06 e3       	sh %d3,-2
8000eb94:	6f 03 07 80 	jnz.t %d3,0,8000eba2 <__lo0bits+0x60>
8000eb98:	06 f3       	sh %d3,-1
8000eb9a:	3b 00 02 20 	mov %d2,32
8000eb9e:	76 34       	jz %d3,8000eba6 <__lo0bits+0x64>
8000eba0:	c2 14       	add %d4,1
8000eba2:	74 43       	st.w [%a4],%d3
8000eba4:	02 42       	mov %d2,%d4
8000eba6:	00 90       	ret 

8000eba8 <__i2b>:
8000eba8:	02 4f       	mov %d15,%d4
8000ebaa:	82 14       	mov %d4,1
8000ebac:	6d ff 35 ff 	call 8000ea16 <_Balloc>
8000ebb0:	6c 25       	st.w [%a2]20,%d15
8000ebb2:	82 1f       	mov %d15,1
8000ebb4:	6c 24       	st.w [%a2]16,%d15
8000ebb6:	00 90       	ret 

8000ebb8 <__multiply>:
8000ebb8:	19 52 10 00 	ld.w %d2,[%a5]16
8000ebbc:	4c 64       	ld.w %d15,[%a6]16
8000ebbe:	40 5f       	mov.aa %a15,%a5
8000ebc0:	40 6c       	mov.aa %a12,%a6
8000ebc2:	7f f2 04 00 	jge %d2,%d15,8000ebca <__multiply+0x12>
8000ebc6:	40 6f       	mov.aa %a15,%a6
8000ebc8:	40 5c       	mov.aa %a12,%a5
8000ebca:	48 4a       	ld.w %d10,[%a15]16
8000ebcc:	19 c9 10 00 	ld.w %d9,[%a12]16
8000ebd0:	4c f2       	ld.w %d15,[%a15]8
8000ebd2:	0b 9a 00 80 	add %d8,%d10,%d9
8000ebd6:	48 12       	ld.w %d2,[%a15]4
8000ebd8:	0b 8f 20 41 	lt %d4,%d15,%d8
8000ebdc:	42 24       	add %d4,%d2
8000ebde:	6d ff 1c ff 	call 8000ea16 <_Balloc>
8000ebe2:	d9 23 14 00 	lea %a3,[%a2]20
8000ebe6:	01 38 02 d6 	addsc.a %a13,%a3,%d8,2
8000ebea:	40 34       	mov.aa %a4,%a3
8000ebec:	82 0f       	mov %d15,0
8000ebee:	80 43       	mov.d %d3,%a4
8000ebf0:	80 d2       	mov.d %d2,%a13
8000ebf2:	7f 23 04 80 	jge.u %d3,%d2,8000ebfa <__multiply+0x42>
8000ebf6:	64 4f       	st.w [%a4+],%d15
8000ebf8:	3c fb       	j 8000ebee <__multiply+0x36>
8000ebfa:	d9 ff 14 00 	lea %a15,[%a15]20
8000ebfe:	d9 cc 14 00 	lea %a12,[%a12]20
8000ec02:	80 f3       	mov.d %d3,%a15
8000ec04:	80 cf       	mov.d %d15,%a12
8000ec06:	13 4a 20 43 	madd %d4,%d3,%d10,4
8000ec0a:	13 49 20 0f 	madd %d0,%d15,%d9,4
8000ec0e:	80 c2       	mov.d %d2,%a12
8000ec10:	7f 02 54 80 	jge.u %d2,%d0,8000ecb8 <__multiply+0x100>
8000ec14:	b9 c2 00 00 	ld.hu %d2,[%a12]0
8000ec18:	40 34       	mov.aa %a4,%a3
8000ec1a:	40 f6       	mov.aa %a6,%a15
8000ec1c:	82 03       	mov %d3,0
8000ec1e:	df 02 21 00 	jeq %d2,0,8000ec60 <__multiply+0xa8>
8000ec22:	40 45       	mov.aa %a5,%a4
8000ec24:	44 67       	ld.w %d7,[%a6+]
8000ec26:	44 56       	ld.w %d6,[%a5+]
8000ec28:	b7 07 10 18 	insert %d1,%d7,0,16,16
8000ec2c:	b7 06 10 58 	insert %d5,%d6,0,16,16
8000ec30:	8f 07 1f 70 	sh %d7,%d7,-16
8000ec34:	03 21 0a 55 	madd %d5,%d5,%d1,%d2
8000ec38:	8f 06 1f 60 	sh %d6,%d6,-16
8000ec3c:	03 27 0a 66 	madd %d6,%d6,%d7,%d2
8000ec40:	42 35       	add %d5,%d3
8000ec42:	8f 05 1f 30 	sh %d3,%d5,-16
8000ec46:	1a 36       	add %d15,%d6,%d3
8000ec48:	37 f5 10 58 	insert %d5,%d5,%d15,16,16
8000ec4c:	8f 0f 1f 30 	sh %d3,%d15,-16
8000ec50:	80 6f       	mov.d %d15,%a6
8000ec52:	74 45       	st.w [%a4],%d5
8000ec54:	7f 4f 04 80 	jge.u %d15,%d4,8000ec5c <__multiply+0xa4>
8000ec58:	40 54       	mov.aa %a4,%a5
8000ec5a:	3c e4       	j 8000ec22 <__multiply+0x6a>
8000ec5c:	59 43 04 00 	st.w [%a4]4,%d3
8000ec60:	b9 c2 02 00 	ld.hu %d2,[%a12]2
8000ec64:	df 02 27 00 	jeq %d2,0,8000ecb2 <__multiply+0xfa>
8000ec68:	54 33       	ld.w %d3,[%a3]
8000ec6a:	40 34       	mov.aa %a4,%a3
8000ec6c:	40 f5       	mov.aa %a5,%a15
8000ec6e:	82 07       	mov %d7,0
8000ec70:	40 56       	mov.aa %a6,%a5
8000ec72:	44 66       	ld.w %d6,[%a6+]
8000ec74:	40 47       	mov.aa %a7,%a4
8000ec76:	44 75       	ld.w %d5,[%a7+]
8000ec78:	b7 06 10 68 	insert %d6,%d6,0,16,16
8000ec7c:	8f 05 1f 50 	sh %d5,%d5,-16
8000ec80:	03 26 0a f5 	madd %d15,%d5,%d6,%d2
8000ec84:	42 7f       	add %d15,%d7
8000ec86:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000ec8a:	8f 0f 1f f0 	sh %d15,%d15,-16
8000ec8e:	74 43       	st.w [%a4],%d3
8000ec90:	b9 55 02 00 	ld.hu %d5,[%a5]2
8000ec94:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000ec98:	40 65       	mov.aa %a5,%a6
8000ec9a:	03 25 0a 33 	madd %d3,%d3,%d5,%d2
8000ec9e:	42 f3       	add %d3,%d15
8000eca0:	80 6f       	mov.d %d15,%a6
8000eca2:	8f 03 1f 70 	sh %d7,%d3,-16
8000eca6:	7f 4f 04 80 	jge.u %d15,%d4,8000ecae <__multiply+0xf6>
8000ecaa:	40 74       	mov.aa %a4,%a7
8000ecac:	3c e2       	j 8000ec70 <__multiply+0xb8>
8000ecae:	59 43 04 00 	st.w [%a4]4,%d3
8000ecb2:	b0 4c       	add.a %a12,4
8000ecb4:	b0 43       	add.a %a3,4
8000ecb6:	3c ac       	j 8000ec0e <__multiply+0x56>
8000ecb8:	8b 08 40 f3 	max %d15,%d8,0
8000ecbc:	9f 0f 05 80 	jned %d15,0,8000ecc6 <__multiply+0x10e>
8000ecc0:	59 28 10 00 	st.w [%a2]16,%d8
8000ecc4:	00 90       	ret 
8000ecc6:	09 d2 3c f5 	ld.w %d2,[+%a13]-4
8000ecca:	df 02 fb ff 	jne %d2,0,8000ecc0 <__multiply+0x108>
8000ecce:	c2 f8       	add %d8,-1
8000ecd0:	3c f6       	j 8000ecbc <__multiply+0x104>

8000ecd2 <__pow5mult>:
8000ecd2:	8f 34 00 21 	and %d2,%d4,3
8000ecd6:	40 4c       	mov.aa %a12,%a4
8000ecd8:	40 5d       	mov.aa %a13,%a5
8000ecda:	02 4f       	mov %d15,%d4
8000ecdc:	76 2d       	jz %d2,8000ecf6 <__pow5mult+0x24>
8000ecde:	91 00 00 f8 	movh.a %a15,32768
8000ece2:	d9 ff c8 f0 	lea %a15,[%a15]4040 <80000fc8 <p05.2553>>
8000ece6:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
8000ecea:	82 05       	mov %d5,0
8000ecec:	19 f4 fc ff 	ld.w %d4,[%a15]-4
8000ecf0:	6d ff c7 fe 	call 8000ea7e <__multadd>
8000ecf4:	40 2d       	mov.aa %a13,%a2
8000ecf6:	86 ef       	sha %d15,-2
8000ecf8:	6e 29       	jz %d15,8000ed4a <__pow5mult+0x78>
8000ecfa:	99 cf 08 10 	ld.a %a15,[%a12]72
8000ecfe:	7c fb       	jnz.a %a15,8000ed14 <__pow5mult+0x42>
8000ed00:	40 c4       	mov.aa %a4,%a12
8000ed02:	3b 10 27 40 	mov %d4,625
8000ed06:	6d ff 51 ff 	call 8000eba8 <__i2b>
8000ed0a:	82 02       	mov %d2,0
8000ed0c:	b5 c2 08 10 	st.a [%a12]72,%a2
8000ed10:	40 2f       	mov.aa %a15,%a2
8000ed12:	74 22       	st.w [%a2],%d2
8000ed14:	82 08       	mov %d8,0
8000ed16:	2e 0c       	jz.t %d15,0,8000ed2e <__pow5mult+0x5c>
8000ed18:	40 d5       	mov.aa %a5,%a13
8000ed1a:	40 c4       	mov.aa %a4,%a12
8000ed1c:	40 f6       	mov.aa %a6,%a15
8000ed1e:	6d ff 4d ff 	call 8000ebb8 <__multiply>
8000ed22:	40 d5       	mov.aa %a5,%a13
8000ed24:	40 2e       	mov.aa %a14,%a2
8000ed26:	40 c4       	mov.aa %a4,%a12
8000ed28:	6d ff a2 fe 	call 8000ea6c <_Bfree>
8000ed2c:	40 ed       	mov.aa %a13,%a14
8000ed2e:	86 ff       	sha %d15,-1
8000ed30:	6e 0d       	jz %d15,8000ed4a <__pow5mult+0x78>
8000ed32:	c8 02       	ld.a %a2,[%a15]0
8000ed34:	bc 23       	jz.a %a2,8000ed3a <__pow5mult+0x68>
8000ed36:	40 2f       	mov.aa %a15,%a2
8000ed38:	3c ef       	j 8000ed16 <__pow5mult+0x44>
8000ed3a:	40 c4       	mov.aa %a4,%a12
8000ed3c:	40 f5       	mov.aa %a5,%a15
8000ed3e:	40 f6       	mov.aa %a6,%a15
8000ed40:	6d ff 3c ff 	call 8000ebb8 <__multiply>
8000ed44:	e8 02       	st.a [%a15]0,%a2
8000ed46:	74 28       	st.w [%a2],%d8
8000ed48:	3c f7       	j 8000ed36 <__pow5mult+0x64>
8000ed4a:	40 d2       	mov.aa %a2,%a13
8000ed4c:	00 90       	ret 

8000ed4e <__lshift>:
8000ed4e:	19 5b 10 00 	ld.w %d11,[%a5]16
8000ed52:	8f b4 3f 80 	sha %d8,%d4,-5
8000ed56:	02 4a       	mov %d10,%d4
8000ed58:	42 8b       	add %d11,%d8
8000ed5a:	19 54 04 00 	ld.w %d4,[%a5]4
8000ed5e:	4c 52       	ld.w %d15,[%a5]8
8000ed60:	40 4e       	mov.aa %a14,%a4
8000ed62:	40 5c       	mov.aa %a12,%a5
8000ed64:	1b 1b 00 90 	addi %d9,%d11,1
8000ed68:	7f 9f 05 00 	jge %d15,%d9,8000ed72 <__lshift+0x24>
8000ed6c:	c2 14       	add %d4,1
8000ed6e:	06 1f       	sh %d15,1
8000ed70:	3c fc       	j 8000ed68 <__lshift+0x1a>
8000ed72:	40 e4       	mov.aa %a4,%a14
8000ed74:	6d ff 51 fe 	call 8000ea16 <_Balloc>
8000ed78:	8b 08 40 f3 	max %d15,%d8,0
8000ed7c:	40 2d       	mov.aa %a13,%a2
8000ed7e:	d9 2f 14 00 	lea %a15,[%a2]20
8000ed82:	d2 02       	mov %e2,0
8000ed84:	01 f2 02 26 	addsc.a %a2,%a15,%d2,2
8000ed88:	9f 0f 03 80 	jned %d15,0,8000ed8e <__lshift+0x40>
8000ed8c:	3c 04       	j 8000ed94 <__lshift+0x46>
8000ed8e:	74 23       	st.w [%a2],%d3
8000ed90:	c2 12       	add %d2,1
8000ed92:	3c f9       	j 8000ed84 <__lshift+0x36>
8000ed94:	8b 08 40 83 	max %d8,%d8,0
8000ed98:	01 f8 02 36 	addsc.a %a3,%a15,%d8,2
8000ed9c:	d9 cf 14 00 	lea %a15,[%a12]20
8000eda0:	19 c2 10 00 	ld.w %d2,[%a12]16
8000eda4:	80 f3       	mov.d %d3,%a15
8000eda6:	8f fa 01 41 	and %d4,%d10,31
8000edaa:	13 42 20 23 	madd %d2,%d3,%d2,4
8000edae:	8b 04 02 51 	rsub %d5,%d4,32
8000edb2:	82 0f       	mov %d15,0
8000edb4:	df 04 1a 00 	jeq %d4,0,8000ede8 <__lshift+0x9a>
8000edb8:	40 f5       	mov.aa %a5,%a15
8000edba:	44 53       	ld.w %d3,[%a5+]
8000edbc:	d9 32 04 00 	lea %a2,[%a3]4
8000edc0:	0f 43 00 30 	sh %d3,%d3,%d4
8000edc4:	a6 3f       	or %d15,%d3
8000edc6:	6c 30       	st.w [%a3]0,%d15
8000edc8:	4c f0       	ld.w %d15,[%a15]0
8000edca:	8b 05 00 31 	rsub %d3,%d5,0
8000edce:	0f 3f 00 30 	sh %d3,%d15,%d3
8000edd2:	02 3f       	mov %d15,%d3
8000edd4:	80 53       	mov.d %d3,%a5
8000edd6:	40 5f       	mov.aa %a15,%a5
8000edd8:	7f 23 04 80 	jge.u %d3,%d2,8000ede0 <__lshift+0x92>
8000eddc:	40 23       	mov.aa %a3,%a2
8000edde:	3c ed       	j 8000edb8 <__lshift+0x6a>
8000ede0:	c2 2b       	add %d11,2
8000ede2:	6c 31       	st.w [%a3]4,%d15
8000ede4:	2a b9       	cmov %d9,%d15,%d11
8000ede6:	3c 08       	j 8000edf6 <__lshift+0xa8>
8000ede8:	4c f0       	ld.w %d15,[%a15]0
8000edea:	b0 4f       	add.a %a15,4
8000edec:	80 f3       	mov.d %d3,%a15
8000edee:	6c 30       	st.w [%a3]0,%d15
8000edf0:	b0 43       	add.a %a3,4
8000edf2:	3f 23 fb ff 	jlt.u %d3,%d2,8000ede8 <__lshift+0x9a>
8000edf6:	c2 f9       	add %d9,-1
8000edf8:	59 d9 10 00 	st.w [%a13]16,%d9
8000edfc:	40 e4       	mov.aa %a4,%a14
8000edfe:	40 c5       	mov.aa %a5,%a12
8000ee00:	6d ff 36 fe 	call 8000ea6c <_Bfree>
8000ee04:	40 d2       	mov.aa %a2,%a13
8000ee06:	00 90       	ret 

8000ee08 <__mcmp>:
8000ee08:	4c 54       	ld.w %d15,[%a5]16
8000ee0a:	19 42 10 00 	ld.w %d2,[%a4]16
8000ee0e:	a2 f2       	sub %d2,%d15
8000ee10:	df 02 1c 80 	jne %d2,0,8000ee48 <__mcmp+0x40>
8000ee14:	80 42       	mov.d %d2,%a4
8000ee16:	06 2f       	sh %d15,2
8000ee18:	60 f2       	mov.a %a2,%d15
8000ee1a:	1b 42 01 30 	addi %d3,%d2,20
8000ee1e:	d9 55 14 00 	lea %a5,[%a5]20
8000ee22:	01 23 00 f6 	addsc.a %a15,%a2,%d3,0
8000ee26:	30 25       	add.a %a5,%a2
8000ee28:	09 f2 3c f5 	ld.w %d2,[+%a15]-4
8000ee2c:	09 5f 3c f5 	ld.w %d15,[+%a5]-4
8000ee30:	5f f2 08 00 	jeq %d2,%d15,8000ee40 <__mcmp+0x38>
8000ee34:	0b f2 30 21 	lt.u %d2,%d2,%d15
8000ee38:	82 f3       	mov %d3,-1
8000ee3a:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000ee3e:	00 90       	ret 
8000ee40:	80 ff       	mov.d %d15,%a15
8000ee42:	3f f3 f3 ff 	jlt.u %d3,%d15,8000ee28 <__mcmp+0x20>
8000ee46:	82 02       	mov %d2,0
8000ee48:	00 90       	ret 

8000ee4a <__mdiff>:
8000ee4a:	40 4d       	mov.aa %a13,%a4
8000ee4c:	40 5f       	mov.aa %a15,%a5
8000ee4e:	40 54       	mov.aa %a4,%a5
8000ee50:	40 65       	mov.aa %a5,%a6
8000ee52:	40 6c       	mov.aa %a12,%a6
8000ee54:	6d ff da ff 	call 8000ee08 <__mcmp>
8000ee58:	02 2f       	mov %d15,%d2
8000ee5a:	f6 2a       	jnz %d2,8000ee6e <__mdiff+0x24>
8000ee5c:	40 d4       	mov.aa %a4,%a13
8000ee5e:	82 04       	mov %d4,0
8000ee60:	6d ff db fd 	call 8000ea16 <_Balloc>
8000ee64:	82 12       	mov %d2,1
8000ee66:	59 22 10 00 	st.w [%a2]16,%d2
8000ee6a:	6c 25       	st.w [%a2]20,%d15
8000ee6c:	00 90       	ret 
8000ee6e:	82 08       	mov %d8,0
8000ee70:	ce 25       	jgez %d2,8000ee7a <__mdiff+0x30>
8000ee72:	40 f2       	mov.aa %a2,%a15
8000ee74:	82 18       	mov %d8,1
8000ee76:	40 cf       	mov.aa %a15,%a12
8000ee78:	40 2c       	mov.aa %a12,%a2
8000ee7a:	40 d4       	mov.aa %a4,%a13
8000ee7c:	48 14       	ld.w %d4,[%a15]4
8000ee7e:	6d ff cc fd 	call 8000ea16 <_Balloc>
8000ee82:	48 42       	ld.w %d2,[%a15]16
8000ee84:	d9 ff 14 00 	lea %a15,[%a15]20
8000ee88:	80 ff       	mov.d %d15,%a15
8000ee8a:	d9 c4 14 00 	lea %a4,[%a12]20
8000ee8e:	13 42 20 7f 	madd %d7,%d15,%d2,4
8000ee92:	19 c0 10 00 	ld.w %d0,[%a12]16
8000ee96:	80 4f       	mov.d %d15,%a4
8000ee98:	59 28 0c 00 	st.w [%a2]12,%d8
8000ee9c:	13 40 20 0f 	madd %d0,%d15,%d0,4
8000eea0:	d9 25 14 00 	lea %a5,[%a2]20
8000eea4:	82 03       	mov %d3,0
8000eea6:	44 f6       	ld.w %d6,[%a15+]
8000eea8:	44 45       	ld.w %d5,[%a4+]
8000eeaa:	b7 06 10 48 	insert %d4,%d6,0,16,16
8000eeae:	b7 05 10 18 	insert %d1,%d5,0,16,16
8000eeb2:	42 34       	add %d4,%d3
8000eeb4:	a2 14       	sub %d4,%d1
8000eeb6:	8f 06 1f 60 	sh %d6,%d6,-16
8000eeba:	8f 05 1f 50 	sh %d5,%d5,-16
8000eebe:	8f 04 3f 30 	sha %d3,%d4,-16
8000eec2:	0b 56 80 50 	sub %d5,%d6,%d5
8000eec6:	1a 35       	add %d15,%d5,%d3
8000eec8:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000eecc:	8f 0f 3f 30 	sha %d3,%d15,-16
8000eed0:	80 4f       	mov.d %d15,%a4
8000eed2:	d9 53 04 00 	lea %a3,[%a5]4
8000eed6:	74 54       	st.w [%a5],%d4
8000eed8:	40 35       	mov.aa %a5,%a3
8000eeda:	3f 0f e6 ff 	jlt.u %d15,%d0,8000eea6 <__mdiff+0x5c>
8000eede:	80 ff       	mov.d %d15,%a15
8000eee0:	7f 7f 12 80 	jge.u %d15,%d7,8000ef04 <__mdiff+0xba>
8000eee4:	44 f5       	ld.w %d5,[%a15+]
8000eee6:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000eeea:	8f 05 1f 50 	sh %d5,%d5,-16
8000eeee:	42 34       	add %d4,%d3
8000eef0:	8f 04 3f f0 	sha %d15,%d4,-16
8000eef4:	42 5f       	add %d15,%d5
8000eef6:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000eefa:	8f 0f 3f 30 	sha %d3,%d15,-16
8000eefe:	74 34       	st.w [%a3],%d4
8000ef00:	b0 43       	add.a %a3,4
8000ef02:	3c ee       	j 8000eede <__mdiff+0x94>
8000ef04:	09 3f 3c f5 	ld.w %d15,[+%a3]-4
8000ef08:	ee 03       	jnz %d15,8000ef0e <__mdiff+0xc4>
8000ef0a:	c2 f2       	add %d2,-1
8000ef0c:	3c fc       	j 8000ef04 <__mdiff+0xba>
8000ef0e:	59 22 10 00 	st.w [%a2]16,%d2
8000ef12:	00 90       	ret 

8000ef14 <__d2b>:
8000ef14:	20 08       	sub.a %sp,8
8000ef16:	02 48       	mov %d8,%d4
8000ef18:	82 14       	mov %d4,1
8000ef1a:	02 59       	mov %d9,%d5
8000ef1c:	40 5d       	mov.aa %a13,%a5
8000ef1e:	40 6c       	mov.aa %a12,%a6
8000ef20:	6d ff 7b fd 	call 8000ea16 <_Balloc>
8000ef24:	b7 09 0c 2a 	insert %d2,%d9,0,20,12
8000ef28:	37 09 6b 9a 	extr.u %d9,%d9,20,11
8000ef2c:	40 2f       	mov.aa %a15,%a2
8000ef2e:	76 93       	jz %d9,8000ef34 <__d2b+0x20>
8000ef30:	b7 f2 01 2a 	insert %d2,%d2,15,20,1
8000ef34:	59 a2 04 00 	st.w [%sp]4,%d2
8000ef38:	df 08 20 00 	jeq %d8,0,8000ef78 <__d2b+0x64>
8000ef3c:	d9 a4 08 00 	lea %a4,[%sp]8
8000ef40:	89 48 38 f5 	st.w [+%a4]-8,%d8
8000ef44:	40 a4       	mov.aa %a4,%sp
8000ef46:	6d ff fe fd 	call 8000eb42 <__lo0bits>
8000ef4a:	58 00       	ld.w %d15,[%sp]0
8000ef4c:	76 2f       	jz %d2,8000ef6a <__d2b+0x56>
8000ef4e:	19 a4 04 00 	ld.w %d4,[%sp]4
8000ef52:	8b 02 02 31 	rsub %d3,%d2,32
8000ef56:	0f 34 00 30 	sh %d3,%d4,%d3
8000ef5a:	a6 3f       	or %d15,%d3
8000ef5c:	68 5f       	st.w [%a15]20,%d15
8000ef5e:	8b 02 00 f1 	rsub %d15,%d2,0
8000ef62:	0f f4 00 f0 	sh %d15,%d4,%d15
8000ef66:	78 01       	st.w [%sp]4,%d15
8000ef68:	3c 02       	j 8000ef6c <__d2b+0x58>
8000ef6a:	68 5f       	st.w [%a15]20,%d15
8000ef6c:	58 01       	ld.w %d15,[%sp]4
8000ef6e:	82 28       	mov %d8,2
8000ef70:	ea 18       	cmovn %d8,%d15,1
8000ef72:	68 6f       	st.w [%a15]24,%d15
8000ef74:	68 48       	st.w [%a15]16,%d8
8000ef76:	3c 0c       	j 8000ef8e <__d2b+0x7a>
8000ef78:	d9 a4 04 00 	lea %a4,[%sp]4
8000ef7c:	6d ff e3 fd 	call 8000eb42 <__lo0bits>
8000ef80:	58 01       	ld.w %d15,[%sp]4
8000ef82:	1b 02 02 20 	addi %d2,%d2,32
8000ef86:	68 5f       	st.w [%a15]20,%d15
8000ef88:	82 1f       	mov %d15,1
8000ef8a:	68 4f       	st.w [%a15]16,%d15
8000ef8c:	82 18       	mov %d8,1
8000ef8e:	76 98       	jz %d9,8000ef9e <__d2b+0x8a>
8000ef90:	1b d9 bc 9f 	addi %d9,%d9,-1075
8000ef94:	42 29       	add %d9,%d2
8000ef96:	74 d9       	st.w [%a13],%d9
8000ef98:	8b 52 03 21 	rsub %d2,%d2,53
8000ef9c:	3c 0d       	j 8000efb6 <__d2b+0xa2>
8000ef9e:	01 f8 02 26 	addsc.a %a2,%a15,%d8,2
8000efa2:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000efa6:	74 d2       	st.w [%a13],%d2
8000efa8:	19 24 10 00 	ld.w %d4,[%a2]16
8000efac:	6d ff aa fd 	call 8000eb00 <__hi0bits>
8000efb0:	06 58       	sh %d8,5
8000efb2:	0b 28 80 20 	sub %d2,%d8,%d2
8000efb6:	74 c2       	st.w [%a12],%d2
8000efb8:	40 f2       	mov.aa %a2,%a15
8000efba:	00 90       	ret 

8000efbc <__fpclassifyd>:
8000efbc:	0f 45 a0 f0 	or %d15,%d5,%d4
8000efc0:	82 22       	mov %d2,2
8000efc2:	6e 1d       	jz %d15,8000effc <__fpclassifyd+0x40>
8000efc4:	7b 00 00 38 	movh %d3,32768
8000efc8:	3a 53       	eq %d15,%d3,%d5
8000efca:	8b 04 00 f4 	and.eq %d15,%d4,0
8000efce:	8b 04 00 62 	eq %d6,%d4,0
8000efd2:	ee 15       	jnz %d15,8000effc <__fpclassifyd+0x40>
8000efd4:	b7 05 81 5f 	insert %d5,%d5,0,31,1
8000efd8:	7b 00 fe f7 	movh %d15,32736
8000efdc:	9b 05 ff 3f 	addih %d3,%d5,65520
8000efe0:	82 42       	mov %d2,4
8000efe2:	3f f3 0d 80 	jlt.u %d3,%d15,8000effc <__fpclassifyd+0x40>
8000efe6:	7b 00 01 f0 	movh %d15,16
8000efea:	82 32       	mov %d2,3
8000efec:	3f f5 08 80 	jlt.u %d5,%d15,8000effc <__fpclassifyd+0x40>
8000eff0:	7b 00 ff 27 	movh %d2,32752
8000eff4:	0b 25 00 51 	eq %d5,%d5,%d2
8000eff8:	0f 56 80 20 	and %d2,%d6,%d5
8000effc:	00 90       	ret 

8000effe <__ssprint_r>:
8000effe:	4c 62       	ld.w %d15,[%a6]8
8000f000:	20 08       	sub.a %sp,8
8000f002:	40 4e       	mov.aa %a14,%a4
8000f004:	40 5f       	mov.aa %a15,%a5
8000f006:	40 6c       	mov.aa %a12,%a6
8000f008:	54 6c       	ld.w %d12,[%a6]
8000f00a:	6e 30       	jz %d15,8000f06a <__ssprint_r+0x6c>
8000f00c:	a0 02       	mov.a %a2,0
8000f00e:	b5 a2 04 00 	st.a [%sp]4,%a2
8000f012:	82 09       	mov %d9,0
8000f014:	3b 00 48 e0 	mov %d14,1152
8000f018:	3b f0 b7 df 	mov %d13,-1153
8000f01c:	3c 0a       	j 8000f030 <__ssprint_r+0x32>
8000f01e:	60 c2       	mov.a %a2,%d12
8000f020:	d4 22       	ld.a %a2,[%a2]
8000f022:	b5 a2 04 00 	st.a [%sp]4,%a2
8000f026:	60 c2       	mov.a %a2,%d12
8000f028:	1b 8c 00 c0 	addi %d12,%d12,8
8000f02c:	19 29 04 00 	ld.w %d9,[%a2]4
8000f030:	df 09 f7 7f 	jeq %d9,0,8000f01e <__ssprint_r+0x20>
8000f034:	48 28       	ld.w %d8,[%a15]8
8000f036:	3f 89 5a 80 	jlt.u %d9,%d8,8000f0ea <__ssprint_r+0xec>
8000f03a:	88 62       	ld.h %d2,[%a15]12
8000f03c:	0f e2 80 f0 	and %d15,%d2,%d14
8000f040:	ee 19       	jnz %d15,8000f072 <__ssprint_r+0x74>
8000f042:	3f 89 54 80 	jlt.u %d9,%d8,8000f0ea <__ssprint_r+0xec>
8000f046:	c8 04       	ld.a %a4,[%a15]0
8000f048:	99 a5 04 00 	ld.a %a5,[%sp]4
8000f04c:	02 84       	mov %d4,%d8
8000f04e:	6d 00 81 00 	call 8000f150 <memmove>
8000f052:	4c f2       	ld.w %d15,[%a15]8
8000f054:	a2 8f       	sub %d15,%d8
8000f056:	68 2f       	st.w [%a15]8,%d15
8000f058:	4c f0       	ld.w %d15,[%a15]0
8000f05a:	42 f8       	add %d8,%d15
8000f05c:	4c c2       	ld.w %d15,[%a12]8
8000f05e:	68 08       	st.w [%a15]0,%d8
8000f060:	52 99       	sub %d9,%d15,%d9
8000f062:	59 c9 08 00 	st.w [%a12]8,%d9
8000f066:	df 09 dc ff 	jne %d9,0,8000f01e <__ssprint_r+0x20>
8000f06a:	82 0f       	mov %d15,0
8000f06c:	6c c1       	st.w [%a12]4,%d15
8000f06e:	82 02       	mov %d2,0
8000f070:	00 90       	ret 
8000f072:	c8 45       	ld.a %a5,[%a15]16
8000f074:	48 5a       	ld.w %d10,[%a15]20
8000f076:	4c f0       	ld.w %d15,[%a15]0
8000f078:	80 53       	mov.d %d3,%a5
8000f07a:	53 3a 20 a0 	mul %d10,%d10,3
8000f07e:	a2 3f       	sub %d15,%d3
8000f080:	82 23       	mov %d3,2
8000f082:	4b 3a 01 a2 	div %e10,%d10,%d3
8000f086:	92 13       	add %d3,%d15,1
8000f088:	42 93       	add %d3,%d9
8000f08a:	0b 3a b0 a1 	max.u %d10,%d10,%d3
8000f08e:	40 e4       	mov.aa %a4,%a14
8000f090:	02 a4       	mov %d4,%d10
8000f092:	6f a2 12 00 	jz.t %d2,10,8000f0b6 <__ssprint_r+0xb8>
8000f096:	6d ff 0b e9 	call 8000c2ac <_malloc_r>
8000f09a:	40 2d       	mov.aa %a13,%a2
8000f09c:	bd 02 15 00 	jz.a %a2,8000f0c6 <__ssprint_r+0xc8>
8000f0a0:	c8 45       	ld.a %a5,[%a15]16
8000f0a2:	40 24       	mov.aa %a4,%a2
8000f0a4:	02 f4       	mov %d4,%d15
8000f0a6:	6d ff aa fc 	call 8000e9fa <memcpy>
8000f0aa:	88 62       	ld.h %d2,[%a15]12
8000f0ac:	26 d2       	and %d2,%d13
8000f0ae:	8f 02 48 21 	or %d2,%d2,128
8000f0b2:	a8 62       	st.h [%a15]12,%d2
8000f0b4:	3c 13       	j 8000f0da <__ssprint_r+0xdc>
8000f0b6:	6d 00 7d 00 	call 8000f1b0 <_realloc_r>
8000f0ba:	40 2d       	mov.aa %a13,%a2
8000f0bc:	7c 2f       	jnz.a %a2,8000f0da <__ssprint_r+0xdc>
8000f0be:	c8 45       	ld.a %a5,[%a15]16
8000f0c0:	40 e4       	mov.aa %a4,%a14
8000f0c2:	6d ff ea eb 	call 8000c896 <_free_r>
8000f0c6:	da 0c       	mov %d15,12
8000f0c8:	6c e0       	st.w [%a14]0,%d15
8000f0ca:	8c f6       	ld.h %d15,[%a15]12
8000f0cc:	82 f2       	mov %d2,-1
8000f0ce:	96 40       	or %d15,64
8000f0d0:	a8 6f       	st.h [%a15]12,%d15
8000f0d2:	82 0f       	mov %d15,0
8000f0d4:	6c c2       	st.w [%a12]8,%d15
8000f0d6:	6c c1       	st.w [%a12]4,%d15
8000f0d8:	00 90       	ret 
8000f0da:	e8 4d       	st.a [%a15]16,%a13
8000f0dc:	10 dd       	addsc.a %a13,%a13,%d15,0
8000f0de:	68 5a       	st.w [%a15]20,%d10
8000f0e0:	a2 fa       	sub %d10,%d15
8000f0e2:	e8 0d       	st.a [%a15]0,%a13
8000f0e4:	02 98       	mov %d8,%d9
8000f0e6:	68 2a       	st.w [%a15]8,%d10
8000f0e8:	3c ad       	j 8000f042 <__ssprint_r+0x44>
8000f0ea:	02 98       	mov %d8,%d9
8000f0ec:	3c ad       	j 8000f046 <__ssprint_r+0x48>

8000f0ee <_calloc_r>:
8000f0ee:	e2 54       	mul %d4,%d5
8000f0f0:	6d ff de e8 	call 8000c2ac <_malloc_r>
8000f0f4:	40 2f       	mov.aa %a15,%a2
8000f0f6:	a0 02       	mov.a %a2,0
8000f0f8:	bd 0f 2b 00 	jz.a %a15,8000f14e <_calloc_r+0x60>
8000f0fc:	19 f5 fc ff 	ld.w %d5,[%a15]-4
8000f100:	8f 35 c0 51 	andn %d5,%d5,3
8000f104:	c2 c5       	add %d5,-4
8000f106:	8b 55 a2 f2 	ge.u %d15,%d5,37
8000f10a:	ee 1d       	jnz %d15,8000f144 <_calloc_r+0x56>
8000f10c:	8b 45 61 f2 	lt.u %d15,%d5,20
8000f110:	40 f2       	mov.aa %a2,%a15
8000f112:	ee 14       	jnz %d15,8000f13a <_calloc_r+0x4c>
8000f114:	82 0f       	mov %d15,0
8000f116:	68 0f       	st.w [%a15]0,%d15
8000f118:	68 1f       	st.w [%a15]4,%d15
8000f11a:	8b c5 a1 22 	ge.u %d2,%d5,28
8000f11e:	d9 f2 08 00 	lea %a2,[%a15]8
8000f122:	76 2c       	jz %d2,8000f13a <_calloc_r+0x4c>
8000f124:	68 2f       	st.w [%a15]8,%d15
8000f126:	68 3f       	st.w [%a15]12,%d15
8000f128:	8b 45 02 52 	eq %d5,%d5,36
8000f12c:	d9 f2 10 00 	lea %a2,[%a15]16
8000f130:	76 55       	jz %d5,8000f13a <_calloc_r+0x4c>
8000f132:	68 4f       	st.w [%a15]16,%d15
8000f134:	d9 f2 18 00 	lea %a2,[%a15]24
8000f138:	68 5f       	st.w [%a15]20,%d15
8000f13a:	82 0f       	mov %d15,0
8000f13c:	6c 20       	st.w [%a2]0,%d15
8000f13e:	6c 21       	st.w [%a2]4,%d15
8000f140:	6c 22       	st.w [%a2]8,%d15
8000f142:	3c 05       	j 8000f14c <_calloc_r+0x5e>
8000f144:	40 f4       	mov.aa %a4,%a15
8000f146:	82 04       	mov %d4,0
8000f148:	6d 00 2c 00 	call 8000f1a0 <memset>
8000f14c:	40 f2       	mov.aa %a2,%a15
8000f14e:	00 90       	ret 

8000f150 <memmove>:
8000f150:	80 46       	mov.d %d6,%a4
8000f152:	80 52       	mov.d %d2,%a5
8000f154:	7f 62 16 80 	jge.u %d2,%d6,8000f180 <memmove+0x30>
8000f158:	0b 42 00 50 	add %d5,%d2,%d4
8000f15c:	7f 56 12 80 	jge.u %d6,%d5,8000f180 <memmove+0x30>
8000f160:	60 4f       	mov.a %a15,%d4
8000f162:	02 42       	mov %d2,%d4
8000f164:	c2 f2       	add %d2,-1
8000f166:	fd f0 03 00 	loop %a15,8000f16c <memmove+0x1c>
8000f16a:	3c 19       	j 8000f19c <memmove+0x4c>
8000f16c:	5a 42       	sub %d15,%d2,%d4
8000f16e:	60 f2       	mov.a %a2,%d15
8000f170:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000f174:	1a 62       	add %d15,%d2,%d6
8000f176:	79 23 00 00 	ld.b %d3,[%a2]0
8000f17a:	60 f2       	mov.a %a2,%d15
8000f17c:	34 23       	st.b [%a2],%d3
8000f17e:	3c f3       	j 8000f164 <memmove+0x14>
8000f180:	60 4f       	mov.a %a15,%d4
8000f182:	a0 02       	mov.a %a2,0
8000f184:	01 26 00 46 	addsc.a %a4,%a2,%d6,0
8000f188:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000f18c:	fd f0 03 00 	loop %a15,8000f192 <memmove+0x42>
8000f190:	3c 06       	j 8000f19c <memmove+0x4c>
8000f192:	79 33 00 00 	ld.b %d3,[%a3]0
8000f196:	b0 12       	add.a %a2,1
8000f198:	34 43       	st.b [%a4],%d3
8000f19a:	3c f5       	j 8000f184 <memmove+0x34>
8000f19c:	60 62       	mov.a %a2,%d6
8000f19e:	00 90       	ret 

8000f1a0 <memset>:
8000f1a0:	40 42       	mov.aa %a2,%a4
8000f1a2:	40 4f       	mov.aa %a15,%a4
8000f1a4:	9f 05 03 80 	jned %d5,0,8000f1aa <memset+0xa>
8000f1a8:	00 90       	ret 
8000f1aa:	28 04       	st.b [%a15]0,%d4
8000f1ac:	b0 1f       	add.a %a15,1
8000f1ae:	3c fb       	j 8000f1a4 <memset+0x4>

8000f1b0 <_realloc_r>:
8000f1b0:	40 4d       	mov.aa %a13,%a4
8000f1b2:	40 5f       	mov.aa %a15,%a5
8000f1b4:	02 49       	mov %d9,%d4
8000f1b6:	7c 53       	jnz.a %a5,8000f1bc <_realloc_r+0xc>
8000f1b8:	1d ff 7a e8 	j 8000c2ac <_malloc_r>
8000f1bc:	6d ff c5 ea 	call 8000c746 <__malloc_lock>
8000f1c0:	1b b9 00 20 	addi %d2,%d9,11
8000f1c4:	8b 72 61 f2 	lt.u %d15,%d2,23
8000f1c8:	8f 72 c0 21 	andn %d2,%d2,7
8000f1cc:	ab 02 a1 ff 	seln %d15,%d15,%d2,16
8000f1d0:	19 f3 fc ff 	ld.w %d3,[%a15]-4
8000f1d4:	0b 9f 30 21 	lt.u %d2,%d15,%d9
8000f1d8:	8b 0f 20 25 	or.lt %d2,%d15,0
8000f1dc:	d9 fe f8 ff 	lea %a14,[%a15]-8
8000f1e0:	8f 33 c0 81 	andn %d8,%d3,3
8000f1e4:	76 25       	jz %d2,8000f1ee <_realloc_r+0x3e>
8000f1e6:	da 0c       	mov %d15,12
8000f1e8:	6c d0       	st.w [%a13]0,%d15
8000f1ea:	1d 00 56 01 	j 8000f496 <_realloc_r+0x2e6>
8000f1ee:	7f f8 ac 01 	jge %d8,%d15,8000f546 <_realloc_r+0x396>
8000f1f2:	7b 00 00 c7 	movh %d12,28672
8000f1f6:	60 c3       	mov.a %a3,%d12
8000f1f8:	01 e8 00 26 	addsc.a %a2,%a14,%d8,0
8000f1fc:	d9 34 28 00 	lea %a4,[%a3]40
8000f200:	99 43 08 00 	ld.a %a3,[%a4]8
8000f204:	80 4c       	mov.d %d12,%a4
8000f206:	19 2b 04 00 	ld.w %d11,[%a2]4
8000f20a:	7d 32 0a 00 	jeq.a %a2,%a3,8000f21e <_realloc_r+0x6e>
8000f20e:	8f 1b c0 21 	andn %d2,%d11,1
8000f212:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
8000f216:	19 42 04 00 	ld.w %d2,[%a4]4
8000f21a:	6f 02 2b 80 	jnz.t %d2,0,8000f270 <_realloc_r+0xc0>
8000f21e:	8f 3b c0 b1 	andn %d11,%d11,3
8000f222:	0b 8b 00 20 	add %d2,%d11,%d8
8000f226:	7d 32 1b 80 	jne.a %a2,%a3,8000f25c <_realloc_r+0xac>
8000f22a:	1b 0f 01 40 	addi %d4,%d15,16
8000f22e:	3f 42 23 00 	jlt %d2,%d4,8000f274 <_realloc_r+0xc4>
8000f232:	10 ee       	addsc.a %a14,%a14,%d15,0
8000f234:	60 c2       	mov.a %a2,%d12
8000f236:	a2 f2       	sub %d2,%d15
8000f238:	b5 2e 08 00 	st.a [%a2]8,%a14
8000f23c:	8f 12 40 21 	or %d2,%d2,1
8000f240:	59 e2 04 00 	st.w [%a14]4,%d2
8000f244:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000f248:	40 d4       	mov.aa %a4,%a13
8000f24a:	8f 12 00 21 	and %d2,%d2,1
8000f24e:	a6 2f       	or %d15,%d2
8000f250:	59 ff fc ff 	st.w [%a15]-4,%d15
8000f254:	6d ff 7a ea 	call 8000c748 <__malloc_unlock>
8000f258:	40 f2       	mov.aa %a2,%a15
8000f25a:	00 90       	ret 
8000f25c:	3f f2 0c 00 	jlt %d2,%d15,8000f274 <_realloc_r+0xc4>
8000f260:	cc 23       	ld.a %a15,[%a2]12
8000f262:	99 22 08 00 	ld.a %a2,[%a2]8
8000f266:	02 28       	mov %d8,%d2
8000f268:	ec 23       	st.a [%a2]12,%a15
8000f26a:	e8 22       	st.a [%a15]8,%a2
8000f26c:	1d 00 6d 01 	j 8000f546 <_realloc_r+0x396>
8000f270:	82 0b       	mov %d11,0
8000f272:	a0 02       	mov.a %a2,0
8000f274:	6f 03 08 81 	jnz.t %d3,0,8000f484 <_realloc_r+0x2d4>
8000f278:	99 fc f8 ff 	ld.a %a12,[%a15]-8
8000f27c:	01 ce 20 c0 	sub.a %a12,%a14,%a12
8000f280:	19 ca 04 00 	ld.w %d10,[%a12]4
8000f284:	8f 3a c0 a1 	andn %d10,%d10,3
8000f288:	42 8a       	add %d10,%d8
8000f28a:	bd 02 b3 00 	jz.a %a2,8000f3f0 <_realloc_r+0x240>
8000f28e:	42 ab       	add %d11,%d10
8000f290:	7d 32 5f 80 	jne.a %a2,%a3,8000f34e <_realloc_r+0x19e>
8000f294:	1b 0f 01 20 	addi %d2,%d15,16
8000f298:	3f 2b ac 00 	jlt %d11,%d2,8000f3f0 <_realloc_r+0x240>
8000f29c:	40 ce       	mov.aa %a14,%a12
8000f29e:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000f2a2:	09 e3 88 05 	ld.a %a3,[+%a14]8
8000f2a6:	1b c8 ff 4f 	addi %d4,%d8,-4
8000f2aa:	8b 54 a2 22 	ge.u %d2,%d4,37
8000f2ae:	b5 32 0c 00 	st.a [%a3]12,%a2
8000f2b2:	b5 23 08 00 	st.a [%a2]8,%a3
8000f2b6:	df 02 36 80 	jne %d2,0,8000f322 <_realloc_r+0x172>
8000f2ba:	8b 44 61 22 	lt.u %d2,%d4,20
8000f2be:	40 e3       	mov.aa %a3,%a14
8000f2c0:	df 02 28 80 	jne %d2,0,8000f310 <_realloc_r+0x160>
8000f2c4:	48 02       	ld.w %d2,[%a15]0
8000f2c6:	59 c2 08 00 	st.w [%a12]8,%d2
8000f2ca:	48 13       	ld.w %d3,[%a15]4
8000f2cc:	8b c4 a1 22 	ge.u %d2,%d4,28
8000f2d0:	59 c3 0c 00 	st.w [%a12]12,%d3
8000f2d4:	f6 26       	jnz %d2,8000f2e0 <_realloc_r+0x130>
8000f2d6:	d9 c3 10 00 	lea %a3,[%a12]16
8000f2da:	d9 ff 08 00 	lea %a15,[%a15]8
8000f2de:	3c 19       	j 8000f310 <_realloc_r+0x160>
8000f2e0:	48 22       	ld.w %d2,[%a15]8
8000f2e2:	8b 44 02 82 	eq %d8,%d4,36
8000f2e6:	59 c2 10 00 	st.w [%a12]16,%d2
8000f2ea:	48 33       	ld.w %d3,[%a15]12
8000f2ec:	59 c3 14 00 	st.w [%a12]20,%d3
8000f2f0:	f6 86       	jnz %d8,8000f2fc <_realloc_r+0x14c>
8000f2f2:	d9 c3 18 00 	lea %a3,[%a12]24
8000f2f6:	d9 ff 10 00 	lea %a15,[%a15]16
8000f2fa:	3c 0b       	j 8000f310 <_realloc_r+0x160>
8000f2fc:	48 42       	ld.w %d2,[%a15]16
8000f2fe:	d9 c3 20 00 	lea %a3,[%a12]32
8000f302:	59 c2 18 00 	st.w [%a12]24,%d2
8000f306:	48 53       	ld.w %d3,[%a15]20
8000f308:	d9 ff 18 00 	lea %a15,[%a15]24
8000f30c:	59 c3 1c 00 	st.w [%a12]28,%d3
8000f310:	48 02       	ld.w %d2,[%a15]0
8000f312:	74 32       	st.w [%a3],%d2
8000f314:	48 13       	ld.w %d3,[%a15]4
8000f316:	59 33 04 00 	st.w [%a3]4,%d3
8000f31a:	48 22       	ld.w %d2,[%a15]8
8000f31c:	59 32 08 00 	st.w [%a3]8,%d2
8000f320:	3c 05       	j 8000f32a <_realloc_r+0x17a>
8000f322:	40 e4       	mov.aa %a4,%a14
8000f324:	40 f5       	mov.aa %a5,%a15
8000f326:	6d ff 15 ff 	call 8000f150 <memmove>
8000f32a:	10 cf       	addsc.a %a15,%a12,%d15,0
8000f32c:	60 c2       	mov.a %a2,%d12
8000f32e:	a2 fb       	sub %d11,%d15
8000f330:	ec 22       	st.a [%a2]8,%a15
8000f332:	8f 1b 40 b1 	or %d11,%d11,1
8000f336:	68 1b       	st.w [%a15]4,%d11
8000f338:	19 c2 04 00 	ld.w %d2,[%a12]4
8000f33c:	40 d4       	mov.aa %a4,%a13
8000f33e:	8f 12 00 21 	and %d2,%d2,1
8000f342:	a6 2f       	or %d15,%d2
8000f344:	6c c1       	st.w [%a12]4,%d15
8000f346:	6d ff 01 ea 	call 8000c748 <__malloc_unlock>
8000f34a:	40 e2       	mov.aa %a2,%a14
8000f34c:	00 90       	ret 
8000f34e:	3f fb 51 00 	jlt %d11,%d15,8000f3f0 <_realloc_r+0x240>
8000f352:	99 23 0c 00 	ld.a %a3,[%a2]12
8000f356:	99 22 08 00 	ld.a %a2,[%a2]8
8000f35a:	40 c4       	mov.aa %a4,%a12
8000f35c:	1b c8 ff 4f 	addi %d4,%d8,-4
8000f360:	b5 23 0c 00 	st.a [%a2]12,%a3
8000f364:	b5 32 08 00 	st.a [%a3]8,%a2
8000f368:	09 43 88 05 	ld.a %a3,[+%a4]8
8000f36c:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000f370:	8b 54 a2 22 	ge.u %d2,%d4,37
8000f374:	b5 32 0c 00 	st.a [%a3]12,%a2
8000f378:	b5 23 08 00 	st.a [%a2]8,%a3
8000f37c:	df 02 35 80 	jne %d2,0,8000f3e6 <_realloc_r+0x236>
8000f380:	8b 44 61 22 	lt.u %d2,%d4,20
8000f384:	df 02 28 80 	jne %d2,0,8000f3d4 <_realloc_r+0x224>
8000f388:	48 02       	ld.w %d2,[%a15]0
8000f38a:	59 c2 08 00 	st.w [%a12]8,%d2
8000f38e:	48 13       	ld.w %d3,[%a15]4
8000f390:	8b c4 a1 22 	ge.u %d2,%d4,28
8000f394:	59 c3 0c 00 	st.w [%a12]12,%d3
8000f398:	f6 26       	jnz %d2,8000f3a4 <_realloc_r+0x1f4>
8000f39a:	d9 c4 10 00 	lea %a4,[%a12]16
8000f39e:	d9 ff 08 00 	lea %a15,[%a15]8
8000f3a2:	3c 19       	j 8000f3d4 <_realloc_r+0x224>
8000f3a4:	48 22       	ld.w %d2,[%a15]8
8000f3a6:	8b 44 02 82 	eq %d8,%d4,36
8000f3aa:	59 c2 10 00 	st.w [%a12]16,%d2
8000f3ae:	48 33       	ld.w %d3,[%a15]12
8000f3b0:	59 c3 14 00 	st.w [%a12]20,%d3
8000f3b4:	f6 86       	jnz %d8,8000f3c0 <_realloc_r+0x210>
8000f3b6:	d9 c4 18 00 	lea %a4,[%a12]24
8000f3ba:	d9 ff 10 00 	lea %a15,[%a15]16
8000f3be:	3c 0b       	j 8000f3d4 <_realloc_r+0x224>
8000f3c0:	48 42       	ld.w %d2,[%a15]16
8000f3c2:	d9 c4 20 00 	lea %a4,[%a12]32
8000f3c6:	59 c2 18 00 	st.w [%a12]24,%d2
8000f3ca:	48 53       	ld.w %d3,[%a15]20
8000f3cc:	d9 ff 18 00 	lea %a15,[%a15]24
8000f3d0:	59 c3 1c 00 	st.w [%a12]28,%d3
8000f3d4:	48 02       	ld.w %d2,[%a15]0
8000f3d6:	74 42       	st.w [%a4],%d2
8000f3d8:	48 13       	ld.w %d3,[%a15]4
8000f3da:	59 43 04 00 	st.w [%a4]4,%d3
8000f3de:	48 22       	ld.w %d2,[%a15]8
8000f3e0:	59 42 08 00 	st.w [%a4]8,%d2
8000f3e4:	3c 04       	j 8000f3ec <_realloc_r+0x23c>
8000f3e6:	40 f5       	mov.aa %a5,%a15
8000f3e8:	6d ff b4 fe 	call 8000f150 <memmove>
8000f3ec:	02 b8       	mov %d8,%d11
8000f3ee:	3c 45       	j 8000f478 <_realloc_r+0x2c8>
8000f3f0:	3f fa 4a 00 	jlt %d10,%d15,8000f484 <_realloc_r+0x2d4>
8000f3f4:	40 c4       	mov.aa %a4,%a12
8000f3f6:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000f3fa:	09 43 88 05 	ld.a %a3,[+%a4]8
8000f3fe:	1b c8 ff 4f 	addi %d4,%d8,-4
8000f402:	8b 54 a2 22 	ge.u %d2,%d4,37
8000f406:	b5 32 0c 00 	st.a [%a3]12,%a2
8000f40a:	b5 23 08 00 	st.a [%a2]8,%a3
8000f40e:	df 02 37 80 	jne %d2,0,8000f47c <_realloc_r+0x2cc>
8000f412:	8b 44 61 22 	lt.u %d2,%d4,20
8000f416:	df 02 28 80 	jne %d2,0,8000f466 <_realloc_r+0x2b6>
8000f41a:	48 03       	ld.w %d3,[%a15]0
8000f41c:	59 c3 08 00 	st.w [%a12]8,%d3
8000f420:	48 12       	ld.w %d2,[%a15]4
8000f422:	59 c2 0c 00 	st.w [%a12]12,%d2
8000f426:	8b c4 a1 22 	ge.u %d2,%d4,28
8000f42a:	f6 26       	jnz %d2,8000f436 <_realloc_r+0x286>
8000f42c:	d9 c4 10 00 	lea %a4,[%a12]16
8000f430:	d9 ff 08 00 	lea %a15,[%a15]8
8000f434:	3c 19       	j 8000f466 <_realloc_r+0x2b6>
8000f436:	48 23       	ld.w %d3,[%a15]8
8000f438:	8b 44 02 82 	eq %d8,%d4,36
8000f43c:	59 c3 10 00 	st.w [%a12]16,%d3
8000f440:	48 32       	ld.w %d2,[%a15]12
8000f442:	59 c2 14 00 	st.w [%a12]20,%d2
8000f446:	f6 86       	jnz %d8,8000f452 <_realloc_r+0x2a2>
8000f448:	d9 c4 18 00 	lea %a4,[%a12]24
8000f44c:	d9 ff 10 00 	lea %a15,[%a15]16
8000f450:	3c 0b       	j 8000f466 <_realloc_r+0x2b6>
8000f452:	48 43       	ld.w %d3,[%a15]16
8000f454:	d9 c4 20 00 	lea %a4,[%a12]32
8000f458:	59 c3 18 00 	st.w [%a12]24,%d3
8000f45c:	48 52       	ld.w %d2,[%a15]20
8000f45e:	d9 ff 18 00 	lea %a15,[%a15]24
8000f462:	59 c2 1c 00 	st.w [%a12]28,%d2
8000f466:	48 03       	ld.w %d3,[%a15]0
8000f468:	74 43       	st.w [%a4],%d3
8000f46a:	48 12       	ld.w %d2,[%a15]4
8000f46c:	59 42 04 00 	st.w [%a4]4,%d2
8000f470:	48 23       	ld.w %d3,[%a15]8
8000f472:	59 43 08 00 	st.w [%a4]8,%d3
8000f476:	02 a8       	mov %d8,%d10
8000f478:	40 ce       	mov.aa %a14,%a12
8000f47a:	3c 66       	j 8000f546 <_realloc_r+0x396>
8000f47c:	40 f5       	mov.aa %a5,%a15
8000f47e:	6d ff 69 fe 	call 8000f150 <memmove>
8000f482:	3c fa       	j 8000f476 <_realloc_r+0x2c6>
8000f484:	40 d4       	mov.aa %a4,%a13
8000f486:	02 94       	mov %d4,%d9
8000f488:	6d ff 12 e7 	call 8000c2ac <_malloc_r>
8000f48c:	40 2c       	mov.aa %a12,%a2
8000f48e:	7c 26       	jnz.a %a2,8000f49a <_realloc_r+0x2ea>
8000f490:	40 d4       	mov.aa %a4,%a13
8000f492:	6d ff 5b e9 	call 8000c748 <__malloc_unlock>
8000f496:	a0 02       	mov.a %a2,0
8000f498:	00 90       	ret 
8000f49a:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000f49e:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000f4a2:	8f 12 c0 21 	andn %d2,%d2,1
8000f4a6:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
8000f4aa:	80 32       	mov.d %d2,%a3
8000f4ac:	80 23       	mov.d %d3,%a2
8000f4ae:	5f 32 08 80 	jne %d2,%d3,8000f4be <_realloc_r+0x30e>
8000f4b2:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000f4b6:	8f 32 c0 21 	andn %d2,%d2,3
8000f4ba:	42 28       	add %d8,%d2
8000f4bc:	3c 45       	j 8000f546 <_realloc_r+0x396>
8000f4be:	1b c8 ff 4f 	addi %d4,%d8,-4
8000f4c2:	8b 54 a2 f2 	ge.u %d15,%d4,37
8000f4c6:	ee 33       	jnz %d15,8000f52c <_realloc_r+0x37c>
8000f4c8:	8b 44 61 f2 	lt.u %d15,%d4,20
8000f4cc:	40 c3       	mov.aa %a3,%a12
8000f4ce:	40 f2       	mov.aa %a2,%a15
8000f4d0:	ee 23       	jnz %d15,8000f516 <_realloc_r+0x366>
8000f4d2:	4c f0       	ld.w %d15,[%a15]0
8000f4d4:	d9 c3 08 00 	lea %a3,[%a12]8
8000f4d8:	6c c0       	st.w [%a12]0,%d15
8000f4da:	48 12       	ld.w %d2,[%a15]4
8000f4dc:	8b c4 a1 f2 	ge.u %d15,%d4,28
8000f4e0:	59 c2 04 00 	st.w [%a12]4,%d2
8000f4e4:	d9 f2 08 00 	lea %a2,[%a15]8
8000f4e8:	6e 17       	jz %d15,8000f516 <_realloc_r+0x366>
8000f4ea:	48 23       	ld.w %d3,[%a15]8
8000f4ec:	8b 44 02 82 	eq %d8,%d4,36
8000f4f0:	59 c3 08 00 	st.w [%a12]8,%d3
8000f4f4:	4c f3       	ld.w %d15,[%a15]12
8000f4f6:	d9 c3 10 00 	lea %a3,[%a12]16
8000f4fa:	6c c3       	st.w [%a12]12,%d15
8000f4fc:	d9 f2 10 00 	lea %a2,[%a15]16
8000f500:	76 8b       	jz %d8,8000f516 <_realloc_r+0x366>
8000f502:	48 42       	ld.w %d2,[%a15]16
8000f504:	d9 c3 18 00 	lea %a3,[%a12]24
8000f508:	59 c2 10 00 	st.w [%a12]16,%d2
8000f50c:	48 53       	ld.w %d3,[%a15]20
8000f50e:	d9 f2 18 00 	lea %a2,[%a15]24
8000f512:	59 c3 14 00 	st.w [%a12]20,%d3
8000f516:	4c 20       	ld.w %d15,[%a2]0
8000f518:	6c 30       	st.w [%a3]0,%d15
8000f51a:	19 22 04 00 	ld.w %d2,[%a2]4
8000f51e:	59 32 04 00 	st.w [%a3]4,%d2
8000f522:	19 23 08 00 	ld.w %d3,[%a2]8
8000f526:	59 33 08 00 	st.w [%a3]8,%d3
8000f52a:	3c 05       	j 8000f534 <_realloc_r+0x384>
8000f52c:	40 c4       	mov.aa %a4,%a12
8000f52e:	40 f5       	mov.aa %a5,%a15
8000f530:	6d ff 10 fe 	call 8000f150 <memmove>
8000f534:	40 d4       	mov.aa %a4,%a13
8000f536:	40 f5       	mov.aa %a5,%a15
8000f538:	6d ff af e9 	call 8000c896 <_free_r>
8000f53c:	40 d4       	mov.aa %a4,%a13
8000f53e:	6d ff 05 e9 	call 8000c748 <__malloc_unlock>
8000f542:	40 c2       	mov.aa %a2,%a12
8000f544:	00 90       	ret 
8000f546:	0b f8 80 20 	sub %d2,%d8,%d15
8000f54a:	8b 02 61 42 	lt.u %d4,%d2,16
8000f54e:	19 e3 04 00 	ld.w %d3,[%a14]4
8000f552:	df 04 16 80 	jne %d4,0,8000f57e <_realloc_r+0x3ce>
8000f556:	8f 13 00 31 	and %d3,%d3,1
8000f55a:	10 e5       	addsc.a %a5,%a14,%d15,0
8000f55c:	a6 3f       	or %d15,%d3
8000f55e:	6c e1       	st.w [%a14]4,%d15
8000f560:	01 52 00 f6 	addsc.a %a15,%a5,%d2,0
8000f564:	8f 12 40 f1 	or %d15,%d2,1
8000f568:	b7 10 21 20 	imask %e2,1,0,1
8000f56c:	6c 51       	st.w [%a5]4,%d15
8000f56e:	49 f2 44 08 	ldmst [%a15]4,%e2
8000f572:	40 d4       	mov.aa %a4,%a13
8000f574:	d9 55 08 00 	lea %a5,[%a5]8
8000f578:	6d ff 8f e9 	call 8000c896 <_free_r>
8000f57c:	3c 0c       	j 8000f594 <_realloc_r+0x3e4>
8000f57e:	8f 13 00 31 	and %d3,%d3,1
8000f582:	a6 83       	or %d3,%d8
8000f584:	59 e3 04 00 	st.w [%a14]4,%d3
8000f588:	01 e8 00 f6 	addsc.a %a15,%a14,%d8,0
8000f58c:	b7 10 21 20 	imask %e2,1,0,1
8000f590:	49 f2 44 08 	ldmst [%a15]4,%e2
8000f594:	40 d4       	mov.aa %a4,%a13
8000f596:	6d ff d9 e8 	call 8000c748 <__malloc_unlock>
8000f59a:	d9 e2 08 00 	lea %a2,[%a14]8
8000f59e:	00 90       	ret 

8000f5a0 <_exit>:
8000f5a0:	76 43       	jz %d4,8000f5a6 <_exit+0x6>
8000f5a2:	60 4e       	mov.a %a14,%d4
8000f5a4:	3c 04       	j 8000f5ac <_exit+0xc>
8000f5a6:	bb d0 00 f9 	mov.u %d15,36877
8000f5aa:	60 fe       	mov.a %a14,%d15
8000f5ac:	00 a0       	debug 
8000f5ae:	3c 00       	j 8000f5ae <_exit+0xe>

8000f5b0 <sbrk>:
8000f5b0:	91 00 00 f7 	movh.a %a15,28672
8000f5b4:	19 ff 98 10 	ld.w %d15,[%a15]2136 <70000858 <heap_top.2289>>
8000f5b8:	7b 00 00 27 	movh %d2,28672
8000f5bc:	42 f4       	add %d4,%d15
8000f5be:	1b 02 b7 20 	addi %d2,%d2,2928
8000f5c2:	7f 42 09 80 	jge.u %d2,%d4,8000f5d4 <sbrk+0x24>
8000f5c6:	6d 00 13 00 	call 8000f5ec <__errno>
8000f5ca:	da 0c       	mov %d15,12
8000f5cc:	6c 20       	st.w [%a2]0,%d15
8000f5ce:	a0 02       	mov.a %a2,0
8000f5d0:	b0 f2       	add.a %a2,-1
8000f5d2:	00 90       	ret 
8000f5d4:	7b 00 00 27 	movh %d2,28672
8000f5d8:	1b 02 b7 20 	addi %d2,%d2,2928
8000f5dc:	7f 24 04 80 	jge.u %d4,%d2,8000f5e4 <sbrk+0x34>
8000f5e0:	6d 00 0b 00 	call 8000f5f6 <abort>
8000f5e4:	59 f4 98 10 	st.w [%a15]2136,%d4
8000f5e8:	60 f2       	mov.a %a2,%d15
8000f5ea:	00 90       	ret 

8000f5ec <__errno>:
8000f5ec:	91 00 00 27 	movh.a %a2,28672
8000f5f0:	d9 22 a8 d0 	lea %a2,[%a2]2920 <70000b68 <_my_errno>>
8000f5f4:	00 90       	ret 

8000f5f6 <abort>:
8000f5f6:	00 a0       	debug 
8000f5f8:	7b e0 ea fd 	movh %d15,57006
8000f5fc:	1b ff ee fb 	addi %d15,%d15,-16657
8000f600:	60 fe       	mov.a %a14,%d15
8000f602:	1d ff cf ff 	j 8000f5a0 <_exit>
8000f606:	3c 00       	j 8000f606 <abort+0x10>

8000f608 <__eqdf2>:
8000f608:	20 38       	sub.a %sp,56
8000f60a:	40 a4       	mov.aa %a4,%sp
8000f60c:	d9 a5 10 00 	lea %a5,[%sp]16
8000f610:	89 a4 40 09 	st.d [%sp],%e4
8000f614:	89 a6 48 09 	st.d [%sp]8,%e6
8000f618:	6d ff 84 e5 	call 8000c120 <__unpack_d>
8000f61c:	d9 a4 08 00 	lea %a4,[%sp]8
8000f620:	d9 a5 24 00 	lea %a5,[%sp]36
8000f624:	6d ff 7e e5 	call 8000c120 <__unpack_d>
8000f628:	39 af 10 00 	ld.bu %d15,[%sp]16
8000f62c:	82 12       	mov %d2,1
8000f62e:	bf 2f 0c 80 	jlt.u %d15,2,8000f646 <__eqdf2+0x3e>
8000f632:	39 af 24 00 	ld.bu %d15,[%sp]36
8000f636:	bf 2f 08 80 	jlt.u %d15,2,8000f646 <__eqdf2+0x3e>
8000f63a:	d9 a4 10 00 	lea %a4,[%sp]16
8000f63e:	d9 a5 24 00 	lea %a5,[%sp]36
8000f642:	6d 00 0d 01 	call 8000f85c <__fpcmp_parts_d>
8000f646:	00 90       	ret 

8000f648 <__nedf2>:
8000f648:	20 38       	sub.a %sp,56
8000f64a:	40 a4       	mov.aa %a4,%sp
8000f64c:	d9 a5 10 00 	lea %a5,[%sp]16
8000f650:	89 a4 40 09 	st.d [%sp],%e4
8000f654:	89 a6 48 09 	st.d [%sp]8,%e6
8000f658:	6d ff 64 e5 	call 8000c120 <__unpack_d>
8000f65c:	d9 a4 08 00 	lea %a4,[%sp]8
8000f660:	d9 a5 24 00 	lea %a5,[%sp]36
8000f664:	6d ff 5e e5 	call 8000c120 <__unpack_d>
8000f668:	39 af 10 00 	ld.bu %d15,[%sp]16
8000f66c:	82 12       	mov %d2,1
8000f66e:	bf 2f 0c 80 	jlt.u %d15,2,8000f686 <__nedf2+0x3e>
8000f672:	39 af 24 00 	ld.bu %d15,[%sp]36
8000f676:	bf 2f 08 80 	jlt.u %d15,2,8000f686 <__nedf2+0x3e>
8000f67a:	d9 a4 10 00 	lea %a4,[%sp]16
8000f67e:	d9 a5 24 00 	lea %a5,[%sp]36
8000f682:	6d 00 ed 00 	call 8000f85c <__fpcmp_parts_d>
8000f686:	00 90       	ret 

8000f688 <__gtdf2>:
8000f688:	20 38       	sub.a %sp,56
8000f68a:	40 a4       	mov.aa %a4,%sp
8000f68c:	d9 a5 10 00 	lea %a5,[%sp]16
8000f690:	89 a4 40 09 	st.d [%sp],%e4
8000f694:	89 a6 48 09 	st.d [%sp]8,%e6
8000f698:	6d ff 44 e5 	call 8000c120 <__unpack_d>
8000f69c:	d9 a4 08 00 	lea %a4,[%sp]8
8000f6a0:	d9 a5 24 00 	lea %a5,[%sp]36
8000f6a4:	6d ff 3e e5 	call 8000c120 <__unpack_d>
8000f6a8:	39 af 10 00 	ld.bu %d15,[%sp]16
8000f6ac:	82 f2       	mov %d2,-1
8000f6ae:	bf 2f 0c 80 	jlt.u %d15,2,8000f6c6 <__gtdf2+0x3e>
8000f6b2:	39 af 24 00 	ld.bu %d15,[%sp]36
8000f6b6:	bf 2f 08 80 	jlt.u %d15,2,8000f6c6 <__gtdf2+0x3e>
8000f6ba:	d9 a4 10 00 	lea %a4,[%sp]16
8000f6be:	d9 a5 24 00 	lea %a5,[%sp]36
8000f6c2:	6d 00 cd 00 	call 8000f85c <__fpcmp_parts_d>
8000f6c6:	00 90       	ret 

8000f6c8 <__gedf2>:
8000f6c8:	20 38       	sub.a %sp,56
8000f6ca:	40 a4       	mov.aa %a4,%sp
8000f6cc:	d9 a5 10 00 	lea %a5,[%sp]16
8000f6d0:	89 a4 40 09 	st.d [%sp],%e4
8000f6d4:	89 a6 48 09 	st.d [%sp]8,%e6
8000f6d8:	6d ff 24 e5 	call 8000c120 <__unpack_d>
8000f6dc:	d9 a4 08 00 	lea %a4,[%sp]8
8000f6e0:	d9 a5 24 00 	lea %a5,[%sp]36
8000f6e4:	6d ff 1e e5 	call 8000c120 <__unpack_d>
8000f6e8:	39 af 10 00 	ld.bu %d15,[%sp]16
8000f6ec:	82 f2       	mov %d2,-1
8000f6ee:	bf 2f 0c 80 	jlt.u %d15,2,8000f706 <__gedf2+0x3e>
8000f6f2:	39 af 24 00 	ld.bu %d15,[%sp]36
8000f6f6:	bf 2f 08 80 	jlt.u %d15,2,8000f706 <__gedf2+0x3e>
8000f6fa:	d9 a4 10 00 	lea %a4,[%sp]16
8000f6fe:	d9 a5 24 00 	lea %a5,[%sp]36
8000f702:	6d 00 ad 00 	call 8000f85c <__fpcmp_parts_d>
8000f706:	00 90       	ret 

8000f708 <__ltdf2>:
8000f708:	20 38       	sub.a %sp,56
8000f70a:	40 a4       	mov.aa %a4,%sp
8000f70c:	d9 a5 10 00 	lea %a5,[%sp]16
8000f710:	89 a4 40 09 	st.d [%sp],%e4
8000f714:	89 a6 48 09 	st.d [%sp]8,%e6
8000f718:	6d ff 04 e5 	call 8000c120 <__unpack_d>
8000f71c:	d9 a4 08 00 	lea %a4,[%sp]8
8000f720:	d9 a5 24 00 	lea %a5,[%sp]36
8000f724:	6d ff fe e4 	call 8000c120 <__unpack_d>
8000f728:	39 af 10 00 	ld.bu %d15,[%sp]16
8000f72c:	82 12       	mov %d2,1
8000f72e:	bf 2f 0c 80 	jlt.u %d15,2,8000f746 <__ltdf2+0x3e>
8000f732:	39 af 24 00 	ld.bu %d15,[%sp]36
8000f736:	bf 2f 08 80 	jlt.u %d15,2,8000f746 <__ltdf2+0x3e>
8000f73a:	d9 a4 10 00 	lea %a4,[%sp]16
8000f73e:	d9 a5 24 00 	lea %a5,[%sp]36
8000f742:	6d 00 8d 00 	call 8000f85c <__fpcmp_parts_d>
8000f746:	00 90       	ret 

8000f748 <__fixdfsi>:
8000f748:	20 20       	sub.a %sp,32
8000f74a:	d9 a4 20 00 	lea %a4,[%sp]32
8000f74e:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000f752:	d9 a5 0c 00 	lea %a5,[%sp]12
8000f756:	6d ff e5 e4 	call 8000c120 <__unpack_d>
8000f75a:	0c ac       	ld.bu %d15,[%sp]12
8000f75c:	82 02       	mov %d2,0
8000f75e:	bf 3f 1b 80 	jlt.u %d15,3,8000f794 <__fixdfsi+0x4c>
8000f762:	5e 48       	jne %d15,4,8000f772 <__fixdfsi+0x2a>
8000f764:	7b 00 00 28 	movh %d2,32768
8000f768:	58 04       	ld.w %d15,[%sp]16
8000f76a:	1b f2 ff 3f 	addi %d3,%d2,-1
8000f76e:	6a 32       	cmovn %d2,%d15,%d3
8000f770:	00 90       	ret 
8000f772:	19 a6 14 00 	ld.w %d6,[%sp]20
8000f776:	82 02       	mov %d2,0
8000f778:	0e 6e       	jltz %d6,8000f794 <__fixdfsi+0x4c>
8000f77a:	8b f6 81 f2 	ge %d15,%d6,31
8000f77e:	ee f3       	jnz %d15,8000f764 <__fixdfsi+0x1c>
8000f780:	09 a4 58 09 	ld.d %e4,[%sp]24
8000f784:	8b c6 03 61 	rsub %d6,%d6,60
8000f788:	6d ff ca e0 	call 8000b91c <__lshrdi3>
8000f78c:	58 04       	ld.w %d15,[%sp]16
8000f78e:	8b 02 00 41 	rsub %d4,%d2,0
8000f792:	2a 42       	cmov %d2,%d15,%d4
8000f794:	00 90       	ret 

8000f796 <__udivdi3>:
8000f796:	0f 67 a0 20 	or %d2,%d7,%d6
8000f79a:	0b 45 10 a8 	mov %e10,%d5,%d4
8000f79e:	02 6f       	mov %d15,%d6
8000f7a0:	02 7c       	mov %d12,%d7
8000f7a2:	d2 f8       	mov %e8,-1
8000f7a4:	df 02 46 00 	jeq %d2,0,8000f830 <__udivdi3+0x9a>
8000f7a8:	8f 07 40 21 	or %d2,%d7,0
8000f7ac:	f6 2d       	jnz %d2,8000f7c6 <__udivdi3+0x30>
8000f7ae:	4b 6b 11 82 	div.u %e8,%d11,%d6
8000f7b2:	d2 04       	mov %e4,0
8000f7b4:	02 a4       	mov %d4,%d10
8000f7b6:	42 95       	add %d5,%d9
8000f7b8:	6d 00 a5 00 	call 8000f902 <__udiv6432>
8000f7bc:	82 04       	mov %d4,0
8000f7be:	02 85       	mov %d5,%d8
8000f7c0:	13 12 40 84 	madd.u %e8,%e4,%d2,1
8000f7c4:	3c 36       	j 8000f830 <__udivdi3+0x9a>
8000f7c6:	0b 7b 00 21 	eq %d2,%d11,%d7
8000f7ca:	0b 64 30 22 	and.lt.u %d2,%d4,%d6
8000f7ce:	0b 7b a0 22 	or.lt.u %d2,%d11,%d7
8000f7d2:	d2 08       	mov %e8,0
8000f7d4:	df 02 2e 80 	jne %d2,0,8000f830 <__udivdi3+0x9a>
8000f7d8:	77 4b 80 5f 	dextr %d5,%d11,%d4,31
8000f7dc:	0f 07 b0 d1 	clz %d13,%d7
8000f7e0:	60 5f       	mov.a %a15,%d5
8000f7e2:	0b 67 10 48 	mov %e4,%d7,%d6
8000f7e6:	02 d6       	mov %d6,%d13
8000f7e8:	6d ff be e3 	call 8000bf64 <__ashldi3>
8000f7ec:	8f fb 1f e0 	sh %d14,%d11,-1
8000f7f0:	80 f4       	mov.d %d4,%a15
8000f7f2:	02 36       	mov %d6,%d3
8000f7f4:	02 e5       	mov %d5,%d14
8000f7f6:	6d 00 86 00 	call 8000f902 <__udiv6432>
8000f7fa:	8b fd 01 d1 	rsub %d13,%d13,31
8000f7fe:	8b 0d 00 31 	rsub %d3,%d13,0
8000f802:	0f 32 00 30 	sh %d3,%d2,%d3
8000f806:	02 32       	mov %d2,%d3
8000f808:	8b f2 9f 80 	addx %d8,%d2,-1
8000f80c:	23 f8 68 aa 	msub.u %e10,%e10,%d8,%d15
8000f810:	82 03       	mov %d3,0
8000f812:	8b f3 bf 90 	addc %d9,%d3,-1
8000f816:	23 c8 0a bb 	msub %d11,%d11,%d8,%d12
8000f81a:	23 f9 0a bb 	msub %d11,%d11,%d9,%d15
8000f81e:	0b cb 00 41 	eq %d4,%d11,%d12
8000f822:	0b fa 30 42 	and.lt.u %d4,%d10,%d15
8000f826:	0b cb a0 42 	or.lt.u %d4,%d11,%d12
8000f82a:	f6 43       	jnz %d4,8000f830 <__udivdi3+0x9a>
8000f82c:	0b 23 10 88 	mov %e8,%d3,%d2
8000f830:	0b 89 10 28 	mov %e2,%d9,%d8
8000f834:	00 90       	ret 

8000f836 <__umoddi3>:
8000f836:	0f 67 a0 90 	or %d9,%d7,%d6
8000f83a:	02 6f       	mov %d15,%d6
8000f83c:	d2 00       	mov %e0,0
8000f83e:	76 9c       	jz %d9,8000f856 <__umoddi3+0x20>
8000f840:	02 7a       	mov %d10,%d7
8000f842:	0b 45 10 88 	mov %e8,%d5,%d4
8000f846:	6d ff a8 ff 	call 8000f796 <__udivdi3>
8000f84a:	23 f2 68 08 	msub.u %e0,%e8,%d2,%d15
8000f84e:	23 a2 0a 11 	msub %d1,%d1,%d2,%d10
8000f852:	23 f3 0a 11 	msub %d1,%d1,%d3,%d15
8000f856:	0b 01 10 28 	mov %e2,%d1,%d0
8000f85a:	00 90       	ret 

8000f85c <__fpcmp_parts_d>:
8000f85c:	14 43       	ld.bu %d3,[%a4]
8000f85e:	82 12       	mov %d2,1
8000f860:	bf 23 50 80 	jlt.u %d3,2,8000f900 <__fpcmp_parts_d+0xa4>
8000f864:	0c 50       	ld.bu %d15,[%a5]0
8000f866:	bf 2f 4d 80 	jlt.u %d15,2,8000f900 <__fpcmp_parts_d+0xa4>
8000f86a:	8b 43 00 42 	eq %d4,%d3,4
8000f86e:	8b 4f 00 22 	eq %d2,%d15,4
8000f872:	0f 24 80 50 	and %d5,%d4,%d2
8000f876:	76 56       	jz %d5,8000f882 <__fpcmp_parts_d+0x26>
8000f878:	19 52 04 00 	ld.w %d2,[%a5]4
8000f87c:	4c 41       	ld.w %d15,[%a4]4
8000f87e:	a2 f2       	sub %d2,%d15
8000f880:	00 90       	ret 
8000f882:	76 47       	jz %d4,8000f890 <__fpcmp_parts_d+0x34>
8000f884:	19 42 04 00 	ld.w %d2,[%a4]4
8000f888:	82 1f       	mov %d15,1
8000f88a:	ab ff bf 22 	seln %d2,%d2,%d15,-1
8000f88e:	00 90       	ret 
8000f890:	76 27       	jz %d2,8000f89e <__fpcmp_parts_d+0x42>
8000f892:	19 52 04 00 	ld.w %d2,[%a5]4
8000f896:	82 ff       	mov %d15,-1
8000f898:	ab 1f a0 22 	seln %d2,%d2,%d15,1
8000f89c:	00 90       	ret 
8000f89e:	df 23 06 80 	jne %d3,2,8000f8aa <__fpcmp_parts_d+0x4e>
8000f8a2:	82 02       	mov %d2,0
8000f8a4:	df 2f f7 ff 	jne %d15,2,8000f892 <__fpcmp_parts_d+0x36>
8000f8a8:	00 90       	ret 
8000f8aa:	df 2f ed 7f 	jeq %d15,2,8000f884 <__fpcmp_parts_d+0x28>
8000f8ae:	19 45 04 00 	ld.w %d5,[%a4]4
8000f8b2:	4c 51       	ld.w %d15,[%a5]4
8000f8b4:	5f f5 19 80 	jne %d5,%d15,8000f8e6 <__fpcmp_parts_d+0x8a>
8000f8b8:	19 42 08 00 	ld.w %d2,[%a4]8
8000f8bc:	4c 52       	ld.w %d15,[%a5]8
8000f8be:	3f 2f 14 00 	jlt %d15,%d2,8000f8e6 <__fpcmp_parts_d+0x8a>
8000f8c2:	3f f2 1c 00 	jlt %d2,%d15,8000f8fa <__fpcmp_parts_d+0x9e>
8000f8c6:	19 43 10 00 	ld.w %d3,[%a4]16
8000f8ca:	19 54 10 00 	ld.w %d4,[%a5]16
8000f8ce:	19 47 0c 00 	ld.w %d7,[%a4]12
8000f8d2:	19 56 0c 00 	ld.w %d6,[%a5]12
8000f8d6:	0b 43 00 21 	eq %d2,%d3,%d4
8000f8da:	0b 76 50 22 	and.ge.u %d2,%d6,%d7
8000f8de:	0b 43 a0 22 	or.lt.u %d2,%d3,%d4
8000f8e2:	3a 43       	eq %d15,%d3,%d4
8000f8e4:	f6 25       	jnz %d2,8000f8ee <__fpcmp_parts_d+0x92>
8000f8e6:	82 12       	mov %d2,1
8000f8e8:	ab f2 bf 25 	seln %d2,%d5,%d2,-1
8000f8ec:	00 90       	ret 
8000f8ee:	0b 67 50 f2 	and.ge.u %d15,%d7,%d6
8000f8f2:	0b 34 a0 f2 	or.lt.u %d15,%d4,%d3
8000f8f6:	82 02       	mov %d2,0
8000f8f8:	ee 04       	jnz %d15,8000f900 <__fpcmp_parts_d+0xa4>
8000f8fa:	82 f2       	mov %d2,-1
8000f8fc:	ab 12 a0 25 	seln %d2,%d5,%d2,1
8000f900:	00 90       	ret 

8000f902 <__udiv6432>:
8000f902:	02 53       	mov %d3,%d5
8000f904:	82 f2       	mov %d2,-1
8000f906:	7f 65 4b 80 	jge.u %d5,%d6,8000f99c <__udiv6432+0x9a>
8000f90a:	0f 06 b0 21 	clz %d2,%d6
8000f90e:	0f 26 00 60 	sh %d6,%d6,%d2
8000f912:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000f916:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000f91a:	8f 06 1f 70 	sh %d7,%d6,-16
8000f91e:	4b 73 11 02 	div.u %e0,%d3,%d7
8000f922:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000f926:	0f 24 00 20 	sh %d2,%d4,%d2
8000f92a:	02 05       	mov %d5,%d0
8000f92c:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000f930:	e2 80       	mul %d0,%d8
8000f932:	8f 02 1f b0 	sh %d11,%d2,-16
8000f936:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000f93a:	82 0c       	mov %d12,0
8000f93c:	7b 10 00 90 	movh %d9,1
8000f940:	7f 95 09 80 	jge.u %d5,%d9,8000f952 <__udiv6432+0x50>
8000f944:	8f 01 01 f0 	sh %d15,%d1,16
8000f948:	0b 0c 00 a0 	add %d10,%d12,%d0
8000f94c:	42 bf       	add %d15,%d11
8000f94e:	7f af 07 80 	jge.u %d15,%d10,8000f95c <__udiv6432+0x5a>
8000f952:	42 71       	add %d1,%d7
8000f954:	c2 f5       	add %d5,-1
8000f956:	a2 8c       	sub %d12,%d8
8000f958:	3f 91 f4 ff 	jlt.u %d1,%d9,8000f940 <__udiv6432+0x3e>
8000f95c:	8f 03 01 30 	sh %d3,%d3,16
8000f960:	42 3b       	add %d11,%d3
8000f962:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000f966:	82 0a       	mov %d10,0
8000f968:	4b 76 11 02 	div.u %e0,%d6,%d7
8000f96c:	7b 10 00 10 	movh %d1,1
8000f970:	02 03       	mov %d3,%d0
8000f972:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000f976:	e2 80       	mul %d0,%d8
8000f978:	7f 13 09 80 	jge.u %d3,%d1,8000f98a <__udiv6432+0x88>
8000f97c:	8f 06 01 f0 	sh %d15,%d6,16
8000f980:	0b 0a 00 90 	add %d9,%d10,%d0
8000f984:	42 2f       	add %d15,%d2
8000f986:	7f 9f 07 80 	jge.u %d15,%d9,8000f994 <__udiv6432+0x92>
8000f98a:	42 76       	add %d6,%d7
8000f98c:	c2 f3       	add %d3,-1
8000f98e:	a2 8a       	sub %d10,%d8
8000f990:	3f 16 f4 ff 	jlt.u %d6,%d1,8000f978 <__udiv6432+0x76>
8000f994:	8f 05 01 50 	sh %d5,%d5,16
8000f998:	0b 53 00 20 	add %d2,%d3,%d5
8000f99c:	00 90       	ret 
	...

Disassembly of section .inttab_cpu1:

80010000 <__INTTAB1>:
	...

80010020 <osEE_tc_core1_isr2_entry_1>:
80010020:	0d 00 00 02 	svlcx 
80010024:	82 f4       	mov %d4,-1
80010026:	1d ff e8 ca 	j 800095f6 <osEE_tc_isr2_wrapper>
	...

80010040 <osEE_tc_core1_isr_dummy_entry_2>:
80010040:	3c 00       	j 80010040 <osEE_tc_core1_isr_dummy_entry_2>
	...

80010060 <osEE_tc_core1_isr_dummy_entry_3>:
80010060:	3c 00       	j 80010060 <osEE_tc_core1_isr_dummy_entry_3>
	...

80010080 <osEE_tc_core1_isr_dummy_entry_4>:
80010080:	3c 00       	j 80010080 <osEE_tc_core1_isr_dummy_entry_4>
	...

800100a0 <osEE_tc_core1_isr_dummy_entry_5>:
800100a0:	3c 00       	j 800100a0 <osEE_tc_core1_isr_dummy_entry_5>
	...

800100c0 <osEE_tc_core1_isr_dummy_entry_6>:
800100c0:	3c 00       	j 800100c0 <osEE_tc_core1_isr_dummy_entry_6>
	...

800100e0 <osEE_tc_core1_isr_dummy_entry_7>:
800100e0:	3c 00       	j 800100e0 <osEE_tc_core1_isr_dummy_entry_7>
	...

80010100 <osEE_tc_core1_isr_dummy_entry_8>:
80010100:	3c 00       	j 80010100 <osEE_tc_core1_isr_dummy_entry_8>
	...

80010120 <osEE_tc_core1_isr_dummy_entry_9>:
80010120:	3c 00       	j 80010120 <osEE_tc_core1_isr_dummy_entry_9>
	...

80010140 <osEE_tc_core1_isr_dummy_entry_10>:
80010140:	3c 00       	j 80010140 <osEE_tc_core1_isr_dummy_entry_10>
	...

80010160 <osEE_tc_core1_isr_dummy_entry_11>:
80010160:	3c 00       	j 80010160 <osEE_tc_core1_isr_dummy_entry_11>
	...

80010180 <osEE_tc_core1_isr_dummy_entry_12>:
80010180:	3c 00       	j 80010180 <osEE_tc_core1_isr_dummy_entry_12>
	...

800101a0 <osEE_tc_core1_isr_dummy_entry_13>:
800101a0:	3c 00       	j 800101a0 <osEE_tc_core1_isr_dummy_entry_13>
	...

800101c0 <osEE_tc_core1_isr_dummy_entry_14>:
800101c0:	3c 00       	j 800101c0 <osEE_tc_core1_isr_dummy_entry_14>
	...

800101e0 <osEE_tc_core1_isr_dummy_entry_15>:
800101e0:	3c 00       	j 800101e0 <osEE_tc_core1_isr_dummy_entry_15>
	...

80010200 <osEE_tc_core1_isr_dummy_entry_16>:
80010200:	3c 00       	j 80010200 <osEE_tc_core1_isr_dummy_entry_16>
	...

80010220 <osEE_tc_core1_isr_dummy_entry_17>:
80010220:	3c 00       	j 80010220 <osEE_tc_core1_isr_dummy_entry_17>
	...

80010240 <osEE_tc_core1_isr_dummy_entry_18>:
80010240:	3c 00       	j 80010240 <osEE_tc_core1_isr_dummy_entry_18>
	...

80010260 <osEE_tc_core1_isr_dummy_entry_19>:
80010260:	3c 00       	j 80010260 <osEE_tc_core1_isr_dummy_entry_19>
	...

80010280 <osEE_tc_core1_isr_dummy_entry_20>:
80010280:	3c 00       	j 80010280 <osEE_tc_core1_isr_dummy_entry_20>
	...

800102a0 <osEE_tc_core1_isr_dummy_entry_21>:
800102a0:	3c 00       	j 800102a0 <osEE_tc_core1_isr_dummy_entry_21>
	...

800102c0 <osEE_tc_core1_isr_dummy_entry_22>:
800102c0:	3c 00       	j 800102c0 <osEE_tc_core1_isr_dummy_entry_22>
	...

800102e0 <osEE_tc_core1_isr_dummy_entry_23>:
800102e0:	3c 00       	j 800102e0 <osEE_tc_core1_isr_dummy_entry_23>
	...

80010300 <osEE_tc_core1_isr_dummy_entry_24>:
80010300:	3c 00       	j 80010300 <osEE_tc_core1_isr_dummy_entry_24>
	...

80010320 <osEE_tc_core1_isr_dummy_entry_25>:
80010320:	3c 00       	j 80010320 <osEE_tc_core1_isr_dummy_entry_25>
	...

80010340 <osEE_tc_core1_isr_dummy_entry_26>:
80010340:	3c 00       	j 80010340 <osEE_tc_core1_isr_dummy_entry_26>
	...

80010360 <osEE_tc_core1_isr_dummy_entry_27>:
80010360:	3c 00       	j 80010360 <osEE_tc_core1_isr_dummy_entry_27>
	...

80010380 <osEE_tc_core1_isr_dummy_entry_28>:
80010380:	3c 00       	j 80010380 <osEE_tc_core1_isr_dummy_entry_28>
	...

800103a0 <osEE_tc_core1_isr_dummy_entry_29>:
800103a0:	3c 00       	j 800103a0 <osEE_tc_core1_isr_dummy_entry_29>
	...

800103c0 <osEE_tc_core1_isr_dummy_entry_30>:
800103c0:	3c 00       	j 800103c0 <osEE_tc_core1_isr_dummy_entry_30>
	...

800103e0 <osEE_tc_core1_isr_dummy_entry_31>:
800103e0:	3c 00       	j 800103e0 <osEE_tc_core1_isr_dummy_entry_31>
	...

80010400 <osEE_tc_core1_isr_dummy_entry_32>:
80010400:	3c 00       	j 80010400 <osEE_tc_core1_isr_dummy_entry_32>
	...

80010420 <osEE_tc_core1_isr_dummy_entry_33>:
80010420:	3c 00       	j 80010420 <osEE_tc_core1_isr_dummy_entry_33>
	...

80010440 <osEE_tc_core1_isr_dummy_entry_34>:
80010440:	3c 00       	j 80010440 <osEE_tc_core1_isr_dummy_entry_34>
	...

80010460 <osEE_tc_core1_isr_dummy_entry_35>:
80010460:	3c 00       	j 80010460 <osEE_tc_core1_isr_dummy_entry_35>
	...

80010480 <osEE_tc_core1_isr_dummy_entry_36>:
80010480:	3c 00       	j 80010480 <osEE_tc_core1_isr_dummy_entry_36>
	...

800104a0 <osEE_tc_core1_isr_dummy_entry_37>:
800104a0:	3c 00       	j 800104a0 <osEE_tc_core1_isr_dummy_entry_37>
	...

800104c0 <osEE_tc_core1_isr_dummy_entry_38>:
800104c0:	3c 00       	j 800104c0 <osEE_tc_core1_isr_dummy_entry_38>
	...

800104e0 <osEE_tc_core1_isr_dummy_entry_39>:
800104e0:	3c 00       	j 800104e0 <osEE_tc_core1_isr_dummy_entry_39>
	...

80010500 <osEE_tc_core1_isr_dummy_entry_40>:
80010500:	3c 00       	j 80010500 <osEE_tc_core1_isr_dummy_entry_40>
	...

80010520 <osEE_tc_core1_isr_dummy_entry_41>:
80010520:	3c 00       	j 80010520 <osEE_tc_core1_isr_dummy_entry_41>
	...

80010540 <osEE_tc_core1_isr_dummy_entry_42>:
80010540:	3c 00       	j 80010540 <osEE_tc_core1_isr_dummy_entry_42>
	...

80010560 <osEE_tc_core1_isr_dummy_entry_43>:
80010560:	3c 00       	j 80010560 <osEE_tc_core1_isr_dummy_entry_43>
	...

80010580 <osEE_tc_core1_isr_dummy_entry_44>:
80010580:	3c 00       	j 80010580 <osEE_tc_core1_isr_dummy_entry_44>
	...

800105a0 <osEE_tc_core1_isr_dummy_entry_45>:
800105a0:	3c 00       	j 800105a0 <osEE_tc_core1_isr_dummy_entry_45>
	...

800105c0 <osEE_tc_core1_isr_dummy_entry_46>:
800105c0:	3c 00       	j 800105c0 <osEE_tc_core1_isr_dummy_entry_46>
	...

800105e0 <osEE_tc_core1_isr_dummy_entry_47>:
800105e0:	3c 00       	j 800105e0 <osEE_tc_core1_isr_dummy_entry_47>
	...

80010600 <osEE_tc_core1_isr_dummy_entry_48>:
80010600:	3c 00       	j 80010600 <osEE_tc_core1_isr_dummy_entry_48>
	...

80010620 <osEE_tc_core1_isr_dummy_entry_49>:
80010620:	3c 00       	j 80010620 <osEE_tc_core1_isr_dummy_entry_49>
	...

80010640 <osEE_tc_core1_isr_dummy_entry_50>:
80010640:	3c 00       	j 80010640 <osEE_tc_core1_isr_dummy_entry_50>
	...

80010660 <osEE_tc_core1_isr_dummy_entry_51>:
80010660:	3c 00       	j 80010660 <osEE_tc_core1_isr_dummy_entry_51>
	...

80010680 <osEE_tc_core1_isr_dummy_entry_52>:
80010680:	3c 00       	j 80010680 <osEE_tc_core1_isr_dummy_entry_52>
	...

800106a0 <osEE_tc_core1_isr_dummy_entry_53>:
800106a0:	3c 00       	j 800106a0 <osEE_tc_core1_isr_dummy_entry_53>
	...

800106c0 <osEE_tc_core1_isr_dummy_entry_54>:
800106c0:	3c 00       	j 800106c0 <osEE_tc_core1_isr_dummy_entry_54>
	...

800106e0 <osEE_tc_core1_isr_dummy_entry_55>:
800106e0:	3c 00       	j 800106e0 <osEE_tc_core1_isr_dummy_entry_55>
	...

80010700 <osEE_tc_core1_isr_dummy_entry_56>:
80010700:	3c 00       	j 80010700 <osEE_tc_core1_isr_dummy_entry_56>
	...

80010720 <osEE_tc_core1_isr_dummy_entry_57>:
80010720:	3c 00       	j 80010720 <osEE_tc_core1_isr_dummy_entry_57>
	...

80010740 <osEE_tc_core1_isr_dummy_entry_58>:
80010740:	3c 00       	j 80010740 <osEE_tc_core1_isr_dummy_entry_58>
	...

80010760 <osEE_tc_core1_isr_dummy_entry_59>:
80010760:	3c 00       	j 80010760 <osEE_tc_core1_isr_dummy_entry_59>
	...

80010780 <osEE_tc_core1_isr_dummy_entry_60>:
80010780:	3c 00       	j 80010780 <osEE_tc_core1_isr_dummy_entry_60>
	...

800107a0 <osEE_tc_core1_isr_dummy_entry_61>:
800107a0:	3c 00       	j 800107a0 <osEE_tc_core1_isr_dummy_entry_61>
	...

800107c0 <osEE_tc_core1_isr_dummy_entry_62>:
800107c0:	3c 00       	j 800107c0 <osEE_tc_core1_isr_dummy_entry_62>
	...

800107e0 <osEE_tc_core1_isr_dummy_entry_63>:
800107e0:	3c 00       	j 800107e0 <osEE_tc_core1_isr_dummy_entry_63>
	...

80010800 <osEE_tc_core1_isr_dummy_entry_64>:
80010800:	3c 00       	j 80010800 <osEE_tc_core1_isr_dummy_entry_64>
	...

80010820 <osEE_tc_core1_isr_dummy_entry_65>:
80010820:	3c 00       	j 80010820 <osEE_tc_core1_isr_dummy_entry_65>
	...

80010840 <osEE_tc_core1_isr_dummy_entry_66>:
80010840:	3c 00       	j 80010840 <osEE_tc_core1_isr_dummy_entry_66>
	...

80010860 <osEE_tc_core1_isr_dummy_entry_67>:
80010860:	3c 00       	j 80010860 <osEE_tc_core1_isr_dummy_entry_67>
	...

80010880 <osEE_tc_core1_isr_dummy_entry_68>:
80010880:	3c 00       	j 80010880 <osEE_tc_core1_isr_dummy_entry_68>
	...

800108a0 <osEE_tc_core1_isr_dummy_entry_69>:
800108a0:	3c 00       	j 800108a0 <osEE_tc_core1_isr_dummy_entry_69>
	...

800108c0 <osEE_tc_core1_isr_dummy_entry_70>:
800108c0:	3c 00       	j 800108c0 <osEE_tc_core1_isr_dummy_entry_70>
	...

800108e0 <osEE_tc_core1_isr_dummy_entry_71>:
800108e0:	3c 00       	j 800108e0 <osEE_tc_core1_isr_dummy_entry_71>
	...

80010900 <osEE_tc_core1_isr_dummy_entry_72>:
80010900:	3c 00       	j 80010900 <osEE_tc_core1_isr_dummy_entry_72>
	...

80010920 <osEE_tc_core1_isr_dummy_entry_73>:
80010920:	3c 00       	j 80010920 <osEE_tc_core1_isr_dummy_entry_73>
	...

80010940 <osEE_tc_core1_isr_dummy_entry_74>:
80010940:	3c 00       	j 80010940 <osEE_tc_core1_isr_dummy_entry_74>
	...

80010960 <osEE_tc_core1_isr_dummy_entry_75>:
80010960:	3c 00       	j 80010960 <osEE_tc_core1_isr_dummy_entry_75>
	...

80010980 <osEE_tc_core1_isr_dummy_entry_76>:
80010980:	3c 00       	j 80010980 <osEE_tc_core1_isr_dummy_entry_76>
	...

800109a0 <osEE_tc_core1_isr_dummy_entry_77>:
800109a0:	3c 00       	j 800109a0 <osEE_tc_core1_isr_dummy_entry_77>
	...

800109c0 <osEE_tc_core1_isr_dummy_entry_78>:
800109c0:	3c 00       	j 800109c0 <osEE_tc_core1_isr_dummy_entry_78>
	...

800109e0 <osEE_tc_core1_isr_dummy_entry_79>:
800109e0:	3c 00       	j 800109e0 <osEE_tc_core1_isr_dummy_entry_79>
	...

80010a00 <osEE_tc_core1_isr_dummy_entry_80>:
80010a00:	3c 00       	j 80010a00 <osEE_tc_core1_isr_dummy_entry_80>
	...

80010a20 <osEE_tc_core1_isr_dummy_entry_81>:
80010a20:	3c 00       	j 80010a20 <osEE_tc_core1_isr_dummy_entry_81>
	...

80010a40 <osEE_tc_core1_isr_dummy_entry_82>:
80010a40:	3c 00       	j 80010a40 <osEE_tc_core1_isr_dummy_entry_82>
	...

80010a60 <osEE_tc_core1_isr_dummy_entry_83>:
80010a60:	3c 00       	j 80010a60 <osEE_tc_core1_isr_dummy_entry_83>
	...

80010a80 <osEE_tc_core1_isr_dummy_entry_84>:
80010a80:	3c 00       	j 80010a80 <osEE_tc_core1_isr_dummy_entry_84>
	...

80010aa0 <osEE_tc_core1_isr_dummy_entry_85>:
80010aa0:	3c 00       	j 80010aa0 <osEE_tc_core1_isr_dummy_entry_85>
	...

80010ac0 <osEE_tc_core1_isr_dummy_entry_86>:
80010ac0:	3c 00       	j 80010ac0 <osEE_tc_core1_isr_dummy_entry_86>
	...

80010ae0 <osEE_tc_core1_isr_dummy_entry_87>:
80010ae0:	3c 00       	j 80010ae0 <osEE_tc_core1_isr_dummy_entry_87>
	...

80010b00 <osEE_tc_core1_isr_dummy_entry_88>:
80010b00:	3c 00       	j 80010b00 <osEE_tc_core1_isr_dummy_entry_88>
	...

80010b20 <osEE_tc_core1_isr_dummy_entry_89>:
80010b20:	3c 00       	j 80010b20 <osEE_tc_core1_isr_dummy_entry_89>
	...

80010b40 <osEE_tc_core1_isr_dummy_entry_90>:
80010b40:	3c 00       	j 80010b40 <osEE_tc_core1_isr_dummy_entry_90>
	...

80010b60 <osEE_tc_core1_isr_dummy_entry_91>:
80010b60:	3c 00       	j 80010b60 <osEE_tc_core1_isr_dummy_entry_91>
	...

80010b80 <osEE_tc_core1_isr_dummy_entry_92>:
80010b80:	3c 00       	j 80010b80 <osEE_tc_core1_isr_dummy_entry_92>
	...

80010ba0 <osEE_tc_core1_isr_dummy_entry_93>:
80010ba0:	3c 00       	j 80010ba0 <osEE_tc_core1_isr_dummy_entry_93>
	...

80010bc0 <osEE_tc_core1_isr_dummy_entry_94>:
80010bc0:	3c 00       	j 80010bc0 <osEE_tc_core1_isr_dummy_entry_94>
	...

80010be0 <osEE_tc_core1_isr_dummy_entry_95>:
80010be0:	3c 00       	j 80010be0 <osEE_tc_core1_isr_dummy_entry_95>
	...

80010c00 <osEE_tc_core1_isr_dummy_entry_96>:
80010c00:	3c 00       	j 80010c00 <osEE_tc_core1_isr_dummy_entry_96>
	...

80010c20 <osEE_tc_core1_isr_dummy_entry_97>:
80010c20:	3c 00       	j 80010c20 <osEE_tc_core1_isr_dummy_entry_97>
	...

80010c40 <osEE_tc_core1_isr_dummy_entry_98>:
80010c40:	3c 00       	j 80010c40 <osEE_tc_core1_isr_dummy_entry_98>
	...

80010c60 <osEE_tc_core1_isr_dummy_entry_99>:
80010c60:	3c 00       	j 80010c60 <osEE_tc_core1_isr_dummy_entry_99>
	...

80010c80 <osEE_tc_core1_isr_dummy_entry_100>:
80010c80:	3c 00       	j 80010c80 <osEE_tc_core1_isr_dummy_entry_100>
	...

80010ca0 <osEE_tc_core1_isr_dummy_entry_101>:
80010ca0:	3c 00       	j 80010ca0 <osEE_tc_core1_isr_dummy_entry_101>
	...

80010cc0 <osEE_tc_core1_isr_dummy_entry_102>:
80010cc0:	3c 00       	j 80010cc0 <osEE_tc_core1_isr_dummy_entry_102>
	...

80010ce0 <osEE_tc_core1_isr_dummy_entry_103>:
80010ce0:	3c 00       	j 80010ce0 <osEE_tc_core1_isr_dummy_entry_103>
	...

80010d00 <osEE_tc_core1_isr_dummy_entry_104>:
80010d00:	3c 00       	j 80010d00 <osEE_tc_core1_isr_dummy_entry_104>
	...

80010d20 <osEE_tc_core1_isr_dummy_entry_105>:
80010d20:	3c 00       	j 80010d20 <osEE_tc_core1_isr_dummy_entry_105>
	...

80010d40 <osEE_tc_core1_isr_dummy_entry_106>:
80010d40:	3c 00       	j 80010d40 <osEE_tc_core1_isr_dummy_entry_106>
	...

80010d60 <osEE_tc_core1_isr_dummy_entry_107>:
80010d60:	3c 00       	j 80010d60 <osEE_tc_core1_isr_dummy_entry_107>
	...

80010d80 <osEE_tc_core1_isr_dummy_entry_108>:
80010d80:	3c 00       	j 80010d80 <osEE_tc_core1_isr_dummy_entry_108>
	...

80010da0 <osEE_tc_core1_isr_dummy_entry_109>:
80010da0:	3c 00       	j 80010da0 <osEE_tc_core1_isr_dummy_entry_109>
	...

80010dc0 <osEE_tc_core1_isr_dummy_entry_110>:
80010dc0:	3c 00       	j 80010dc0 <osEE_tc_core1_isr_dummy_entry_110>
	...

80010de0 <osEE_tc_core1_isr_dummy_entry_111>:
80010de0:	3c 00       	j 80010de0 <osEE_tc_core1_isr_dummy_entry_111>
	...

80010e00 <osEE_tc_core1_isr_dummy_entry_112>:
80010e00:	3c 00       	j 80010e00 <osEE_tc_core1_isr_dummy_entry_112>
	...

80010e20 <osEE_tc_core1_isr_dummy_entry_113>:
80010e20:	3c 00       	j 80010e20 <osEE_tc_core1_isr_dummy_entry_113>
	...

80010e40 <osEE_tc_core1_isr_dummy_entry_114>:
80010e40:	3c 00       	j 80010e40 <osEE_tc_core1_isr_dummy_entry_114>
	...

80010e60 <osEE_tc_core1_isr_dummy_entry_115>:
80010e60:	3c 00       	j 80010e60 <osEE_tc_core1_isr_dummy_entry_115>
	...

80010e80 <osEE_tc_core1_isr_dummy_entry_116>:
80010e80:	3c 00       	j 80010e80 <osEE_tc_core1_isr_dummy_entry_116>
	...

80010ea0 <osEE_tc_core1_isr_dummy_entry_117>:
80010ea0:	3c 00       	j 80010ea0 <osEE_tc_core1_isr_dummy_entry_117>
	...

80010ec0 <osEE_tc_core1_isr_dummy_entry_118>:
80010ec0:	3c 00       	j 80010ec0 <osEE_tc_core1_isr_dummy_entry_118>
	...

80010ee0 <osEE_tc_core1_isr_dummy_entry_119>:
80010ee0:	3c 00       	j 80010ee0 <osEE_tc_core1_isr_dummy_entry_119>
	...

80010f00 <osEE_tc_core1_isr_dummy_entry_120>:
80010f00:	3c 00       	j 80010f00 <osEE_tc_core1_isr_dummy_entry_120>
	...

80010f20 <osEE_tc_core1_isr_dummy_entry_121>:
80010f20:	3c 00       	j 80010f20 <osEE_tc_core1_isr_dummy_entry_121>
	...

80010f40 <osEE_tc_core1_isr_dummy_entry_122>:
80010f40:	3c 00       	j 80010f40 <osEE_tc_core1_isr_dummy_entry_122>
	...

80010f60 <osEE_tc_core1_isr_dummy_entry_123>:
80010f60:	3c 00       	j 80010f60 <osEE_tc_core1_isr_dummy_entry_123>
	...

80010f80 <osEE_tc_core1_isr_dummy_entry_124>:
80010f80:	3c 00       	j 80010f80 <osEE_tc_core1_isr_dummy_entry_124>
	...

80010fa0 <osEE_tc_core1_isr_dummy_entry_125>:
80010fa0:	3c 00       	j 80010fa0 <osEE_tc_core1_isr_dummy_entry_125>
	...

80010fc0 <osEE_tc_core1_isr_dummy_entry_126>:
80010fc0:	3c 00       	j 80010fc0 <osEE_tc_core1_isr_dummy_entry_126>
	...

80010fe0 <osEE_tc_core1_isr_dummy_entry_127>:
80010fe0:	3c 00       	j 80010fe0 <osEE_tc_core1_isr_dummy_entry_127>
	...

80011000 <osEE_tc_core1_isr_dummy_entry_128>:
80011000:	3c 00       	j 80011000 <osEE_tc_core1_isr_dummy_entry_128>
	...

80011020 <osEE_tc_core1_isr_dummy_entry_129>:
80011020:	3c 00       	j 80011020 <osEE_tc_core1_isr_dummy_entry_129>
	...

80011040 <osEE_tc_core1_isr_dummy_entry_130>:
80011040:	3c 00       	j 80011040 <osEE_tc_core1_isr_dummy_entry_130>
	...

80011060 <osEE_tc_core1_isr_dummy_entry_131>:
80011060:	3c 00       	j 80011060 <osEE_tc_core1_isr_dummy_entry_131>
	...

80011080 <osEE_tc_core1_isr_dummy_entry_132>:
80011080:	3c 00       	j 80011080 <osEE_tc_core1_isr_dummy_entry_132>
	...

800110a0 <osEE_tc_core1_isr_dummy_entry_133>:
800110a0:	3c 00       	j 800110a0 <osEE_tc_core1_isr_dummy_entry_133>
	...

800110c0 <osEE_tc_core1_isr_dummy_entry_134>:
800110c0:	3c 00       	j 800110c0 <osEE_tc_core1_isr_dummy_entry_134>
	...

800110e0 <osEE_tc_core1_isr_dummy_entry_135>:
800110e0:	3c 00       	j 800110e0 <osEE_tc_core1_isr_dummy_entry_135>
	...

80011100 <osEE_tc_core1_isr_dummy_entry_136>:
80011100:	3c 00       	j 80011100 <osEE_tc_core1_isr_dummy_entry_136>
	...

80011120 <osEE_tc_core1_isr_dummy_entry_137>:
80011120:	3c 00       	j 80011120 <osEE_tc_core1_isr_dummy_entry_137>
	...

80011140 <osEE_tc_core1_isr_dummy_entry_138>:
80011140:	3c 00       	j 80011140 <osEE_tc_core1_isr_dummy_entry_138>
	...

80011160 <osEE_tc_core1_isr_dummy_entry_139>:
80011160:	3c 00       	j 80011160 <osEE_tc_core1_isr_dummy_entry_139>
	...

80011180 <osEE_tc_core1_isr_dummy_entry_140>:
80011180:	3c 00       	j 80011180 <osEE_tc_core1_isr_dummy_entry_140>
	...

800111a0 <osEE_tc_core1_isr_dummy_entry_141>:
800111a0:	3c 00       	j 800111a0 <osEE_tc_core1_isr_dummy_entry_141>
	...

800111c0 <osEE_tc_core1_isr_dummy_entry_142>:
800111c0:	3c 00       	j 800111c0 <osEE_tc_core1_isr_dummy_entry_142>
	...

800111e0 <osEE_tc_core1_isr_dummy_entry_143>:
800111e0:	3c 00       	j 800111e0 <osEE_tc_core1_isr_dummy_entry_143>
	...

80011200 <osEE_tc_core1_isr_dummy_entry_144>:
80011200:	3c 00       	j 80011200 <osEE_tc_core1_isr_dummy_entry_144>
	...

80011220 <osEE_tc_core1_isr_dummy_entry_145>:
80011220:	3c 00       	j 80011220 <osEE_tc_core1_isr_dummy_entry_145>
	...

80011240 <osEE_tc_core1_isr_dummy_entry_146>:
80011240:	3c 00       	j 80011240 <osEE_tc_core1_isr_dummy_entry_146>
	...

80011260 <osEE_tc_core1_isr_dummy_entry_147>:
80011260:	3c 00       	j 80011260 <osEE_tc_core1_isr_dummy_entry_147>
	...

80011280 <osEE_tc_core1_isr_dummy_entry_148>:
80011280:	3c 00       	j 80011280 <osEE_tc_core1_isr_dummy_entry_148>
	...

800112a0 <osEE_tc_core1_isr_dummy_entry_149>:
800112a0:	3c 00       	j 800112a0 <osEE_tc_core1_isr_dummy_entry_149>
	...

800112c0 <osEE_tc_core1_isr_dummy_entry_150>:
800112c0:	3c 00       	j 800112c0 <osEE_tc_core1_isr_dummy_entry_150>
	...

800112e0 <osEE_tc_core1_isr_dummy_entry_151>:
800112e0:	3c 00       	j 800112e0 <osEE_tc_core1_isr_dummy_entry_151>
	...

80011300 <osEE_tc_core1_isr_dummy_entry_152>:
80011300:	3c 00       	j 80011300 <osEE_tc_core1_isr_dummy_entry_152>
	...

80011320 <osEE_tc_core1_isr_dummy_entry_153>:
80011320:	3c 00       	j 80011320 <osEE_tc_core1_isr_dummy_entry_153>
	...

80011340 <osEE_tc_core1_isr_dummy_entry_154>:
80011340:	3c 00       	j 80011340 <osEE_tc_core1_isr_dummy_entry_154>
	...

80011360 <osEE_tc_core1_isr_dummy_entry_155>:
80011360:	3c 00       	j 80011360 <osEE_tc_core1_isr_dummy_entry_155>
	...

80011380 <osEE_tc_core1_isr_dummy_entry_156>:
80011380:	3c 00       	j 80011380 <osEE_tc_core1_isr_dummy_entry_156>
	...

800113a0 <osEE_tc_core1_isr_dummy_entry_157>:
800113a0:	3c 00       	j 800113a0 <osEE_tc_core1_isr_dummy_entry_157>
	...

800113c0 <osEE_tc_core1_isr_dummy_entry_158>:
800113c0:	3c 00       	j 800113c0 <osEE_tc_core1_isr_dummy_entry_158>
	...

800113e0 <osEE_tc_core1_isr_dummy_entry_159>:
800113e0:	3c 00       	j 800113e0 <osEE_tc_core1_isr_dummy_entry_159>
	...

80011400 <osEE_tc_core1_isr_dummy_entry_160>:
80011400:	3c 00       	j 80011400 <osEE_tc_core1_isr_dummy_entry_160>
	...

80011420 <osEE_tc_core1_isr_dummy_entry_161>:
80011420:	3c 00       	j 80011420 <osEE_tc_core1_isr_dummy_entry_161>
	...

80011440 <osEE_tc_core1_isr_dummy_entry_162>:
80011440:	3c 00       	j 80011440 <osEE_tc_core1_isr_dummy_entry_162>
	...

80011460 <osEE_tc_core1_isr_dummy_entry_163>:
80011460:	3c 00       	j 80011460 <osEE_tc_core1_isr_dummy_entry_163>
	...

80011480 <osEE_tc_core1_isr_dummy_entry_164>:
80011480:	3c 00       	j 80011480 <osEE_tc_core1_isr_dummy_entry_164>
	...

800114a0 <osEE_tc_core1_isr_dummy_entry_165>:
800114a0:	3c 00       	j 800114a0 <osEE_tc_core1_isr_dummy_entry_165>
	...

800114c0 <osEE_tc_core1_isr_dummy_entry_166>:
800114c0:	3c 00       	j 800114c0 <osEE_tc_core1_isr_dummy_entry_166>
	...

800114e0 <osEE_tc_core1_isr_dummy_entry_167>:
800114e0:	3c 00       	j 800114e0 <osEE_tc_core1_isr_dummy_entry_167>
	...

80011500 <osEE_tc_core1_isr_dummy_entry_168>:
80011500:	3c 00       	j 80011500 <osEE_tc_core1_isr_dummy_entry_168>
	...

80011520 <osEE_tc_core1_isr_dummy_entry_169>:
80011520:	3c 00       	j 80011520 <osEE_tc_core1_isr_dummy_entry_169>
	...

80011540 <osEE_tc_core1_isr_dummy_entry_170>:
80011540:	3c 00       	j 80011540 <osEE_tc_core1_isr_dummy_entry_170>
	...

80011560 <osEE_tc_core1_isr_dummy_entry_171>:
80011560:	3c 00       	j 80011560 <osEE_tc_core1_isr_dummy_entry_171>
	...

80011580 <osEE_tc_core1_isr_dummy_entry_172>:
80011580:	3c 00       	j 80011580 <osEE_tc_core1_isr_dummy_entry_172>
	...

800115a0 <osEE_tc_core1_isr_dummy_entry_173>:
800115a0:	3c 00       	j 800115a0 <osEE_tc_core1_isr_dummy_entry_173>
	...

800115c0 <osEE_tc_core1_isr_dummy_entry_174>:
800115c0:	3c 00       	j 800115c0 <osEE_tc_core1_isr_dummy_entry_174>
	...

800115e0 <osEE_tc_core1_isr_dummy_entry_175>:
800115e0:	3c 00       	j 800115e0 <osEE_tc_core1_isr_dummy_entry_175>
	...

80011600 <osEE_tc_core1_isr_dummy_entry_176>:
80011600:	3c 00       	j 80011600 <osEE_tc_core1_isr_dummy_entry_176>
	...

80011620 <osEE_tc_core1_isr_dummy_entry_177>:
80011620:	3c 00       	j 80011620 <osEE_tc_core1_isr_dummy_entry_177>
	...

80011640 <osEE_tc_core1_isr_dummy_entry_178>:
80011640:	3c 00       	j 80011640 <osEE_tc_core1_isr_dummy_entry_178>
	...

80011660 <osEE_tc_core1_isr_dummy_entry_179>:
80011660:	3c 00       	j 80011660 <osEE_tc_core1_isr_dummy_entry_179>
	...

80011680 <osEE_tc_core1_isr_dummy_entry_180>:
80011680:	3c 00       	j 80011680 <osEE_tc_core1_isr_dummy_entry_180>
	...

800116a0 <osEE_tc_core1_isr_dummy_entry_181>:
800116a0:	3c 00       	j 800116a0 <osEE_tc_core1_isr_dummy_entry_181>
	...

800116c0 <osEE_tc_core1_isr_dummy_entry_182>:
800116c0:	3c 00       	j 800116c0 <osEE_tc_core1_isr_dummy_entry_182>
	...

800116e0 <osEE_tc_core1_isr_dummy_entry_183>:
800116e0:	3c 00       	j 800116e0 <osEE_tc_core1_isr_dummy_entry_183>
	...

80011700 <osEE_tc_core1_isr_dummy_entry_184>:
80011700:	3c 00       	j 80011700 <osEE_tc_core1_isr_dummy_entry_184>
	...

80011720 <osEE_tc_core1_isr_dummy_entry_185>:
80011720:	3c 00       	j 80011720 <osEE_tc_core1_isr_dummy_entry_185>
	...

80011740 <osEE_tc_core1_isr_dummy_entry_186>:
80011740:	3c 00       	j 80011740 <osEE_tc_core1_isr_dummy_entry_186>
	...

80011760 <osEE_tc_core1_isr_dummy_entry_187>:
80011760:	3c 00       	j 80011760 <osEE_tc_core1_isr_dummy_entry_187>
	...

80011780 <osEE_tc_core1_isr_dummy_entry_188>:
80011780:	3c 00       	j 80011780 <osEE_tc_core1_isr_dummy_entry_188>
	...

800117a0 <osEE_tc_core1_isr_dummy_entry_189>:
800117a0:	3c 00       	j 800117a0 <osEE_tc_core1_isr_dummy_entry_189>
	...

800117c0 <osEE_tc_core1_isr_dummy_entry_190>:
800117c0:	3c 00       	j 800117c0 <osEE_tc_core1_isr_dummy_entry_190>
	...

800117e0 <osEE_tc_core1_isr_dummy_entry_191>:
800117e0:	3c 00       	j 800117e0 <osEE_tc_core1_isr_dummy_entry_191>
	...

80011800 <osEE_tc_core1_isr_dummy_entry_192>:
80011800:	3c 00       	j 80011800 <osEE_tc_core1_isr_dummy_entry_192>
	...

80011820 <osEE_tc_core1_isr_dummy_entry_193>:
80011820:	3c 00       	j 80011820 <osEE_tc_core1_isr_dummy_entry_193>
	...

80011840 <osEE_tc_core1_isr_dummy_entry_194>:
80011840:	3c 00       	j 80011840 <osEE_tc_core1_isr_dummy_entry_194>
	...

80011860 <osEE_tc_core1_isr_dummy_entry_195>:
80011860:	3c 00       	j 80011860 <osEE_tc_core1_isr_dummy_entry_195>
	...

80011880 <osEE_tc_core1_isr_dummy_entry_196>:
80011880:	3c 00       	j 80011880 <osEE_tc_core1_isr_dummy_entry_196>
	...

800118a0 <osEE_tc_core1_isr_dummy_entry_197>:
800118a0:	3c 00       	j 800118a0 <osEE_tc_core1_isr_dummy_entry_197>
	...

800118c0 <osEE_tc_core1_isr_dummy_entry_198>:
800118c0:	3c 00       	j 800118c0 <osEE_tc_core1_isr_dummy_entry_198>
	...

800118e0 <osEE_tc_core1_isr_dummy_entry_199>:
800118e0:	3c 00       	j 800118e0 <osEE_tc_core1_isr_dummy_entry_199>
	...

80011900 <osEE_tc_core1_isr_dummy_entry_200>:
80011900:	3c 00       	j 80011900 <osEE_tc_core1_isr_dummy_entry_200>
	...

80011920 <osEE_tc_core1_isr_dummy_entry_201>:
80011920:	3c 00       	j 80011920 <osEE_tc_core1_isr_dummy_entry_201>
	...

80011940 <osEE_tc_core1_isr_dummy_entry_202>:
80011940:	3c 00       	j 80011940 <osEE_tc_core1_isr_dummy_entry_202>
	...

80011960 <osEE_tc_core1_isr_dummy_entry_203>:
80011960:	3c 00       	j 80011960 <osEE_tc_core1_isr_dummy_entry_203>
	...

80011980 <osEE_tc_core1_isr_dummy_entry_204>:
80011980:	3c 00       	j 80011980 <osEE_tc_core1_isr_dummy_entry_204>
	...

800119a0 <osEE_tc_core1_isr_dummy_entry_205>:
800119a0:	3c 00       	j 800119a0 <osEE_tc_core1_isr_dummy_entry_205>
	...

800119c0 <osEE_tc_core1_isr_dummy_entry_206>:
800119c0:	3c 00       	j 800119c0 <osEE_tc_core1_isr_dummy_entry_206>
	...

800119e0 <osEE_tc_core1_isr_dummy_entry_207>:
800119e0:	3c 00       	j 800119e0 <osEE_tc_core1_isr_dummy_entry_207>
	...

80011a00 <osEE_tc_core1_isr_dummy_entry_208>:
80011a00:	3c 00       	j 80011a00 <osEE_tc_core1_isr_dummy_entry_208>
	...

80011a20 <osEE_tc_core1_isr_dummy_entry_209>:
80011a20:	3c 00       	j 80011a20 <osEE_tc_core1_isr_dummy_entry_209>
	...

80011a40 <osEE_tc_core1_isr_dummy_entry_210>:
80011a40:	3c 00       	j 80011a40 <osEE_tc_core1_isr_dummy_entry_210>
	...

80011a60 <osEE_tc_core1_isr_dummy_entry_211>:
80011a60:	3c 00       	j 80011a60 <osEE_tc_core1_isr_dummy_entry_211>
	...

80011a80 <osEE_tc_core1_isr_dummy_entry_212>:
80011a80:	3c 00       	j 80011a80 <osEE_tc_core1_isr_dummy_entry_212>
	...

80011aa0 <osEE_tc_core1_isr_dummy_entry_213>:
80011aa0:	3c 00       	j 80011aa0 <osEE_tc_core1_isr_dummy_entry_213>
	...

80011ac0 <osEE_tc_core1_isr_dummy_entry_214>:
80011ac0:	3c 00       	j 80011ac0 <osEE_tc_core1_isr_dummy_entry_214>
	...

80011ae0 <osEE_tc_core1_isr_dummy_entry_215>:
80011ae0:	3c 00       	j 80011ae0 <osEE_tc_core1_isr_dummy_entry_215>
	...

80011b00 <osEE_tc_core1_isr_dummy_entry_216>:
80011b00:	3c 00       	j 80011b00 <osEE_tc_core1_isr_dummy_entry_216>
	...

80011b20 <osEE_tc_core1_isr_dummy_entry_217>:
80011b20:	3c 00       	j 80011b20 <osEE_tc_core1_isr_dummy_entry_217>
	...

80011b40 <osEE_tc_core1_isr_dummy_entry_218>:
80011b40:	3c 00       	j 80011b40 <osEE_tc_core1_isr_dummy_entry_218>
	...

80011b60 <osEE_tc_core1_isr_dummy_entry_219>:
80011b60:	3c 00       	j 80011b60 <osEE_tc_core1_isr_dummy_entry_219>
	...

80011b80 <osEE_tc_core1_isr_dummy_entry_220>:
80011b80:	3c 00       	j 80011b80 <osEE_tc_core1_isr_dummy_entry_220>
	...

80011ba0 <osEE_tc_core1_isr_dummy_entry_221>:
80011ba0:	3c 00       	j 80011ba0 <osEE_tc_core1_isr_dummy_entry_221>
	...

80011bc0 <osEE_tc_core1_isr_dummy_entry_222>:
80011bc0:	3c 00       	j 80011bc0 <osEE_tc_core1_isr_dummy_entry_222>
	...

80011be0 <osEE_tc_core1_isr_dummy_entry_223>:
80011be0:	3c 00       	j 80011be0 <osEE_tc_core1_isr_dummy_entry_223>
	...

80011c00 <osEE_tc_core1_isr_dummy_entry_224>:
80011c00:	3c 00       	j 80011c00 <osEE_tc_core1_isr_dummy_entry_224>
	...

80011c20 <osEE_tc_core1_isr_dummy_entry_225>:
80011c20:	3c 00       	j 80011c20 <osEE_tc_core1_isr_dummy_entry_225>
	...

80011c40 <osEE_tc_core1_isr_dummy_entry_226>:
80011c40:	3c 00       	j 80011c40 <osEE_tc_core1_isr_dummy_entry_226>
	...

80011c60 <osEE_tc_core1_isr_dummy_entry_227>:
80011c60:	3c 00       	j 80011c60 <osEE_tc_core1_isr_dummy_entry_227>
	...

80011c80 <osEE_tc_core1_isr_dummy_entry_228>:
80011c80:	3c 00       	j 80011c80 <osEE_tc_core1_isr_dummy_entry_228>
	...

80011ca0 <osEE_tc_core1_isr_dummy_entry_229>:
80011ca0:	3c 00       	j 80011ca0 <osEE_tc_core1_isr_dummy_entry_229>
	...

80011cc0 <osEE_tc_core1_isr_dummy_entry_230>:
80011cc0:	3c 00       	j 80011cc0 <osEE_tc_core1_isr_dummy_entry_230>
	...

80011ce0 <osEE_tc_core1_isr_dummy_entry_231>:
80011ce0:	3c 00       	j 80011ce0 <osEE_tc_core1_isr_dummy_entry_231>
	...

80011d00 <osEE_tc_core1_isr_dummy_entry_232>:
80011d00:	3c 00       	j 80011d00 <osEE_tc_core1_isr_dummy_entry_232>
	...

80011d20 <osEE_tc_core1_isr_dummy_entry_233>:
80011d20:	3c 00       	j 80011d20 <osEE_tc_core1_isr_dummy_entry_233>
	...

80011d40 <osEE_tc_core1_isr_dummy_entry_234>:
80011d40:	3c 00       	j 80011d40 <osEE_tc_core1_isr_dummy_entry_234>
	...

80011d60 <osEE_tc_core1_isr_dummy_entry_235>:
80011d60:	3c 00       	j 80011d60 <osEE_tc_core1_isr_dummy_entry_235>
	...

80011d80 <osEE_tc_core1_isr_dummy_entry_236>:
80011d80:	3c 00       	j 80011d80 <osEE_tc_core1_isr_dummy_entry_236>
	...

80011da0 <osEE_tc_core1_isr_dummy_entry_237>:
80011da0:	3c 00       	j 80011da0 <osEE_tc_core1_isr_dummy_entry_237>
	...

80011dc0 <osEE_tc_core1_isr_dummy_entry_238>:
80011dc0:	3c 00       	j 80011dc0 <osEE_tc_core1_isr_dummy_entry_238>
	...

80011de0 <osEE_tc_core1_isr_dummy_entry_239>:
80011de0:	3c 00       	j 80011de0 <osEE_tc_core1_isr_dummy_entry_239>
	...

80011e00 <osEE_tc_core1_isr_dummy_entry_240>:
80011e00:	3c 00       	j 80011e00 <osEE_tc_core1_isr_dummy_entry_240>
	...

80011e20 <osEE_tc_core1_isr_dummy_entry_241>:
80011e20:	3c 00       	j 80011e20 <osEE_tc_core1_isr_dummy_entry_241>
	...

80011e40 <osEE_tc_core1_isr_dummy_entry_242>:
80011e40:	3c 00       	j 80011e40 <osEE_tc_core1_isr_dummy_entry_242>
	...

80011e60 <osEE_tc_core1_isr_dummy_entry_243>:
80011e60:	3c 00       	j 80011e60 <osEE_tc_core1_isr_dummy_entry_243>
	...

80011e80 <osEE_tc_core1_isr_dummy_entry_244>:
80011e80:	3c 00       	j 80011e80 <osEE_tc_core1_isr_dummy_entry_244>
	...

80011ea0 <osEE_tc_core1_isr_dummy_entry_245>:
80011ea0:	3c 00       	j 80011ea0 <osEE_tc_core1_isr_dummy_entry_245>
	...

80011ec0 <osEE_tc_core1_isr_dummy_entry_246>:
80011ec0:	3c 00       	j 80011ec0 <osEE_tc_core1_isr_dummy_entry_246>
	...

80011ee0 <osEE_tc_core1_isr_dummy_entry_247>:
80011ee0:	3c 00       	j 80011ee0 <osEE_tc_core1_isr_dummy_entry_247>
	...

80011f00 <osEE_tc_core1_isr_dummy_entry_248>:
80011f00:	3c 00       	j 80011f00 <osEE_tc_core1_isr_dummy_entry_248>
	...

80011f20 <osEE_tc_core1_isr_dummy_entry_249>:
80011f20:	3c 00       	j 80011f20 <osEE_tc_core1_isr_dummy_entry_249>
	...

80011f40 <osEE_tc_core1_isr_dummy_entry_250>:
80011f40:	3c 00       	j 80011f40 <osEE_tc_core1_isr_dummy_entry_250>
	...

80011f60 <osEE_tc_core1_isr_dummy_entry_251>:
80011f60:	3c 00       	j 80011f60 <osEE_tc_core1_isr_dummy_entry_251>
	...

80011f80 <osEE_tc_core1_isr_dummy_entry_252>:
80011f80:	3c 00       	j 80011f80 <osEE_tc_core1_isr_dummy_entry_252>
	...

80011fa0 <osEE_tc_core1_isr_dummy_entry_253>:
80011fa0:	3c 00       	j 80011fa0 <osEE_tc_core1_isr_dummy_entry_253>
	...

80011fc0 <osEE_tc_core1_isr_dummy_entry_254>:
80011fc0:	3c 00       	j 80011fc0 <osEE_tc_core1_isr_dummy_entry_254>
	...

80011fe0 <osEE_tc_core1_isr_dummy_entry_255>:
80011fe0:	3c 00       	j 80011fe0 <osEE_tc_core1_isr_dummy_entry_255>
	...

Disassembly of section .inttab_cpu2:

80012000 <__INTTAB2>:
	...

80012020 <osEE_tc_core2_isr2_entry_1>:
80012020:	0d 00 00 02 	svlcx 
80012024:	82 f4       	mov %d4,-1
80012026:	1d ff e8 ba 	j 800095f6 <osEE_tc_isr2_wrapper>
	...

80012040 <osEE_tc_core2_isr_dummy_entry_2>:
80012040:	3c 00       	j 80012040 <osEE_tc_core2_isr_dummy_entry_2>
	...

80012060 <osEE_tc_core2_isr_dummy_entry_3>:
80012060:	3c 00       	j 80012060 <osEE_tc_core2_isr_dummy_entry_3>
	...

80012080 <osEE_tc_core2_isr_dummy_entry_4>:
80012080:	3c 00       	j 80012080 <osEE_tc_core2_isr_dummy_entry_4>
	...

800120a0 <osEE_tc_core2_isr_dummy_entry_5>:
800120a0:	3c 00       	j 800120a0 <osEE_tc_core2_isr_dummy_entry_5>
	...

800120c0 <osEE_tc_core2_isr_dummy_entry_6>:
800120c0:	3c 00       	j 800120c0 <osEE_tc_core2_isr_dummy_entry_6>
	...

800120e0 <osEE_tc_core2_isr_dummy_entry_7>:
800120e0:	3c 00       	j 800120e0 <osEE_tc_core2_isr_dummy_entry_7>
	...

80012100 <osEE_tc_core2_isr_dummy_entry_8>:
80012100:	3c 00       	j 80012100 <osEE_tc_core2_isr_dummy_entry_8>
	...

80012120 <osEE_tc_core2_isr_dummy_entry_9>:
80012120:	3c 00       	j 80012120 <osEE_tc_core2_isr_dummy_entry_9>
	...

80012140 <osEE_tc_core2_isr_dummy_entry_10>:
80012140:	3c 00       	j 80012140 <osEE_tc_core2_isr_dummy_entry_10>
	...

80012160 <osEE_tc_core2_isr_dummy_entry_11>:
80012160:	3c 00       	j 80012160 <osEE_tc_core2_isr_dummy_entry_11>
	...

80012180 <osEE_tc_core2_isr_dummy_entry_12>:
80012180:	3c 00       	j 80012180 <osEE_tc_core2_isr_dummy_entry_12>
	...

800121a0 <osEE_tc_core2_isr_dummy_entry_13>:
800121a0:	3c 00       	j 800121a0 <osEE_tc_core2_isr_dummy_entry_13>
	...

800121c0 <osEE_tc_core2_isr_dummy_entry_14>:
800121c0:	3c 00       	j 800121c0 <osEE_tc_core2_isr_dummy_entry_14>
	...

800121e0 <osEE_tc_core2_isr_dummy_entry_15>:
800121e0:	3c 00       	j 800121e0 <osEE_tc_core2_isr_dummy_entry_15>
	...

80012200 <osEE_tc_core2_isr_dummy_entry_16>:
80012200:	3c 00       	j 80012200 <osEE_tc_core2_isr_dummy_entry_16>
	...

80012220 <osEE_tc_core2_isr_dummy_entry_17>:
80012220:	3c 00       	j 80012220 <osEE_tc_core2_isr_dummy_entry_17>
	...

80012240 <osEE_tc_core2_isr_dummy_entry_18>:
80012240:	3c 00       	j 80012240 <osEE_tc_core2_isr_dummy_entry_18>
	...

80012260 <osEE_tc_core2_isr_dummy_entry_19>:
80012260:	3c 00       	j 80012260 <osEE_tc_core2_isr_dummy_entry_19>
	...

80012280 <osEE_tc_core2_isr_dummy_entry_20>:
80012280:	3c 00       	j 80012280 <osEE_tc_core2_isr_dummy_entry_20>
	...

800122a0 <osEE_tc_core2_isr_dummy_entry_21>:
800122a0:	3c 00       	j 800122a0 <osEE_tc_core2_isr_dummy_entry_21>
	...

800122c0 <osEE_tc_core2_isr_dummy_entry_22>:
800122c0:	3c 00       	j 800122c0 <osEE_tc_core2_isr_dummy_entry_22>
	...

800122e0 <osEE_tc_core2_isr_dummy_entry_23>:
800122e0:	3c 00       	j 800122e0 <osEE_tc_core2_isr_dummy_entry_23>
	...

80012300 <osEE_tc_core2_isr_dummy_entry_24>:
80012300:	3c 00       	j 80012300 <osEE_tc_core2_isr_dummy_entry_24>
	...

80012320 <osEE_tc_core2_isr_dummy_entry_25>:
80012320:	3c 00       	j 80012320 <osEE_tc_core2_isr_dummy_entry_25>
	...

80012340 <osEE_tc_core2_isr_dummy_entry_26>:
80012340:	3c 00       	j 80012340 <osEE_tc_core2_isr_dummy_entry_26>
	...

80012360 <osEE_tc_core2_isr_dummy_entry_27>:
80012360:	3c 00       	j 80012360 <osEE_tc_core2_isr_dummy_entry_27>
	...

80012380 <osEE_tc_core2_isr_dummy_entry_28>:
80012380:	3c 00       	j 80012380 <osEE_tc_core2_isr_dummy_entry_28>
	...

800123a0 <osEE_tc_core2_isr_dummy_entry_29>:
800123a0:	3c 00       	j 800123a0 <osEE_tc_core2_isr_dummy_entry_29>
	...

800123c0 <osEE_tc_core2_isr_dummy_entry_30>:
800123c0:	3c 00       	j 800123c0 <osEE_tc_core2_isr_dummy_entry_30>
	...

800123e0 <osEE_tc_core2_isr_dummy_entry_31>:
800123e0:	3c 00       	j 800123e0 <osEE_tc_core2_isr_dummy_entry_31>
	...

80012400 <osEE_tc_core2_isr_dummy_entry_32>:
80012400:	3c 00       	j 80012400 <osEE_tc_core2_isr_dummy_entry_32>
	...

80012420 <osEE_tc_core2_isr_dummy_entry_33>:
80012420:	3c 00       	j 80012420 <osEE_tc_core2_isr_dummy_entry_33>
	...

80012440 <osEE_tc_core2_isr_dummy_entry_34>:
80012440:	3c 00       	j 80012440 <osEE_tc_core2_isr_dummy_entry_34>
	...

80012460 <osEE_tc_core2_isr_dummy_entry_35>:
80012460:	3c 00       	j 80012460 <osEE_tc_core2_isr_dummy_entry_35>
	...

80012480 <osEE_tc_core2_isr_dummy_entry_36>:
80012480:	3c 00       	j 80012480 <osEE_tc_core2_isr_dummy_entry_36>
	...

800124a0 <osEE_tc_core2_isr_dummy_entry_37>:
800124a0:	3c 00       	j 800124a0 <osEE_tc_core2_isr_dummy_entry_37>
	...

800124c0 <osEE_tc_core2_isr_dummy_entry_38>:
800124c0:	3c 00       	j 800124c0 <osEE_tc_core2_isr_dummy_entry_38>
	...

800124e0 <osEE_tc_core2_isr_dummy_entry_39>:
800124e0:	3c 00       	j 800124e0 <osEE_tc_core2_isr_dummy_entry_39>
	...

80012500 <osEE_tc_core2_isr_dummy_entry_40>:
80012500:	3c 00       	j 80012500 <osEE_tc_core2_isr_dummy_entry_40>
	...

80012520 <osEE_tc_core2_isr_dummy_entry_41>:
80012520:	3c 00       	j 80012520 <osEE_tc_core2_isr_dummy_entry_41>
	...

80012540 <osEE_tc_core2_isr_dummy_entry_42>:
80012540:	3c 00       	j 80012540 <osEE_tc_core2_isr_dummy_entry_42>
	...

80012560 <osEE_tc_core2_isr_dummy_entry_43>:
80012560:	3c 00       	j 80012560 <osEE_tc_core2_isr_dummy_entry_43>
	...

80012580 <osEE_tc_core2_isr_dummy_entry_44>:
80012580:	3c 00       	j 80012580 <osEE_tc_core2_isr_dummy_entry_44>
	...

800125a0 <osEE_tc_core2_isr_dummy_entry_45>:
800125a0:	3c 00       	j 800125a0 <osEE_tc_core2_isr_dummy_entry_45>
	...

800125c0 <osEE_tc_core2_isr_dummy_entry_46>:
800125c0:	3c 00       	j 800125c0 <osEE_tc_core2_isr_dummy_entry_46>
	...

800125e0 <osEE_tc_core2_isr_dummy_entry_47>:
800125e0:	3c 00       	j 800125e0 <osEE_tc_core2_isr_dummy_entry_47>
	...

80012600 <osEE_tc_core2_isr_dummy_entry_48>:
80012600:	3c 00       	j 80012600 <osEE_tc_core2_isr_dummy_entry_48>
	...

80012620 <osEE_tc_core2_isr_dummy_entry_49>:
80012620:	3c 00       	j 80012620 <osEE_tc_core2_isr_dummy_entry_49>
	...

80012640 <osEE_tc_core2_isr_dummy_entry_50>:
80012640:	3c 00       	j 80012640 <osEE_tc_core2_isr_dummy_entry_50>
	...

80012660 <osEE_tc_core2_isr_dummy_entry_51>:
80012660:	3c 00       	j 80012660 <osEE_tc_core2_isr_dummy_entry_51>
	...

80012680 <osEE_tc_core2_isr_dummy_entry_52>:
80012680:	3c 00       	j 80012680 <osEE_tc_core2_isr_dummy_entry_52>
	...

800126a0 <osEE_tc_core2_isr_dummy_entry_53>:
800126a0:	3c 00       	j 800126a0 <osEE_tc_core2_isr_dummy_entry_53>
	...

800126c0 <osEE_tc_core2_isr_dummy_entry_54>:
800126c0:	3c 00       	j 800126c0 <osEE_tc_core2_isr_dummy_entry_54>
	...

800126e0 <osEE_tc_core2_isr_dummy_entry_55>:
800126e0:	3c 00       	j 800126e0 <osEE_tc_core2_isr_dummy_entry_55>
	...

80012700 <osEE_tc_core2_isr_dummy_entry_56>:
80012700:	3c 00       	j 80012700 <osEE_tc_core2_isr_dummy_entry_56>
	...

80012720 <osEE_tc_core2_isr_dummy_entry_57>:
80012720:	3c 00       	j 80012720 <osEE_tc_core2_isr_dummy_entry_57>
	...

80012740 <osEE_tc_core2_isr_dummy_entry_58>:
80012740:	3c 00       	j 80012740 <osEE_tc_core2_isr_dummy_entry_58>
	...

80012760 <osEE_tc_core2_isr_dummy_entry_59>:
80012760:	3c 00       	j 80012760 <osEE_tc_core2_isr_dummy_entry_59>
	...

80012780 <osEE_tc_core2_isr_dummy_entry_60>:
80012780:	3c 00       	j 80012780 <osEE_tc_core2_isr_dummy_entry_60>
	...

800127a0 <osEE_tc_core2_isr_dummy_entry_61>:
800127a0:	3c 00       	j 800127a0 <osEE_tc_core2_isr_dummy_entry_61>
	...

800127c0 <osEE_tc_core2_isr_dummy_entry_62>:
800127c0:	3c 00       	j 800127c0 <osEE_tc_core2_isr_dummy_entry_62>
	...

800127e0 <osEE_tc_core2_isr_dummy_entry_63>:
800127e0:	3c 00       	j 800127e0 <osEE_tc_core2_isr_dummy_entry_63>
	...

80012800 <osEE_tc_core2_isr_dummy_entry_64>:
80012800:	3c 00       	j 80012800 <osEE_tc_core2_isr_dummy_entry_64>
	...

80012820 <osEE_tc_core2_isr_dummy_entry_65>:
80012820:	3c 00       	j 80012820 <osEE_tc_core2_isr_dummy_entry_65>
	...

80012840 <osEE_tc_core2_isr_dummy_entry_66>:
80012840:	3c 00       	j 80012840 <osEE_tc_core2_isr_dummy_entry_66>
	...

80012860 <osEE_tc_core2_isr_dummy_entry_67>:
80012860:	3c 00       	j 80012860 <osEE_tc_core2_isr_dummy_entry_67>
	...

80012880 <osEE_tc_core2_isr_dummy_entry_68>:
80012880:	3c 00       	j 80012880 <osEE_tc_core2_isr_dummy_entry_68>
	...

800128a0 <osEE_tc_core2_isr_dummy_entry_69>:
800128a0:	3c 00       	j 800128a0 <osEE_tc_core2_isr_dummy_entry_69>
	...

800128c0 <osEE_tc_core2_isr_dummy_entry_70>:
800128c0:	3c 00       	j 800128c0 <osEE_tc_core2_isr_dummy_entry_70>
	...

800128e0 <osEE_tc_core2_isr_dummy_entry_71>:
800128e0:	3c 00       	j 800128e0 <osEE_tc_core2_isr_dummy_entry_71>
	...

80012900 <osEE_tc_core2_isr_dummy_entry_72>:
80012900:	3c 00       	j 80012900 <osEE_tc_core2_isr_dummy_entry_72>
	...

80012920 <osEE_tc_core2_isr_dummy_entry_73>:
80012920:	3c 00       	j 80012920 <osEE_tc_core2_isr_dummy_entry_73>
	...

80012940 <osEE_tc_core2_isr_dummy_entry_74>:
80012940:	3c 00       	j 80012940 <osEE_tc_core2_isr_dummy_entry_74>
	...

80012960 <osEE_tc_core2_isr_dummy_entry_75>:
80012960:	3c 00       	j 80012960 <osEE_tc_core2_isr_dummy_entry_75>
	...

80012980 <osEE_tc_core2_isr_dummy_entry_76>:
80012980:	3c 00       	j 80012980 <osEE_tc_core2_isr_dummy_entry_76>
	...

800129a0 <osEE_tc_core2_isr_dummy_entry_77>:
800129a0:	3c 00       	j 800129a0 <osEE_tc_core2_isr_dummy_entry_77>
	...

800129c0 <osEE_tc_core2_isr_dummy_entry_78>:
800129c0:	3c 00       	j 800129c0 <osEE_tc_core2_isr_dummy_entry_78>
	...

800129e0 <osEE_tc_core2_isr_dummy_entry_79>:
800129e0:	3c 00       	j 800129e0 <osEE_tc_core2_isr_dummy_entry_79>
	...

80012a00 <osEE_tc_core2_isr_dummy_entry_80>:
80012a00:	3c 00       	j 80012a00 <osEE_tc_core2_isr_dummy_entry_80>
	...

80012a20 <osEE_tc_core2_isr_dummy_entry_81>:
80012a20:	3c 00       	j 80012a20 <osEE_tc_core2_isr_dummy_entry_81>
	...

80012a40 <osEE_tc_core2_isr_dummy_entry_82>:
80012a40:	3c 00       	j 80012a40 <osEE_tc_core2_isr_dummy_entry_82>
	...

80012a60 <osEE_tc_core2_isr_dummy_entry_83>:
80012a60:	3c 00       	j 80012a60 <osEE_tc_core2_isr_dummy_entry_83>
	...

80012a80 <osEE_tc_core2_isr_dummy_entry_84>:
80012a80:	3c 00       	j 80012a80 <osEE_tc_core2_isr_dummy_entry_84>
	...

80012aa0 <osEE_tc_core2_isr_dummy_entry_85>:
80012aa0:	3c 00       	j 80012aa0 <osEE_tc_core2_isr_dummy_entry_85>
	...

80012ac0 <osEE_tc_core2_isr_dummy_entry_86>:
80012ac0:	3c 00       	j 80012ac0 <osEE_tc_core2_isr_dummy_entry_86>
	...

80012ae0 <osEE_tc_core2_isr_dummy_entry_87>:
80012ae0:	3c 00       	j 80012ae0 <osEE_tc_core2_isr_dummy_entry_87>
	...

80012b00 <osEE_tc_core2_isr_dummy_entry_88>:
80012b00:	3c 00       	j 80012b00 <osEE_tc_core2_isr_dummy_entry_88>
	...

80012b20 <osEE_tc_core2_isr_dummy_entry_89>:
80012b20:	3c 00       	j 80012b20 <osEE_tc_core2_isr_dummy_entry_89>
	...

80012b40 <osEE_tc_core2_isr_dummy_entry_90>:
80012b40:	3c 00       	j 80012b40 <osEE_tc_core2_isr_dummy_entry_90>
	...

80012b60 <osEE_tc_core2_isr_dummy_entry_91>:
80012b60:	3c 00       	j 80012b60 <osEE_tc_core2_isr_dummy_entry_91>
	...

80012b80 <osEE_tc_core2_isr_dummy_entry_92>:
80012b80:	3c 00       	j 80012b80 <osEE_tc_core2_isr_dummy_entry_92>
	...

80012ba0 <osEE_tc_core2_isr_dummy_entry_93>:
80012ba0:	3c 00       	j 80012ba0 <osEE_tc_core2_isr_dummy_entry_93>
	...

80012bc0 <osEE_tc_core2_isr_dummy_entry_94>:
80012bc0:	3c 00       	j 80012bc0 <osEE_tc_core2_isr_dummy_entry_94>
	...

80012be0 <osEE_tc_core2_isr_dummy_entry_95>:
80012be0:	3c 00       	j 80012be0 <osEE_tc_core2_isr_dummy_entry_95>
	...

80012c00 <osEE_tc_core2_isr_dummy_entry_96>:
80012c00:	3c 00       	j 80012c00 <osEE_tc_core2_isr_dummy_entry_96>
	...

80012c20 <osEE_tc_core2_isr_dummy_entry_97>:
80012c20:	3c 00       	j 80012c20 <osEE_tc_core2_isr_dummy_entry_97>
	...

80012c40 <osEE_tc_core2_isr_dummy_entry_98>:
80012c40:	3c 00       	j 80012c40 <osEE_tc_core2_isr_dummy_entry_98>
	...

80012c60 <osEE_tc_core2_isr_dummy_entry_99>:
80012c60:	3c 00       	j 80012c60 <osEE_tc_core2_isr_dummy_entry_99>
	...

80012c80 <osEE_tc_core2_isr_dummy_entry_100>:
80012c80:	3c 00       	j 80012c80 <osEE_tc_core2_isr_dummy_entry_100>
	...

80012ca0 <osEE_tc_core2_isr_dummy_entry_101>:
80012ca0:	3c 00       	j 80012ca0 <osEE_tc_core2_isr_dummy_entry_101>
	...

80012cc0 <osEE_tc_core2_isr_dummy_entry_102>:
80012cc0:	3c 00       	j 80012cc0 <osEE_tc_core2_isr_dummy_entry_102>
	...

80012ce0 <osEE_tc_core2_isr_dummy_entry_103>:
80012ce0:	3c 00       	j 80012ce0 <osEE_tc_core2_isr_dummy_entry_103>
	...

80012d00 <osEE_tc_core2_isr_dummy_entry_104>:
80012d00:	3c 00       	j 80012d00 <osEE_tc_core2_isr_dummy_entry_104>
	...

80012d20 <osEE_tc_core2_isr_dummy_entry_105>:
80012d20:	3c 00       	j 80012d20 <osEE_tc_core2_isr_dummy_entry_105>
	...

80012d40 <osEE_tc_core2_isr_dummy_entry_106>:
80012d40:	3c 00       	j 80012d40 <osEE_tc_core2_isr_dummy_entry_106>
	...

80012d60 <osEE_tc_core2_isr_dummy_entry_107>:
80012d60:	3c 00       	j 80012d60 <osEE_tc_core2_isr_dummy_entry_107>
	...

80012d80 <osEE_tc_core2_isr_dummy_entry_108>:
80012d80:	3c 00       	j 80012d80 <osEE_tc_core2_isr_dummy_entry_108>
	...

80012da0 <osEE_tc_core2_isr_dummy_entry_109>:
80012da0:	3c 00       	j 80012da0 <osEE_tc_core2_isr_dummy_entry_109>
	...

80012dc0 <osEE_tc_core2_isr_dummy_entry_110>:
80012dc0:	3c 00       	j 80012dc0 <osEE_tc_core2_isr_dummy_entry_110>
	...

80012de0 <osEE_tc_core2_isr_dummy_entry_111>:
80012de0:	3c 00       	j 80012de0 <osEE_tc_core2_isr_dummy_entry_111>
	...

80012e00 <osEE_tc_core2_isr_dummy_entry_112>:
80012e00:	3c 00       	j 80012e00 <osEE_tc_core2_isr_dummy_entry_112>
	...

80012e20 <osEE_tc_core2_isr_dummy_entry_113>:
80012e20:	3c 00       	j 80012e20 <osEE_tc_core2_isr_dummy_entry_113>
	...

80012e40 <osEE_tc_core2_isr_dummy_entry_114>:
80012e40:	3c 00       	j 80012e40 <osEE_tc_core2_isr_dummy_entry_114>
	...

80012e60 <osEE_tc_core2_isr_dummy_entry_115>:
80012e60:	3c 00       	j 80012e60 <osEE_tc_core2_isr_dummy_entry_115>
	...

80012e80 <osEE_tc_core2_isr_dummy_entry_116>:
80012e80:	3c 00       	j 80012e80 <osEE_tc_core2_isr_dummy_entry_116>
	...

80012ea0 <osEE_tc_core2_isr_dummy_entry_117>:
80012ea0:	3c 00       	j 80012ea0 <osEE_tc_core2_isr_dummy_entry_117>
	...

80012ec0 <osEE_tc_core2_isr_dummy_entry_118>:
80012ec0:	3c 00       	j 80012ec0 <osEE_tc_core2_isr_dummy_entry_118>
	...

80012ee0 <osEE_tc_core2_isr_dummy_entry_119>:
80012ee0:	3c 00       	j 80012ee0 <osEE_tc_core2_isr_dummy_entry_119>
	...

80012f00 <osEE_tc_core2_isr_dummy_entry_120>:
80012f00:	3c 00       	j 80012f00 <osEE_tc_core2_isr_dummy_entry_120>
	...

80012f20 <osEE_tc_core2_isr_dummy_entry_121>:
80012f20:	3c 00       	j 80012f20 <osEE_tc_core2_isr_dummy_entry_121>
	...

80012f40 <osEE_tc_core2_isr_dummy_entry_122>:
80012f40:	3c 00       	j 80012f40 <osEE_tc_core2_isr_dummy_entry_122>
	...

80012f60 <osEE_tc_core2_isr_dummy_entry_123>:
80012f60:	3c 00       	j 80012f60 <osEE_tc_core2_isr_dummy_entry_123>
	...

80012f80 <osEE_tc_core2_isr_dummy_entry_124>:
80012f80:	3c 00       	j 80012f80 <osEE_tc_core2_isr_dummy_entry_124>
	...

80012fa0 <osEE_tc_core2_isr_dummy_entry_125>:
80012fa0:	3c 00       	j 80012fa0 <osEE_tc_core2_isr_dummy_entry_125>
	...

80012fc0 <osEE_tc_core2_isr_dummy_entry_126>:
80012fc0:	3c 00       	j 80012fc0 <osEE_tc_core2_isr_dummy_entry_126>
	...

80012fe0 <osEE_tc_core2_isr_dummy_entry_127>:
80012fe0:	3c 00       	j 80012fe0 <osEE_tc_core2_isr_dummy_entry_127>
	...

80013000 <osEE_tc_core2_isr_dummy_entry_128>:
80013000:	3c 00       	j 80013000 <osEE_tc_core2_isr_dummy_entry_128>
	...

80013020 <osEE_tc_core2_isr_dummy_entry_129>:
80013020:	3c 00       	j 80013020 <osEE_tc_core2_isr_dummy_entry_129>
	...

80013040 <osEE_tc_core2_isr_dummy_entry_130>:
80013040:	3c 00       	j 80013040 <osEE_tc_core2_isr_dummy_entry_130>
	...

80013060 <osEE_tc_core2_isr_dummy_entry_131>:
80013060:	3c 00       	j 80013060 <osEE_tc_core2_isr_dummy_entry_131>
	...

80013080 <osEE_tc_core2_isr_dummy_entry_132>:
80013080:	3c 00       	j 80013080 <osEE_tc_core2_isr_dummy_entry_132>
	...

800130a0 <osEE_tc_core2_isr_dummy_entry_133>:
800130a0:	3c 00       	j 800130a0 <osEE_tc_core2_isr_dummy_entry_133>
	...

800130c0 <osEE_tc_core2_isr_dummy_entry_134>:
800130c0:	3c 00       	j 800130c0 <osEE_tc_core2_isr_dummy_entry_134>
	...

800130e0 <osEE_tc_core2_isr_dummy_entry_135>:
800130e0:	3c 00       	j 800130e0 <osEE_tc_core2_isr_dummy_entry_135>
	...

80013100 <osEE_tc_core2_isr_dummy_entry_136>:
80013100:	3c 00       	j 80013100 <osEE_tc_core2_isr_dummy_entry_136>
	...

80013120 <osEE_tc_core2_isr_dummy_entry_137>:
80013120:	3c 00       	j 80013120 <osEE_tc_core2_isr_dummy_entry_137>
	...

80013140 <osEE_tc_core2_isr_dummy_entry_138>:
80013140:	3c 00       	j 80013140 <osEE_tc_core2_isr_dummy_entry_138>
	...

80013160 <osEE_tc_core2_isr_dummy_entry_139>:
80013160:	3c 00       	j 80013160 <osEE_tc_core2_isr_dummy_entry_139>
	...

80013180 <osEE_tc_core2_isr_dummy_entry_140>:
80013180:	3c 00       	j 80013180 <osEE_tc_core2_isr_dummy_entry_140>
	...

800131a0 <osEE_tc_core2_isr_dummy_entry_141>:
800131a0:	3c 00       	j 800131a0 <osEE_tc_core2_isr_dummy_entry_141>
	...

800131c0 <osEE_tc_core2_isr_dummy_entry_142>:
800131c0:	3c 00       	j 800131c0 <osEE_tc_core2_isr_dummy_entry_142>
	...

800131e0 <osEE_tc_core2_isr_dummy_entry_143>:
800131e0:	3c 00       	j 800131e0 <osEE_tc_core2_isr_dummy_entry_143>
	...

80013200 <osEE_tc_core2_isr_dummy_entry_144>:
80013200:	3c 00       	j 80013200 <osEE_tc_core2_isr_dummy_entry_144>
	...

80013220 <osEE_tc_core2_isr_dummy_entry_145>:
80013220:	3c 00       	j 80013220 <osEE_tc_core2_isr_dummy_entry_145>
	...

80013240 <osEE_tc_core2_isr_dummy_entry_146>:
80013240:	3c 00       	j 80013240 <osEE_tc_core2_isr_dummy_entry_146>
	...

80013260 <osEE_tc_core2_isr_dummy_entry_147>:
80013260:	3c 00       	j 80013260 <osEE_tc_core2_isr_dummy_entry_147>
	...

80013280 <osEE_tc_core2_isr_dummy_entry_148>:
80013280:	3c 00       	j 80013280 <osEE_tc_core2_isr_dummy_entry_148>
	...

800132a0 <osEE_tc_core2_isr_dummy_entry_149>:
800132a0:	3c 00       	j 800132a0 <osEE_tc_core2_isr_dummy_entry_149>
	...

800132c0 <osEE_tc_core2_isr_dummy_entry_150>:
800132c0:	3c 00       	j 800132c0 <osEE_tc_core2_isr_dummy_entry_150>
	...

800132e0 <osEE_tc_core2_isr_dummy_entry_151>:
800132e0:	3c 00       	j 800132e0 <osEE_tc_core2_isr_dummy_entry_151>
	...

80013300 <osEE_tc_core2_isr_dummy_entry_152>:
80013300:	3c 00       	j 80013300 <osEE_tc_core2_isr_dummy_entry_152>
	...

80013320 <osEE_tc_core2_isr_dummy_entry_153>:
80013320:	3c 00       	j 80013320 <osEE_tc_core2_isr_dummy_entry_153>
	...

80013340 <osEE_tc_core2_isr_dummy_entry_154>:
80013340:	3c 00       	j 80013340 <osEE_tc_core2_isr_dummy_entry_154>
	...

80013360 <osEE_tc_core2_isr_dummy_entry_155>:
80013360:	3c 00       	j 80013360 <osEE_tc_core2_isr_dummy_entry_155>
	...

80013380 <osEE_tc_core2_isr_dummy_entry_156>:
80013380:	3c 00       	j 80013380 <osEE_tc_core2_isr_dummy_entry_156>
	...

800133a0 <osEE_tc_core2_isr_dummy_entry_157>:
800133a0:	3c 00       	j 800133a0 <osEE_tc_core2_isr_dummy_entry_157>
	...

800133c0 <osEE_tc_core2_isr_dummy_entry_158>:
800133c0:	3c 00       	j 800133c0 <osEE_tc_core2_isr_dummy_entry_158>
	...

800133e0 <osEE_tc_core2_isr_dummy_entry_159>:
800133e0:	3c 00       	j 800133e0 <osEE_tc_core2_isr_dummy_entry_159>
	...

80013400 <osEE_tc_core2_isr_dummy_entry_160>:
80013400:	3c 00       	j 80013400 <osEE_tc_core2_isr_dummy_entry_160>
	...

80013420 <osEE_tc_core2_isr_dummy_entry_161>:
80013420:	3c 00       	j 80013420 <osEE_tc_core2_isr_dummy_entry_161>
	...

80013440 <osEE_tc_core2_isr_dummy_entry_162>:
80013440:	3c 00       	j 80013440 <osEE_tc_core2_isr_dummy_entry_162>
	...

80013460 <osEE_tc_core2_isr_dummy_entry_163>:
80013460:	3c 00       	j 80013460 <osEE_tc_core2_isr_dummy_entry_163>
	...

80013480 <osEE_tc_core2_isr_dummy_entry_164>:
80013480:	3c 00       	j 80013480 <osEE_tc_core2_isr_dummy_entry_164>
	...

800134a0 <osEE_tc_core2_isr_dummy_entry_165>:
800134a0:	3c 00       	j 800134a0 <osEE_tc_core2_isr_dummy_entry_165>
	...

800134c0 <osEE_tc_core2_isr_dummy_entry_166>:
800134c0:	3c 00       	j 800134c0 <osEE_tc_core2_isr_dummy_entry_166>
	...

800134e0 <osEE_tc_core2_isr_dummy_entry_167>:
800134e0:	3c 00       	j 800134e0 <osEE_tc_core2_isr_dummy_entry_167>
	...

80013500 <osEE_tc_core2_isr_dummy_entry_168>:
80013500:	3c 00       	j 80013500 <osEE_tc_core2_isr_dummy_entry_168>
	...

80013520 <osEE_tc_core2_isr_dummy_entry_169>:
80013520:	3c 00       	j 80013520 <osEE_tc_core2_isr_dummy_entry_169>
	...

80013540 <osEE_tc_core2_isr_dummy_entry_170>:
80013540:	3c 00       	j 80013540 <osEE_tc_core2_isr_dummy_entry_170>
	...

80013560 <osEE_tc_core2_isr_dummy_entry_171>:
80013560:	3c 00       	j 80013560 <osEE_tc_core2_isr_dummy_entry_171>
	...

80013580 <osEE_tc_core2_isr_dummy_entry_172>:
80013580:	3c 00       	j 80013580 <osEE_tc_core2_isr_dummy_entry_172>
	...

800135a0 <osEE_tc_core2_isr_dummy_entry_173>:
800135a0:	3c 00       	j 800135a0 <osEE_tc_core2_isr_dummy_entry_173>
	...

800135c0 <osEE_tc_core2_isr_dummy_entry_174>:
800135c0:	3c 00       	j 800135c0 <osEE_tc_core2_isr_dummy_entry_174>
	...

800135e0 <osEE_tc_core2_isr_dummy_entry_175>:
800135e0:	3c 00       	j 800135e0 <osEE_tc_core2_isr_dummy_entry_175>
	...

80013600 <osEE_tc_core2_isr_dummy_entry_176>:
80013600:	3c 00       	j 80013600 <osEE_tc_core2_isr_dummy_entry_176>
	...

80013620 <osEE_tc_core2_isr_dummy_entry_177>:
80013620:	3c 00       	j 80013620 <osEE_tc_core2_isr_dummy_entry_177>
	...

80013640 <osEE_tc_core2_isr_dummy_entry_178>:
80013640:	3c 00       	j 80013640 <osEE_tc_core2_isr_dummy_entry_178>
	...

80013660 <osEE_tc_core2_isr_dummy_entry_179>:
80013660:	3c 00       	j 80013660 <osEE_tc_core2_isr_dummy_entry_179>
	...

80013680 <osEE_tc_core2_isr_dummy_entry_180>:
80013680:	3c 00       	j 80013680 <osEE_tc_core2_isr_dummy_entry_180>
	...

800136a0 <osEE_tc_core2_isr_dummy_entry_181>:
800136a0:	3c 00       	j 800136a0 <osEE_tc_core2_isr_dummy_entry_181>
	...

800136c0 <osEE_tc_core2_isr_dummy_entry_182>:
800136c0:	3c 00       	j 800136c0 <osEE_tc_core2_isr_dummy_entry_182>
	...

800136e0 <osEE_tc_core2_isr_dummy_entry_183>:
800136e0:	3c 00       	j 800136e0 <osEE_tc_core2_isr_dummy_entry_183>
	...

80013700 <osEE_tc_core2_isr_dummy_entry_184>:
80013700:	3c 00       	j 80013700 <osEE_tc_core2_isr_dummy_entry_184>
	...

80013720 <osEE_tc_core2_isr_dummy_entry_185>:
80013720:	3c 00       	j 80013720 <osEE_tc_core2_isr_dummy_entry_185>
	...

80013740 <osEE_tc_core2_isr_dummy_entry_186>:
80013740:	3c 00       	j 80013740 <osEE_tc_core2_isr_dummy_entry_186>
	...

80013760 <osEE_tc_core2_isr_dummy_entry_187>:
80013760:	3c 00       	j 80013760 <osEE_tc_core2_isr_dummy_entry_187>
	...

80013780 <osEE_tc_core2_isr_dummy_entry_188>:
80013780:	3c 00       	j 80013780 <osEE_tc_core2_isr_dummy_entry_188>
	...

800137a0 <osEE_tc_core2_isr_dummy_entry_189>:
800137a0:	3c 00       	j 800137a0 <osEE_tc_core2_isr_dummy_entry_189>
	...

800137c0 <osEE_tc_core2_isr_dummy_entry_190>:
800137c0:	3c 00       	j 800137c0 <osEE_tc_core2_isr_dummy_entry_190>
	...

800137e0 <osEE_tc_core2_isr_dummy_entry_191>:
800137e0:	3c 00       	j 800137e0 <osEE_tc_core2_isr_dummy_entry_191>
	...

80013800 <osEE_tc_core2_isr_dummy_entry_192>:
80013800:	3c 00       	j 80013800 <osEE_tc_core2_isr_dummy_entry_192>
	...

80013820 <osEE_tc_core2_isr_dummy_entry_193>:
80013820:	3c 00       	j 80013820 <osEE_tc_core2_isr_dummy_entry_193>
	...

80013840 <osEE_tc_core2_isr_dummy_entry_194>:
80013840:	3c 00       	j 80013840 <osEE_tc_core2_isr_dummy_entry_194>
	...

80013860 <osEE_tc_core2_isr_dummy_entry_195>:
80013860:	3c 00       	j 80013860 <osEE_tc_core2_isr_dummy_entry_195>
	...

80013880 <osEE_tc_core2_isr_dummy_entry_196>:
80013880:	3c 00       	j 80013880 <osEE_tc_core2_isr_dummy_entry_196>
	...

800138a0 <osEE_tc_core2_isr_dummy_entry_197>:
800138a0:	3c 00       	j 800138a0 <osEE_tc_core2_isr_dummy_entry_197>
	...

800138c0 <osEE_tc_core2_isr_dummy_entry_198>:
800138c0:	3c 00       	j 800138c0 <osEE_tc_core2_isr_dummy_entry_198>
	...

800138e0 <osEE_tc_core2_isr_dummy_entry_199>:
800138e0:	3c 00       	j 800138e0 <osEE_tc_core2_isr_dummy_entry_199>
	...

80013900 <osEE_tc_core2_isr_dummy_entry_200>:
80013900:	3c 00       	j 80013900 <osEE_tc_core2_isr_dummy_entry_200>
	...

80013920 <osEE_tc_core2_isr_dummy_entry_201>:
80013920:	3c 00       	j 80013920 <osEE_tc_core2_isr_dummy_entry_201>
	...

80013940 <osEE_tc_core2_isr_dummy_entry_202>:
80013940:	3c 00       	j 80013940 <osEE_tc_core2_isr_dummy_entry_202>
	...

80013960 <osEE_tc_core2_isr_dummy_entry_203>:
80013960:	3c 00       	j 80013960 <osEE_tc_core2_isr_dummy_entry_203>
	...

80013980 <osEE_tc_core2_isr_dummy_entry_204>:
80013980:	3c 00       	j 80013980 <osEE_tc_core2_isr_dummy_entry_204>
	...

800139a0 <osEE_tc_core2_isr_dummy_entry_205>:
800139a0:	3c 00       	j 800139a0 <osEE_tc_core2_isr_dummy_entry_205>
	...

800139c0 <osEE_tc_core2_isr_dummy_entry_206>:
800139c0:	3c 00       	j 800139c0 <osEE_tc_core2_isr_dummy_entry_206>
	...

800139e0 <osEE_tc_core2_isr_dummy_entry_207>:
800139e0:	3c 00       	j 800139e0 <osEE_tc_core2_isr_dummy_entry_207>
	...

80013a00 <osEE_tc_core2_isr_dummy_entry_208>:
80013a00:	3c 00       	j 80013a00 <osEE_tc_core2_isr_dummy_entry_208>
	...

80013a20 <osEE_tc_core2_isr_dummy_entry_209>:
80013a20:	3c 00       	j 80013a20 <osEE_tc_core2_isr_dummy_entry_209>
	...

80013a40 <osEE_tc_core2_isr_dummy_entry_210>:
80013a40:	3c 00       	j 80013a40 <osEE_tc_core2_isr_dummy_entry_210>
	...

80013a60 <osEE_tc_core2_isr_dummy_entry_211>:
80013a60:	3c 00       	j 80013a60 <osEE_tc_core2_isr_dummy_entry_211>
	...

80013a80 <osEE_tc_core2_isr_dummy_entry_212>:
80013a80:	3c 00       	j 80013a80 <osEE_tc_core2_isr_dummy_entry_212>
	...

80013aa0 <osEE_tc_core2_isr_dummy_entry_213>:
80013aa0:	3c 00       	j 80013aa0 <osEE_tc_core2_isr_dummy_entry_213>
	...

80013ac0 <osEE_tc_core2_isr_dummy_entry_214>:
80013ac0:	3c 00       	j 80013ac0 <osEE_tc_core2_isr_dummy_entry_214>
	...

80013ae0 <osEE_tc_core2_isr_dummy_entry_215>:
80013ae0:	3c 00       	j 80013ae0 <osEE_tc_core2_isr_dummy_entry_215>
	...

80013b00 <osEE_tc_core2_isr_dummy_entry_216>:
80013b00:	3c 00       	j 80013b00 <osEE_tc_core2_isr_dummy_entry_216>
	...

80013b20 <osEE_tc_core2_isr_dummy_entry_217>:
80013b20:	3c 00       	j 80013b20 <osEE_tc_core2_isr_dummy_entry_217>
	...

80013b40 <osEE_tc_core2_isr_dummy_entry_218>:
80013b40:	3c 00       	j 80013b40 <osEE_tc_core2_isr_dummy_entry_218>
	...

80013b60 <osEE_tc_core2_isr_dummy_entry_219>:
80013b60:	3c 00       	j 80013b60 <osEE_tc_core2_isr_dummy_entry_219>
	...

80013b80 <osEE_tc_core2_isr_dummy_entry_220>:
80013b80:	3c 00       	j 80013b80 <osEE_tc_core2_isr_dummy_entry_220>
	...

80013ba0 <osEE_tc_core2_isr_dummy_entry_221>:
80013ba0:	3c 00       	j 80013ba0 <osEE_tc_core2_isr_dummy_entry_221>
	...

80013bc0 <osEE_tc_core2_isr_dummy_entry_222>:
80013bc0:	3c 00       	j 80013bc0 <osEE_tc_core2_isr_dummy_entry_222>
	...

80013be0 <osEE_tc_core2_isr_dummy_entry_223>:
80013be0:	3c 00       	j 80013be0 <osEE_tc_core2_isr_dummy_entry_223>
	...

80013c00 <osEE_tc_core2_isr_dummy_entry_224>:
80013c00:	3c 00       	j 80013c00 <osEE_tc_core2_isr_dummy_entry_224>
	...

80013c20 <osEE_tc_core2_isr_dummy_entry_225>:
80013c20:	3c 00       	j 80013c20 <osEE_tc_core2_isr_dummy_entry_225>
	...

80013c40 <osEE_tc_core2_isr_dummy_entry_226>:
80013c40:	3c 00       	j 80013c40 <osEE_tc_core2_isr_dummy_entry_226>
	...

80013c60 <osEE_tc_core2_isr_dummy_entry_227>:
80013c60:	3c 00       	j 80013c60 <osEE_tc_core2_isr_dummy_entry_227>
	...

80013c80 <osEE_tc_core2_isr_dummy_entry_228>:
80013c80:	3c 00       	j 80013c80 <osEE_tc_core2_isr_dummy_entry_228>
	...

80013ca0 <osEE_tc_core2_isr_dummy_entry_229>:
80013ca0:	3c 00       	j 80013ca0 <osEE_tc_core2_isr_dummy_entry_229>
	...

80013cc0 <osEE_tc_core2_isr_dummy_entry_230>:
80013cc0:	3c 00       	j 80013cc0 <osEE_tc_core2_isr_dummy_entry_230>
	...

80013ce0 <osEE_tc_core2_isr_dummy_entry_231>:
80013ce0:	3c 00       	j 80013ce0 <osEE_tc_core2_isr_dummy_entry_231>
	...

80013d00 <osEE_tc_core2_isr_dummy_entry_232>:
80013d00:	3c 00       	j 80013d00 <osEE_tc_core2_isr_dummy_entry_232>
	...

80013d20 <osEE_tc_core2_isr_dummy_entry_233>:
80013d20:	3c 00       	j 80013d20 <osEE_tc_core2_isr_dummy_entry_233>
	...

80013d40 <osEE_tc_core2_isr_dummy_entry_234>:
80013d40:	3c 00       	j 80013d40 <osEE_tc_core2_isr_dummy_entry_234>
	...

80013d60 <osEE_tc_core2_isr_dummy_entry_235>:
80013d60:	3c 00       	j 80013d60 <osEE_tc_core2_isr_dummy_entry_235>
	...

80013d80 <osEE_tc_core2_isr_dummy_entry_236>:
80013d80:	3c 00       	j 80013d80 <osEE_tc_core2_isr_dummy_entry_236>
	...

80013da0 <osEE_tc_core2_isr_dummy_entry_237>:
80013da0:	3c 00       	j 80013da0 <osEE_tc_core2_isr_dummy_entry_237>
	...

80013dc0 <osEE_tc_core2_isr_dummy_entry_238>:
80013dc0:	3c 00       	j 80013dc0 <osEE_tc_core2_isr_dummy_entry_238>
	...

80013de0 <osEE_tc_core2_isr_dummy_entry_239>:
80013de0:	3c 00       	j 80013de0 <osEE_tc_core2_isr_dummy_entry_239>
	...

80013e00 <osEE_tc_core2_isr_dummy_entry_240>:
80013e00:	3c 00       	j 80013e00 <osEE_tc_core2_isr_dummy_entry_240>
	...

80013e20 <osEE_tc_core2_isr_dummy_entry_241>:
80013e20:	3c 00       	j 80013e20 <osEE_tc_core2_isr_dummy_entry_241>
	...

80013e40 <osEE_tc_core2_isr_dummy_entry_242>:
80013e40:	3c 00       	j 80013e40 <osEE_tc_core2_isr_dummy_entry_242>
	...

80013e60 <osEE_tc_core2_isr_dummy_entry_243>:
80013e60:	3c 00       	j 80013e60 <osEE_tc_core2_isr_dummy_entry_243>
	...

80013e80 <osEE_tc_core2_isr_dummy_entry_244>:
80013e80:	3c 00       	j 80013e80 <osEE_tc_core2_isr_dummy_entry_244>
	...

80013ea0 <osEE_tc_core2_isr_dummy_entry_245>:
80013ea0:	3c 00       	j 80013ea0 <osEE_tc_core2_isr_dummy_entry_245>
	...

80013ec0 <osEE_tc_core2_isr_dummy_entry_246>:
80013ec0:	3c 00       	j 80013ec0 <osEE_tc_core2_isr_dummy_entry_246>
	...

80013ee0 <osEE_tc_core2_isr_dummy_entry_247>:
80013ee0:	3c 00       	j 80013ee0 <osEE_tc_core2_isr_dummy_entry_247>
	...

80013f00 <osEE_tc_core2_isr_dummy_entry_248>:
80013f00:	3c 00       	j 80013f00 <osEE_tc_core2_isr_dummy_entry_248>
	...

80013f20 <osEE_tc_core2_isr_dummy_entry_249>:
80013f20:	3c 00       	j 80013f20 <osEE_tc_core2_isr_dummy_entry_249>
	...

80013f40 <osEE_tc_core2_isr_dummy_entry_250>:
80013f40:	3c 00       	j 80013f40 <osEE_tc_core2_isr_dummy_entry_250>
	...

80013f60 <osEE_tc_core2_isr_dummy_entry_251>:
80013f60:	3c 00       	j 80013f60 <osEE_tc_core2_isr_dummy_entry_251>
	...

80013f80 <osEE_tc_core2_isr_dummy_entry_252>:
80013f80:	3c 00       	j 80013f80 <osEE_tc_core2_isr_dummy_entry_252>
	...

80013fa0 <osEE_tc_core2_isr_dummy_entry_253>:
80013fa0:	3c 00       	j 80013fa0 <osEE_tc_core2_isr_dummy_entry_253>
	...

80013fc0 <osEE_tc_core2_isr_dummy_entry_254>:
80013fc0:	3c 00       	j 80013fc0 <osEE_tc_core2_isr_dummy_entry_254>
	...

80013fe0 <osEE_tc_core2_isr_dummy_entry_255>:
80013fe0:	3c 00       	j 80013fe0 <osEE_tc_core2_isr_dummy_entry_255>
	...
